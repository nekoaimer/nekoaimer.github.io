<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nekoaimer</title>
  
  <subtitle>清心如水，清水即心</subtitle>
  <link href="https://nekoaimer.com/atom.xml" rel="self"/>
  
  <link href="https://nekoaimer.com/"/>
  <updated>2023-05-07T17:22:42.754Z</updated>
  <id>https://nekoaimer.com/</id>
  
  <author>
    <name>Nico Niconi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Oarcle FORALL</title>
    <link href="https://nekoaimer.com/2023/05/08/Oracle/forall/"/>
    <id>https://nekoaimer.com/2023/05/08/Oracle/forall/</id>
    <published>2023-05-07T17:15:00.000Z</published>
    <updated>2023-05-07T17:22:42.754Z</updated>
    
    <content type="html"><![CDATA[<h4 id="prerequisites"><a class="anchor" href="#prerequisites">#</a> Prerequisites</h4><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> DATE_TEMP<span class="token punctuation">(</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  ID NUMBER<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">YEAR</span> NUMBER<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">MONTH</span> NUMBER<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">DAY</span> NUMBER</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h4 id="forall"><a class="anchor" href="#forall">#</a> FORALL</h4><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre>FORALL index_name <span class="token operator">IN</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  &#123;</pre></td></tr><tr><td data-num="3"></td><td><pre>    lower_bound <span class="token punctuation">.</span><span class="token punctuation">.</span> upper_bound</pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token operator">|</span> INDICES <span class="token keyword">OF</span> collection_name <span class="token punctuation">[</span> <span class="token operator">BETWEEN</span> lower_bound <span class="token operator">AND</span> upper_bound <span class="token punctuation">]</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token operator">|</span> <span class="token keyword">VALUES</span> <span class="token keyword">OF</span> index_collection</pre></td></tr><tr><td data-num="6"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token punctuation">[</span> <span class="token keyword">SAVE</span> EXCEPTIONS <span class="token punctuation">]</span> dml_statement<span class="token punctuation">;</span></pre></td></tr></table></figure><h4 id="lower_boundupper_bound"><a class="anchor" href="#lower_boundupper_bound">#</a> lower_bound..upper_bound</h4><ul><li>FORALL 下标变量 (只能当作下标被引用) IN 下限.. 上限</li><li>index_name: 参数索引标识符</li><li>lower_bound..upper_bound: 类似 FOR I IN 1..100</li></ul><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">DECLARE</span></pre></td></tr><tr><td data-num="2"></td><td><pre> <span class="token keyword">TYPE</span> DATE_TEMP_TYPE <span class="token operator">IS</span> <span class="token keyword">TABLE</span> <span class="token keyword">OF</span> DATE_TEMP<span class="token operator">%</span>ROWTYPE <span class="token keyword">INDEX</span> <span class="token keyword">BY</span> PLS_INTEGER<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre> <span class="token keyword">TEMP</span> DATE_TEMP_TYPE<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre> <span class="token keyword">TYPE</span> ARRAY_TYPE <span class="token operator">IS</span> VARRAY<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">OF</span> NUMBER<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre> V_ARRAY ARRAY_TYPE:<span class="token operator">=</span>ARRAY_TYPE<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">BEGIN</span></pre></td></tr><tr><td data-num="8"></td><td><pre> <span class="token comment">-- 插入 10 条数据进行测试</span></pre></td></tr><tr><td data-num="9"></td><td><pre> <span class="token keyword">SELECT</span> <span class="token keyword">LEVEL</span> ID<span class="token punctuation">,</span> EXTRACT<span class="token punctuation">(</span><span class="token keyword">YEAR</span> <span class="token keyword">FROM</span> SYSDATE<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">LEVEL</span> <span class="token keyword">YEAR</span><span class="token punctuation">,</span> EXTRACT<span class="token punctuation">(</span><span class="token keyword">MONTH</span> <span class="token keyword">FROM</span> SYSDATE<span class="token punctuation">)</span> <span class="token keyword">MONTH</span><span class="token punctuation">,</span> EXTRACT<span class="token punctuation">(</span><span class="token keyword">DAY</span> <span class="token keyword">FROM</span> SYSDATE<span class="token punctuation">)</span> <span class="token keyword">DAY</span></pre></td></tr><tr><td data-num="10"></td><td><pre>   <span class="token keyword">BULK</span> COLLECT <span class="token keyword">INTO</span> <span class="token keyword">TEMP</span> <span class="token keyword">FROM</span> DUAL <span class="token keyword">CONNECT</span> <span class="token keyword">BY</span> <span class="token keyword">LEVEL</span> <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre> <span class="token comment">-- INSERT</span></pre></td></tr><tr><td data-num="13"></td><td><pre> FORALL I <span class="token operator">IN</span> <span class="token number">1.</span><span class="token punctuation">.</span>COUNT</pre></td></tr><tr><td data-num="14"></td><td><pre>   <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> DATE_TEMP <span class="token keyword">VALUES</span> <span class="token keyword">TEMP</span><span class="token punctuation">(</span>I<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment">-- UPDATE</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token keyword">TEMP</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">DAY</span> :<span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  FORALL I <span class="token operator">IN</span> <span class="token number">1.</span><span class="token punctuation">.</span><span class="token keyword">TEMP</span><span class="token punctuation">.</span>COUNT</pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">UPDATE</span> DATE_TEMP DT <span class="token keyword">SET</span> DT<span class="token punctuation">.</span><span class="token keyword">DAY</span> <span class="token operator">=</span> <span class="token keyword">TEMP</span><span class="token punctuation">(</span>I<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">DAY</span> <span class="token keyword">WHERE</span> DT<span class="token punctuation">.</span>ID <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token comment">-- DELETE</span></pre></td></tr><tr><td data-num="22"></td><td><pre>  FORALL I <span class="token operator">IN</span> <span class="token number">1.</span><span class="token punctuation">.</span>V_ARRAY<span class="token punctuation">.</span>COUNT</pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token keyword">DELETE</span> DATE_TEMP DT <span class="token keyword">WHERE</span> DT<span class="token punctuation">.</span>ID <span class="token operator">=</span> V_ARRAY<span class="token punctuation">(</span>I<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">END</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h4 id="indices-of"><a class="anchor" href="#indices-of">#</a> INDICES OF</h4><ul><li>FORALL 下标变量 IN VALUES OF 集合 (把该集合中的值当作下标，且该集合值的类型只能是 PLS_INTEGER BINARY_INTEGER)</li><li>当集合中某条数据被删除时，使用索引可能会造成错误 ORA-22160，那么此时 FORALL 可以搭配 INDICES OF 来使用。</li></ul><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">DECLARE</span></pre></td></tr><tr><td data-num="2"></td><td><pre> <span class="token keyword">TYPE</span> DATE_TEMP_TYPE <span class="token operator">IS</span> <span class="token keyword">TABLE</span> <span class="token keyword">OF</span> DATE_TEMP<span class="token operator">%</span>ROWTYPE <span class="token keyword">INDEX</span> <span class="token keyword">BY</span> PLS_INTEGER<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre> <span class="token keyword">TEMP</span> DATE_TEMP_TYPE<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre> <span class="token keyword">TYPE</span> ARRAY_TYPE <span class="token operator">IS</span> VARRAY<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">OF</span> NUMBER<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre> V_ARRAY ARRAY_TYPE:<span class="token operator">=</span>ARRAY_TYPE<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">BEGIN</span></pre></td></tr><tr><td data-num="8"></td><td><pre> <span class="token keyword">SELECT</span> <span class="token keyword">LEVEL</span> ID<span class="token punctuation">,</span> EXTRACT<span class="token punctuation">(</span><span class="token keyword">YEAR</span> <span class="token keyword">FROM</span> SYSDATE<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">LEVEL</span> <span class="token keyword">YEAR</span><span class="token punctuation">,</span> EXTRACT<span class="token punctuation">(</span><span class="token keyword">MONTH</span> <span class="token keyword">FROM</span> SYSDATE<span class="token punctuation">)</span> <span class="token keyword">MONTH</span><span class="token punctuation">,</span> EXTRACT<span class="token punctuation">(</span><span class="token keyword">DAY</span> <span class="token keyword">FROM</span> SYSDATE<span class="token punctuation">)</span> <span class="token keyword">DAY</span></pre></td></tr><tr><td data-num="9"></td><td><pre>   <span class="token keyword">BULK</span> COLLECT <span class="token keyword">INTO</span> <span class="token keyword">TEMP</span> <span class="token keyword">FROM</span> DUAL <span class="token keyword">CONNECT</span> <span class="token keyword">BY</span> <span class="token keyword">LEVEL</span> <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token comment">/**</pre></td></tr><tr><td data-num="12"></td><td><pre>    删除 TEMP 集合 1、4、7 行的数据</pre></td></tr><tr><td data-num="13"></td><td><pre>    此时就不能用 for, 因为 TEMP (1) 这样取会显示下标 [1] 中的元素不存在，错误代码：ORA-22160</pre></td></tr><tr><td data-num="14"></td><td><pre>    那么就需要使用 INDICES OF</pre></td></tr><tr><td data-num="15"></td><td><pre>  */</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token keyword">TEMP</span><span class="token punctuation">.</span><span class="token keyword">DELETE</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token keyword">TEMP</span><span class="token punctuation">.</span><span class="token keyword">DELETE</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token keyword">TEMP</span><span class="token punctuation">.</span><span class="token keyword">DELETE</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre>  <span class="token comment">-- INSERT</span></pre></td></tr><tr><td data-num="22"></td><td><pre>  FORALL I <span class="token operator">IN</span> INDICES <span class="token keyword">OF</span> <span class="token keyword">TEMP</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> DATE_TEMP <span class="token keyword">VALUES</span> <span class="token keyword">TEMP</span><span class="token punctuation">(</span>I<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token comment">-- UPDATR</span></pre></td></tr><tr><td data-num="26"></td><td><pre>  <span class="token keyword">TEMP</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">DAY</span> :<span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>  FORALL I <span class="token operator">IN</span> INDICES <span class="token keyword">OF</span> <span class="token keyword">TEMP</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token keyword">UPDATE</span> DATE_TEMP DT <span class="token keyword">SET</span> DT<span class="token punctuation">.</span><span class="token keyword">DAY</span> <span class="token operator">=</span> <span class="token keyword">TEMP</span><span class="token punctuation">(</span>I<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">DAY</span> <span class="token keyword">WHERE</span> DT<span class="token punctuation">.</span>ID <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre>  <span class="token comment">-- DELETE</span></pre></td></tr><tr><td data-num="31"></td><td><pre>  V_ARRAY<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> :<span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>  FORALL I <span class="token operator">IN</span> INDICES <span class="token keyword">OF</span> V_ARRAY</pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token keyword">DELETE</span> DATE_TEMP DT <span class="token keyword">WHERE</span> DT<span class="token punctuation">.</span>ID <span class="token operator">=</span> V_ARRAY<span class="token punctuation">(</span>I<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token keyword">END</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h4 id="values-of"><a class="anchor" href="#values-of">#</a> VALUES OF</h4><ul><li>FORALL 下标变量 IN VALUES OF 集合 (把该集合中的值当作下标，且该集合值的类型只能是 PLS_INTEGER BINARY_INTEGER)</li></ul><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">DECLARE</span></pre></td></tr><tr><td data-num="2"></td><td><pre> <span class="token keyword">TYPE</span> DATE_TEMP_TYPE <span class="token operator">IS</span> <span class="token keyword">TABLE</span> <span class="token keyword">OF</span> DATE_TEMP<span class="token operator">%</span>ROWTYPE <span class="token keyword">INDEX</span> <span class="token keyword">BY</span> PLS_INTEGER<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre> <span class="token keyword">TEMP</span> DATE_TEMP_TYPE<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre> <span class="token keyword">TYPE</span> TAB_TYPE <span class="token operator">IS</span> <span class="token keyword">TABLE</span> <span class="token keyword">OF</span> PLS_INTEGER <span class="token keyword">INDEX</span> <span class="token keyword">BY</span> PLS_INTEGER<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre> V_TAB TAB_TYPE:<span class="token operator">=</span>TAB_TYPE<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">BEGIN</span></pre></td></tr><tr><td data-num="8"></td><td><pre> <span class="token keyword">SELECT</span> <span class="token keyword">LEVEL</span> ID<span class="token punctuation">,</span> EXTRACT<span class="token punctuation">(</span><span class="token keyword">YEAR</span> <span class="token keyword">FROM</span> SYSDATE<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">LEVEL</span> <span class="token keyword">YEAR</span><span class="token punctuation">,</span> EXTRACT<span class="token punctuation">(</span><span class="token keyword">MONTH</span> <span class="token keyword">FROM</span> SYSDATE<span class="token punctuation">)</span> <span class="token keyword">MONTH</span><span class="token punctuation">,</span> EXTRACT<span class="token punctuation">(</span><span class="token keyword">DAY</span> <span class="token keyword">FROM</span> SYSDATE<span class="token punctuation">)</span> <span class="token keyword">DAY</span></pre></td></tr><tr><td data-num="9"></td><td><pre>   <span class="token keyword">BULK</span> COLLECT <span class="token keyword">INTO</span> <span class="token keyword">TEMP</span> <span class="token keyword">FROM</span> DUAL <span class="token keyword">CONNECT</span> <span class="token keyword">BY</span> <span class="token keyword">LEVEL</span> <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token comment">/** INSERT</pre></td></tr><tr><td data-num="12"></td><td><pre>    因为使用的 VALUES OF，而上面也已经定好对应 1、2、3 下标的数据分别是 1、4、7</pre></td></tr><tr><td data-num="13"></td><td><pre>    所以此时使用 FORALL 会将 TEMP 集合 ID 为 1、4、7 的数据插入到 DATE_TEMP 表中，也就是说会插入 3 条数据</pre></td></tr><tr><td data-num="14"></td><td><pre>  */</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  FORALL I <span class="token operator">IN</span> <span class="token keyword">VALUES</span> <span class="token keyword">OF</span> V_TAB</pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> DATE_TEMP <span class="token keyword">VALUES</span> <span class="token keyword">TEMP</span><span class="token punctuation">(</span>I<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token comment">/** DELETE</pre></td></tr><tr><td data-num="20"></td><td><pre>    DATE_TEMP 表 ID 为 7 的这行数据 字段 DAY 的值将被修改为 30</pre></td></tr><tr><td data-num="21"></td><td><pre>  */</span></pre></td></tr><tr><td data-num="22"></td><td><pre>  <span class="token keyword">TEMP</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">DAY</span> :<span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  FORALL I <span class="token operator">IN</span> <span class="token keyword">VALUES</span> <span class="token keyword">OF</span> V_TAB</pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">UPDATE</span> DATE_TEMP DT <span class="token keyword">SET</span> DT<span class="token punctuation">.</span><span class="token keyword">DAY</span> <span class="token operator">=</span> <span class="token keyword">TEMP</span><span class="token punctuation">(</span>I<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">DAY</span> <span class="token keyword">WHERE</span> DT<span class="token punctuation">.</span>ID <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token comment">/** DELETE</pre></td></tr><tr><td data-num="28"></td><td><pre>    这里删除了 V_TAB () 下标为 2、3 的元素，也就是对应的值 4、7</pre></td></tr><tr><td data-num="29"></td><td><pre>    那么此时这里只剩下下标为 1 的数据，对应的值恰好也是 1</pre></td></tr><tr><td data-num="30"></td><td><pre>    所以 DATE_TEMP 表 ID 为 1 的这行数据将会被删除</pre></td></tr><tr><td data-num="31"></td><td><pre>  */</span></pre></td></tr><tr><td data-num="32"></td><td><pre>  V_TAB<span class="token punctuation">.</span><span class="token keyword">DELETE</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>  V_TAB<span class="token punctuation">.</span><span class="token keyword">DELETE</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre>  FORALL I <span class="token operator">IN</span> <span class="token keyword">VALUES</span> <span class="token keyword">OF</span> V_TAB</pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token keyword">DELETE</span> DATE_TEMP DT <span class="token keyword">WHERE</span> DT<span class="token punctuation">.</span>ID <span class="token operator">=</span> V_TAB<span class="token punctuation">(</span>I<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token keyword">END</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h4 id="for-forall-efficiency-test"><a class="anchor" href="#for-forall-efficiency-test">#</a> FOR &amp; FORALL Efficiency Test</h4><h5 id="insert"><a class="anchor" href="#insert">#</a> INSERT</h5><ul><li>这里进行 FOR 与 FORALL 效率的测试</li><li>其中 FORALL 搭配集合插入时（BULK COLLECT INTO）执行效率会非常明显的高于 FOR。</li><li>而更新与删除的效率与 FOR 几乎一致。</li></ul><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">DECLARE</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">TYPE</span> TEMP_REC <span class="token operator">IS</span> RECORD<span class="token punctuation">(</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  ID NUMBER<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">YEAR</span> NUMBER<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">MONTH</span> NUMBER<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">DAY</span> NUMBER</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">TYPE</span> TEMP_TAB <span class="token operator">IS</span> <span class="token keyword">TABLE</span> <span class="token keyword">OF</span> TEMP_REC <span class="token keyword">INDEX</span> <span class="token keyword">BY</span> PLS_INTEGER<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">TEMP</span> TEMP_TAB<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">BEGIN</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">SELECT</span> <span class="token keyword">LEVEL</span><span class="token punctuation">,</span> TO_CHAR<span class="token punctuation">(</span>SYSDATE<span class="token punctuation">,</span> <span class="token string">'YYYY'</span><span class="token punctuation">)</span> <span class="token keyword">YEAR</span><span class="token punctuation">,</span> TO_CHAR<span class="token punctuation">(</span>SYSDATE<span class="token punctuation">,</span> <span class="token string">'MM'</span><span class="token punctuation">)</span> <span class="token keyword">MONTH</span><span class="token punctuation">,</span> TO_CHAR<span class="token punctuation">(</span>SYSDATE<span class="token punctuation">,</span> <span class="token string">'DD'</span><span class="token punctuation">)</span> <span class="token keyword">DAY</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token keyword">BULK</span> COLLECT <span class="token keyword">INTO</span> <span class="token keyword">TEMP</span> <span class="token keyword">FROM</span> DUAL <span class="token keyword">CONNECT</span> <span class="token keyword">BY</span> <span class="token keyword">LEVEL</span> <span class="token operator">&lt;=</span> <span class="token number">1000000</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>  DBMS_OUTPUT<span class="token punctuation">.</span>PUT_LINE<span class="token punctuation">(</span><span class="token keyword">TEMP</span><span class="token punctuation">.</span>COUNT<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token keyword">IF</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">THEN</span></pre></td></tr><tr><td data-num="18"></td><td><pre>     FORALL I <span class="token operator">IN</span> <span class="token number">1.</span><span class="token punctuation">.</span><span class="token keyword">TEMP</span><span class="token punctuation">.</span>COUNT <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> DATE_TEMP <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token keyword">TEMP</span><span class="token punctuation">(</span>I<span class="token punctuation">)</span><span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token keyword">TEMP</span><span class="token punctuation">(</span>I<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">YEAR</span><span class="token punctuation">,</span> <span class="token keyword">TEMP</span><span class="token punctuation">(</span>I<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">MONTH</span><span class="token punctuation">,</span> <span class="token keyword">TEMP</span><span class="token punctuation">(</span>I<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">DAY</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token keyword">ELSE</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">FOR</span> I <span class="token operator">IN</span> <span class="token number">1.</span><span class="token punctuation">.</span><span class="token keyword">TEMP</span><span class="token punctuation">.</span>COUNT <span class="token keyword">LOOP</span></pre></td></tr><tr><td data-num="21"></td><td><pre>      <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> DATE_TEMP <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token keyword">TEMP</span><span class="token punctuation">(</span>I<span class="token punctuation">)</span><span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token keyword">TEMP</span><span class="token punctuation">(</span>I<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">YEAR</span><span class="token punctuation">,</span> <span class="token keyword">TEMP</span><span class="token punctuation">(</span>I<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">MONTH</span><span class="token punctuation">,</span> <span class="token keyword">TEMP</span><span class="token punctuation">(</span>I<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">DAY</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">END</span> <span class="token keyword">LOOP</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>   <span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre>   <span class="token keyword">ROLLBACK</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">END</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h5 id="update"><a class="anchor" href="#update">#</a> UPDATE</h5><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">DECLARE</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">TYPE</span> TEMP_REC <span class="token operator">IS</span> RECORD<span class="token punctuation">(</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  ID NUMBER<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">YEAR</span> NUMBER<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">MONTH</span> NUMBER<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">DAY</span> NUMBER</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">TYPE</span> TEMP_TAB <span class="token operator">IS</span> <span class="token keyword">TABLE</span> <span class="token keyword">OF</span> TEMP_REC <span class="token keyword">INDEX</span> <span class="token keyword">BY</span> PLS_INTEGER<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">TEMP</span> TEMP_TAB<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">BEGIN</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">SELECT</span> <span class="token keyword">LEVEL</span><span class="token punctuation">,</span> TO_CHAR<span class="token punctuation">(</span>SYSDATE<span class="token punctuation">,</span> <span class="token string">'YYYY'</span><span class="token punctuation">)</span> <span class="token keyword">YEAR</span><span class="token punctuation">,</span> TO_CHAR<span class="token punctuation">(</span>SYSDATE<span class="token punctuation">,</span> <span class="token string">'MM'</span><span class="token punctuation">)</span> <span class="token keyword">MONTH</span><span class="token punctuation">,</span> TO_CHAR<span class="token punctuation">(</span>SYSDATE<span class="token punctuation">,</span> <span class="token string">'DD'</span><span class="token punctuation">)</span> <span class="token keyword">DAY</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token keyword">BULK</span> COLLECT <span class="token keyword">INTO</span> <span class="token keyword">TEMP</span> <span class="token keyword">FROM</span> DUAL <span class="token keyword">CONNECT</span> <span class="token keyword">BY</span> <span class="token keyword">LEVEL</span> <span class="token operator">&lt;=</span> <span class="token number">1000000</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>  DBMS_OUTPUT<span class="token punctuation">.</span>PUT_LINE<span class="token punctuation">(</span><span class="token keyword">TEMP</span><span class="token punctuation">.</span>COUNT<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token keyword">IF</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">THEN</span></pre></td></tr><tr><td data-num="18"></td><td><pre>     FORALL I <span class="token operator">IN</span> <span class="token number">1.</span><span class="token punctuation">.</span><span class="token keyword">TEMP</span><span class="token punctuation">.</span>COUNT <span class="token keyword">UPDATE</span> DATE_TEMP <span class="token keyword">SET</span> <span class="token keyword">YEAR</span><span class="token operator">=</span><span class="token keyword">TEMP</span><span class="token punctuation">(</span>I<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">YEAR</span><span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">WHERE</span> ID<span class="token operator">=</span><span class="token keyword">TEMP</span><span class="token punctuation">(</span>I<span class="token punctuation">)</span><span class="token punctuation">.</span>ID<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token keyword">ELSE</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">FOR</span> I <span class="token operator">IN</span> <span class="token number">1.</span><span class="token punctuation">.</span><span class="token keyword">TEMP</span><span class="token punctuation">.</span>COUNT <span class="token keyword">LOOP</span></pre></td></tr><tr><td data-num="21"></td><td><pre>      <span class="token keyword">UPDATE</span> DATE_TEMP <span class="token keyword">SET</span> <span class="token keyword">YEAR</span><span class="token operator">=</span><span class="token keyword">TEMP</span><span class="token punctuation">(</span>I<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">YEAR</span><span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">WHERE</span> ID<span class="token operator">=</span><span class="token keyword">TEMP</span><span class="token punctuation">(</span>I<span class="token punctuation">)</span><span class="token punctuation">.</span>ID<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">END</span> <span class="token keyword">LOOP</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>   <span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre>   <span class="token keyword">ROLLBACK</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">END</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h5 id="delete"><a class="anchor" href="#delete">#</a> DELETE</h5><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">DECLARE</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">TYPE</span> TEMP_REC <span class="token operator">IS</span> RECORD<span class="token punctuation">(</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  ID NUMBER<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">YEAR</span> NUMBER<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">MONTH</span> NUMBER<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">DAY</span> NUMBER</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">TYPE</span> TEMP_TAB <span class="token operator">IS</span> <span class="token keyword">TABLE</span> <span class="token keyword">OF</span> TEMP_REC <span class="token keyword">INDEX</span> <span class="token keyword">BY</span> PLS_INTEGER<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">TEMP</span> TEMP_TAB<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">BEGIN</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">SELECT</span> <span class="token keyword">LEVEL</span><span class="token punctuation">,</span> TO_CHAR<span class="token punctuation">(</span>SYSDATE<span class="token punctuation">,</span> <span class="token string">'YYYY'</span><span class="token punctuation">)</span> <span class="token keyword">YEAR</span><span class="token punctuation">,</span> TO_CHAR<span class="token punctuation">(</span>SYSDATE<span class="token punctuation">,</span> <span class="token string">'MM'</span><span class="token punctuation">)</span> <span class="token keyword">MONTH</span><span class="token punctuation">,</span> TO_CHAR<span class="token punctuation">(</span>SYSDATE<span class="token punctuation">,</span> <span class="token string">'DD'</span><span class="token punctuation">)</span> <span class="token keyword">DAY</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token keyword">BULK</span> COLLECT <span class="token keyword">INTO</span> <span class="token keyword">TEMP</span> <span class="token keyword">FROM</span> DUAL <span class="token keyword">CONNECT</span> <span class="token keyword">BY</span> <span class="token keyword">LEVEL</span> <span class="token operator">&lt;=</span> <span class="token number">1000000</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>  DBMS_OUTPUT<span class="token punctuation">.</span>PUT_LINE<span class="token punctuation">(</span><span class="token keyword">TEMP</span><span class="token punctuation">.</span>COUNT<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token keyword">IF</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">THEN</span></pre></td></tr><tr><td data-num="18"></td><td><pre>     FORALL I <span class="token operator">IN</span> <span class="token number">1.</span><span class="token punctuation">.</span><span class="token keyword">TEMP</span><span class="token punctuation">.</span>COUNT <span class="token keyword">DELETE</span> DATE_TEMP <span class="token keyword">WHERE</span> ID<span class="token operator">=</span><span class="token keyword">TEMP</span><span class="token punctuation">(</span>I<span class="token punctuation">)</span><span class="token punctuation">.</span>ID<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token keyword">ELSE</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">FOR</span> I <span class="token operator">IN</span> <span class="token number">1.</span><span class="token punctuation">.</span><span class="token keyword">TEMP</span><span class="token punctuation">.</span>COUNT <span class="token keyword">LOOP</span></pre></td></tr><tr><td data-num="21"></td><td><pre>      <span class="token keyword">DELETE</span>  DATE_TEMP <span class="token keyword">WHERE</span> ID<span class="token operator">=</span><span class="token keyword">TEMP</span><span class="token punctuation">(</span>I<span class="token punctuation">)</span><span class="token punctuation">.</span>ID<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">END</span> <span class="token keyword">LOOP</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>   <span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">END</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">ROLLBACK</span><span class="token punctuation">;</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;prerequisites&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#prerequisites&quot;&gt;#&lt;/a&gt; Prerequisites&lt;/h4&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;figcaption data-lang=</summary>
      
    
    
    
    <category term="SQL" scheme="https://nekoaimer.com/categories/SQL/"/>
    
    <category term="Oracle" scheme="https://nekoaimer.com/categories/SQL/Oracle/"/>
    
    
    <category term="SQL" scheme="https://nekoaimer.com/tags/SQL/"/>
    
    <category term="Oracle" scheme="https://nekoaimer.com/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>Oarcle JavaSource</title>
    <link href="https://nekoaimer.com/2023/05/04/Oracle/JavaSource/"/>
    <id>https://nekoaimer.com/2023/05/04/Oracle/JavaSource/</id>
    <published>2023-05-04T15:11:22.000Z</published>
    <updated>2023-05-05T12:15:13.422Z</updated>
    
    <content type="html"><![CDATA[<h5 id="java-source"><a class="anchor" href="#java-source">#</a> Java Source</h5><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token operator">and</span> compile java source named JavaUtils <span class="token keyword">as</span></pre></td></tr><tr><td data-num="2"></td><td><pre>package com<span class="token punctuation">.</span>java<span class="token punctuation">.</span>util<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> java<span class="token punctuation">.</span><span class="token keyword">text</span><span class="token punctuation">.</span>SimpleDateFormat<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span><span class="token keyword">Date</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">public</span> class JavaUtils &#123;</pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token keyword">public</span> static void entry<span class="token punctuation">(</span><span class="token punctuation">)</span>&#123;</pre></td></tr><tr><td data-num="8"></td><td><pre>    System<span class="token punctuation">.</span><span class="token keyword">out</span><span class="token punctuation">.</span>println<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token keyword">public</span> static String getNowDate<span class="token punctuation">(</span>String dateFormat<span class="token punctuation">)</span> throws Exception &#123;</pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>dateFormat <span class="token operator">=</span><span class="token operator">=</span> <span class="token boolean">null</span><span class="token punctuation">)</span> dateFormat <span class="token operator">=</span> <span class="token string">"/"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">return</span> getNowYear<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">+</span> dateFormat <span class="token operator">+</span> getNowMonth<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">+</span> dateFormat <span class="token operator">+</span> getNowDay<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token keyword">public</span> static String getNowYear<span class="token punctuation">(</span>String dateFormat<span class="token punctuation">)</span> throws Exception &#123;</pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">return</span> new SimpleDateFormat<span class="token punctuation">(</span><span class="token string">"yyyy"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>new <span class="token keyword">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre>   <span class="token keyword">public</span> static String getNowMonth<span class="token punctuation">(</span>String dateFormat<span class="token punctuation">)</span> throws Exception &#123;</pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">return</span> new SimpleDateFormat<span class="token punctuation">(</span><span class="token string">"MM"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>new <span class="token keyword">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre>   <span class="token keyword">public</span> static String getNowDay<span class="token punctuation">(</span>String dateFormat<span class="token punctuation">)</span> throws Exception &#123;</pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token keyword">return</span> new SimpleDateFormat<span class="token punctuation">(</span><span class="token string">"dd"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>new <span class="token keyword">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num="28"></td><td><pre>&#125;</pre></td></tr></table></figure><h5 id="create-function-test"><a class="anchor" href="#create-function-test">#</a> Create Function Test</h5><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> noneditionable <span class="token keyword">function</span> java_test<span class="token punctuation">(</span>str <span class="token operator">in</span> STRING<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">-- 包名 + java sources name + 方法名 (参数)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">return</span> string <span class="token operator">is</span> <span class="token keyword">language</span> java name <span class="token string">'com.java.util.JavaUtils.getNowDate(java.lang.String) return java.lang.String'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">-- return string is language java name 'com.java.util.JavaUtils.getNowYear(java.lang.String) return java.lang.String';</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token comment">-- return string is language java name 'com.java.util.JavaUtils.getNowMonth(java.lang.String) return java.lang.String';</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token comment">--return string is language java name 'com.java.util.JavaUtils.getNowDay(java.lang.String) return java.lang.String';</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;java-source&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#java-source&quot;&gt;#&lt;/a&gt; Java Source&lt;/h5&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;figcaption data-lang=&quot;SQL&quot;&gt;</summary>
      
    
    
    
    <category term="SQL" scheme="https://nekoaimer.com/categories/SQL/"/>
    
    <category term="Oracle" scheme="https://nekoaimer.com/categories/SQL/Oracle/"/>
    
    
    <category term="SQL" scheme="https://nekoaimer.com/tags/SQL/"/>
    
    <category term="Oracle" scheme="https://nekoaimer.com/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>Oarcle Function Ratio_to_report</title>
    <link href="https://nekoaimer.com/2023/05/04/Oracle/Ratio_to_report/"/>
    <id>https://nekoaimer.com/2023/05/04/Oracle/Ratio_to_report/</id>
    <published>2023-05-04T14:35:00.000Z</published>
    <updated>2023-05-05T12:15:30.520Z</updated>
    
    <content type="html"><![CDATA[<h4 id="syntax"><a class="anchor" href="#syntax">#</a> syntax</h4><ul><li>expr 可理解为当前字段数值所占的分子。如果下方的 over 中缺省，则根据当前字段值的总和来占比。</li><li>query_partition_clause（可选填） 可理解为 expr 相同分区字段值的综合人（分母）。</li><li>可参考：<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vZW4vZGF0YWJhc2Uvb3JhY2xlL29yYWNsZS1kYXRhYmFzZS8xOS9zcWxyZi9SQVRJT19UT19SRVBPUlQuaHRtbCNHVUlELTlEMTBDMjc1LTQzNDEtNDM1Ri1BQ0Y0LTc2N0I5Q0NCNzM5MA==">https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/RATIO_TO_REPORT.html#GUID-9D10C275-4341-435F-ACF4-767B9CCB7390</span></li></ul><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre>RATIO_TO_REPORT<span class="token punctuation">(</span>expr<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>   <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token punctuation">[</span> query_partition_clause <span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h4 id="ratio_to_report-test"><a class="anchor" href="#ratio_to_report-test">#</a> Ratio_to_report Test</h4><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">create</span> <span class="token keyword">table</span> grades</pre></td></tr><tr><td data-num="2"></td><td><pre> <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="3"></td><td><pre> stuno varchar2<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre> name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre> subjects <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre> score number</pre></td></tr><tr><td data-num="7"></td><td><pre> <span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre> <span class="token keyword">insert</span> <span class="token keyword">into</span> grades <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'001'</span><span class="token punctuation">,</span> <span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token string">'语文'</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre> <span class="token keyword">insert</span> <span class="token keyword">into</span> grades <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'002'</span><span class="token punctuation">,</span> <span class="token string">'李四'</span><span class="token punctuation">,</span> <span class="token string">'数学'</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre> <span class="token keyword">insert</span> <span class="token keyword">into</span> grades <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'003'</span><span class="token punctuation">,</span> <span class="token string">'王五'</span><span class="token punctuation">,</span> <span class="token string">'英语'</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre> <span class="token keyword">insert</span> <span class="token keyword">into</span> grades <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'004'</span><span class="token punctuation">,</span> <span class="token string">'赵六'</span><span class="token punctuation">,</span> <span class="token string">'语文'</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre> <span class="token keyword">insert</span> <span class="token keyword">into</span> grades <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'005'</span><span class="token punctuation">,</span> <span class="token string">'孙七'</span><span class="token punctuation">,</span> <span class="token string">'数学'</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre> <span class="token keyword">commit</span><span class="token punctuation">;</span></pre></td></tr></table></figure><ul><li>需求：根据上方成绩表，求出每名学生当前科目分数占 对应科目总和的百分比。</li><li>Answer</li></ul><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">select</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  name<span class="token punctuation">,</span> score<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">*</span> ratio_to_report<span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">over</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">"占所有科目的百分比"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">*</span> ratio_to_report<span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> subjects<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span>  <span class="token string">"占各科目的百分比"</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">from</span> grades <span class="token keyword">order</span> <span class="token keyword">by</span> stuno<span class="token punctuation">;</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;syntax&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#syntax&quot;&gt;#&lt;/a&gt; syntax&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;expr 可理解为当前字段数值所占的分子。如果下方的 over 中缺省，则根据当前字段值的总和来占比。&lt;/li&gt;
&lt;li&gt;que</summary>
      
    
    
    
    <category term="SQL" scheme="https://nekoaimer.com/categories/SQL/"/>
    
    <category term="Oracle" scheme="https://nekoaimer.com/categories/SQL/Oracle/"/>
    
    
    <category term="SQL" scheme="https://nekoaimer.com/tags/SQL/"/>
    
    <category term="Oracle" scheme="https://nekoaimer.com/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>Oarcle Create Type</title>
    <link href="https://nekoaimer.com/2023/05/03/Oracle/Type/"/>
    <id>https://nekoaimer.com/2023/05/03/Oracle/Type/</id>
    <published>2023-05-03T15:24:09.000Z</published>
    <updated>2023-05-04T13:40:17.920Z</updated>
    
    <content type="html"><![CDATA[<ul><li>使用 type 建表可以局限于只为这张表提供对应的属性或方法</li></ul><h3 id="create-type-basic"><a class="anchor" href="#create-type-basic">#</a> Create Type Basic</h3><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">-- way 1</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">create</span> <span class="token operator">or</span> repalce <span class="token keyword">type</span> type_name <span class="token keyword">as</span> object <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  field_name <span class="token keyword">type</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  field_name <span class="token keyword">type</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">-- way 2</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">Create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">type</span> type_name <span class="token keyword">of</span> custom_type<span class="token punctuation">;</span></pre></td></tr></table></figure><h4 id="as-object"><a class="anchor" href="#as-object">#</a> AS OBJECT</h4><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">type</span> t1 <span class="token keyword">as</span> object <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="2"></td><td><pre>   userid varchar2<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   username varchar2<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">create</span> <span class="token keyword">table</span> user1 <span class="token keyword">of</span> t1<span class="token punctuation">;</span></pre></td></tr></table></figure><h4 id="of-custom_type"><a class="anchor" href="#of-custom_type">#</a> OF CUSTOM_TYPE</h4><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre>example <span class="token number">1</span>:</pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">type</span> t2 <span class="token keyword">as</span> <span class="token keyword">table</span> <span class="token keyword">of</span> varchar2<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>example <span class="token number">2</span>:</pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">type</span> t3 <span class="token keyword">as</span> varray<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">of</span> varchar2<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>example <span class="token number">3</span>:</pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token keyword">declare</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    v_array t3:<span class="token operator">=</span> t3<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token keyword">begin</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    v_array<span class="token punctuation">.</span>extend<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    v_array<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>:<span class="token operator">=</span> <span class="token string">'b'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>    v_array<span class="token punctuation">.</span>extend<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">select</span> <span class="token string">'c'</span> <span class="token keyword">into</span> v_array<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">for</span> i <span class="token operator">in</span> <span class="token number">1.</span><span class="token punctuation">.</span>v_array<span class="token punctuation">.</span>count  <span class="token keyword">loop</span></pre></td></tr><tr><td data-num="18"></td><td><pre>      dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span>v_array<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">-- a b c</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">end</span> <span class="token keyword">loop</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token keyword">end</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h4 id="create-type-member"><a class="anchor" href="#create-type-member">#</a> Create Type Member</h4><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">-- Create Type Defined</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">type</span> userinfo_type <span class="token keyword">as</span> object<span class="token punctuation">(</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  userid <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  username varchar2<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  gender number<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  age number<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  member <span class="token keyword">function</span> getGender<span class="token punctuation">(</span>gender <span class="token operator">in</span> number<span class="token punctuation">)</span> <span class="token keyword">return</span> varchar2<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  member <span class="token keyword">function</span> setGender<span class="token punctuation">(</span>gender <span class="token operator">in</span> varchar2<span class="token punctuation">)</span> <span class="token keyword">return</span> varchar2<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  member <span class="token keyword">function</span> getYear<span class="token punctuation">(</span>age <span class="token operator">in</span> number<span class="token punctuation">)</span> <span class="token keyword">return</span> number<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  pragma restrict_references<span class="token punctuation">(</span>getGender<span class="token punctuation">,</span>   rnps<span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  pragma restrict_references<span class="token punctuation">(</span>setGender<span class="token punctuation">,</span>   wnps<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment">-- Create Type Body</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">type</span> body userinfo_type <span class="token keyword">as</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  member <span class="token keyword">function</span> getGender<span class="token punctuation">(</span>gender <span class="token operator">in</span> number<span class="token punctuation">)</span> <span class="token keyword">return</span> varchar2</pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token operator">is</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token keyword">begin</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">if</span> gender <span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">then</span> <span class="token keyword">return</span> <span class="token string">'男'</span><span class="token punctuation">;</span> <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token keyword">return</span> <span class="token string">'女'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>  <span class="token keyword">end</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre>  member <span class="token keyword">function</span> setGender<span class="token punctuation">(</span>gender <span class="token operator">in</span> varchar2<span class="token punctuation">)</span> <span class="token keyword">return</span> varchar2</pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token operator">is</span></pre></td></tr><tr><td data-num="26"></td><td><pre>  <span class="token keyword">begin</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token keyword">if</span> gender <span class="token operator">=</span> <span class="token string">'男'</span> <span class="token keyword">then</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>  <span class="token keyword">end</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre>  member <span class="token keyword">function</span> getYear<span class="token punctuation">(</span>age <span class="token operator">in</span> number<span class="token punctuation">)</span> <span class="token keyword">return</span> number</pre></td></tr><tr><td data-num="32"></td><td><pre>  <span class="token operator">is</span></pre></td></tr><tr><td data-num="33"></td><td><pre>  <span class="token keyword">begin</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token keyword">return</span>  extract<span class="token punctuation">(</span><span class="token keyword">year</span> <span class="token keyword">from</span> sysdate<span class="token punctuation">)</span> <span class="token operator">-</span> age<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>  <span class="token keyword">end</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token keyword">end</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h3 id="type-member-pragma"><a class="anchor" href="#type-member-pragma">#</a> Type Member Pragma</h3><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre>RNDS: <span class="token punctuation">(</span><span class="token keyword">Read</span> <span class="token keyword">No</span> <span class="token keyword">Database</span> State<span class="token punctuation">)</span> 表示该subprogram不会查询<span class="token punctuation">(</span>query<span class="token punctuation">)</span>数据库中的表: ORA<span class="token operator">-</span><span class="token number">00452</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>WNDS: <span class="token punctuation">(</span><span class="token keyword">Write</span> <span class="token keyword">No</span> <span class="token keyword">Database</span> State<span class="token punctuation">)</span> 表示该subprogram不会改变数据库中的表的数据</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>RNPS: <span class="token punctuation">(</span><span class="token keyword">Read</span> <span class="token keyword">No</span> Package State<span class="token punctuation">)</span> 不访问包中的变量</pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>WNPS:<span class="token punctuation">(</span><span class="token keyword">Write</span> <span class="token keyword">No</span> Package State<span class="token punctuation">)</span> 不改变包中的变量值</pre></td></tr></table></figure><h4 id="type-member-test"><a class="anchor" href="#type-member-test">#</a> Type Member Test</h4><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">create</span> <span class="token keyword">table</span> userinfo <span class="token keyword">of</span> userinfo_type<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">insert</span> <span class="token keyword">into</span> userinfo <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'001'</span><span class="token punctuation">,</span><span class="token string">'jack'</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">insert</span> <span class="token keyword">into</span> userinfo <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'002'</span><span class="token punctuation">,</span> <span class="token string">'annie'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">commit</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">select</span> t<span class="token punctuation">.</span>userid<span class="token punctuation">,</span> t<span class="token punctuation">.</span>username<span class="token punctuation">,</span> t<span class="token punctuation">.</span>getGender<span class="token punctuation">(</span>gender<span class="token punctuation">)</span> getGender<span class="token punctuation">,</span> t<span class="token punctuation">.</span>setGender<span class="token punctuation">(</span><span class="token string">'男'</span><span class="token punctuation">)</span> setGender<span class="token punctuation">,</span> t<span class="token punctuation">.</span>getYear<span class="token punctuation">(</span>age<span class="token punctuation">)</span> getYear <span class="token keyword">from</span> userinfo t<span class="token punctuation">;</span></pre></td></tr></table></figure><h3 id="create-abstract-type"><a class="anchor" href="#create-abstract-type">#</a> Create Abstract Type</h3><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">type</span> other_type <span class="token keyword">as</span> object <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  sports varchar2<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  hobby varchar2<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">type</span> user_type <span class="token keyword">as</span> object<span class="token punctuation">(</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  userid varchar2<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  username varchar2<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  other other_type</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h4 id="abstract-type-test"><a class="anchor" href="#abstract-type-test">#</a> Abstract Type Test</h4><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">create</span> <span class="token keyword">table</span> userinfo2 <span class="token keyword">of</span> user_type<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">-- insert</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">insert</span> <span class="token keyword">into</span> userinfo2<span class="token punctuation">(</span>userid<span class="token punctuation">,</span> username<span class="token punctuation">,</span> other<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'001'</span><span class="token punctuation">,</span> <span class="token string">'jack'</span><span class="token punctuation">,</span> other_type<span class="token punctuation">(</span><span class="token string">'ping pong'</span><span class="token punctuation">,</span> <span class="token string">'animation'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">insert</span> <span class="token keyword">into</span> userinfo2<span class="token punctuation">(</span>userid<span class="token punctuation">,</span> username<span class="token punctuation">,</span> other<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'002'</span><span class="token punctuation">,</span> <span class="token string">'lisa'</span><span class="token punctuation">,</span> other_type<span class="token punctuation">(</span><span class="token string">'badminton'</span><span class="token punctuation">,</span> <span class="token string">'animation'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">commit</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">select</span> t<span class="token punctuation">.</span>userid<span class="token punctuation">,</span> t<span class="token punctuation">.</span>username<span class="token punctuation">,</span> t<span class="token punctuation">.</span>other<span class="token punctuation">.</span>sports sports<span class="token punctuation">,</span> t<span class="token punctuation">.</span>other<span class="token punctuation">.</span>hobby hobby <span class="token keyword">from</span> userinfo2 t<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">-- update</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">update</span> userinfo2 t <span class="token keyword">set</span> t<span class="token punctuation">.</span>username <span class="token operator">=</span> <span class="token string">'jerry'</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>other<span class="token punctuation">.</span>sports <span class="token operator">=</span> <span class="token string">'football'</span> <span class="token keyword">where</span> userid <span class="token operator">=</span> <span class="token string">'001'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">commit</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">select</span> t<span class="token punctuation">.</span>userid<span class="token punctuation">,</span> t<span class="token punctuation">.</span>username<span class="token punctuation">,</span> t<span class="token punctuation">.</span>other<span class="token punctuation">.</span>sports sports<span class="token punctuation">,</span> t<span class="token punctuation">.</span>other<span class="token punctuation">.</span>hobby hobby <span class="token keyword">from</span> userinfo2 t<span class="token punctuation">;</span></pre></td></tr></table></figure><h3 id="create-type-extends"><a class="anchor" href="#create-type-extends">#</a> Create Type Extends</h3><ul><li>a final object type is a type from which cannot be derived</li><li>最终对象类型是无法派生的类型</li></ul><h4 id="not-final-final"><a class="anchor" href="#not-final-final">#</a> Not Final &amp; Final</h4><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">-- not final</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">type</span> this_type_not_final <span class="token keyword">as</span> object<span class="token punctuation">(</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  money number<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  member <span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>x <span class="token operator">in</span> number<span class="token punctuation">)</span> <span class="token keyword">return</span> number</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">)</span> <span class="token operator">not</span> final<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">type</span> body this_type_not_final <span class="token keyword">as</span></pre></td></tr><tr><td data-num="8"></td><td><pre> member <span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>x <span class="token operator">in</span> number<span class="token punctuation">)</span> <span class="token keyword">return</span> number</pre></td></tr><tr><td data-num="9"></td><td><pre> <span class="token operator">is</span></pre></td></tr><tr><td data-num="10"></td><td><pre> <span class="token keyword">begin</span></pre></td></tr><tr><td data-num="11"></td><td><pre>   <span class="token keyword">return</span> money <span class="token operator">*</span> x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre> <span class="token keyword">end</span> sum<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">end</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment">-- final</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">type</span> this_type_final <span class="token keyword">as</span> object<span class="token punctuation">(</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  color varchar2<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  material varchar2<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  member <span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>x <span class="token operator">in</span> number<span class="token punctuation">,</span> y <span class="token operator">in</span> number<span class="token punctuation">)</span> <span class="token keyword">return</span> number</pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">type</span> body this_type_final <span class="token keyword">as</span></pre></td></tr><tr><td data-num="24"></td><td><pre> member <span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>x <span class="token operator">in</span> number<span class="token punctuation">,</span> y <span class="token operator">in</span> number<span class="token punctuation">)</span> <span class="token keyword">return</span> number</pre></td></tr><tr><td data-num="25"></td><td><pre> <span class="token operator">is</span></pre></td></tr><tr><td data-num="26"></td><td><pre> <span class="token keyword">begin</span></pre></td></tr><tr><td data-num="27"></td><td><pre>   <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre> <span class="token keyword">end</span> sum<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">end</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h4 id="create-type-derive"><a class="anchor" href="#create-type-derive">#</a> Create Type Derive</h4><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">-- The following type can be derived because the base type is not final.</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">-- 可以派生以下类型，因为基础类型不是最终类型 (not final)。</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">type</span> derived_from_NOT_final under this_type_NOT_final <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  member <span class="token keyword">procedure</span> bar</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">-- The following type can not be derived because the base type is final.</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">-- 无法派生以下类型，因为基类型是最终类型 (final)。</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">type</span> derived_from_final under this_type_final <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  member <span class="token keyword">procedure</span> bar</pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment">-- Trying to derive from a final type gives a PLS-00590: attempting to create a subtype UNDER a FINAL type.</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">-- pls-00590: 正在尝试创建一个最终类型的子类型</span></pre></td></tr></table></figure><h4 id="create-final-member"><a class="anchor" href="#create-final-member">#</a> Create Final Member</h4><ul><li>not final member procedures/functions</li><li>不是最终成员程序 / 函数</li></ul><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">-- create type</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">type</span> type_member_isfinal <span class="token keyword">as</span> object <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  x number<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token operator">not</span> final member <span class="token keyword">function</span> NOT_FINAL_func<span class="token punctuation">(</span>y <span class="token operator">in</span> number<span class="token punctuation">)</span> <span class="token keyword">return</span> number<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  final     member <span class="token keyword">function</span> FINAL_func    <span class="token punctuation">(</span>y <span class="token operator">in</span> number<span class="token punctuation">)</span> <span class="token keyword">return</span> number</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">)</span> <span class="token operator">not</span> final<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">-- create type body</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">type</span> body type_member_isfinal <span class="token keyword">as</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token operator">not</span> final member <span class="token keyword">function</span> NOT_FINAL_func<span class="token punctuation">(</span>y <span class="token operator">in</span> number<span class="token punctuation">)</span> <span class="token keyword">return</span> number</pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token operator">is</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token keyword">begin</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token keyword">end</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>  final member <span class="token keyword">function</span> FINAL_func<span class="token punctuation">(</span>y <span class="token operator">in</span> number<span class="token punctuation">)</span> <span class="token keyword">return</span> number</pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token operator">is</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token keyword">begin</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">return</span> x <span class="token operator">-</span> y<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  <span class="token keyword">end</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">end</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h4 id="create-overriding-member"><a class="anchor" href="#create-overriding-member">#</a> Create Overriding Member</h4><ul><li>a member function (or procedure) can be overriden if it is declared not final in the base class</li><li>如果成员函数（或过程）在基类中声明不是 final，则可以重写该函数（或过程）</li></ul><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">type</span> type_override_member_isfinal under type_member_isfinal <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  overriding member <span class="token keyword">function</span> NOT_FINAL_func<span class="token punctuation">(</span>y <span class="token operator">in</span> number<span class="token punctuation">)</span> <span class="token keyword">return</span> number</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">-- 以下内容不起作用，因为无法重写最终成员函数</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">type</span> type_override_member_isfinal under type_member_isfinal <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  overriding member <span class="token keyword">function</span> FINAL_func<span class="token punctuation">(</span>y <span class="token operator">in</span> number<span class="token punctuation">)</span> <span class="token keyword">return</span> number</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">-- pls-00637: 无法覆盖或隐藏 final 方法</span></pre></td></tr></table></figure><ul><li>建议参考：<span class="exturl" data-url="aHR0cDovL2FkcC1nbWJoLmNoL29yYS9wbHNxbC9vby9ub3RfZmluYWwuaHRtbA==">http://adp-gmbh.ch/ora/plsql/oo/not_final.html</span></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;使用 type 建表可以局限于只为这张表提供对应的属性或方法&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;create-type-basic&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#create-type-basic&quot;&gt;#&lt;/a&gt; Create Type </summary>
      
    
    
    
    <category term="SQL" scheme="https://nekoaimer.com/categories/SQL/"/>
    
    <category term="Oracle" scheme="https://nekoaimer.com/categories/SQL/Oracle/"/>
    
    
    <category term="SQL" scheme="https://nekoaimer.com/tags/SQL/"/>
    
    <category term="Oracle" scheme="https://nekoaimer.com/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>Oarcle Query Basic</title>
    <link href="https://nekoaimer.com/2022/11/17/Oracle/Query/"/>
    <id>https://nekoaimer.com/2022/11/17/Oracle/Query/</id>
    <published>2022-11-17T15:28:09.000Z</published>
    <updated>2023-05-04T13:43:48.931Z</updated>
    
    <content type="html"><![CDATA[<h6 id="_oracle_script"><a class="anchor" href="#_oracle_script">#</a> _ORACLE_SCRIPT</h6><ul><li>内部维护使用，在 oracle 12 以上创建用户需要加 c##，这时我会使用以下代码，突破 oracle 的限制，用户切记改回 false。</li><li>可参考：<span class="exturl" data-url="aHR0cHM6Ly9zZXJ2ZXJmYXVsdC5jb20vcXVlc3Rpb25zLzkyMzYyMy9wZXJzaXN0LWFsdGVyLXNlc3Npb24tc2V0LW9yYWNsZS1zY3JpcHQtdHJ1ZS1pbi1vcmFjbGUtMTJj">https://serverfault.com/questions/923623/persist-alter-session-set-oracle-script-true-in-oracle-12c</span></li></ul><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">alter</span> <span class="token keyword">session</span> <span class="token keyword">set</span> <span class="token string">"_ORACLE_SCRIPT"</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h6 id="查询表空间"><a class="anchor" href="#查询表空间">#</a> 查询表空间</h6><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">-- 查询当前用户所处表空间</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">select</span> default_tablespace <span class="token keyword">from</span> dba_users <span class="token keyword">where</span> username<span class="token operator">=</span><span class="token string">'Loguser'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">-- 查看所有的表空间</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">-- 方式 1：dba_tablespaces --</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> dba_tablespaces<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">-- 方式 2：v$tablespace</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> v$<span class="token keyword">tablespace</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h6 id="查看用户下面的所有的表"><a class="anchor" href="#查看用户下面的所有的表">#</a> 查看用户下面的所有的表</h6><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">-- 方式 1：user_tables --</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> user_tables<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">-- 方式 2: dba_tables --</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> dba_tables <span class="token keyword">where</span> owner<span class="token operator">=</span><span class="token string">'TMS21'</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h6 id="查看表空间下有多少用户"><a class="anchor" href="#查看表空间下有多少用户">#</a> 查看表空间下有多少用户</h6><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">-- 注意表空间的名字是大写</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">select</span> <span class="token keyword">distinct</span> s<span class="token punctuation">.</span>owner <span class="token keyword">from</span> dba_segments s</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">where</span> s<span class="token punctuation">.</span>tablespace_name <span class="token operator">=</span> upper<span class="token punctuation">(</span><span class="token string">'tablespace_name'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h6 id="查看表空间位置"><a class="anchor" href="#查看表空间位置">#</a> 查看表空间位置</h6><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> dba_data_files <span class="token keyword">order</span> <span class="token keyword">by</span> file_id<span class="token punctuation">;</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h6 id=&quot;_oracle_script&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#_oracle_script&quot;&gt;#&lt;/a&gt; _ORACLE_SCRIPT&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;内部维护使用，在 oracle 12 以上创建用户需要加 c##，这时我会使用以</summary>
      
    
    
    
    <category term="SQL" scheme="https://nekoaimer.com/categories/SQL/"/>
    
    <category term="Oracle" scheme="https://nekoaimer.com/categories/SQL/Oracle/"/>
    
    
    <category term="SQL" scheme="https://nekoaimer.com/tags/SQL/"/>
    
    <category term="Oracle" scheme="https://nekoaimer.com/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>Oarcle Array</title>
    <link href="https://nekoaimer.com/2022/11/17/Oracle/array/"/>
    <id>https://nekoaimer.com/2022/11/17/Oracle/array/</id>
    <published>2022-11-17T15:28:09.000Z</published>
    <updated>2023-05-04T10:23:45.217Z</updated>
    
    <content type="html"><![CDATA[<h3 id="单维数组"><a class="anchor" href="#单维数组">#</a> 单维数组</h3><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">-- 不加 INDEX BY BINARY_INTEGER 写法</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">DECLARE</span></pre></td></tr><tr><td data-num="3"></td><td><pre> <span class="token keyword">TYPE</span> SEQ_TYPE <span class="token operator">IS</span> <span class="token keyword">TABLE</span> <span class="token keyword">OF</span> NUMBER<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre> V_SEQ SEQ_TYPE:<span class="token operator">=</span> SEQ_TYPE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">BEGIN</span></pre></td></tr><tr><td data-num="6"></td><td><pre> V_SEQ<span class="token punctuation">.</span>EXTEND<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre> V_SEQ<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>:<span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre> V_SEQ<span class="token punctuation">.</span>EXTEND<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre> V_SEQ<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>:<span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre> V_SEQ<span class="token punctuation">.</span>EXTEND<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre> V_SEQ<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>:<span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre> <span class="token keyword">FOR</span> I <span class="token operator">IN</span> <span class="token number">1.</span><span class="token punctuation">.</span> V_SEQ<span class="token punctuation">.</span>COUNT <span class="token keyword">LOOP</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  DBMS_OUTPUT<span class="token punctuation">.</span>PUT_LINE<span class="token punctuation">(</span>V_SEQ<span class="token punctuation">(</span>I<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre> <span class="token keyword">END</span> <span class="token keyword">LOOP</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">END</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token comment">-- 2 3 3</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token comment">-- 加上 INDEX BY BINARY_INTEGER 写法</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">DECLARE</span></pre></td></tr><tr><td data-num="23"></td><td><pre> <span class="token keyword">TYPE</span> SEQ_TYPE <span class="token operator">IS</span> <span class="token keyword">TABLE</span> <span class="token keyword">OF</span> NUMBER <span class="token keyword">INDEX</span> <span class="token keyword">BY</span> BINARY_INTEGER<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre> V_SEQ SEQ_TYPE<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">BEGIN</span></pre></td></tr><tr><td data-num="26"></td><td><pre> V_SEQ<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>:<span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre> V_SEQ<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>:<span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre> V_SEQ<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>:<span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre> <span class="token keyword">FOR</span> I <span class="token operator">IN</span> <span class="token number">1.</span><span class="token punctuation">.</span> V_SEQ<span class="token punctuation">.</span>COUNT <span class="token keyword">LOOP</span></pre></td></tr><tr><td data-num="31"></td><td><pre>  DBMS_OUTPUT<span class="token punctuation">.</span>PUT_LINE<span class="token punctuation">(</span>V_SEQ<span class="token punctuation">(</span>I<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre> <span class="token keyword">END</span> <span class="token keyword">LOOP</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token keyword">END</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token comment">-- 2 3 3</span></pre></td></tr></table></figure><ul><li>总结：INDEX BY BINARY_INTEGER</li><li>如果加上的话可以省略 SEQ_TYPE:= SEQ_TYPE () 初始化这个步骤；也不需要每插入一个空间就需要进行 EXTEND**;</li></ul><h3 id="多维数组"><a class="anchor" href="#多维数组">#</a> 多维数组</h3><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">-- 多维数组</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">DECLARE</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">TYPE</span> <span class="token keyword">USER</span> <span class="token operator">IS</span> RECORD<span class="token punctuation">(</span></pre></td></tr><tr><td data-num="4"></td><td><pre>   ID     <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>   NAME   <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>   AGE    NUMBER</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token keyword">TYPE</span> U_TYPE_TAB <span class="token operator">IS</span> <span class="token keyword">TABLE</span> <span class="token keyword">OF</span> <span class="token keyword">USER</span> <span class="token keyword">INDEX</span> <span class="token keyword">BY</span> BINARY_INTEGER<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  USER_REC_ARRAY U_TYPE_TAB<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  USER_REC <span class="token keyword">USER</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">BEGIN</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token comment">-- 1. 插入方式 1：BULK COLLECT INTO</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token keyword">SELECT</span> ID<span class="token punctuation">,</span>NAME<span class="token punctuation">,</span>AGE <span class="token keyword">BULK</span> COLLECT <span class="token keyword">INTO</span> USER_REC_ARRAY <span class="token keyword">FROM</span> <span class="token comment">-- 这里插入数据相当与覆盖，所以使用 BULK COLLECT INT0 后数据还会变化时尽量写在前面。</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token string">'001'</span> ID<span class="token punctuation">,</span><span class="token string">'LAIN'</span> NAME<span class="token punctuation">,</span><span class="token number">16</span> AGE <span class="token keyword">FROM</span> DUAL <span class="token keyword">UNION</span> <span class="token keyword">ALL</span>  <span class="token keyword">SELECT</span> <span class="token string">'002'</span> ID<span class="token punctuation">,</span><span class="token string">'NICO'</span> NAME<span class="token punctuation">,</span> <span class="token number">15</span> AGE <span class="token keyword">FROM</span> DUAL<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token comment">-- 2. 插入方式 2：表达式 形式 赋值</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  USER_REC<span class="token punctuation">.</span>ID:<span class="token operator">=</span> <span class="token string">'005'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  USER_REC<span class="token punctuation">.</span>NAME:<span class="token operator">=</span> <span class="token string">'JACK'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  USER_REC<span class="token punctuation">.</span>AGE:<span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  USER_REC_ARRAY<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>:<span class="token operator">=</span>USER_REC<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>  <span class="token comment">-- 3. 插入方式 3：单格数据插入，这里使用插入相当于吧 JACK 的 ID 替换为 003 了</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token keyword">SELECT</span> <span class="token string">'003'</span> <span class="token keyword">INTO</span> USER_REC_ARRAY<span class="token punctuation">(</span>USER_REC_ARRAY<span class="token punctuation">.</span>COUNT<span class="token punctuation">)</span><span class="token punctuation">.</span>ID <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token comment">/* 4. 插入方式 4：先查询插入，再进行表达式赋值。如果按照下面的写法：</pre></td></tr><tr><td data-num="26"></td><td><pre>     SELECT '004' INTO USER_REC_ARRAY (4).ID FROM DUAL;</pre></td></tr><tr><td data-num="27"></td><td><pre>     USER_REC.NAME:= 'SHARLEY';  USER_REC.AGE:= 18;</pre></td></tr><tr><td data-num="28"></td><td><pre>     USER_REC_ARRAY (4):=USER_REC;</pre></td></tr><tr><td data-num="29"></td><td><pre>     此时 USER_REC 会把当前行覆盖掉，所以这里 004 是被 USER_REC 给覆盖掉了，那么这里的 USER_REC 是没有给 ID 赋值的，取到的值就是上一个赋的值：005</pre></td></tr><tr><td data-num="30"></td><td><pre>     所以先插入的数据 004 会被 下面的表达式覆盖，结果会是：ID: '005', NAME: SHARLEY, AGE：18</pre></td></tr><tr><td data-num="31"></td><td><pre>  */</span></pre></td></tr><tr><td data-num="32"></td><td><pre>  <span class="token comment">-- 只要下面这种插入顺序，结果才会是：ID: 004, NAME: SHARLEY, AGE：18</span></pre></td></tr><tr><td data-num="33"></td><td><pre>  USER_REC<span class="token punctuation">.</span>NAME:<span class="token operator">=</span> <span class="token string">'SHARLEY'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>  USER_REC<span class="token punctuation">.</span>AGE:<span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>  USER_REC_ARRAY<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>NAME:<span class="token operator">=</span>USER_REC<span class="token punctuation">.</span>NAME<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>  USER_REC_ARRAY<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>AGE:<span class="token operator">=</span>USER_REC<span class="token punctuation">.</span>AGE<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>  <span class="token keyword">SELECT</span> <span class="token string">'004'</span> <span class="token keyword">INTO</span> USER_REC_ARRAY<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ID <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre>  <span class="token keyword">FOR</span> I <span class="token operator">IN</span> <span class="token number">1</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> USER_REC_ARRAY<span class="token punctuation">.</span>COUNT <span class="token keyword">LOOP</span></pre></td></tr><tr><td data-num="40"></td><td><pre>    DBMS_OUTPUT<span class="token punctuation">.</span>PUT_LINE<span class="token punctuation">(</span>USER_REC_ARRAY<span class="token punctuation">(</span>I<span class="token punctuation">)</span><span class="token punctuation">.</span>ID <span class="token operator">||</span> <span class="token string">'-'</span> <span class="token operator">||</span> USER_REC_ARRAY<span class="token punctuation">(</span>I<span class="token punctuation">)</span><span class="token punctuation">.</span>NAME <span class="token operator">||</span> <span class="token string">'-'</span> <span class="token operator">||</span> USER_REC_ARRAY<span class="token punctuation">(</span>I<span class="token punctuation">)</span><span class="token punctuation">.</span>AGE<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>  <span class="token keyword">END</span> <span class="token keyword">LOOP</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token keyword">END</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token comment">/*RESULT：</pre></td></tr><tr><td data-num="45"></td><td><pre>001                 -LAIN                -16</pre></td></tr><tr><td data-num="46"></td><td><pre>002                 -NICO                -15</pre></td></tr><tr><td data-num="47"></td><td><pre>003                 -JACK                -17</pre></td></tr><tr><td data-num="48"></td><td><pre>004                 -SHARLEY             -18</pre></td></tr><tr><td data-num="49"></td><td><pre>*/</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;单维数组&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#单维数组&quot;&gt;#&lt;/a&gt; 单维数组&lt;/h3&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;figcaption data-lang=&quot;SQL&quot;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;</summary>
      
    
    
    
    <category term="SQL" scheme="https://nekoaimer.com/categories/SQL/"/>
    
    <category term="Oracle" scheme="https://nekoaimer.com/categories/SQL/Oracle/"/>
    
    
    <category term="SQL" scheme="https://nekoaimer.com/tags/SQL/"/>
    
    <category term="Oracle" scheme="https://nekoaimer.com/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>Node Express Session JWT</title>
    <link href="https://nekoaimer.com/2022/05/14/Node/node-express-session-jwt/"/>
    <id>https://nekoaimer.com/2022/05/14/Node/node-express-session-jwt/</id>
    <published>2022-05-14T13:20:20.000Z</published>
    <updated>2022-05-18T07:57:17.592Z</updated>
    
    <content type="html"><![CDATA[<h2 id="session-认证机制"><a class="anchor" href="#session-认证机制">#</a> <strong>Session</strong> 认证机制</h2><ul><li><p>客户端第一次请求服务器的时候，服务器<strong>通过响应头的形式</strong>，向客户端发送一个身份认证的 Cookie，客户端会自动将 Cookie 保存在浏览器中。</p></li><li><p>随后，当客户端浏览器每次请求服务器的时候，浏览器会<strong>自动</strong>将身份认证相关的 Cookie，<strong>通过请求头的形式</strong>发送给服务器，服务器即可验明客户端的身份。</p></li><li><p>注意：千万不要使用 <code> Cookie 存储重要且隐私的数据！</code> 比如用户的身份信息、密码等。</p></li></ul><h2 id="session-安装"><a class="anchor" href="#session-安装">#</a> Session 安装</h2><ul><li>在 Express 项目中，只需要安装 express-session 中间件，即可在项目中使用 Session 认证</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>npm install express<span class="token operator">-</span>session</pre></td></tr></table></figure><h2 id="session-配置"><a class="anchor" href="#session-配置">#</a> Session 配置</h2><ul><li>具体配置信息详情可查看：<em><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbG9hZGVybWFuL3AvMTE1MDY2ODIuaHRtbA==">https://www.cnblogs.com/loaderman/p/11506682.html</span></em></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 1. 导入 session 中间件</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> session <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express-session'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 配置 Session 中间件</span></pre></td></tr><tr><td data-num="5"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token literal-property property">secret</span><span class="token operator">:</span> <span class="token string">'nekoaimer'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token literal-property property">resave</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token literal-property property">saveUninitialized</span><span class="token operator">:</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="json-配置文件"><a class="anchor" href="#json-配置文件">#</a> JSON 配置文件</h2><figure class="highlight json"><figcaption data-lang="JSON"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"20-express-session"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"01.js"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token property">"keywords"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"ISC"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token property">"express"</span><span class="token operator">:</span> <span class="token string">"^4.18.1"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token property">"express-session"</span><span class="token operator">:</span> <span class="token string">"^1.17.3"</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="pages"><a class="anchor" href="#pages">#</a> Pages</h2><h3 id="indexhtml"><a class="anchor" href="#indexhtml">#</a> index.html</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token operator">&lt;</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token operator">&lt;</span>title<span class="token operator">></span>后台主页<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"./jquery.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token operator">&lt;</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token operator">&lt;</span>h1<span class="token operator">></span>首页<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btnLogout"</span><span class="token operator">></span>退出登录<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token operator">&lt;</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>      <span class="token comment">// 页面加载完成后，自动发起请求，获取用户姓名</span></pre></td></tr><tr><td data-num="20"></td><td><pre>      $<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/api/username'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token comment">//status 为 0 表示获取用户名称成功；否则表示获取用户名称失败！</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>status <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>          <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'您尚未登录，请登录后再执行此操作！'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre>          location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">'./login.html'</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>          <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'欢迎您：'</span> <span class="token operator">+</span> res<span class="token punctuation">.</span>username<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre>      <span class="token comment">// 点击按钮退出登录</span></pre></td></tr><tr><td data-num="31"></td><td><pre>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#btnLogout'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        <span class="token comment">// 发起 POST 请求，退出登录</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/api/logout'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>          <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>            <span class="token comment">// 如果 status 为 0，则表示退出成功，重新跳转到登录页面</span></pre></td></tr><tr><td data-num="36"></td><td><pre>            location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">'./login.html'</span></pre></td></tr><tr><td data-num="37"></td><td><pre>          <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="39"></td><td><pre>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="40"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="41"></td><td><pre>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></pre></td></tr></table></figure><h3 id="loginhtml"><a class="anchor" href="#loginhtml">#</a> login.html</h3><ul><li>这里记得引入 <code>jQuery</code>  文件，获取引入外部文件，用来发送网络请求</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token operator">&lt;</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token operator">&lt;</span>title<span class="token operator">></span>登录页面<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"./jquery.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token operator">&lt;</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 登录表单 <span class="token operator">--</span><span class="token operator">></span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token operator">&lt;</span>form id<span class="token operator">=</span><span class="token string">"form1"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token operator">&lt;</span>div<span class="token operator">></span>账号：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"username"</span> autocomplete<span class="token operator">=</span><span class="token string">"off"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token operator">&lt;</span>div<span class="token operator">></span>密码：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"password"</span> name<span class="token operator">=</span><span class="token string">"password"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token operator">&lt;</span>button<span class="token operator">></span>登录<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token operator">&lt;</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>      <span class="token comment">// 监听表单的提交事件</span></pre></td></tr><tr><td data-num="22"></td><td><pre>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#form1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'submit'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token comment">// 阻止默认提交行为</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token comment">// 发起 POST 登录请求</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/api/login'</span><span class="token punctuation">,</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>          <span class="token comment">//status 为 0 表示登录成功；否则表示登录失败！</span></pre></td></tr><tr><td data-num="28"></td><td><pre>          <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>            location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">'./index.html'</span></pre></td></tr><tr><td data-num="30"></td><td><pre>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'登录失败！'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre>          <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span></pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></pre></td></tr></table></figure><h2 id="session"><a class="anchor" href="#session">#</a> Session</h2><h3 id="routerjs"><a class="anchor" href="#routerjs">#</a> router.js</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">const</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 1. 获取用户姓名接口</span></pre></td></tr><tr><td data-num="6"></td><td><pre>router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/username'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token comment">// TODO-03 从 Session 中获取用户昵称 响应给客户端</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>islogin<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'fail'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token comment">// console.log(req.session);</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'success'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token literal-property property">username</span><span class="token operator">:</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>user<span class="token punctuation">.</span>username</pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">// 2. 登录 API 接口</span></pre></td></tr><tr><td data-num="21"></td><td><pre>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>  <span class="token comment">// 判断用户提交的登录信息是否正确</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>username <span class="token operator">!==</span> <span class="token string">'saber'</span> <span class="token operator">||</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>password <span class="token operator">!==</span> <span class="token string">'2333'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'登陆失败'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre>  <span class="token comment">// TODO-02 将登录成功后的用户信息 保存到 Session 中</span></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token comment">// 注意 只要成功配置了 express-session 这个中间件，req 才有 session 这个属性</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre>  req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>user <span class="token operator">=</span> req<span class="token punctuation">.</span>body <span class="token comment">// 用户信息</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre>  req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>islogin <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// 用户登录状态</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'登陆成功'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token comment">// 3. 退出登录接口</span></pre></td></tr><tr><td data-num="37"></td><td><pre>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/logout'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>  <span class="token comment">// TODO-04 情况 Session 信息</span></pre></td></tr><tr><td data-num="39"></td><td><pre>  req<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="40"></td><td><pre></pre></td></tr><tr><td data-num="41"></td><td><pre>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>    <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="43"></td><td><pre>    <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'退出登录成功'</span></pre></td></tr><tr><td data-num="44"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="46"></td><td><pre></pre></td></tr><tr><td data-num="47"></td><td><pre>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router</pre></td></tr></table></figure><h3 id="indexjs"><a class="anchor" href="#indexjs">#</a> index.js</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//  TODO_01：请配置 Session 中间件</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> session <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express-session'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./router'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">// 托管静态页面</span></pre></td></tr><tr><td data-num="11"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">'./pages'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">// 解析 POST 提交过来的表单数据</span></pre></td></tr><tr><td data-num="14"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">extended</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment">// 具体配置可查看 https://www.cnblogs.com/loaderman/p/11506682.html</span></pre></td></tr><tr><td data-num="17"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token literal-property property">secret</span><span class="token operator">:</span> <span class="token string">'nekoaimer'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token literal-property property">resave</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token literal-property property">saveUninitialized</span><span class="token operator">:</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/api'</span><span class="token punctuation">,</span> router<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8001</span><span class="token punctuation">,</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>console<span class="token punctuation">,</span> <span class="token string">'Express server running at http://127.0.0.1:8001'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="jwt"><a class="anchor" href="#jwt">#</a> JWT</h2><ul><li><p>Session 认证机制需要配合 Cookie 才能实现。由于 Cookie 默认不支持跨域访问，所以，当涉及到前端跨域请求后端接口的时候，<strong>需要做很多额外的配置</strong>，才能实现跨域 Session 认证。注意：</p></li><li><p>当前端请求后端接口<strong>不存在跨域问题</strong>的时候，<strong>推荐使用</strong> <strong>Session</strong> 身份认证机制。</p></li><li><p>当前端需要跨域请求后端接口的时候，不推荐使用 Session 身份认证机制，推荐使用 JWT 认证机制。</p></li><li><p>JWT（英文全称：JSON Web Token）是目前<strong>最流行</strong>的跨域认证解决方案</p></li><li><p>JWT 通常由三部分组成，分别是 Header（头部）、Payload（有效荷载）、Signature（签名）。</p><p>三者之间使用英文的 “.” 分隔，格式如下：</p></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>Header<span class="token punctuation">.</span>Payload<span class="token punctuation">.</span>Signa</pre></td></tr></table></figure><ul><li>下面是 JWT 字符串示例</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9<span class="token punctuation">.</span>eyJ1c2VybmFtZSI6ImFkbWluIiwiaWF0IjoxNjUyODU5MzUxLCJleHAiOjE2NTI4NTkzODF9<span class="token punctuation">.</span>1NwJrUEawaU7VsVyL8<span class="token operator">-</span>s1ybDkoHEn2QHhNhuhXkyDKM</pre></td></tr></table></figure><h2 id="jwt-使用方式"><a class="anchor" href="#jwt-使用方式">#</a> JWT 使用方式</h2><ul><li>客户端收到服务器返回的 JWT 之后，通常会将它储存在 localStorage 或 sessionStorage 中。</li><li>此后，客户端每次与服务器通信，都要带上这个 JWT 的字符串，从而进行身份认证。推荐的做法是<strong>把</strong> <strong>JWT</strong> <strong>放在</strong> <strong>HTTP</strong> <strong>请求头的</strong> <strong>Authorization</strong> <strong>字段中</strong>，格式如下：</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token literal-property property">Authorization</span><span class="token operator">:</span> <span class="token constant">BEARER</span> <span class="token operator">&lt;</span>token<span class="token operator">></span></pre></td></tr></table></figure><h2 id="jwt-安装"><a class="anchor" href="#jwt-安装">#</a> JWT 安装</h2><ul><li><code>jsonwebtoken</code>  用于<strong>生成</strong> <strong>JWT</strong> <strong>字符串</strong></li><li><code>express-jwt</code>  用于<strong>将</strong> <strong>JWT</strong> <strong>字符串解析还原成</strong> <strong>JSON</strong> <strong>对象</strong></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>npm install jsonwebtoken express<span class="token operator">-</span>jwt</pre></td></tr></table></figure><h2 id="导入-jwt"><a class="anchor" href="#导入-jwt">#</a> 导入 JWT</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 1. 导入用于生成 JWT 字符串的包</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'jsonwebtoken'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 2. 导入用于将客户端发送过来的 JWT 字符串 解析还原 JSON 对象的包</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">const</span> expressJWT <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express-jwt'</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="定义-secret-密钥"><a class="anchor" href="#定义-secret-密钥">#</a> 定义 secret 密钥</h2><ul><li>为了保证 JWT 字符串的安全性，防止 JWT 字符串在网络传输过程中被别人破解，我们需要专门定义一个用于<strong>加密</strong>和<strong>解密</strong>的 secret 密钥：</li><li>①当生成 JWT 字符串的时候，需要使用 secret 密钥对用户的信息进行加密，最终得到加密好的 JWT 字符串</li><li>②当把 JWT 字符串解析还原成 JSON 对象的时候，需要使用 secret 密钥进行解密</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> secretKey <span class="token operator">=</span> <span class="token string">'nekoaimer'</span></pre></td></tr></table></figure><h2 id="jwt-案例"><a class="anchor" href="#jwt-案例">#</a> JWT 案例</h2><ul><li>关于 JWT 的案例</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 导入 express 模块</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 创建 express 的服务器实例</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// TODO_01：安装并导入 JWT 相关的两个包，分别是 jsonwebtoken 和 express-jwt</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'jsonwebtoken'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">const</span> expressJWT <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express-jwt'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">// 允许跨域资源共享</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">const</span> cors <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'cors'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token comment">// 解析 post 表单数据的中间件</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">const</span> bodyParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'body-parser'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">extended</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token comment">// TODO_02：定义 secret 密钥，建议将密钥命名为 secretKey</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">const</span> secretKey <span class="token operator">=</span> <span class="token string">'nekoaimer'</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token comment">// TODO_04：注册将 JWT 字符串解析还原成 JSON 对象的中间件</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token comment">// 注意：只要配置成功了 express-jwt 这个中间件，就可以把解析出来的用户信息，挂载到 req.user 属性上</span></pre></td></tr><tr><td data-num="23"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">expressJWT</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">secret</span><span class="token operator">:</span> secretKey <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unless</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\/api\/</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token comment">// 创建 router 路由</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">const</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">function</span> <span class="token function">Router</span><span class="token punctuation">(</span><span class="token parameter">router<span class="token punctuation">,</span> jwt</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>  <span class="token comment">// 登录接口</span></pre></td></tr><tr><td data-num="30"></td><td><pre>  router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/api/login'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token comment">// 将 req.body 请求体中的数据，转存为 userinfo 常量</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token keyword">const</span> userinfo <span class="token operator">=</span> req<span class="token punctuation">.</span>body</pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token comment">// 登录失败</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>userinfo<span class="token punctuation">.</span>username <span class="token operator">!==</span> <span class="token string">'admin'</span> <span class="token operator">||</span> userinfo<span class="token punctuation">.</span>password <span class="token operator">!==</span> <span class="token string">'2333'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>      <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>        <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">400</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="37"></td><td><pre>        <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'登录失败！'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="38"></td><td><pre>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>    <span class="token comment">// 登录成功</span></pre></td></tr><tr><td data-num="41"></td><td><pre>    <span class="token comment">// TODO_03：在登录成功之后，调用 jwt.sign () 方法生成 JWT 字符串。并通过 token 属性发送给客户端</span></pre></td></tr><tr><td data-num="42"></td><td><pre>    <span class="token comment">// 参数 1：用户的信息对象</span></pre></td></tr><tr><td data-num="43"></td><td><pre>    <span class="token comment">// 参数 2：加密的秘钥</span></pre></td></tr><tr><td data-num="44"></td><td><pre>    <span class="token comment">// 参数 3：配置对象，可以配置当前 token 的有效期</span></pre></td></tr><tr><td data-num="45"></td><td><pre>    <span class="token comment">// 记住：千万不要把密码加密到 token 字符中</span></pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token keyword">const</span> tokenStr <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">username</span><span class="token operator">:</span> userinfo<span class="token punctuation">.</span>username <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> secretKey<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">expiresIn</span><span class="token operator">:</span> <span class="token string">'30s'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="47"></td><td><pre>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>      <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="49"></td><td><pre>      <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'登录成功！'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="50"></td><td><pre>      <span class="token literal-property property">token</span><span class="token operator">:</span> tokenStr<span class="token punctuation">,</span> <span class="token comment">// 要发送给客户端的 token 字符串</span></pre></td></tr><tr><td data-num="51"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="52"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="53"></td><td><pre></pre></td></tr><tr><td data-num="54"></td><td><pre>  <span class="token comment">// 这是一个有权限的 API 接口</span></pre></td></tr><tr><td data-num="55"></td><td><pre>  router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/admin/getinfo'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>    <span class="token comment">// TODO_05：使用 req.user 获取用户信息，并使用 data 属性将用户信息发送给客户端</span></pre></td></tr><tr><td data-num="57"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>user<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="58"></td><td><pre>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>      <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="60"></td><td><pre>      <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'获取用户信息成功！'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="61"></td><td><pre>      <span class="token literal-property property">data</span><span class="token operator">:</span> req<span class="token punctuation">.</span>user<span class="token punctuation">,</span> <span class="token comment">// 要发送给客户端的用户信息</span></pre></td></tr><tr><td data-num="62"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="63"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="64"></td><td><pre>  <span class="token keyword">return</span> router</pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="66"></td><td><pre></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token comment">// 使用路由中间件</span></pre></td></tr><tr><td data-num="68"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">Router</span><span class="token punctuation">(</span>router<span class="token punctuation">,</span> jwt<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="69"></td><td><pre></pre></td></tr><tr><td data-num="70"></td><td><pre><span class="token comment">// TODO_06：使用全局错误处理中间件，捕获解析 JWT 失败后产生的错误</span></pre></td></tr><tr><td data-num="71"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="72"></td><td><pre>  <span class="token comment">// 这次错误是由 token 解析失败导致的</span></pre></td></tr><tr><td data-num="73"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">'UnauthorizedError'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="74"></td><td><pre>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="75"></td><td><pre>      <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">401</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="76"></td><td><pre>      <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'无效的token'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="77"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="78"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="79"></td><td><pre>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="80"></td><td><pre>    <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="81"></td><td><pre>    <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'未知的错误'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="82"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="83"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="84"></td><td><pre></pre></td></tr><tr><td data-num="85"></td><td><pre><span class="token comment">// 调用 app.listen 方法，指定端口号并启动 web 服务器</span></pre></td></tr><tr><td data-num="86"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8001</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="87"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Express server running at http://127.0.0.1:8001'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="88"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;session-认证机制&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#session-认证机制&quot;&gt;#&lt;/a&gt; &lt;strong&gt;Session&lt;/strong&gt; 认证机制&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;客户端第一次请求服务器的时候，服务器&lt;strong</summary>
      
    
    
    
    <category term="Node" scheme="https://nekoaimer.com/categories/Node/"/>
    
    
    <category term="Node" scheme="https://nekoaimer.com/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>Node Connect MySQL</title>
    <link href="https://nekoaimer.com/2022/05/13/Node/node-connect-mysql/"/>
    <id>https://nekoaimer.com/2022/05/13/Node/node-connect-mysql/</id>
    <published>2022-05-13T08:50:31.000Z</published>
    <updated>2022-05-17T12:15:20.496Z</updated>
    
    <content type="html"><![CDATA[<h2 id="连接mysql步骤"><a class="anchor" href="#连接mysql步骤">#</a> 连接 MySQL 步骤</h2><ul><li>安装操作 MySQL 数据库的第三方模块（mysql）</li><li>通过 mysql 模块连接到 MySQL 数据库</li><li>通过 mysql 模块执行 SQL 语句</li></ul><h2 id="安装-mysql模块"><a class="anchor" href="#安装-mysql模块">#</a> 安装 MySQL 模块</h2><ul><li>mysql 模块是托管于 npm 上的第三方模块。它提供了在 Node.js 项目中连接和操作 MySQL 数据库的能力。</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>npm install mysql</pre></td></tr></table></figure><h2 id="配置-mysql-模块"><a class="anchor" href="#配置-mysql-模块">#</a> 配置 <strong>MySQL</strong> 模块</h2><ul><li>在使用 mysql 模块操作 MySQL 数据库之前，必须先对 mysql 模块进行必要的配置，主要的配置步骤如下</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 1. 导入 mysql 模块</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mysql'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 2. 建立与 MySQL 数据库连接</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">const</span> db <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createPool</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>   <span class="token comment">// 数据库的 IP 地址</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    </pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">3306</span><span class="token punctuation">,</span>    <span class="token comment">// 端口号</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>        <span class="token comment">// 登录数据库的账号</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">'2333'</span><span class="token punctuation">,</span>    <span class="token comment">// 登录数据库的密码</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    </pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token literal-property property">database</span><span class="token operator">:</span> <span class="token string">'my_db_01'</span> <span class="token comment">// 指定要操作的数据库</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><ul><li><code>具体配置参考：</code> <span class="exturl" data-url="aHR0cHM6Ly93d3cucnVub29iLmNvbS9ub2RlanMvbm9kZWpzLW15c3FsLmh0bWw=">Node.js 连接 MySQL | 菜鸟教程 (runoob.com)</span></li></ul><h2 id="测试连接是否成功"><a class="anchor" href="#测试连接是否成功">#</a> 测试连接是否成功</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'select 0'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> results</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">//mysql 模块报错 </span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    </pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">// 只要能答应出 [RowDataPacket &#123; '0': 0&#125; ] 就证明数据库连接正常</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="连接发生的错误"><a class="anchor" href="#连接发生的错误">#</a> 连接发生的错误</h2><ul><li><p><code>ER_NOT_SUPPORTED_AUTH_MODE Client does not support authentication protocol...</code></p></li><li><p><code>ER_ACCESS_DENIED_ERROR: Access denied for user 'root'@'localhost' (using password: YES)</code></p></li><li><p><code>当发生类似上面的错误时，可以参考</code> ：</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlaWxlaV9fNjYvYXJ0aWNsZS9kZXRhaWxzLzExMDY3NDQ2Mg==">https://blog.csdn.net/leilei__66/article/details/110674462</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L09DRUFOX0MvYXJ0aWNsZS9kZXRhaWxzLzg5NzE5NTc4">https://blog.csdn.net/OCEAN_C/article/details/89719578</span></li></ul></li><li><p>具体代码如下</p></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"><span>cmd</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token constant">ALTER</span> <span class="token constant">USER</span> <span class="token string">'root'</span>@<span class="token string">'localhost'</span> <span class="token constant">IDENTIFIED</span> <span class="token constant">WITH</span> mysql_native_password <span class="token constant">BY</span> <span class="token string">'password'</span><span class="token punctuation">;</span></pre></td></tr></table></figure><figure class="highlight js"><figcaption data-lang="JavaScript"><span>cmd</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token constant">FLUSH</span> <span class="token constant">PRIVILEGES</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>##　查询数据</p><ul><li>查询 <code>users</code>  表的所有数据</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">select * from users</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> results<span class="token punctuation">,</span> fields</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token comment">// 如果执行的时 select 查询语句， 则执行的结果是数组 </span></pre></td></tr><tr><td data-num="5"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="插入数据"><a class="anchor" href="#插入数据">#</a> 插入数据</h2><h3 id="占位符方式"><a class="anchor" href="#占位符方式">#</a> <em>占位符方式</em></h3><ul><li>向 <code>users</code>  表插入数据</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 1. 需要插入到 users 表的数据对象</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">'saber'</span><span class="token punctuation">,</span> <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">'12345'</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 2. 定义 SQL 语句 其中 英文？表示占位符</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">const</span> sqlStr <span class="token operator">=</span> <span class="token string">'insert into users (username, password) values(?, ?)'</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 3. 执行 SQL 语句 使用数组形式依次为？占位符指定具体值</span></pre></td></tr><tr><td data-num="8"></td><td><pre>db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sqlStr<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> results</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 失败</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token comment">// 4. 如果执行的时 select 查询语句， 则执行的结果是数组 </span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>results<span class="token punctuation">.</span>affectedRows <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="13"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Data Is inserted successfully.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="便携方式"><a class="anchor" href="#便携方式">#</a> <em>便携方式</em></h3><ul><li>向表中新增数据时，如果数据对象的每个属性和数据表的字段<strong>一一对应</strong>，如下方式快速插入数据：</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 1. 需要插入到 users 表的数据对象</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">'YDMY'</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 2. 定义 SQL 语句 </span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">const</span> sqlStr <span class="token operator">=</span> <span class="token string">'insert into users set ?'</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 3. 执行 SQL 语句 使用数组形式依次为？占位符指定具体值</span></pre></td></tr><tr><td data-num="8"></td><td><pre>db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sqlStr<span class="token punctuation">,</span> user<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> results</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 失败</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token comment">// 4. 如果执行的时 select 查询语句， 则执行的结果是数组 </span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>results<span class="token punctuation">.</span>affectedRows <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Data Is inserted successfully.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="更新数据"><a class="anchor" href="#更新数据">#</a> 更新数据</h2><h3 id="占位符方式-2"><a class="anchor" href="#占位符方式-2">#</a> <em>占位符方式</em></h3><ul><li>更新 <code>users</code>  表中已有的数据</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 更新的数据 注意 更新需要原来的数据有 id 为 1 的值才能进行更新</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">'稚名真白'</span><span class="token punctuation">,</span> <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">'ZMZB'</span><span class="token punctuation">,</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 定义 SQL 语句</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">const</span> sqlStr <span class="token operator">=</span> <span class="token string">'update users set username=?, password=? where id=?'</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 执行 SQL 语句</span></pre></td></tr><tr><td data-num="8"></td><td><pre>db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sqlStr<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> results</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token comment">// 注意 执行了 update 语句后，执行结果也是一个对象 可以通过 affectedRows 判断是否更新成功</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>results<span class="token punctuation">.</span>affectedRows <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Data updated successfully.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="便携方式-2"><a class="anchor" href="#便携方式-2">#</a> <em>便携方式</em></h3><ul><li>更新表数据时，如果数据对象的每个属性和数据表的字段<strong>一一对应</strong>，如下方式快速更新表数据</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 更新的数据 注意 更新需要原来的数据有 id 为 1 的值才能进行更新</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">'稚名真白'</span><span class="token punctuation">,</span> <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">'ZMZB'</span><span class="token punctuation">,</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 定义 SQL 语句</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">const</span> sqlStr <span class="token operator">=</span> <span class="token string">'update users set ? where id=?'</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 执行 SQL 语句</span></pre></td></tr><tr><td data-num="8"></td><td><pre>db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sqlStr<span class="token punctuation">,</span> <span class="token punctuation">[</span>user<span class="token punctuation">,</span> user<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> results</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>results<span class="token punctuation">.</span>affectedRows <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Data updated successfully.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="删除数据"><a class="anchor" href="#删除数据">#</a> 删除数据</h2><ul><li>在删除数据时，推荐使用唯一标识如 <code>id</code>  这样的，来删除对应的数据。</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 删除 id 为 1 的用户</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> sqlStr <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">delete from users where id=?</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sqlStr<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> results</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token comment">// 注意 执行 delete 语句之后 结果也是一个对象， 也包含 affectedRows 属性</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>results<span class="token punctuation">.</span>affectedRows <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Data deleted successfully.'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="标记删除"><a class="anchor" href="#标记删除">#</a> 标记删除</h2><ul><li>使用 DELETE 语句，会把真正的把数据从表中删除掉。为了保险起见， <code>推荐使用</code> 标记删除的形式，来 <code>模拟删除的动作</code> 。</li><li>所谓的标记删除，就是在表中设置类似于  <code>status</code>  这样的 <code>状态字段</code> ，来 <code>标记</code> 当前这条数据是否被删除。</li><li>当用户执行了删除的动作时，我们并没有执行 DELETE 语句把数据删除掉，而是执行了 UPDATE 语句，将这条数据对应的 status 字段标记为删除即可。</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 标记删除</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> sqlStr <span class="token operator">=</span> <span class="token string">'update users set status=? where id=?'</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 将 id 为 1 的用户 标记删除 </span></pre></td></tr><tr><td data-num="5"></td><td><pre>db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sqlStr<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> results</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>results<span class="token punctuation">.</span>affectedRows <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Data marker deleted successfully.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;连接mysql步骤&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#连接mysql步骤&quot;&gt;#&lt;/a&gt; 连接 MySQL 步骤&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;安装操作 MySQL 数据库的第三方模块（mysql）&lt;/li&gt;
&lt;li&gt;通过 mysql 模块连接到 M</summary>
      
    
    
    
    <category term="Node" scheme="https://nekoaimer.com/categories/Node/"/>
    
    
    <category term="Node" scheme="https://nekoaimer.com/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>Node CORS-JSONP</title>
    <link href="https://nekoaimer.com/2022/05/08/Node/node-cors-jsonp/"/>
    <id>https://nekoaimer.com/2022/05/08/Node/node-cors-jsonp/</id>
    <published>2022-05-08T06:01:27.000Z</published>
    <updated>2022-05-18T00:46:09.296Z</updated>
    
    <content type="html"><![CDATA[<h2 id="cors-中间件"><a class="anchor" href="#cors-中间件">#</a> CORS 中间件</h2><ul><li><p>解决接口跨域问题的方案主要有两种：</p></li><li><p>CORS （主流的解决方案 推荐使用）</p></li><li><p>JSONP （有缺陷的解决方案：只支持 GET 请求）</p></li><li><p>cors 是 Express 的一个第三方中间件。通过安装和配置 cors 中间件，可以很方便地解决跨域问题，如下</p></li><li><p><code>router.js</code></p></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/get'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/get'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">const</span> query <span class="token operator">=</span> req<span class="token punctuation">.</span>query</pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token literal-property property">data</span><span class="token operator">:</span> query<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'GET请求成功'</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/post'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token keyword">const</span> body <span class="token operator">=</span> req<span class="token punctuation">.</span>body</pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token literal-property property">data</span><span class="token operator">:</span> body<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'POST请求成功'</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router</pre></td></tr></table></figure><ul><li><code>index.js</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./router'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">extended</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 必须在路由之前 配置 cors 中间件， 解决接口跨域问题</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">const</span> cors <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'cors'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/api'</span><span class="token punctuation">,</span> router<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8001</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="cors-的注意事项"><a class="anchor" href="#cors-的注意事项">#</a> CORS 的注意事项</h2><ul><li>CORS 主要在 服务器端 进行配置。客户端浏览器 无须做任何额外的配置 ，即可请求开启了 CORS 的接口。</li><li>CORS 在浏览器中 有兼容性 。只有支持 XMLHttpRequest Level2 的浏览器，才能正常访问开启了 CORS 的服</li><li>务端接口（例如： IE10+ 、 Chrome4+ 、 FireFox3.5+FireFox3.5+）</li></ul><h2 id="cors-响应头部"><a class="anchor" href="#cors-响应头部">#</a> CORS 响应头部</h2><h3 id="access-control-allow-origin"><a class="anchor" href="#access-control-allow-origin">#</a> Access Control Allow Origin</h3><ul><li>响应头部中可以携带一个 Access Control Allow Origin 字段，语法如下</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>Access<span class="token operator">-</span>Control<span class="token operator">-</span>Allow<span class="token operator">-</span>Origin<span class="token operator">:</span> <span class="token operator">&lt;</span>origin<span class="token operator">></span> <span class="token operator">|</span> <span class="token operator">*</span></pre></td></tr></table></figure><ul><li>其中，origin 参数的值指定了 允许访问该资源的外域 URL 。</li><li>例如，下面的字段值将只允许 来自 <code>https://nekoaimer.com</code>  的请求</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Origin'</span><span class="token punctuation">,</span> <span class="token string">'https://nekoaimer.com'</span><span class="token punctuation">)</span></pre></td></tr></table></figure><ul><li>如果指定了 Access Control Allow Origin 字段的值为 通配符 **，表示允许来自任何域的请求，如下</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Origin'</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="access-control-allow-headers"><a class="anchor" href="#access-control-allow-headers">#</a> Access Control Allow Headers</h3><ul><li>默认情况下，CORS 仅 支持 客户端向服务器 发送如下的 9 个 请求头</li><li>Accept、 Accept Language 、 Content Language 、 DPR 、 Downlink 、 Save Data 、 Viewport Width 、 Width 、Content Type （值仅限于 text/plain 、 multipart/form data 、 application/x www form urlencoded 三者之一）</li><li>如果客户端向服务器发送了额外的请求头信息 ，则需要在 服务器端 ，通过 Access Control Allow Headers 对额外的请求头进行声明 ，否则这次请求会失败</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 允许客户端额外向服务器发送 Content-Type 请求体 和 X-Custom-Header 请求体</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 注意 多个请求头直接用英文逗号进行分隔</span></pre></td></tr><tr><td data-num="4"></td><td><pre>res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Headers'</span><span class="token punctuation">,</span> <span class="token string">'Content-Type, X-Custom-Header'</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="access-control-allow-methods"><a class="anchor" href="#access-control-allow-methods">#</a> Access Control Allow Methods</h3><ul><li>默认情况下，CORS 仅支持客户端发起 GET 、 POST 、 HEAD 请求。</li><li>如果客户端希望通过 <code>PUT 、 DELETE </code> 等方式请求服务器的资源，则需要在服务器端，通过  <code>Access Control Alow Methods</code>  来  <code>指明实际请求所允许使用的 HTTP 方法 </code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 只允许 POST GET DELETE HEAD 请求方法</span></pre></td></tr><tr><td data-num="2"></td><td><pre>res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Methods'</span><span class="token punctuation">,</span> <span class="token string">'POST, GET, DELETE, HEAD'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 支持所有的 HTTP 请求方法</span></pre></td></tr><tr><td data-num="5"></td><td><pre>res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Methods'</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="cors-请求分类"><a class="anchor" href="#cors-请求分类">#</a> CORS 请求分类</h2><h3 id="简单请求"><a class="anchor" href="#简单请求">#</a> 简单请求</h3><ul><li>同时满足以下两大条件的请求，就属于简单请求：<ul><li>请求方式 GET 、 POST 、 HEAD 三者之一</li><li>HTTP 头部信息 不超过以下几种字段： 无自定义头部字段 、 Accept 、 Accept Language 、 Content Language 、 DPR 、Downlink 、 Save Data 、 Viewport Width 、 Width 、 Content Type （只有三个值 application/x www form、urlencoded 、 multipart/form data 、 text/plain</li></ul></li></ul><h3 id="预检请求"><a class="anchor" href="#预检请求">#</a> 预检请求</h3><ul><li>只要符合以下任何一个条件的请求，都需要进行预检请求：<ul><li>请求方式为 GET 、 POST 、 HEAD 之外的请求 Method 类型</li><li>请求头中 包含自定义头部字段</li><li>向服务器发送 了 application/json 格式的数据</li></ul></li><li>在浏览器与服务器正式通信之前，浏览器会先发送 OPTION 请求进行预检，以获知服务器是否允许该实际请求 ，所以这一次的 OPTION 请求称为 “预检请求”。 服务器成功响应预检请求后，才会发送真正的请求，并且携带真实数据 。</li></ul><h3 id="请求区别"><a class="anchor" href="#请求区别">#</a> 请求区别</h3><ul><li>简单请求的特点：客户端与服务器之间 只会发生一次请求 。</li><li>预检请求的特点：客户端与服务器之间会发生两次请求 OPTION 预检请求成功之后，才会发起真正的请求 。</li></ul><h2 id="jsonp-概念与特点"><a class="anchor" href="#jsonp-概念与特点">#</a> JSONP 概念与特点</h2><ul><li><p>概念：浏览器端通过 &lt;script&gt; 标签的 src 属性，请求服务器上的数据，同时，服务器返回一个函数的调用。这种请求数据的方式叫做 JSONP 。</p></li><li><p>特点</p><ul><li>JSONP 不属于真正的 Ajax 请求，因为它没有使用 XMLHttpRequest 这个对象。</li><li>JSONP 仅支持 GET 请求，不支持 POST 、 PUT 、 DELETE 等请求。</li></ul></li><li><p>创建 JSONP 接口的注意事项</p><ul><li><p>如果项目中已经配置了 CORS 跨域资源共享，为了 防止冲突 必须在配置 CORS 中间件之前声明 JSONP 的接口 。否则</p></li><li><p>JSONP 接口会被处理成开启了 CORS 的接口</p></li></ul></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 优先创建 JSONP 接口 这个接口不会被处理成 CORS 接口</span></pre></td></tr><tr><td data-num="2"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/api/jsonp'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 再配置 CORS 中间件 后续所有接口都会被处理成 CORS 接口</span></pre></td></tr><tr><td data-num="5"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 这是一个开启了 CORS 的接口</span></pre></td></tr><tr><td data-num="8"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/api/get'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="jsonp-接口实现步骤"><a class="anchor" href="#jsonp-接口实现步骤">#</a> JSONP 接口实现步骤</h2><ul><li>获取客户端发送过来的 回调函数的名字</li><li>得到要通过 JSONP 形式 发送给客户端的数据</li><li>根据前两步得到的数据， 拼接出一个函数调用的字符串</li><li>把上一步拼接得到的字符串，响应给客户端的 &lt;script&gt;</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 必须艾配置 cors 中间件之前 配置 JSONP 接口</span></pre></td></tr><tr><td data-num="2"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/api/jsonp'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token comment">// TODO 定义 JSONP 接口具体实现过程</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token comment">// 1. 得到函数的名称</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">const</span> funcName <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>callback</pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token comment">// 2. 定义要发送到客户端的数据对象</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'saber'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token comment">// 3. 拼接出一个函数的调用</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token keyword">const</span> scriptStr <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>funcName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token comment">// 4. 把拼接的字符串 响应给客户端</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>scriptStr<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="getpostjsonp-测试"><a class="anchor" href="#getpostjsonp-测试">#</a> GET/POST/JSONP 测试</h2><h3 id="routerjs"><a class="anchor" href="#routerjs">#</a> router.js</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/get'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token literal-property property">data</span><span class="token operator">:</span> req<span class="token punctuation">.</span>query<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'GET请求成功'</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/post'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token literal-property property">data</span><span class="token operator">:</span> req<span class="token punctuation">.</span>body<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'POST请求成功'</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>router<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">'/delete'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token literal-property property">data</span><span class="token operator">:</span> req<span class="token punctuation">.</span>body<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'DELETE请求成功'</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router</pre></td></tr></table></figure><h3 id="indexjs"><a class="anchor" href="#indexjs">#</a> index,js</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./router'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">extended</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 必须艾配置 cors 中间件之前 配置 JSONP 接口</span></pre></td></tr><tr><td data-num="8"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/api/jsonp'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token comment">// TODO 定义 JSONP 接口具体实现过程</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token comment">// 1. 获取客户端发送过来的回调函数的名称</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token keyword">const</span> funcName <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>callback</pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token comment">// 2. 定义要发送到客户端的数据对象</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'saber'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token comment">// 3. 拼接出一个函数调用的字符串</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token keyword">const</span> scriptStr <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>funcName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="18"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>scriptStr<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token comment">// 4. 把拼接的字符串 响应给客户端 &lt;script></span></pre></td></tr><tr><td data-num="21"></td><td><pre>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>scriptStr<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token comment">// 必须在路由之前 配置 cors 中间件， 解决接口跨域问题</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">const</span> cors <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'cors'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/api'</span><span class="token punctuation">,</span> router<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8001</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="indexhtml"><a class="anchor" href="#indexhtml">#</a> index.html</h3><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>core-jsop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/jquery/1.10.0/jquery.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btnGET<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>GET<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btnPOST<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>POST<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btnDELETE<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>DELETE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btnJSONP<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>JSONP<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#btnGET'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>          <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="22"></td><td><pre>          <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">'http://127.0.0.1:8001/api/get'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="23"></td><td><pre>          <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'saber'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="26"></td><td><pre>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="27"></td><td><pre>          <span class="token function">success</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>          <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#btnPOST'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>          <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="36"></td><td><pre>          <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">'http://127.0.0.1:8001/api/post'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="37"></td><td><pre>          <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'saber'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="39"></td><td><pre>            <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="40"></td><td><pre>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="41"></td><td><pre>          <span class="token function">success</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>          <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="45"></td><td><pre>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="46"></td><td><pre></pre></td></tr><tr><td data-num="47"></td><td><pre>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#btnDELETE'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>        $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>          <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'DELETE'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="50"></td><td><pre>          <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">'http://127.0.0.1:8001/api/delete'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="51"></td><td><pre>          <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'saber'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="53"></td><td><pre>            <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="54"></td><td><pre>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="55"></td><td><pre>          <span class="token function">success</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>          <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="59"></td><td><pre>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="60"></td><td><pre></pre></td></tr><tr><td data-num="61"></td><td><pre>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#btnJSONP'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>        $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>          <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'JSONP'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="64"></td><td><pre>          <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">'http://127.0.0.1:8001/api/jsonp'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="65"></td><td><pre>          <span class="token literal-property property">dataType</span><span class="token operator">:</span> <span class="token string">'jsonp'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="66"></td><td><pre>          <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="67"></td><td><pre>            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'saber'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="68"></td><td><pre>            <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="69"></td><td><pre>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="70"></td><td><pre>          <span class="token function">success</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="71"></td><td><pre>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>success<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="72"></td><td><pre>          <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="73"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="74"></td><td><pre>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="75"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="76"></td><td><pre>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="77"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="78"></td><td><pre></pre></td></tr><tr><td data-num="79"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;cors-中间件&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#cors-中间件&quot;&gt;#&lt;/a&gt; CORS 中间件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;解决接口跨域问题的方案主要有两种：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CORS （主流的解决方案 推荐使用</summary>
      
    
    
    
    <category term="Node" scheme="https://nekoaimer.com/categories/Node/"/>
    
    
    <category term="Node" scheme="https://nekoaimer.com/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>Node Middleware</title>
    <link href="https://nekoaimer.com/2022/05/05/Node/node-express-middleware/"/>
    <id>https://nekoaimer.com/2022/05/05/Node/node-express-middleware/</id>
    <published>2022-05-05T04:16:40.000Z</published>
    <updated>2022-05-16T06:03:51.879Z</updated>
    
    <content type="html"><![CDATA[<h2 id="express-中间件"><a class="anchor" href="#express-中间件">#</a> Express 中间件</h2><ul><li>Express 中间件，本质是一个处理函数</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'experss'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8001</span><span class="token punctuation">)</span></pre></td></tr></table></figure><ul><li>中间件函数的形参中，必须包含 <code>next</code>  参数。而路由处理函数中只包含 <code>req</code>  和 <code>res</code></li></ul><h2 id="全局生效的中间件"><a class="anchor" href="#全局生效的中间件">#</a> 全局生效的中间件</h2><ul><li>客户端发起的任何请求，到达服务器之后，都会触发的中间件，叫做全局生效的中间件</li><li>通过调用 <code>app.use(中间件函数)</code> ，即可定义一个全局生效的中间件，如下也可以同时定义多个中间件，客户端请求到达服务器之后，会按照中间件定义顺序先后执行</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> <span class="token function-variable function">mw1</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第一个中间件'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token comment">// 把流转关系，转交给下一个中间件或路由</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">const</span> <span class="token function-variable function">mw2</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第二个中间件'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token comment">// 把流转关系，转交给下一个中间件或路由</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>mw1<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>mw2<span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="局部生效的中间件"><a class="anchor" href="#局部生效的中间件">#</a> 局部生效的中间件</h2><ul><li>不使用 <code>app.use()</code>  定义的中间件，称作局部生效的中间件，如下</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 定义中间件函数</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> <span class="token function-variable function">mw1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'中间件调用'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">//mv1 中间件只在当前路由生效 也就是局部生效的中间件</span></pre></td></tr><tr><td data-num="8"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> mw1<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Home'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment">//mv1 中间件不会印象下面路由</span></pre></td></tr><tr><td data-num="13"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'User'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><ul><li>同时使用多个中间件</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">const</span> <span class="token function-variable function">mw1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这是第一个中间件'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">const</span> <span class="token function-variable function">mw2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这是第二个中间件'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> mw1<span class="token punctuation">,</span> mw2<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Home'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'User'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8001</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:8001'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><ul><li>关于中间件的 5 个使用注意事项</li><li>一定要在 <code>路由之前</code> 注册中间件</li><li>客户端发送过来的请求， <code>可以连续调用多个</code> 中间件进行处理</li><li>执行完中间件的业务代码之后 z <code>不要忘记调用 next() 函数</code></li><li>为了 <code>防止代码逻辑混乱</code>  ，调用 next () 函数后不要再写额外的代码</li><li>连续调用多个中间件时，多个中间件之间， <code>共享</code>  s req 和 res 对象</li></ul><h2 id="express-中间件的分类"><a class="anchor" href="#express-中间件的分类">#</a> Express 中间件的分类</h2><h3 id="应用级别的中间件"><a class="anchor" href="#应用级别的中间件">#</a> 应用级别的中间件</h3><ul><li>通过 app.use () 或 app.get () 或 app.post () ，绑定到 app 实例上的中间件，叫做应用级别的中间件，如下：</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 应用基本的中间件 (全局中间件)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 应用结拜的中间件 (局部中间件)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> mw<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Hello World'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="路由级别的中间件"><a class="anchor" href="#路由级别的中间件">#</a> 路由级别的中间件</h3><ul><li>绑定到 express.Router () 实例上的中间件，叫做路由级别的中间件。它的用法和应用级别中间件没有任何区别。只不过，应用级别中间件是绑定到 app 实例上，路由级别中间件绑定到 router 实例上，如下：</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 路由基本的中间件</span></pre></td></tr><tr><td data-num="5"></td><td><pre>router<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> router<span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="错误级别的中间件"><a class="anchor" href="#错误级别的中间件">#</a> 错误级别的中间件</h3><ul><li>错误级别中间件的 function 处理函数中，必须有 4 个形参，形参顺序从前到后，分别是 (err, req, res, next)。</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>     <span class="token comment">// 路由</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'服务器内部发生了错误！'</span><span class="token punctuation">)</span> <span class="token comment">// 抛出自定义错误</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Hello World'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 错误级别的中间件</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>`发生了错误<span class="token operator">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>`<span class="token punctuation">)</span>   <span class="token comment">// 在服务器打印错误消息</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Error~'</span> <span class="token operator">+</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>        <span class="token comment">// 向客户端响应错误相关的内容</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><ul><li>注意错误级别中间件， <code>必须注册在所以路由之后</code></li></ul><h3 id="express内置的中间件"><a class="anchor" href="#express内置的中间件">#</a> Express 内置的中间件</h3><ul><li>自 Express 4.16.0 版本开始，Express 内置了 3 个常用的中间件，极大的提高了 Express 项目的开发效率和体验：</li><li>express.static 快速托管静态资源的内置中间件，例如： HTML 文件、图片、CSS 样式等（无兼容性）</li><li>express.json 解析 JSON 格式的请求体数据（有兼容性，仅在 4.16.0+ 版本中可用）</li><li>express.urlencoded 解析 URL-encoded 格式的请求体数据（有兼容性，仅在 4.16.0+ 版本中可用）</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 配置解析 application/json 格式数据的内置中间件</span></pre></td></tr><tr><td data-num="2"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 配置解析 application/x-www-form-urlencoded</span></pre></td></tr><tr><td data-num="5"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">extended</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h4 id="expressjson"><a class="anchor" href="#expressjson">#</a> express.json</h4><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 注意 处理错误级别中间件 其他中间件必须在路由之前进行配置</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// 通过 express.json () 这个中间件，解析表单中的 JSON 格式数据</span></pre></td></tr><tr><td data-num="7"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'ok'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8001</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>####　express.urlencoded</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 通过 express.urlencoded () 这个中间件，解析表单中的 url-encoded 格式数据</span></pre></td></tr><tr><td data-num="6"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">extended</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/book'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8001</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="第三方的中间件"><a class="anchor" href="#第三方的中间件">#</a> 第三方的中间件</h3><ul><li><p>非 Express 官方内置的，而是由第三方开发出来的中间件，叫做第三方中间件。在项目中，大家可以按需下载并配置第三方中间件，从而提高项目的开发效率。</p></li><li><p>例如：在 express@4.16.0 之前的版本中，经常使用 body-parser 这个第三方中间件，来解析请求体数据。使用步骤如下：</p></li><li><p>运行 npm install body-parser 安装中间件</p></li><li><p>使用 require 导入中间件</p></li><li><p>调用 app.use () 注册并使用中间件</p></li><li><p>注意 Express 内置的 express.urlencoded 中间件，就是基于 body-parser 这个第三方中间件进一步封装出来的。</p></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 导入解析表单数据的中间件 body-parser </span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">const</span> parser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'body-parser'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// 使用 app.use 注册中间件</span></pre></td></tr><tr><td data-num="9"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>parser<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">extended</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token comment">// 如果没有配置任何解析表单数据的中间件 则 req.body 默认是 undefined</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'ok'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8001</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="自定义中间件"><a class="anchor" href="#自定义中间件">#</a> 自定义中间件</h2><ul><li>自己手动模拟一个类似于 express.urlencoded 这样的中间件，来解析 POST 提交到服务器的表单数据。</li><li>实现步骤：<ul><li>定义中间件</li><li>监听 req 的 data 事件</li><li>监听 req 的 end 事件</li><li>使用 querystring 模块解析请求体数据</li><li>将解析出来的数据对象挂载为 req.body</li><li>将自定义中间件封装为模块</li></ul></li></ul><h3 id="封装中间件函数"><a class="anchor" href="#封装中间件函数">#</a> 封装中间件函数</h3><ul><li><p>在中间件中，需要监听 req 对象的 data 事件，来获取客户端发送到服务器的数据。</p></li><li><p>如果数据量比较大，无法一次性发送完毕，则客户端会把数据切割后，分批发送到服务器。所以 data 事件可能会触发多次，每一次触发 data 事件时，获取到数据只是完整数据的一部分，需要手动对接收到的数据进行拼接。</p></li><li><p>当请求体数据接收完毕之后，会自动触发  <code>req</code>  的  <code>end</code>  事件。</p></li><li><p><code>customBodyParser.js</code></p></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 1. 导入 Node 内置的 querystring 模块</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> querystring <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'querystring'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">''</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token comment">// 2. 监听 req data 事件 (客户端发送过来的新的请求体数据)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token parameter">chunk</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    str <span class="token operator">+=</span> chunk</pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token comment">// 3. 监听 req end 事件 (请求体发送完毕后自动触发)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token comment">// TODO: 把字符串格式的请求体数据 解析为对象格式</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    req<span class="token punctuation">.</span>body <span class="token operator">=</span> querystring<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 不要忘记 next 哦</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="使用封装的函数"><a class="anchor" href="#使用封装的函数">#</a> 使用封装的函数</h3><ul><li><code>index.js</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 1. 导入 express 模块</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 2. 导入 封装的 自定义 中间件模块</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">const</span> customBodyParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./customBodyParser'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 3. 创建 express 服务器实例</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">// 4. 使用 app.use 定义全局生效用来解析数据的中间件</span></pre></td></tr><tr><td data-num="11"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>customBodyParser<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8001</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="express-写接口"><a class="anchor" href="#express-写接口">#</a> Express 写接口</h2><h3 id="get-接口"><a class="anchor" href="#get-接口">#</a> GET 接口</h3><ul><li><code>router.js</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// TODO GET 接口</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">const</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// 挂载对应的路由</span></pre></td></tr><tr><td data-num="7"></td><td><pre>router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/get'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token comment">// 通过 req.query 获取客户端查询字符串 发送到服务器数据</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">const</span> query <span class="token operator">=</span> req<span class="token punctuation">.</span>query</pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token comment">// 调用 res.send 方法 向客户端响应处理的结果</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>       <span class="token comment">// 状态码</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token literal-property property">data</span><span class="token operator">:</span> query<span class="token punctuation">,</span>       <span class="token comment">// 相应给客户端的数据</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'GET请求成功'</span>  <span class="token comment">// 状态描述</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router</pre></td></tr></table></figure><ul><li><code>index.js</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./router'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 创建 express 实例</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 注册路由模块到 app 上</span></pre></td></tr><tr><td data-num="8"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/api'</span><span class="token punctuation">,</span> router<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">// 启动服务器</span></pre></td></tr><tr><td data-num="11"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8001</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="post-接口"><a class="anchor" href="#post-接口">#</a> POST 接口</h3><ul><li><code>router.js</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// TODO POST 接口</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">const</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// 挂载对应的路由</span></pre></td></tr><tr><td data-num="7"></td><td><pre>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/post'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token comment">// 通过 req.query 获取客户端查询字符串 发送到服务器数据</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">const</span> body <span class="token operator">=</span> req<span class="token punctuation">.</span>body</pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token comment">// 调用 res.send 方法 向客户端响应处理的结果</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>       <span class="token comment">// 状态码</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token literal-property property">data</span><span class="token operator">:</span> body<span class="token punctuation">,</span>        <span class="token comment">// 相应给客户端的数据</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'POST请求成功'</span>  <span class="token comment">// 状态描述</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router</pre></td></tr></table></figure><ul><li><code>index.js</code></li><li>注意 如果要获取 URL-encoded 格式的请求体数据，必须配置中间件  <code>app.use(express.urlencoded(&#123; extended: false &#125;))</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./router'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 创建 express 实例</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 配置解析表单数据中间件</span></pre></td></tr><tr><td data-num="8"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">extended</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">// 注册路由模块到 app 上</span></pre></td></tr><tr><td data-num="11"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/api'</span><span class="token punctuation">,</span> router<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">// 启动服务器</span></pre></td></tr><tr><td data-num="14"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8001</span><span class="token punctuation">)</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;express-中间件&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#express-中间件&quot;&gt;#&lt;/a&gt; Express 中间件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Express 中间件，本质是一个处理函数&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;h</summary>
      
    
    
    
    <category term="Node" scheme="https://nekoaimer.com/categories/Node/"/>
    
    
    <category term="Node" scheme="https://nekoaimer.com/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>Node Express</title>
    <link href="https://nekoaimer.com/2022/05/01/Node/node-express/"/>
    <id>https://nekoaimer.com/2022/05/01/Node/node-express/</id>
    <published>2022-05-01T12:11:35.000Z</published>
    <updated>2022-05-15T04:17:30.772Z</updated>
    
    <content type="html"><![CDATA[<h2 id="express-基本使用"><a class="anchor" href="#express-基本使用">#</a> Express 基本使用</h2><ul><li>创建基本的 Web 服务器</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 1. 导入 express</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 2. 创建 web 服务器</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 3. 调用 app.listen (端口号，启动成功后的回调函数) 启动服务器</span></pre></td></tr><tr><td data-num="8"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'express server running at http://127.0.0.1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="监听getpost请求"><a class="anchor" href="#监听getpost请求">#</a> 监听 GET/POST 请求</h2><ul><li>通过 <code>app.get()||app.post()</code> , 可以监听客户端的 GET 请求，具体格式如下</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 参数一 客户端请求的 URL 地址</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// 参数二 请求对应的处理函数</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">//   req 请求对象 (包含了与请求相关的属性与方法)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">//   res 响应对象 (包含了与响应相关的属性与方法)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'URL'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'express server running at http://127.0.0.1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'URL'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'express server running at http://127.0.0.1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><ul><li>通过 <code>res.send()</code>  方法，可以把处理好的内容，发送给客户端</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">// 调用 express 提供的 res.send () 方法 向客户端响应一个 JSON 对象</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'saber'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token comment">// 调用 express 提供的 res.send () 方法 向客户端响应一个文本字符串</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'The request is successful'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="send-响应数据"><a class="anchor" href="#send-响应数据">#</a> send 响应数据</h2><ul><li>通过  <code>res.send()</code>  方法，可以把处理好的内容，发送给客户端</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 1. 导入 express</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 2. 创建 web 服务器</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 3. 启动 web 服务器</span></pre></td></tr><tr><td data-num="8"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8001</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'express server running at http://127.0.0.1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">// 4. 监听客户端的 GET 和 POST 请求 并向客户端响应具体的内容</span></pre></td></tr><tr><td data-num="14"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token comment">// 调用 express 提供的 res.send () 方法 向客户端响应一个 JSON 对象</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'saber'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token comment">// 调用 express 提供的 res.send () 方法 向客户端响应一个文本字符串</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'The request is successful'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="reqquery"><a class="anchor" href="#reqquery">#</a> req.query</h2><ul><li>通过 <code>req.query</code>  对象，可以访问到客户端通过查询字符串的形式，发送到服务器的参数</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// postman: http://127.0.0.1:8001/user?name=saber&amp;age=16</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token comment">// 通过 req.query 可以获取到客户端发送过来的查询参数</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">// 注意 默认情况下 req.query 是一个空对象</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  </pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token comment">// console.log(req.query, '||', res);</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token comment">// 调用 express 提供的 res.send () 方法 向客户端响应一个 JSON 对象</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token comment">// res.send(&#123; name: 'saber', age: 16 &#125;)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="reqparams"><a class="anchor" href="#reqparams">#</a> req.params</h2><ul><li>通过 <code>req.params</code>  对象，可以访问到 URL 中，通过 <code>:</code>  匹配到的动态参数</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// postman: http://127.0.0.1:8001/user/233</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 注意 这里的 :id 是一个动态的参数</span></pre></td></tr><tr><td data-num="4"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/user/:id'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token comment">//req.params 是动态匹配到的 URL 参数，默认也是一个空对象</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="expressstatic"><a class="anchor" href="#expressstatic">#</a> express.static()</h2><ul><li>express 提供了一个函数 <code>express.static()</code> 。通过它，可以非常方便创建一个静态资源服务器</li><li>如果需要托管多个静态资源目录，请多次调用 <code>express.static()</code>  函数，访问静态资源是，会根据目录的添加顺序查找所需文件</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 调用 express.static 方法，传入资源的访问路径，快速的对外提供静态资源</span></pre></td></tr><tr><td data-num="6"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">'path1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">'path2'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8001</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'express server running at http://127.0.0.1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><ul><li>希望托管的静态资源访问路径之前，挂载路径前缀，如下</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/public'</span><span class="token punctuation">,</span> express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span>'path<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="express-路由"><a class="anchor" href="#express-路由">#</a> express 路由</h2><ul><li>在 Express 中路由指的是客户端的请求与服务器处理函数之间的映射关系</li><li>Express 中的路由分 3 部分组成，分别是请求的类型 、请求的 URL 地址、 处理函数 ，格式如下</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token constant">APP</span><span class="token punctuation">[</span><span class="token constant">METHOD</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token constant">PATH</span><span class="token punctuation">,</span> <span class="token constant">HANDLER</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'get request'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'post request '</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="路由demo"><a class="anchor" href="#路由demo">#</a> 路由 DEMO</h2><ul><li><code>router.js</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">const</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/username'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;pre>username request&lt;/pre></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/password'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;pre>password request&lt;/pre></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router</pre></td></tr></table></figure><ul><li><code>index.js</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// http://127.0.0.1:8001/api/user</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// 导入路由模块</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./router'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// 注册・路由模块  并添加统一访问路径前缀 /api</span></pre></td></tr><tr><td data-num="10"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/api'</span><span class="token punctuation">,</span> router<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment">// 注意 app.use () 函数 是用来注册全局中间件</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8001</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'The server is started successfully'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;express-基本使用&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#express-基本使用&quot;&gt;#&lt;/a&gt; Express 基本使用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;创建基本的 Web 服务器&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highli</summary>
      
    
    
    
    <category term="Node" scheme="https://nekoaimer.com/categories/Node/"/>
    
    
    <category term="Node" scheme="https://nekoaimer.com/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>Node Basics</title>
    <link href="https://nekoaimer.com/2022/04/25/Node/node-basics/"/>
    <id>https://nekoaimer.com/2022/04/25/Node/node-basics/</id>
    <published>2022-04-25T09:35:48.000Z</published>
    <updated>2022-05-18T00:42:28.035Z</updated>
    
    <content type="html"><![CDATA[<h2 id="fs-模块"><a class="anchor" href="#fs-模块">#</a> fs 模块</h2><h3 id="readfile"><a class="anchor" href="#readfile">#</a> readFile</h3><ul><li>使用  <code>fs.readFile</code>  方法，可以读取指定文件中的内容，语法格式如下</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>path<span class="token punctuation">[</span><span class="token punctuation">,</span> options<span class="token punctuation">]</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span></pre></td></tr></table></figure><ul><li><p>参数一：必选参数，字符串，表示文件的路径</p></li><li><p>参数二：可选参数，表示以什么编码格式来读取文件</p></li><li><p>参数三：必选参数，文件读取完成后，通过回调函数拿到读取的结果</p></li><li><p>示例代码：</p></li><li><p>以 utf8 的编码格式，读取指定文件的内容，并打印 err 和 data 的值</p></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 1. 导入 fs 模块</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 2. 调用 fs.readFile () 方法读取文件</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 参数一 读取文件存放路径</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// 参数二 读取文件时采用的编码格式 一般默认指定 utf8</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 参数三 回调函数 拿到读取失败和成功的结果</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./files/data.yml'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'读取文件失败'</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'读取文件成功'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="writefile"><a class="anchor" href="#writefile">#</a> writeFile</h3><ul><li>使用 fs.writeFile 方法，可以向指定的文件中写入内容，语法格式如下：</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token punctuation">,</span> options<span class="token punctuation">]</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span></pre></td></tr></table></figure><ul><li><p>参数一：必选参数，指定文件路径的字符串，表示文件存放的路径</p></li><li><p>参数二：必选参数，表示要写入的内容</p></li><li><p>参数三：可选参数，表示以什么格式写入文件内容，默认值是 utf8</p></li><li><p>参数四：必选参数， 文件写入完成后的回调函数</p></li><li><p>示例代码：</p></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 2. 调用 fs.writeFile () 方法读取文件</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 参数一 表示文件的存放路径</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 参数二 表示要写入的内容</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// 参数三 回调函数</span></pre></td></tr><tr><td data-num="7"></td><td><pre>fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">'file'</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token comment">// 文件写入成功 err 为 null</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token comment">// 文件写入失败 err 为一个错误对象</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="__dirname"><a class="anchor" href="#__dirname">#</a> __dirname</h3><ul><li>在使用 fs 模块操作文件时，如果提供的操作路径是以 ./ 或 ../ 开头的相对路径时，很容易出现路径动态拼接错误的问题</li><li>原因：代码在运行的时候，会以执行 node 命令时所处的目录，动态拼接被操作文件的完整路径</li><li>解决方案：在使用 fs 模块操作文件时，直接提供完整的路径，不要提供 ./ 或../ 开头的相对路径，从而防止路径动态拼接的问题</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">//__dirname 表示当前文件所处的目录</span></pre></td></tr><tr><td data-num="4"></td><td><pre>fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> <span class="token string">'./txt'</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="path-模块"><a class="anchor" href="#path-模块">#</a> path 模块</h2><ul><li>path 模块是 node.js 官方提供的、用来处理路径的模块。它提供了一系列的方法和属性，用来满足用户对路径的处理需求</li><li>path.join () 方法，用来将多个路径片段拼接成一个完整的路径字符串</li><li>path.basename () 方法，用来从路径字符串中，将文件名解析出来</li></ul><h3 id="join"><a class="anchor" href="#join">#</a> join</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 注意 ../ 回抵消前面的路径</span></pre></td></tr><tr><td data-num="4"></td><td><pre>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./txt'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>   <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="basename"><a class="anchor" href="#basename">#</a> basename</h3><ul><li>使用 path.basename () 方法，可以获取路径中最后一部分，经常通过这个方法获取路径中的文件名</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>path<span class="token punctuation">[</span><span class="token punctuation">,</span> ext<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr></table></figure><ul><li>path &lt;string&gt; 必选参数，表示一个路径的字符串</li><li>ext  &lt;string&gt; 可选参数，表示文件扩展名</li><li>返回  &lt;string&gt; 表示路径中的最后一部分</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">const</span> fpath <span class="token operator">=</span> <span class="token string">'/a/b/c/index.html'</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 获取当前路径的文件名</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">const</span> fullName <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>fpath<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fullName<span class="token punctuation">)</span> <span class="token comment">// index.html</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// 移除扩展名</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">const</span> nameWithoutExt <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>fpath<span class="token punctuation">,</span> <span class="token string">'.html'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nameWithoutExt<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// index</span></pre></td></tr></table></figure><h3 id="extname"><a class="anchor" href="#extname">#</a> extname</h3><ul><li>使用 path.extname () 方法，可以获取路径中的扩展名部分</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">const</span> fpath <span class="token operator">=</span> <span class="token string">'index.html'</span> <span class="token comment">// 路径字符串</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">const</span> fext <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>fpath<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fext<span class="token punctuation">)</span> <span class="token comment">// html</span></pre></td></tr></table></figure><h2 id="http-模块"><a class="anchor" href="#http-模块">#</a> http 模块</h2><h3 id="req-请求对象"><a class="anchor" href="#req-请求对象">#</a> <em>req</em> 请求对象</h3><ul><li><p>服务器接收到了客服端的请求，就会调用通过 <code>server.on()</code>  为服务器绑定的 <code>request事件处理函数</code></p></li><li><p>如果想在事件处理函数中访问与客户端相关数据与属性，可以使用如下方式</p></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">//req.url 是客户端请求的 URL 地址</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">const</span> url <span class="token operator">=</span> req<span class="token punctuation">.</span>url</pre></td></tr><tr><td data-num="4"></td><td><pre>  </pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">//req.method 是客户端请求的 method 类型</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">const</span> method <span class="token operator">=</span> req<span class="token punctuation">.</span>method</pre></td></tr><tr><td data-num="7"></td><td><pre>  </pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Your request url is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>url<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, and request method is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>method<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="9"></td><td><pre> </pre></td></tr><tr><td data-num="10"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="res-响应对象"><a class="anchor" href="#res-响应对象">#</a> res 响应对象</h3><ul><li>在服务器的 request 事件处理函数中，如果想访问与服务器相关的数据与属性，可以使用如下方式</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">//req.url 是客户端请求的 URL 地址</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">const</span> url <span class="token operator">=</span> req<span class="token punctuation">.</span>url</pre></td></tr><tr><td data-num="4"></td><td><pre>  </pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">//req.method 是客户端请求的 method 类型</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">const</span> method <span class="token operator">=</span> req<span class="token punctuation">.</span>method</pre></td></tr><tr><td data-num="7"></td><td><pre>  </pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">您请求的 URL 地址是 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>url<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, 请求的 method 类型为 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>method<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="9"></td><td><pre>  </pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token comment">// 调用 res.end () 方法，向客户端发送指定内容，并结束这次请求的处理过程</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="setheader"><a class="anchor" href="#setheader">#</a> setHeader</h3><ul><li>解决中文乱码问题，需要设置响应头 <code>Content-Type</code>  的值为  <code>text/html; charset=utd-8</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'text/html; charset=utf-8'</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="案例"><a class="anchor" href="#案例">#</a> 案例</h3><ul><li>根据不同 url 响应不同的 html 内容</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token comment">// 1. 获取请求的 url 地址</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token keyword">const</span> url <span class="token operator">=</span> req<span class="token punctuation">.</span>url</pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token comment">// 2. 设置默认的响应内容为 404 Not founc</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">let</span> content <span class="token operator">=</span> <span class="token string">'404 Not found!'</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token comment">// 3. 判断用户请求的是否为 / 或 /index.html 首页</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token comment">// 4. 判断用户请求的是否为 /about.html 关于页面</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">===</span> <span class="token string">'/'</span> <span class="token operator">||</span> url <span class="token operator">===</span> <span class="token string">'/index.html'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    content <span class="token operator">=</span> <span class="token string">'&lt;h2>首页&lt;/h2>'</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">===</span> <span class="token string">'/about.html'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    content <span class="token operator">=</span> <span class="token string">'&lt;h2>关于&lt;/h2>'</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token comment">// 5. 设置 Content-Type 响应头，防止中文乱码</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Content-type'</span><span class="token punctuation">,</span> <span class="token string">'text/html; charset=utf-8'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre>  <span class="token comment">// 6. 使用 res.end () 把内容响应给客户端</span></pre></td></tr><tr><td data-num="22"></td><td><pre>  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8001</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server running at http://127.0.0.1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="os-模块"><a class="anchor" href="#os-模块">#</a> os 模块</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;fs-模块&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fs-模块&quot;&gt;#&lt;/a&gt; fs 模块&lt;/h2&gt;
&lt;h3 id=&quot;readfile&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#readfile&quot;&gt;#&lt;/a&gt; readFile&lt;/h3&gt;
&lt;ul</summary>
      
    
    
    
    <category term="Node" scheme="https://nekoaimer.com/categories/Node/"/>
    
    
    <category term="Node" scheme="https://nekoaimer.com/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>Git 命令补充</title>
    <link href="https://nekoaimer.com/2022/04/23/Git/git-command/"/>
    <id>https://nekoaimer.com/2022/04/23/Git/git-command/</id>
    <published>2022-04-22T18:58:23.000Z</published>
    <updated>2022-04-23T06:59:58.824Z</updated>
    
    <content type="html"><![CDATA[<h2 id="git-配置"><a class="anchor" href="#git-配置">#</a> Git 配置</h2><figure class="highlight javascript"><figcaption data-lang="javascript"><span>Git</span></figcaption><table><tr><td data-num="1"></td><td><pre>git config <span class="token comment">// 查看本机是否配置了个人信息</span></pre></td></tr><tr><td data-num="2"></td><td><pre>git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>name <span class="token string">"……"</span>  <span class="token comment">// 定义全局的用户名</span></pre></td></tr><tr><td data-num="3"></td><td><pre>git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>email <span class="token string">"……"</span> <span class="token comment">// 定义全局的邮件地址</span></pre></td></tr><tr><td data-num="4"></td><td><pre>git config <span class="token operator">--</span>list <span class="token comment">// 查看配置信息</span></pre></td></tr></table></figure><h2 id="获取用户"><a class="anchor" href="#获取用户">#</a> 获取用户</h2><figure class="highlight javascript"><figcaption data-lang="javascript"><span>Git</span></figcaption><table><tr><td data-num="1"></td><td><pre>git config user<span class="token punctuation">.</span>name  <span class="token comment">// 查看用户名</span></pre></td></tr><tr><td data-num="2"></td><td><pre>git config user<span class="token punctuation">.</span>email <span class="token comment">// 查看邮箱</span></pre></td></tr></table></figure><h2 id="帮助命令"><a class="anchor" href="#帮助命令">#</a> 帮助命令</h2><figure class="highlight javascript"><figcaption data-lang="javascript"><span>Git</span></figcaption><table><tr><td data-num="1"></td><td><pre>git help xx                <span class="token comment">// 获取帮助命令</span></pre></td></tr><tr><td data-num="2"></td><td><pre>git config <span class="token operator">--</span>global        <span class="token comment">// 获取命令信息</span></pre></td></tr><tr><td data-num="3"></td><td><pre>git config <span class="token operator">--</span>list <span class="token operator">--</span>global <span class="token comment">// 获取全局列表</span></pre></td></tr><tr><td data-num="4"></td><td><pre>git config <span class="token operator">--</span>list          <span class="token comment">// 获取列表</span></pre></td></tr></table></figure><h2 id="状态查看"><a class="anchor" href="#状态查看">#</a> 状态查看</h2><figure class="highlight javascript"><figcaption data-lang="javascript"><span>Git</span></figcaption><table><tr><td data-num="1"></td><td><pre>git status <span class="token operator">--</span>short  <span class="token comment">// 精简展示未跟踪</span></pre></td></tr><tr><td data-num="2"></td><td><pre>git status <span class="token operator">-</span>s       <span class="token comment">// 上面代码的缩写</span></pre></td></tr></table></figure><h2 id="移除暂存区"><a class="anchor" href="#移除暂存区">#</a> 移除暂存区</h2><figure class="highlight javascript"><figcaption data-lang="javascript"><span>Git</span></figcaption><table><tr><td data-num="1"></td><td><pre>git checkout xx     <span class="token comment">// 撤销 xx 文件 </span></pre></td></tr><tr><td data-num="2"></td><td><pre>git reset <span class="token constant">HEAD</span> xxx  <span class="token comment">// 移出暂存区</span></pre></td></tr><tr><td data-num="3"></td><td><pre>git reset <span class="token constant">HEAD</span> <span class="token punctuation">.</span>    <span class="token comment">// 所有文件移出暂存区</span></pre></td></tr></table></figure><h2 id="跳过暂存区"><a class="anchor" href="#跳过暂存区">#</a> 跳过暂存区</h2><figure class="highlight javascript"><figcaption data-lang="javascript"><span>Git</span></figcaption><table><tr><td data-num="1"></td><td><pre>git commit <span class="token operator">-</span>a <span class="token operator">-</span>m <span class="token string">''</span> <span class="token comment">// 对已经提交过到暂存区的，可以跳过暂存区</span></pre></td></tr></table></figure><h2 id="删除文件"><a class="anchor" href="#删除文件">#</a> 删除文件</h2><figure class="highlight javascript"><figcaption data-lang="javascript"><span>Git</span></figcaption><table><tr><td data-num="1"></td><td><pre>git rm <span class="token operator">-</span>f xx       <span class="token comment">// 删除工作区和暂存区文件</span></pre></td></tr><tr><td data-num="2"></td><td><pre>git rm <span class="token operator">--</span>cached xx <span class="token comment">// 删除暂存区文件</span></pre></td></tr></table></figure><h2 id="gitignore"><a class="anchor" href="#gitignore">#</a> .gitignore</h2><figure class="highlight javascript"><figcaption data-lang="javascript"><span>Git</span></figcaption><table><tr><td data-num="1"></td><td><pre># 忽略所有 <span class="token punctuation">.</span>abc 文件</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">*</span><span class="token punctuation">.</span>abc</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre># 跟踪所有 ssr<span class="token punctuation">.</span>abc 即便在前面忽略了 <span class="token punctuation">.</span>abc 文件</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token operator">!</span>ssr<span class="token punctuation">.</span>abc</pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre># 只忽略当前目录下的ssr文件，而不忽略abcd<span class="token operator">/</span>ssr文件</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token operator">/</span>ssr</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre># 忽略任何目录下名为dist的文件夹</pre></td></tr><tr><td data-num="11"></td><td><pre>dist<span class="token operator">/</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre># 忽略 doc<span class="token operator">/</span>notes<span class="token punctuation">.</span>txt，但不忽略 doc<span class="token operator">/</span>server<span class="token operator">/</span>arch<span class="token punctuation">.</span>txt</pre></td></tr><tr><td data-num="14"></td><td><pre>doc<span class="token comment">/*.txt</pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre># 忽略 doc/ 目录及其所有子目录下的 .pdf 文件</pre></td></tr><tr><td data-num="17"></td><td><pre>doc/**/</span><span class="token operator">*</span><span class="token punctuation">.</span>pdf</pre></td></tr></table></figure><h2 id="查看日志"><a class="anchor" href="#查看日志">#</a> 查看日志</h2><figure class="highlight javascript"><figcaption data-lang="javascript"><span>Git</span></figcaption><table><tr><td data-num="1"></td><td><pre># 按事件先行顺序列出所有的提交历史m最近的提交排在最上面</pre></td></tr><tr><td data-num="2"></td><td><pre>git log</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre># 只暂时最新的两条提交历史，数字可以按需进行填写</pre></td></tr><tr><td data-num="5"></td><td><pre>git log <span class="token operator">-</span><span class="token number">2</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre># 在以后上展示最近两条提交历史的信息</pre></td></tr><tr><td data-num="8"></td><td><pre>git log <span class="token operator">-</span><span class="token number">2</span> <span class="token operator">--</span>pretty<span class="token operator">=</span>oneline</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre># 在一行上展示最近两条提交历史的信息，并自定义输出的格式</pre></td></tr><tr><td data-num="11"></td><td><pre># <span class="token operator">%</span>h  提交的简写哈希值</pre></td></tr><tr><td data-num="12"></td><td><pre># <span class="token operator">%</span>an 作者名字</pre></td></tr><tr><td data-num="13"></td><td><pre># <span class="token operator">%</span>ar 作者修订日期，按多久以前的方式显示</pre></td></tr><tr><td data-num="14"></td><td><pre># <span class="token operator">%</span>s  提交说明</pre></td></tr><tr><td data-num="15"></td><td><pre>git log <span class="token operator">-</span><span class="token number">2</span> <span class="token operator">--</span>pretty<span class="token operator">=</span>format<span class="token operator">:</span><span class="token string">"%h | %an | %ar | %s"</span></pre></td></tr></table></figure><h2 id="回退版本"><a class="anchor" href="#回退版本">#</a> 回退版本</h2><ol><li>在一行上展示所有的提交历史</li></ol><ul><li><code>git log --pretty=oneline</code></li></ul><ol start="2"><li>使用 git reset --hard 命令 根据指定的提交 ID 回退到指定版本</li></ol><ul><li><code>git reset --hard &lt;CommitID&gt;</code></li></ul><ol start="3"><li>在旧版种使用 <code> git reflog --pretty=oneline</code>  命令 查看命令操作的历史</li><li>再次根据最新的提交 ID 跳转到最新的版本</li></ol><h2 id="github-开源协议"><a class="anchor" href="#github-开源协议">#</a> Github 开源协议</h2><figure class="highlight javascript"><figcaption data-lang="javascript"><span>Git</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token literal-property property">https</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>runoob<span class="token punctuation">.</span>com<span class="token operator">/</span>w3cnote<span class="token operator">/</span>open<span class="token operator">-</span>source<span class="token operator">-</span>license<span class="token punctuation">.</span>html</pre></td></tr></table></figure><h2 id="上传代码"><a class="anchor" href="#上传代码">#</a> 上传代码</h2><ul><li>https</li></ul><figure class="highlight javascript"><figcaption data-lang="javascript"><span>Git</span></figcaption><table><tr><td data-num="1"></td><td><pre>git remote add origin https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>xx<span class="token punctuation">.</span>com  <span class="token comment">// 远程连接</span></pre></td></tr><tr><td data-num="2"></td><td><pre>git push <span class="token operator">-</span>u origin master             <span class="token comment">// 上传代码</span></pre></td></tr><tr><td data-num="3"></td><td><pre>git push <span class="token comment">// 当已经执行过上面代码时，再提交只需要 git push 就可以了</span></pre></td></tr></table></figure><h2 id="配置-ssh-key"><a class="anchor" href="#配置-ssh-key">#</a> 配置 SSH key</h2><h3 id="ssh配置"><a class="anchor" href="#ssh配置">#</a> SSH 配置</h3><ul><li><p>打开 <code>git Bash Here</code> ，输入下面命令：</p></li><li><p>ssh-keygen -t rsa -b 4096 -C 'your_email@example.com'</p></li><li><p>连续敲击三次回车，在 C:\Users\ 用户名文件夹.ssh 目录中生成 id_rsa 和 id_rsa.pub 两个文件</p></li></ul><h3 id="配置-ssh-key-2"><a class="anchor" href="#配置-ssh-key-2">#</a> 配置 SSH key</h3><ol><li>使用记事本打开 id_rsa.pub 文件，复制里面内容</li><li>在浏览器中登录 GitHub，点击头像 -&gt; Settings -&gt; SSH and GPG Keys -&gt; News SSH key</li><li>将 id_rsa.pub 文件中的内容，粘贴到 Key 对应的文本框中</li><li>在 Title 文本框中国任意填写一个名称，来标识这个 Key 从何而来</li></ol><h3 id="检测github的ssh-key-是否配置成功"><a class="anchor" href="#检测github的ssh-key-是否配置成功">#</a> 检测 Github 的 SSH key 是否配置成功</h3><figure class="highlight javascript"><figcaption data-lang="javascript"><span>Git</span></figcaption><table><tr><td data-num="1"></td><td><pre># 打开 Git Bash，执行下面命令</pre></td></tr><tr><td data-num="2"></td><td><pre>① ssh <span class="token operator">-</span><span class="token constant">T</span> git@github<span class="token punctuation">.</span>com <span class="token comment">// Hi nekoaimer! You've successfully authenticated, but GitHub does not provide shell access.</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre># 命令成功后可能会看到如下提示消息</pre></td></tr><tr><td data-num="5"></td><td><pre>Hi nekoaimer<span class="token operator">!</span> You've successfully authenticated<span class="token punctuation">,</span> but GitHub does not provide shell access<span class="token punctuation">.</span></pre></td></tr></table></figure><h2 id="克隆仓库"><a class="anchor" href="#克隆仓库">#</a> 克隆仓库</h2><figure class="highlight javascript"><figcaption data-lang="javascript"><span>Git</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">git clone 远程仓库地址</span><span class="token template-punctuation string">`</span></span></pre></td></tr></table></figure><h2 id="查看创建-分支"><a class="anchor" href="#查看创建-分支">#</a> 查看 / 创建 分支</h2><figure class="highlight javascript"><figcaption data-lang="javascript"><span>Git</span></figcaption><table><tr><td data-num="1"></td><td><pre>git branch       <span class="token comment">// 查看分支</span></pre></td></tr><tr><td data-num="2"></td><td><pre>git branch 分支名 <span class="token comment">// 创建分支</span></pre></td></tr></table></figure><h2 id="切换分支"><a class="anchor" href="#切换分支">#</a> 切换分支</h2><figure class="highlight javascript"><figcaption data-lang="javascript"><span>Git</span></figcaption><table><tr><td data-num="1"></td><td><pre>git checkout 分支名     <span class="token comment">// 切换分支</span></pre></td></tr><tr><td data-num="2"></td><td><pre>git checkout <span class="token operator">-</span>b 分支名  <span class="token comment">// 创建并切换分支</span></pre></td></tr><tr><td data-num="3"></td><td><pre>git checkout <span class="token operator">-</span>b 分支名 origin <span class="token comment">// 基于远程分支”origin“，创建一个分支。</span></pre></td></tr></table></figure><h2 id="合并分支"><a class="anchor" href="#合并分支">#</a> 合并分支</h2><figure class="highlight javascript"><figcaption data-lang="javascript"><span>Git</span></figcaption><table><tr><td data-num="1"></td><td><pre># 先切换到要合并的分支</pre></td></tr><tr><td data-num="2"></td><td><pre>git checkout master</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre># 在要合并的分支上运行下面命令，将被合并的分布合并到当前分支</pre></td></tr><tr><td data-num="5"></td><td><pre>git merge 被合并的分支名</pre></td></tr></table></figure><h2 id="删除分支"><a class="anchor" href="#删除分支">#</a> 删除分支</h2><figure class="highlight javascript"><figcaption data-lang="javascript"><span>Git</span></figcaption><table><tr><td data-num="1"></td><td><pre>git branch <span class="token operator">-</span>d 分支名       <span class="token comment">// 删除分支</span></pre></td></tr><tr><td data-num="2"></td><td><pre>git branch <span class="token operator">-</span>d 分支名 分支名 <span class="token comment">// 删除多个分支</span></pre></td></tr><tr><td data-num="3"></td><td><pre>git branch <span class="token operator">-</span><span class="token constant">D</span>             <span class="token comment">// 强制删除分支 不管有没有合并</span></pre></td></tr></table></figure><h2 id="分支冲突"><a class="anchor" href="#分支冲突">#</a> 分支冲突</h2><ul><li><p>假设当前两个分支  <code>master main</code>  当前在 <code>master</code>  分支 <code> index.js</code>  文件为空</p></li><li><p>切换到 <code>main</code>  分支 对 <code>index.js </code> 进行了增加一行代码</p></li><li><p>进行 <code>add .</code>  与  <code>commit </code> 再切换 <code>master</code>  分支</p></li><li><p>对 <code>master</code>  中的 <code>index.js</code>  文件进行增加一行代码</p></li><li><p>这时候就会造成文件冲突，这时候我们需要手动打开冲突文件，解决冲突</p></li></ul><figure class="highlight javascript"><figcaption data-lang="javascript"><span>Git</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span> <span class="token constant">HEAD</span> <span class="token punctuation">(</span>Current Change<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>xxx</pre></td></tr><tr><td data-num="3"></td><td><pre>xxx</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">=</span></pre></td></tr><tr><td data-num="5"></td><td><pre>xxx</pre></td></tr><tr><td data-num="6"></td><td><pre>xxx</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token operator">>>></span><span class="token operator">>>></span><span class="token operator">></span> <span class="token function">main</span> <span class="token punctuation">(</span>Incoming Change<span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="远程分支操作"><a class="anchor" href="#远程分支操作">#</a> 远程分支操作</h2><ul><li>第一次推送需要进行下面命令：</li></ul><figure class="highlight javascript"><figcaption data-lang="javascript"><span>Git</span></figcaption><table><tr><td data-num="1"></td><td><pre># <span class="token operator">-</span>u 表示把本地分支和远程分支进行关联，只在第一次推送时需要带 <span class="token operator">-</span>u 参数</pre></td></tr><tr><td data-num="2"></td><td><pre>git push <span class="token operator">-</span>u 远程仓库别名 本地分支名称<span class="token operator">:</span>远程分支名称</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre># Example</pre></td></tr><tr><td data-num="5"></td><td><pre>git push <span class="token operator">-</span>u origin login<span class="token operator">:</span>log</pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre># 如果希望远程分支名称和本地分支名称一致，可以简化</pre></td></tr><tr><td data-num="8"></td><td><pre>git push <span class="token operator">-</span>u origin login</pre></td></tr></table></figure><ul><li>注意：第一次推送分支需要带 <code>-u</code>  参数，之后就可以直接使用 <code>git push</code>  推送代码到远程分支</li></ul><h2 id="查看远程仓库分支"><a class="anchor" href="#查看远程仓库分支">#</a> 查看远程仓库分支</h2><figure class="highlight javascript"><figcaption data-lang="javascript"><span>Git</span></figcaption><table><tr><td data-num="1"></td><td><pre>git remote show 远程仓库名称   默认是origin</pre></td></tr></table></figure><h2 id="跟踪分支"><a class="anchor" href="#跟踪分支">#</a> 跟踪分支</h2><ul><li>从远程仓库中，将远程分支下载到本地仓库中</li></ul><figure class="highlight javascript"><figcaption data-lang="javascript"><span>Git</span></figcaption><table><tr><td data-num="1"></td><td><pre># 从远程仓库中，把对应的远程分支下载到本地仓库 保存本地分支和远程分支名称相同</pre></td></tr><tr><td data-num="2"></td><td><pre>git checkout 远程分支的名称</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre># Example 不需要重命名 直接下载远程分支login</pre></td></tr><tr><td data-num="5"></td><td><pre>git checkout login </pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre># 从远程仓库中 把对应的远程分支下载到本地仓库 并把下载的本地分支进行重新命名</pre></td></tr><tr><td data-num="8"></td><td><pre>git checkout <span class="token operator">-</span>b 本地分支名称 远程仓库名称<span class="token operator">/</span>远程分支名称</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre># Example 对origin远程仓库中log分支下载并重命名为login </pre></td></tr><tr><td data-num="11"></td><td><pre>git checkout <span class="token operator">-</span>b login origin<span class="token operator">/</span>log</pre></td></tr></table></figure><h2 id="拉取远程分支最新代码"><a class="anchor" href="#拉取远程分支最新代码">#</a> 拉取远程分支最新代码</h2><figure class="highlight javascript"><figcaption data-lang="javascript"><span>Git</span></figcaption><table><tr><td data-num="1"></td><td><pre># 从远程仓库，拉取当前所在分支最新代码 保持当前分支代码与远程分支代码一致</pre></td></tr><tr><td data-num="2"></td><td><pre>git pull</pre></td></tr></table></figure><h2 id="删除远程分支"><a class="anchor" href="#删除远程分支">#</a> 删除远程分支</h2><figure class="highlight javascript"><figcaption data-lang="javascript"><span>Git</span></figcaption><table><tr><td data-num="1"></td><td><pre># 删除远程仓库中 指定名称的远程分支</pre></td></tr><tr><td data-num="2"></td><td><pre>git push 远程仓库名称 <span class="token operator">--</span><span class="token keyword">delete</span> 远程分支名称</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre># Example</pre></td></tr><tr><td data-num="5"></td><td><pre>git push origin <span class="token operator">--</span><span class="token keyword">delete</span> log</pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;git-配置&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#git-配置&quot;&gt;#&lt;/a&gt; Git 配置&lt;/h2&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;figcaption data-lang=&quot;javascript&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="Git" scheme="https://nekoaimer.com/categories/Git/"/>
    
    
    <category term="Git" scheme="https://nekoaimer.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>判断是否是回文数</title>
    <link href="https://nekoaimer.com/2022/04/13/data-structures-and-algorithms/algorithm/problems/easy/palindromic/"/>
    <id>https://nekoaimer.com/2022/04/13/data-structures-and-algorithms/algorithm/problems/easy/palindromic/</id>
    <published>2022-04-13T10:08:11.000Z</published>
    <updated>2022-04-13T12:51:19.866Z</updated>
    
    <content type="html"><![CDATA[<h2 id="判断回文数"><a class="anchor" href="#判断回文数">#</a> 判断回文数</h2><ul><li>给定一个数字或字符串判断该目标是否是回文数</li></ul><p>Example 1:</p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>输入：target = 12321</pre></td></tr><tr><td data-num="2"></td><td><pre>输出：true</pre></td></tr><tr><td data-num="3"></td><td><pre>解释：12321 反过来也是12321</pre></td></tr></table></figure><p>Example 2:</p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>输入：target = '12321'</pre></td></tr><tr><td data-num="2"></td><td><pre>输出：true</pre></td></tr><tr><td data-num="3"></td><td><pre>解释：可以输入字符串类型，那么'12321' 反过来也是 '12321'</pre></td></tr></table></figure><p>Example 3:</p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>输入：target = 123456</pre></td></tr><tr><td data-num="2"></td><td><pre>输出：false</pre></td></tr><tr><td data-num="3"></td><td><pre>解释：123456 反过来是 654321</pre></td></tr></table></figure><h2 id="solving-ideas"><a class="anchor" href="#solving-ideas">#</a> Solving Ideas</h2><h3 id="method-1"><a class="anchor" href="#method-1">#</a> method 1</h3><ul><li>转换为字符串，进行正序与倒叙比较</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">isPalindromic</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  target <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">let</span> length <span class="token operator">=</span> target<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> target<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> target<span class="token punctuation">[</span>length<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">return</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="method-2"><a class="anchor" href="#method-2">#</a> method 2</h3><ul><li>尽量不转换为字符串来解题</li><li>但本质上 <code>replace</code>  也会转换为字符串</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">isPalindromic</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">const</span> hash <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  target<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>replace <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>replace</pre></td></tr><tr><td data-num="4"></td><td><pre>  target<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\d</span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> i<span class="token punctuation">,</span>c</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>hash<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">+</span>item<span class="token punctuation">,</span> hash<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">const</span> values <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">return</span> values<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=></span> hash<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> values<span class="token punctuation">[</span><span class="token operator">--</span>hash<span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="method-3"><a class="anchor" href="#method-3">#</a> method 3</h3><ul><li>一行代码搞定</li><li>转换字符串再转换为数组进行翻转再进行连接比较</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> <span class="token function-variable function">isPalindromic</span> <span class="token operator">=</span> <span class="token parameter">target</span> <span class="token operator">=></span> <span class="token function">String</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">current<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span> <span class="token operator">=></span> current <span class="token operator">+</span> item<span class="token punctuation">)</span> <span class="token operator">==</span> target</pre></td></tr></table></figure><h3 id="method-4"><a class="anchor" href="#method-4">#</a> method 4</h3><ul><li>再简单点直接 <code>join</code>  之后就可以进行比较</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> <span class="token function-variable function">isPalindromic</span> <span class="token operator">=</span> <span class="token parameter">target</span> <span class="token operator">=></span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> target</pre></td></tr></table></figure><h3 id="method-5"><a class="anchor" href="#method-5">#</a> method 5</h3><ul><li>不转换为字符串，纯数字解法</li><li>通过取模的方式来解决</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">isPalindromic</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">while</span> <span class="token punctuation">(</span>target <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>target <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    target <span class="token operator">=</span> <span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span>target <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token keyword">let</span> length <span class="token operator">=</span> stack<span class="token punctuation">.</span>length</pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> stack<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> stack<span class="token punctuation">[</span><span class="token operator">--</span>length<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token keyword">return</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="测试的代码"><a class="anchor" href="#测试的代码">#</a> 测试的代码</h2><ul><li>用于测试的代码</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isPalindromic</span><span class="token punctuation">(</span><span class="token number">12321</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="2"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isPalindromic</span><span class="token punctuation">(</span><span class="token string">'123321'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="3"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isPalindromic</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;判断回文数&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#判断回文数&quot;&gt;#&lt;/a&gt; 判断回文数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;给定一个数字或字符串判断该目标是否是回文数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example 1:&lt;/p&gt;
&lt;figure class=&quot;h</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://nekoaimer.com/categories/data-structures-and-algorithms/"/>
    
    <category term="Easy" scheme="https://nekoaimer.com/categories/data-structures-and-algorithms/Easy/"/>
    
    
    <category term="Easy" scheme="https://nekoaimer.com/tags/Easy/"/>
    
    <category term="数据结构与算" scheme="https://nekoaimer.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>Git 武沛齐笔记</title>
    <link href="https://nekoaimer.com/2022/03/16/Git/Git/"/>
    <id>https://nekoaimer.com/2022/03/16/Git/Git/</id>
    <published>2022-03-16T06:52:22.000Z</published>
    <updated>2022-04-23T06:54:59.942Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一章-快速入门"><a class="anchor" href="#第一章-快速入门">#</a> 第一章 快速入门</h2><h3 id="什么是git"><a class="anchor" href="#什么是git">#</a> 什么是 Git</h3><ul><li><p>Git 是一个分布式的版本控制软件。</p></li><li><p>软件，类似于 QQ、office、dota 等安装到电脑上才能使用的工具。</p></li><li><p>版本控制，类似于毕业论文、写文案、视频剪辑等，需要反复修改和保留原历史数据。</p></li><li><p>分布式</p><ul><li>文件夹拷贝</li><li>本地版本控制</li><li>集中式版本控制</li><li>分布式版本控制</li></ul></li></ul><h3 id="为什么要做版本控制"><a class="anchor" href="#为什么要做版本控制">#</a> 为什么要做版本控制</h3><ul><li>要保留之前所有的版本，以便回滚和修改。</li></ul><h3 id="安装-git"><a class="anchor" href="#安装-git">#</a> 安装 GIT</h3><ul><li>详见：<span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9ib29rL3poL3YyLyVFOCVCNSVCNyVFNiVBRCVBNS0lRTUlQUUlODklRTglQTMlODUtR2l0">https://git-scm.com/book/zh/v2 / 起步 - 安装 - Git</span></li></ul><h2 id="第二章-东北热-创业史"><a class="anchor" href="#第二章-东北热-创业史">#</a> 第二章 东北热 创业史</h2><h3 id="第一阶段单枪匹马开始干"><a class="anchor" href="#第一阶段单枪匹马开始干">#</a> 第一阶段：单枪匹马开始干</h3><ul><li><p>想要让 git 对一个目录进行版本控制需要以下步骤：</p></li><li><p>进入要管理的文件夹</p></li><li><p>执行初始化命令</p></li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git init</pre></td></tr></table></figure><ul><li>管理目录下的文件状态</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git status</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>注：新增的文件和修改过后的文件都是红色</pre></td></tr></table></figure><ul><li>管理指定文件（红变绿）</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git add xxx(文件名)</pre></td></tr><tr><td data-num="2"></td><td><pre>git add . 所有文件</pre></td></tr></table></figure><ul><li>个人信息配置：用户名、邮箱【一次即可】</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git config --global user.email "you@example </pre></td></tr><tr><td data-num="2"></td><td><pre>git config --global user.name <span class="token string">"Your Name"</span></pre></td></tr></table></figure><ul><li>生成版本</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git commit -m '描述信息’</pre></td></tr></table></figure><ul><li>查看版本记录</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git log</pre></td></tr></table></figure><h3 id="第二阶段拓展新功能"><a class="anchor" href="#第二阶段拓展新功能">#</a> 第二阶段：拓展新功能</h3><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git add</pre></td></tr><tr><td data-num="2"></td><td><pre>git commit -m '短视频’</pre></td></tr></table></figure><h3 id="第三阶段约饭事件"><a class="anchor" href="#第三阶段约饭事件">#</a> 第三阶段：“约饭事件”</h3><ul><li>回滚至之前版本</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git log</pre></td></tr><tr><td data-num="2"></td><td><pre>git reset --hard 版本号</pre></td></tr></table></figure><ul><li>回滚之之后版本</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git reflog</pre></td></tr><tr><td data-num="2"></td><td><pre>git reset --hard 版本号</pre></td></tr></table></figure><ul><li>小总结</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git init</pre></td></tr><tr><td data-num="2"></td><td><pre>git add</pre></td></tr><tr><td data-num="3"></td><td><pre>git commit</pre></td></tr><tr><td data-num="4"></td><td><pre>git log</pre></td></tr><tr><td data-num="5"></td><td><pre>git reflog</pre></td></tr><tr><td data-num="6"></td><td><pre>git reset --hard 版本号</pre></td></tr></table></figure><p><img data-src="xiaozongjie.bmp" alt="xiaozongjie" /></p><h3 id="第四阶段商城紧急修复bug"><a class="anchor" href="#第四阶段商城紧急修复bug">#</a> 第四阶段：商城 &amp; 紧急修复 bug</h3><h4 id="分支"><a class="anchor" href="#分支">#</a> 分支</h4><ul><li>分支可以给使用者提供多个环境的可以，意味着你可以把你的工作从开发主线上分离开来，以免影响开 发主线。</li></ul><h4 id="紧急修复bug方案"><a class="anchor" href="#紧急修复bug方案">#</a> 紧急修复 bug 方案</h4><p><img data-src="bug.png" alt="bug" /></p><h4 id="命令总结"><a class="anchor" href="#命令总结">#</a> 命令总结</h4><ul><li>查看分支</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git branch</pre></td></tr></table></figure><ul><li>创建分支</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git branch 分支名称</pre></td></tr></table></figure><ul><li>切换分支</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git checkout 分支名称</pre></td></tr></table></figure><ul><li>分支合并（可能产生冲突）</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git merge 要合并的分支</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>注意：切换分支再合并</pre></td></tr></table></figure><ul><li>删除分支</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git branch -d 分支名称</pre></td></tr></table></figure><h4 id="工作流"><a class="anchor" href="#工作流">#</a> 工作流</h4><p><img data-src="gongzuoliu.png" alt="gongzuoliu" /></p><h3 id="第五阶段进军三里屯"><a class="anchor" href="#第五阶段进军三里屯">#</a> 第五阶段：进军三里屯</h3><ul><li>有钱之后就要造呀，一个人在三里屯买了一层楼做办公室。</li></ul><p><img data-src="sanlitun.png" alt="sanlitun" /></p><h4 id="第一天上班在家上传代码"><a class="anchor" href="#第一天上班在家上传代码">#</a> 第一天上班在家上传代码</h4><ul><li>首先，需要注册 github 账号，并创建远程仓库，然后再执行如下命令，将代码上传到 github。</li></ul><p><img data-src="register-github.png" alt="register-github" /></p><p><img data-src="git-push.png" alt="git-push" /></p><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>1. 给远程仓库起别名</pre></td></tr><tr><td data-num="2"></td><td><pre> git remote add origin 远程仓库地址</pre></td></tr><tr><td data-num="3"></td><td><pre> </pre></td></tr><tr><td data-num="4"></td><td><pre>2.创建分支</pre></td></tr><tr><td data-num="5"></td><td><pre> git branch -M 分支</pre></td></tr><tr><td data-num="6"></td><td><pre> </pre></td></tr><tr><td data-num="7"></td><td><pre>3. 向远程推送代码</pre></td></tr><tr><td data-num="8"></td><td><pre> git push -u origin 分支</pre></td></tr></table></figure><h4 id="初次在公司新电脑下载代码"><a class="anchor" href="#初次在公司新电脑下载代码">#</a> 初次在公司新电脑下载代码</h4><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>1.克隆远程仓库代码</pre></td></tr><tr><td data-num="2"></td><td><pre>  git clone远程仓库地址（内部已实现git remote add origin远程仓库地址）</pre></td></tr><tr><td data-num="3"></td><td><pre>2.切换分支</pre></td></tr><tr><td data-num="4"></td><td><pre>  git checkout 分支</pre></td></tr></table></figure><ul><li>在公司下载完代码后，继续开发</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>1.切换到dev分支进行开发</pre></td></tr><tr><td data-num="2"></td><td><pre>  git checkout dev</pre></td></tr><tr><td data-num="3"></td><td><pre>2.把master分支合并到dev ［仅一次］</pre></td></tr><tr><td data-num="4"></td><td><pre>  git merge master</pre></td></tr><tr><td data-num="5"></td><td><pre>3.修改代码</pre></td></tr><tr><td data-num="6"></td><td><pre>4.提交代码</pre></td></tr><tr><td data-num="7"></td><td><pre>  git add .</pre></td></tr><tr><td data-num="8"></td><td><pre>  git commit -m <span class="token string">'xx'</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  git push origin dev</pre></td></tr></table></figure><h4 id="下班回到家继续写代码"><a class="anchor" href="#下班回到家继续写代码">#</a> 下班回到家继续写代码</h4><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>1.切换到dev分支进行开发 </pre></td></tr><tr><td data-num="2"></td><td><pre>  git checkout dev</pre></td></tr><tr><td data-num="3"></td><td><pre>2.拉代码</pre></td></tr><tr><td data-num="4"></td><td><pre>  git pull origin dev</pre></td></tr><tr><td data-num="5"></td><td><pre>3.继续开发</pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>4.提交代码</pre></td></tr><tr><td data-num="8"></td><td><pre>  git add .</pre></td></tr><tr><td data-num="9"></td><td><pre>  git commit -m <span class="token string">'xx'</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  git push origin dev</pre></td></tr></table></figure><h4 id="到公司继续开发"><a class="anchor" href="#到公司继续开发">#</a> 到公司继续开发</h4><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>1.切换到dev分支进行开发</pre></td></tr><tr><td data-num="2"></td><td><pre>  git checkout dev</pre></td></tr><tr><td data-num="3"></td><td><pre>2.拉最新代码（不必再clone,只需要通过pull获取最新代码即可）</pre></td></tr><tr><td data-num="4"></td><td><pre>  git pull origin dev</pre></td></tr><tr><td data-num="5"></td><td><pre>3.继续开发</pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>4.提交代码</pre></td></tr><tr><td data-num="8"></td><td><pre>  git add .</pre></td></tr><tr><td data-num="9"></td><td><pre>  git commit -m <span class="token string">'xx'</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  git push origin dev</pre></td></tr></table></figure><h4 id="开发完毕要上线"><a class="anchor" href="#开发完毕要上线">#</a> 开发完毕，要上线</h4><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>1.将dev分支合并到master,进行上线</pre></td></tr><tr><td data-num="2"></td><td><pre>  git checkout master </pre></td></tr><tr><td data-num="3"></td><td><pre>  git merge dev</pre></td></tr><tr><td data-num="4"></td><td><pre>  git push origin master</pre></td></tr><tr><td data-num="5"></td><td><pre>2.把dev分支也推送到远程</pre></td></tr><tr><td data-num="6"></td><td><pre>  git checkout dev </pre></td></tr><tr><td data-num="7"></td><td><pre>  git merge master</pre></td></tr><tr><td data-num="8"></td><td><pre>  git push origin dev</pre></td></tr></table></figure><h4 id="在公司约妹子忘记提交代码"><a class="anchor" href="#在公司约妹子忘记提交代码">#</a> 在公司约妹子忘记提交代码</h4><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>1.拉代码 </pre></td></tr><tr><td data-num="2"></td><td><pre>  git pull origin dev</pre></td></tr><tr><td data-num="3"></td><td><pre>2.继续开发</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>3.提交代码</pre></td></tr><tr><td data-num="6"></td><td><pre>  git add .</pre></td></tr><tr><td data-num="7"></td><td><pre>  git commit -m <span class="token string">'xx'</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  </pre></td></tr><tr><td data-num="9"></td><td><pre>注：忘记push 了</pre></td></tr></table></figure><h4 id="回家继续写代码"><a class="anchor" href="#回家继续写代码">#</a> 回家继续写代码</h4><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>1.拉代码，发现在公司写的代码忘记提交...</pre></td></tr><tr><td data-num="2"></td><td><pre>  git pull origin dev</pre></td></tr><tr><td data-num="3"></td><td><pre>  </pre></td></tr><tr><td data-num="4"></td><td><pre>2.继续开发其他功能</pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>3.把dev分支也推送到远程</pre></td></tr><tr><td data-num="7"></td><td><pre>  git add .</pre></td></tr><tr><td data-num="8"></td><td><pre>  git commit -m <span class="token string">'xx'</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  git push origin dev</pre></td></tr></table></figure><h4 id="到公司继续写代码"><a class="anchor" href="#到公司继续写代码">#</a> 到公司继续写代码</h4><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>1.拉代码，把晚上在家写的代码拉到本地（有合并、可能产生冲突）</pre></td></tr><tr><td data-num="2"></td><td><pre>  git pull origin dev</pre></td></tr><tr><td data-num="3"></td><td><pre>  </pre></td></tr><tr><td data-num="4"></td><td><pre>2.如果有冲突，手动解决冲突</pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>3.继续开发其他功能</pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>4.把dev分支也推送到远程</pre></td></tr><tr><td data-num="9"></td><td><pre>  git add .</pre></td></tr><tr><td data-num="10"></td><td><pre>  git commit -m <span class="token string">'xx'</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  git push origin dev</pre></td></tr></table></figure><h4 id="补充命令"><a class="anchor" href="#补充命令">#</a> 补充命令</h4><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git pull origin dev</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>等价于</pre></td></tr><tr><td data-num="4"></td><td><pre>git fetch origin dev // 拉到版本库</pre></td></tr><tr><td data-num="5"></td><td><pre>git merge origin/dev // 更新到工作区</pre></td></tr></table></figure><p><img data-src="qita.png" alt="qita" /></p><h3 id="rebase-的作用"><a class="anchor" href="#rebase-的作用">#</a> rebase 的作用？</h3><ul><li>rebase 可以保持提交记录简洁，不分叉</li></ul><p><img data-src="rebase.png" alt="rebase" /></p><h4 id="快速解决冲突"><a class="anchor" href="#快速解决冲突">#</a> 快速解决冲突</h4><ul><li>安装 beyond compare</li><li>在 git 中配置</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git config --local merge.tool bc3</pre></td></tr><tr><td data-num="2"></td><td><pre>  git config --local mergetool.path <span class="token string">'usr/local/bin/bcomp'</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  git config --local mergetool.keepBackup false</pre></td></tr></table></figure><ul><li>3. 应用 beyond compare 解决冲突</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git mergetool</pre></td></tr></table></figure><h4 id="小总结"><a class="anchor" href="#小总结">#</a> 小总结</h4><ul><li>添加远程连接（别名）</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git remote add origin 地址</pre></td></tr></table></figure><ul><li>推送代码</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git push origin dev</pre></td></tr></table></figure><ul><li>下载代码</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git clone 地址</pre></td></tr></table></figure><ul><li>拉取代码</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git pull origin dev</pre></td></tr><tr><td data-num="2"></td><td><pre>等价于</pre></td></tr><tr><td data-num="3"></td><td><pre>git fetch origin dev </pre></td></tr><tr><td data-num="4"></td><td><pre>git merge origin/dev</pre></td></tr></table></figure><ul><li>保持代码提交整洁（变基）</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git rebase 分支</pre></td></tr></table></figure><ul><li>记录图形展示</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git log --graph --pretty=format:"%h %s</pre></td></tr></table></figure><h3 id="第六阶段多人协同开发工作流"><a class="anchor" href="#第六阶段多人协同开发工作流">#</a> 第六阶段：多人协同开发工作流</h3><p><img data-src="duoren.png" alt="duoren" /></p><h4 id="创建项目-邀请成员"><a class="anchor" href="#创建项目-邀请成员">#</a> 创建项目 &amp; 邀请成员</h4><ul><li>协同开发时，需要所有成员都可以对同一个项目进行操作，需要邀请成员并赋予权限，否则无法开发。 github 支持两种创建项目的方式（供多人协同开发）。</li><li>合作者，将用户添加到仓库合作者中之后，该用户就可以向当前仓库提交代码。</li></ul><p><img data-src="hezuozhe.png" alt="hezuozhe" /></p><ul><li>组织，将成员邀请进入组织，组织下可以创建多个仓库，组织成员可以向组织下仓库提交代码。</li></ul><p><img data-src="zuzhi.png" alt="zuzhi" /></p><ul><li>v1.2 、v2.0 版本</li></ul><table><thead><tr><th>git tag -a v1.0 -m ' 版本介绍'</th><th>创建本地创建 Tag 信息</th></tr></thead><tbody><tr><td>git tag -d v1.0</td><td>删除 Tag</td></tr><tr><td>git push origin --tags</td><td>将本地 tag 信息推送到远程仓库</td></tr><tr><td>git pull origin --tags</td><td>更新本地 tag 版本信息</td></tr><tr><td>git checkout v.10</td><td>切换 tag</td></tr><tr><td>git clone -b v0.1 地址</td><td>指定 tag 下载代码</td></tr></tbody></table><h4 id="小弟开发"><a class="anchor" href="#小弟开发">#</a> 小弟开发</h4><ul><li>小弟注册 Github 或 Gitlab 账号</li><li>邀请小弟进入组织（默认对组织中的项目具有读权限）</li></ul><p><img data-src="yaoqing.png" alt="yaoqing" /></p><ul><li>邀请小弟成为某项目的合作者</li></ul><p><img data-src="hezuozheyaoqing.png" alt="hezuozheyaoqing" /></p><ul><li>小弟在自己电脑上下载代码并开发</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git clone https://github.com/oldboy-org/dbhot.git cd dbhot</pre></td></tr><tr><td data-num="2"></td><td><pre>git checkout dev</pre></td></tr><tr><td data-num="3"></td><td><pre>git checkout -b dzz</pre></td></tr><tr><td data-num="4"></td><td><pre>写代码...</pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>git add .</pre></td></tr><tr><td data-num="7"></td><td><pre>git commit -m <span class="token string">'斗地主功能开发完成'</span></pre></td></tr><tr><td data-num="8"></td><td><pre>git push origin ddz</pre></td></tr></table></figure><h4 id="code-review"><a class="anchor" href="#code-review">#</a> code review</h4><ul><li>配置，代码 review 之后才能合并到 dev 分支。</li></ul><p><img data-src="code-review1.png" alt="code-review1" /></p><p><img data-src="code-review2.png" alt="code-review1" /></p><ul><li>小弟提交 code review 申请</li></ul><p><img data-src="code-review3.png" alt="code-review1" /></p><p><img data-src="code-review4.png" alt="code-review1" /></p><ul><li>组长做 code review</li></ul><p><img data-src="code-review5.png" alt="code-review1" /></p><p><img data-src="code-review6.png" alt="code-review1" /></p><h4 id="提测上线预发布"><a class="anchor" href="#提测上线预发布">#</a> 提测上线（预发布）</h4><ul><li>由专门团队或团队 leader 执行以下步骤:</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>1.基于dev分值创建release分值</pre></td></tr><tr><td data-num="2"></td><td><pre>git checkout dev</pre></td></tr><tr><td data-num="3"></td><td><pre>git checkout -b release</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>2.测试等</pre></td></tr><tr><td data-num="6"></td><td><pre>3.合并到master</pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>  使用 pull request</pre></td></tr><tr><td data-num="9"></td><td><pre>  或</pre></td></tr><tr><td data-num="10"></td><td><pre>  本地将release合并到master分支</pre></td></tr><tr><td data-num="11"></td><td><pre>  </pre></td></tr><tr><td data-num="12"></td><td><pre>4.在master分支打tag</pre></td></tr><tr><td data-num="13"></td><td><pre>  git tag -a v2 -m '第二版 斗地主功能’</pre></td></tr><tr><td data-num="14"></td><td><pre>  git push origin --tags</pre></td></tr><tr><td data-num="15"></td><td><pre>  </pre></td></tr><tr><td data-num="16"></td><td><pre>5.运维人员就可以去下载代码做上线了</pre></td></tr><tr><td data-num="17"></td><td><pre>  git clone -b v2 地址</pre></td></tr></table></figure><h3 id="第七阶段给开源软件贡献代码"><a class="anchor" href="#第七阶段给开源软件贡献代码">#</a> 第七阶段：给开源软件贡献代码</h3><ul><li>fork 源代码将别人源代码拷贝到我自己的远程仓库。</li><li>在自己仓库进行修改代码</li><li>给源代码的作者提交修复 bug 的申请 (pull request)</li></ul><h2 id="第三章-其他"><a class="anchor" href="#第三章-其他">#</a> 第三章 其他</h2><h3 id="配置"><a class="anchor" href="#配置">#</a> 配置</h3><ul><li>项目配置文件：项目 /.git/config</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git config --local user.name <span class="token string">'武沛齐'</span></pre></td></tr><tr><td data-num="2"></td><td><pre>git config --local user.email 'wupeiqi@xx.com</pre></td></tr></table></figure><ul><li>全局配置文件:~/.gitconfig</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git config --global user.name <span class="token string">'wupeiq'</span></pre></td></tr><tr><td data-num="2"></td><td><pre>git config --global user.name 'wupeiqi@xx.com</pre></td></tr></table></figure><ul><li>系统配置文件：/etc/.gitconfig</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git config --system user.name <span class="token string">'wupeiq'</span></pre></td></tr><tr><td data-num="2"></td><td><pre>git config --system user.name <span class="token string">'wupeiqi@xx.com'</span></pre></td></tr><tr><td data-num="3"></td><td><pre>注意：需要有root权限</pre></td></tr></table></figure><ul><li>应用场景</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git config --local user.name <span class="token string">'武沛齐'</span></pre></td></tr><tr><td data-num="2"></td><td><pre>git config --local user.email <span class="token string">'wupeiqi@xx.com'</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>git config --local merge.tool bc3</pre></td></tr><tr><td data-num="5"></td><td><pre>git config --local mergetool.path <span class="token string">'/usr/local/bin/bcomp'</span></pre></td></tr><tr><td data-num="6"></td><td><pre>git config --local mergetool.keepBackup false</pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>git remote add origin地址，默认添加在本地配置文件中（--local）</pre></td></tr></table></figure><h3 id="免密码登录"><a class="anchor" href="#免密码登录">#</a> 免密码登录</h3><ul><li>URL 中体现</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>原来的地址：https://github.com/WuPeiqi/dbhot.git</pre></td></tr><tr><td data-num="2"></td><td><pre>修改的地址：https://用户名：密码@github.com/WuPeiqi/dbhot.git</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>git remote add origin https://用户名：密码@github.com/WuPeiqi/dbhot.git git push origin master</pre></td></tr></table></figure><ul><li>SH 实现</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>1.生成公钥和私钥（默认放在~/.ssh目录下，id_rsa.pub公钥、id_rsa私钥）</pre></td></tr><tr><td data-num="2"></td><td><pre>  ssh-keygen</pre></td></tr><tr><td data-num="3"></td><td><pre>2.拷贝公钥的内容，并设置到github中。</pre></td></tr><tr><td data-num="4"></td><td><pre>3.在git本地中配置ssh地址</pre></td></tr><tr><td data-num="5"></td><td><pre>  git remote add origin git@github.com:WuPeiqi/dbhot.git</pre></td></tr><tr><td data-num="6"></td><td><pre>4.以后使用</pre></td></tr><tr><td data-num="7"></td><td><pre>  git push origin master</pre></td></tr></table></figure><ul><li>git 自动管理凭证</li></ul><h3 id="git忽略文件"><a class="anchor" href="#git忽略文件">#</a> git 忽略文件</h3><ul><li>让 Git 不再管理当前目录下的某些文件</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>*.h</pre></td></tr><tr><td data-num="2"></td><td><pre>! a. h</pre></td></tr><tr><td data-num="3"></td><td><pre>fi les/</pre></td></tr><tr><td data-num="4"></td><td><pre>*.py[c|a|d]</pre></td></tr></table></figure><ul><li>更多参考：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dpdGh1Yi9naXRpZ25vcmU=">https://github.com/github/gitignore</span></li></ul><h3 id="github任务管理相关"><a class="anchor" href="#github任务管理相关">#</a> github 任务管理相关</h3><ul><li>issues，文档以及任务管理</li><li>wiki，项目文档</li></ul><h2 id="结课"><a class="anchor" href="#结课">#</a> 结课</h2><ul><li>感谢各位同学的关注和学习，希望 git 实战课程对你能够有所帮助，更多资源关注:<ul><li>小猿圈 <span class="exturl" data-url="aHR0cDovL3d3dy5hcGVsYW5kLmNu">www.apeland.cn</span></li><li>路飞学城 <span class="exturl" data-url="aHR0cDovL3d3dy5sdWZmeWNpdHkuY29t">www.luffycity.com</span></li><li>老男孩 IT 教育 <span class="exturl" data-url="aHR0cDovL3d3dy5vbGRib3llZHUuY29t">www.oldboyedu.com</span></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;第一章-快速入门&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#第一章-快速入门&quot;&gt;#&lt;/a&gt; 第一章 快速入门&lt;/h2&gt;
&lt;h3 id=&quot;什么是git&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#什么是git&quot;&gt;#&lt;/a&gt; 什么是 Git&lt;/h3&gt;</summary>
      
    
    
    
    <category term="Git" scheme="https://nekoaimer.com/categories/Git/"/>
    
    
    <category term="Git" scheme="https://nekoaimer.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 实现无缝滚动轮播图(carousel)</title>
    <link href="https://nekoaimer.com/2022/02/12/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/carousel/"/>
    <id>https://nekoaimer.com/2022/02/12/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/carousel/</id>
    <published>2022-02-12T06:16:58.000Z</published>
    <updated>2022-04-04T02:25:56.112Z</updated>
    
    <content type="html"><![CDATA[<h2 id="html结构"><a class="anchor" href="#html结构">#</a> HTML 结构</h2><ul><li>HTML 结构搭建</li></ul><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./index.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>swiper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>swiper-items<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="15"></td><td><pre>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>swiper-item swiper-item1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./images/808.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="17"></td><td><pre>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="18"></td><td><pre>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>swiper-item swiper-item2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./images/821.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="20"></td><td><pre>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="21"></td><td><pre>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>swiper-item swiper-item3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./images/822.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="23"></td><td><pre>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="24"></td><td><pre>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>swiper-item swiper-item4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./images/823.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="26"></td><td><pre>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>indicator-dots<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn-left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Left<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Right<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>'</pre></td></tr><tr><td data-num="31"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="32"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./animation.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="33"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./index.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><h2 id="stylus-样式"><a class="anchor" href="#stylus-样式">#</a> Stylus 样式</h2><ul><li>Stylus ： <code>stylus -w index.styl -o index.css</code></li></ul><figure class="highlight stylus"><figcaption data-lang="stylus"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">* </span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token property-declaration"><span class="token property">margin</span> <span class="token number">0</span></span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token property-declaration"><span class="token property">padding</span> <span class="token number">0</span></span></pre></td></tr><tr><td data-num="4"></td><td><pre>  </pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token selector">.active</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token property-declaration"><span class="token property">background-color</span> <span class="token color">skyblue</span> <span class="token important">!important</span></span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token selector">.swiper </span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token property-declaration"><span class="token property">position</span> relative</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token property-declaration"><span class="token property">margin</span> <span class="token number">120</span><span class="token unit">px</span> auto</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token property-declaration"><span class="token property">width</span> <span class="token number">800</span><span class="token unit">px</span></span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token property-declaration"><span class="token property">height</span> <span class="token number">500</span><span class="token unit">px</span></span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token property-declaration"><span class="token property">overflow</span> hidden </span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token property-declaration"><span class="token property">background-color</span> <span class="token color">pink</span></span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token property-declaration"><span class="token property">box-sizing</span> border-box</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token selector">.swiper-items</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token property-declaration"><span class="token property">position</span> relative</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token comment">// width 3000px</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token property-declaration"><span class="token property">height</span> <span class="token number">500</span><span class="token unit">px</span></span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token property-declaration"><span class="token property">background-size</span> cover</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token selector">img </span></pre></td></tr><tr><td data-num="24"></td><td><pre>      <span class="token property-declaration"><span class="token property">width</span> <span class="token number">100</span><span class="token unit">%</span></span></pre></td></tr><tr><td data-num="25"></td><td><pre>      <span class="token property-declaration"><span class="token property">height</span> <span class="token number">100</span><span class="token unit">%</span></span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre>   <span class="token selector">.swiper-item</span></pre></td></tr><tr><td data-num="28"></td><td><pre>      <span class="token property-declaration"><span class="token property">float</span> left</span></pre></td></tr><tr><td data-num="29"></td><td><pre>      <span class="token property-declaration"><span class="token property">width</span> <span class="token number">800</span><span class="token unit">px</span></span></pre></td></tr><tr><td data-num="30"></td><td><pre>      <span class="token property-declaration"><span class="token property">height</span> <span class="token number">500</span><span class="token unit">px</span></span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre>   <span class="token selector">.swiper-item1</span></pre></td></tr><tr><td data-num="33"></td><td><pre>     <span class="token property-declaration"><span class="token property">background-color</span> <span class="token color">red</span></span></pre></td></tr><tr><td data-num="34"></td><td><pre>  </pre></td></tr><tr><td data-num="35"></td><td><pre>   <span class="token selector">.swiper-item2</span></pre></td></tr><tr><td data-num="36"></td><td><pre>     <span class="token property-declaration"><span class="token property">background-color</span> <span class="token color">purple</span></span></pre></td></tr><tr><td data-num="37"></td><td><pre>  </pre></td></tr><tr><td data-num="38"></td><td><pre>   <span class="token selector">.swiper-item3</span></pre></td></tr><tr><td data-num="39"></td><td><pre>     <span class="token property-declaration"><span class="token property">background-color</span> <span class="token color">pink</span></span></pre></td></tr><tr><td data-num="40"></td><td><pre>  </pre></td></tr><tr><td data-num="41"></td><td><pre>   <span class="token selector">.swiper-item4</span></pre></td></tr><tr><td data-num="42"></td><td><pre>     <span class="token property-declaration"><span class="token property">background-color</span> <span class="token color">yellow</span></span></pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre></pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token selector">.indicator-dots </span></pre></td></tr><tr><td data-num="47"></td><td><pre>  <span class="token property-declaration"><span class="token property">display</span> flex</span></pre></td></tr><tr><td data-num="48"></td><td><pre>  <span class="token property-declaration"><span class="token property">justify-content</span> center</span></pre></td></tr><tr><td data-num="49"></td><td><pre>  <span class="token property-declaration"><span class="token property">align-items</span>  center</span></pre></td></tr><tr><td data-num="50"></td><td><pre>  <span class="token property-declaration"><span class="token property">position</span> absolute</span></pre></td></tr><tr><td data-num="51"></td><td><pre>  <span class="token property-declaration"><span class="token property">bottom</span> <span class="token number">20</span><span class="token unit">px</span></span></pre></td></tr><tr><td data-num="52"></td><td><pre>  <span class="token property-declaration"><span class="token property">left</span> <span class="token number">50</span><span class="token unit">%</span></span></pre></td></tr><tr><td data-num="53"></td><td><pre>  <span class="token property-declaration"><span class="token property">transform</span> <span class="token func"><span class="token function">translateX</span><span class="token punctuation">(</span><span class="token number">-50</span><span class="token unit">%</span><span class="token punctuation">)</span></span></span></pre></td></tr><tr><td data-num="54"></td><td><pre>  <span class="token property-declaration"><span class="token property">width</span> <span class="token number">100</span><span class="token unit">%</span></span></pre></td></tr><tr><td data-num="55"></td><td><pre>  <span class="token property-declaration"><span class="token property">height</span> <span class="token number">30</span><span class="token unit">px</span></span></pre></td></tr><tr><td data-num="56"></td><td><pre>  <span class="token selector">&amp;>div</span></pre></td></tr><tr><td data-num="57"></td><td><pre>    <span class="token property-declaration"><span class="token property">cursor</span> pointer</span></pre></td></tr><tr><td data-num="58"></td><td><pre>    <span class="token property-declaration"><span class="token property">margin</span> <span class="token number">0</span> <span class="token number">5</span><span class="token unit">px</span></span></pre></td></tr><tr><td data-num="59"></td><td><pre>    <span class="token property-declaration"><span class="token property">width</span> <span class="token number">10</span><span class="token unit">px</span></span></pre></td></tr><tr><td data-num="60"></td><td><pre>    <span class="token property-declaration"><span class="token property">height</span> <span class="token number">10</span><span class="token unit">px</span></span></pre></td></tr><tr><td data-num="61"></td><td><pre>    <span class="token property-declaration"><span class="token property">border-radius</span> <span class="token number">50</span><span class="token unit">%</span></span></pre></td></tr><tr><td data-num="62"></td><td><pre>    <span class="token property-declaration"><span class="token property">border</span> <span class="token number">1</span><span class="token unit">px</span> solid <span class="token hexcode">#ccc</span></span></pre></td></tr><tr><td data-num="63"></td><td><pre>    <span class="token property-declaration"><span class="token property">background-color</span> <span class="token hexcode">#fff</span></span></pre></td></tr><tr><td data-num="64"></td><td><pre>    <span class="token selector">&amp;hover</span></pre></td></tr><tr><td data-num="65"></td><td><pre>      <span class="token property-declaration"><span class="token property">background-color</span> <span class="token color">skyblue</span></span></pre></td></tr><tr><td data-num="66"></td><td><pre></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token selector">.btn-left</pre></td></tr><tr><td data-num="68"></td><td><pre>.btn-right</span></pre></td></tr><tr><td data-num="69"></td><td><pre>  <span class="token property-declaration"><span class="token property">cursor</span> pointer</span></pre></td></tr><tr><td data-num="70"></td><td><pre>  <span class="token property-declaration"><span class="token property">color</span> <span class="token hexcode">#fff</span></span></pre></td></tr><tr><td data-num="71"></td><td><pre>  <span class="token property-declaration"><span class="token property">position</span> absolute</span></pre></td></tr><tr><td data-num="72"></td><td><pre>  <span class="token property-declaration"><span class="token property">top</span> <span class="token number">50</span><span class="token unit">%</span></span></pre></td></tr><tr><td data-num="73"></td><td><pre>  <span class="token property-declaration"><span class="token property">transform</span> <span class="token func"><span class="token function">translateY</span><span class="token punctuation">(</span><span class="token number">-50</span><span class="token unit">%</span><span class="token punctuation">)</span></span></span></pre></td></tr><tr><td data-num="74"></td><td><pre>  <span class="token property-declaration"><span class="token property">width</span> <span class="token number">50</span><span class="token unit">px</span></span></pre></td></tr><tr><td data-num="75"></td><td><pre>  <span class="token property-declaration"><span class="token property">height</span> <span class="token number">40</span><span class="token unit">px</span></span></pre></td></tr><tr><td data-num="76"></td><td><pre>  <span class="token property-declaration"><span class="token property">text-align</span> center</span></pre></td></tr><tr><td data-num="77"></td><td><pre>  <span class="token property-declaration"><span class="token property">line-height</span> <span class="token number">40</span><span class="token unit">px</span></span></pre></td></tr><tr><td data-num="78"></td><td><pre>  <span class="token property-declaration"><span class="token property">background-color</span> <span class="token func"><span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0.486</span><span class="token punctuation">)</span></span></span></pre></td></tr><tr><td data-num="79"></td><td><pre>  <span class="token property-declaration"><span class="token property">transition</span> all <span class="token number">.3</span><span class="token unit">s</span></span></pre></td></tr><tr><td data-num="80"></td><td><pre>  <span class="token selector">&amp;hover</span></pre></td></tr><tr><td data-num="81"></td><td><pre>    <span class="token property-declaration"><span class="token property">background-color</span> <span class="token hexcode">#ccc</span></span></pre></td></tr><tr><td data-num="82"></td><td><pre><span class="token selector">.btn-left</span></pre></td></tr><tr><td data-num="83"></td><td><pre>  <span class="token property-declaration"><span class="token property">left</span> <span class="token number">0</span></span></pre></td></tr><tr><td data-num="84"></td><td><pre>  <span class="token property-declaration"><span class="token property">border-top-right-radius</span> <span class="token number">10</span><span class="token unit">%</span></span></pre></td></tr><tr><td data-num="85"></td><td><pre>  <span class="token property-declaration"><span class="token property">border-bottom-right-radius</span> <span class="token number">10</span><span class="token unit">%</span></span></pre></td></tr><tr><td data-num="86"></td><td><pre></pre></td></tr><tr><td data-num="87"></td><td><pre><span class="token selector">.btn-right</span></pre></td></tr><tr><td data-num="88"></td><td><pre>  <span class="token property-declaration"><span class="token property">right</span> <span class="token number">0</span></span></pre></td></tr><tr><td data-num="89"></td><td><pre>  <span class="token property-declaration"><span class="token property">border-top-left-radius</span> <span class="token number">10</span><span class="token unit">%</span></span></pre></td></tr><tr><td data-num="90"></td><td><pre>  <span class="token property-declaration"><span class="token property">border-bottom-left-radius</span> <span class="token number">10</span><span class="token unit">%</span></span></pre></td></tr></table></figure><h2 id="css-样式"><a class="anchor" href="#css-样式">#</a> CSS 样式</h2><ul><li>编译后的 CSS 样式</li></ul><figure class="highlight css"><figcaption data-lang="CSS"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">*</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token selector">.active</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token property">background-color</span><span class="token punctuation">:</span> #87ceeb <span class="token important">!important</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token selector">.swiper</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token property">margin</span><span class="token punctuation">:</span> 120px auto<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token property">width</span><span class="token punctuation">:</span> 800px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token property">height</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token property">background-color</span><span class="token punctuation">:</span> #ffc0cb<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token selector">.swiper .swiper-items</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token property">height</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token property">background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token selector">.swiper .swiper-items img</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token selector">.swiper .swiper-item</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>  <span class="token property">width</span><span class="token punctuation">:</span> 800px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>  <span class="token property">height</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token selector">.swiper .swiper-item1</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>  <span class="token property">background-color</span><span class="token punctuation">:</span> #f00<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token selector">.swiper .swiper-item2</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>  <span class="token property">background-color</span><span class="token punctuation">:</span> #800080<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token selector">.swiper .swiper-item3</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>  <span class="token property">background-color</span><span class="token punctuation">:</span> #ffc0cb<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token selector">.swiper .swiper-item4</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>  <span class="token property">background-color</span><span class="token punctuation">:</span> #ff0<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token selector">.indicator-dots</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>  <span class="token property">bottom</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>  <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>-50%<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>  <span class="token property">height</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token selector">.indicator-dots>div</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>  <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>  <span class="token property">margin</span><span class="token punctuation">:</span> 0 5px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>  <span class="token property">width</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>  <span class="token property">height</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>  <span class="token property">border-radius</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #ccc<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>  <span class="token property">background-color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token selector">.indicator-dots>divhover</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>  <span class="token property">background-color</span><span class="token punctuation">:</span> #87ceeb<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token selector">.btn-left,</pre></td></tr><tr><td data-num="67"></td><td><pre>.btn-right</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>  <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>  <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="70"></td><td><pre>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="71"></td><td><pre>  <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="72"></td><td><pre>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-50%<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="73"></td><td><pre>  <span class="token property">width</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="74"></td><td><pre>  <span class="token property">height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="75"></td><td><pre>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="76"></td><td><pre>  <span class="token property">line-height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="77"></td><td><pre>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span>255<span class="token punctuation">,</span>255<span class="token punctuation">,</span>0.486<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="78"></td><td><pre>  <span class="token property">transition</span><span class="token punctuation">:</span> all 0.3s<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="79"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="80"></td><td><pre><span class="token selector">.btn-left:hover,</pre></td></tr><tr><td data-num="81"></td><td><pre>.btn-right:hover</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="82"></td><td><pre>  <span class="token property">background-color</span><span class="token punctuation">:</span> #ccc<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="83"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="84"></td><td><pre><span class="token selector">.btn-left</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="85"></td><td><pre>  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="86"></td><td><pre>  <span class="token property">border-top-right-radius</span><span class="token punctuation">:</span> 10%<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="87"></td><td><pre>  <span class="token property">border-bottom-right-radius</span><span class="token punctuation">:</span> 10%<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="88"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="89"></td><td><pre><span class="token selector">.btn-right</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="90"></td><td><pre>  <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="91"></td><td><pre>  <span class="token property">border-top-left-radius</span><span class="token punctuation">:</span> 10%<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="92"></td><td><pre>  <span class="token property">border-bottom-left-radius</span><span class="token punctuation">:</span> 10%<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="93"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="animate-动画"><a class="anchor" href="#animate-动画">#</a> animate 动画</h2><ul><li>封装动画效果，支持左右上下滚动</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">animate</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> target<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> offsetDirection <span class="token operator">=</span> <span class="token string">'offsetLeft'</span><span class="token punctuation">,</span> delay <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>timer<span class="token punctuation">)</span> <span class="token function">clearInterval</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>timer<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token comment">// 实现 timing-function 效果</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token keyword">function</span> <span class="token function">calcStep</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> x <span class="token operator">=</span> <span class="token number">10</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">let</span> step <span class="token operator">=</span> <span class="token punctuation">(</span>target <span class="token operator">-</span> obj<span class="token punctuation">[</span>offsetDirection<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> x</pre></td></tr><tr><td data-num="9"></td><td><pre>    step <span class="token operator">=</span> step <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span> <span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">return</span> step</pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token comment">// 判断哪种滚动方式</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token keyword">const</span> <span class="token function-variable function">offset</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> offsetDirection <span class="token operator">===</span> <span class="token string">'offsetTop'</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  </pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token comment">//setInterval 执行的回调函数</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token keyword">const</span> <span class="token function-variable function">handler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token comment">// 如果到达目的地清除定时器且判断后是否执行 callback 函数 这里用于节流</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">[</span>offsetDirection<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </pre></td></tr><tr><td data-num="20"></td><td><pre>      <span class="token function">clearInterval</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>timer<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>      callback <span class="token operator">&amp;&amp;</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> obj<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> obj<span class="token punctuation">[</span>offsetDirection<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">calcStep</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'px'</span></pre></td></tr><tr><td data-num="24"></td><td><pre>      <span class="token keyword">else</span> obj<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> obj<span class="token punctuation">[</span>offsetDirection<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">calcStep</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'px'</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>  </pre></td></tr><tr><td data-num="28"></td><td><pre>  obj<span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="indexjs"><a class="anchor" href="#indexjs">#</a> index.js</h2><ul><li>操作元素实例</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">,</span> loadCallback<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">function</span> <span class="token function">loadCallback</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token comment">// 将选择器以对象形式存储</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token literal-property property">swiper</span><span class="token operator">:</span> <span class="token string">'.swiper'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token literal-property property">swiperItem</span><span class="token operator">:</span> <span class="token string">'.swiper-item'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token literal-property property">swiperItems</span><span class="token operator">:</span> <span class="token string">'.swiper-items'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token literal-property property">indicatorDot</span><span class="token operator">:</span> <span class="token string">'.indicator-dot'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token literal-property property">indicatorDots</span><span class="token operator">:</span> <span class="token string">'.indicator-dots'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token literal-property property">btnLeft</span><span class="token operator">:</span> <span class="token string">'.btn-left'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token literal-property property">btnRight</span><span class="token operator">:</span> <span class="token string">'.btn-right'</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token keyword">class</span> <span class="token class-name">OperatingElements</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>      <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> swiper<span class="token punctuation">,</span> swiperItems<span class="token punctuation">,</span> indicatorDots<span class="token punctuation">,</span> btnLeft<span class="token punctuation">,</span> btnRight <span class="token punctuation">&#125;</span> <span class="token operator">=</span> options</pre></td></tr><tr><td data-num="18"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// 控制节流阀开关</span></pre></td></tr><tr><td data-num="19"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>options <span class="token operator">=</span> options <span class="token comment">// 所有选择器</span></pre></td></tr><tr><td data-num="20"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>swiper <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getElement</span><span class="token punctuation">(</span>swiper<span class="token punctuation">)</span>  <span class="token comment">// 获取 class -> swiper 盒子 </span></pre></td></tr><tr><td data-num="21"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>swiperItem <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getElement</span><span class="token punctuation">(</span>swiperItems<span class="token punctuation">)</span> <span class="token comment">// 获取 class -> swiper-swiperItems 盒子</span></pre></td></tr><tr><td data-num="22"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>indicatorDot <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getElement</span><span class="token punctuation">(</span>indicatorDots<span class="token punctuation">)</span> <span class="token comment">// 获取指示器</span></pre></td></tr><tr><td data-num="23"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>btnLeft <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getElement</span><span class="token punctuation">(</span>btnLeft<span class="token punctuation">)</span> <span class="token comment">// 获取做左按钮</span></pre></td></tr><tr><td data-num="24"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>btnRight <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getElement</span><span class="token punctuation">(</span>btnRight<span class="token punctuation">)</span> <span class="token comment">// 获取做右按钮</span></pre></td></tr><tr><td data-num="25"></td><td><pre>      <span class="token comment">// 这里需要先等 this.swiperItems 全部获取图片父盒子元素到再执行获取第一张图片盒子宽度</span></pre></td></tr><tr><td data-num="26"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span>swiperItemWidth <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getElWidth</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>swiperItems<span class="token punctuation">)</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="27"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>swiperItem<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>swiperItemFirst<span class="token punctuation">)</span> <span class="token comment">// 追加克隆的图片到最后面</span></pre></td></tr><tr><td data-num="28"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSwiperItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 再次获取所有图片父盒子宽度</span></pre></td></tr><tr><td data-num="29"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>indicatorDots<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'indicator-dot active'</span> <span class="token comment">// 默认第一个小圆圈加样式</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token comment">// 再次初始化</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>      <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> swiperItem<span class="token punctuation">,</span> swiperItems<span class="token punctuation">,</span> indicatorDot<span class="token punctuation">,</span> indicatorDots <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options</pre></td></tr><tr><td data-num="34"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>swiperItems <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getElement</span><span class="token punctuation">(</span>swiperItem<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// 获取所有图片父盒子</span></pre></td></tr><tr><td data-num="35"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>swiperItemFirst <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cloneEl</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>swiperItems<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 克隆第一张</span></pre></td></tr><tr><td data-num="36"></td><td><pre>      callback <span class="token operator">&amp;&amp;</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 回调</span></pre></td></tr><tr><td data-num="37"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>indicatorDots <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getElement</span><span class="token punctuation">(</span>indicatorDot<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// 获取所有指示器</span></pre></td></tr><tr><td data-num="38"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createIndicatorDots</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>swiperItems<span class="token punctuation">)</span> <span class="token comment">// 动态创建所有指示器</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>    <span class="token comment">// 获取所有 calss 是 swiper-item 的元素 </span></pre></td></tr><tr><td data-num="41"></td><td><pre>    <span class="token function">getSwiperItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>swiperItems <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getElement</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>swiperItem<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>    <span class="token comment">// 传入选择器获取元素</span></pre></td></tr><tr><td data-num="45"></td><td><pre>    <span class="token function">getElement</span><span class="token punctuation">(</span><span class="token parameter">selector<span class="token punctuation">,</span> isAll <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span>isAll<span class="token punctuation">)</span> <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="47"></td><td><pre>      <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="48"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>    <span class="token comment">// 获取元素宽度</span></pre></td></tr><tr><td data-num="50"></td><td><pre>    <span class="token function">getElWidth</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>swiperItems<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object NodeList]'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>        <span class="token keyword">return</span> target<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>offsetWidth</pre></td></tr><tr><td data-num="53"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>      <span class="token keyword">return</span> target<span class="token punctuation">.</span>offsetWidth</pre></td></tr><tr><td data-num="55"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>    <span class="token comment">// 克隆元素</span></pre></td></tr><tr><td data-num="57"></td><td><pre>    <span class="token function">cloneEl</span><span class="token punctuation">(</span><span class="token parameter">targetEl<span class="token punctuation">,</span> deep <span class="token operator">=</span> <span class="token boolean">true</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>      <span class="token keyword">return</span> targetEl<span class="token operator">?.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span>deep<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="59"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>    <span class="token comment">// 插入元素 并再次给计算 class 是 swiper-item 盒子的宽度</span></pre></td></tr><tr><td data-num="61"></td><td><pre>    <span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token parameter">parentEl<span class="token punctuation">,</span> cihldEl<span class="token punctuation">,</span> isExec</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>      parentEl <span class="token operator">&amp;&amp;</span> parentEl<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>cihldEl<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="63"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span>isExec<span class="token punctuation">)</span> <span class="token keyword">return</span></pre></td></tr><tr><td data-num="64"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSwiperItemsWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="65"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="66"></td><td><pre>    <span class="token comment">// 创建元素</span></pre></td></tr><tr><td data-num="67"></td><td><pre>    <span class="token function">createEl</span><span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>      <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="69"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="70"></td><td><pre>    <span class="token comment">// 设置属性</span></pre></td></tr><tr><td data-num="71"></td><td><pre>    <span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="72"></td><td><pre>      target<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="73"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="74"></td><td><pre>    <span class="token comment">// 设置 class 是 swiper-item 的盒子元素宽度</span></pre></td></tr><tr><td data-num="75"></td><td><pre>    <span class="token function">setSwiperItemsWidth</span><span class="token punctuation">(</span><span class="token parameter">swiperItems<span class="token punctuation">,</span> targetEl</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="76"></td><td><pre>      targetEl <span class="token operator">||=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getElement</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>swiperItems<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="77"></td><td><pre>      swiperItems <span class="token operator">||=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getElement</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>swiperItem<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="78"></td><td><pre>      <span class="token keyword">const</span> width <span class="token operator">=</span> swiperItems<span class="token punctuation">.</span>length <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getElWidth</span><span class="token punctuation">(</span>swiperItems<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="79"></td><td><pre>      targetEl<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> width <span class="token operator">+</span> <span class="token string">'px'</span></pre></td></tr><tr><td data-num="80"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="81"></td><td><pre>    <span class="token comment">// 动态追加小圆圈</span></pre></td></tr><tr><td data-num="82"></td><td><pre>    <span class="token function">createIndicatorDots</span><span class="token punctuation">(</span><span class="token parameter">swiperItems</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="83"></td><td><pre>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> swiperItems<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="84"></td><td><pre>        <span class="token keyword">const</span> indicatorDot <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createEl</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="85"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>indicatorDot<span class="token punctuation">,</span> <span class="token string">'class'</span><span class="token punctuation">,</span> <span class="token string">'indicator-dot'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="86"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>indicatorDot<span class="token punctuation">,</span> indicatorDot<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="87"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="88"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>indicatorDots <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getElement</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>indicatorDot<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="89"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="90"></td><td><pre>    <span class="token comment">// 清除 class 为 indicator-dot 的所有样式</span></pre></td></tr><tr><td data-num="91"></td><td><pre>    <span class="token function">resetClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="92"></td><td><pre>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>indicatorDots<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="93"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>indicatorDots<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'indicator-dot'</span></pre></td></tr><tr><td data-num="94"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="95"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="96"></td><td><pre>    <span class="token comment">// 点击的小圆圈追加样式</span></pre></td></tr><tr><td data-num="97"></td><td><pre>    <span class="token function">circleChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="98"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resetClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="99"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>indicatorDots<span class="token punctuation">[</span>circle<span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'indicator-dot active'</span></pre></td></tr><tr><td data-num="100"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="101"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="102"></td><td><pre></pre></td></tr><tr><td data-num="103"></td><td><pre>  <span class="token comment">// 实例</span></pre></td></tr><tr><td data-num="104"></td><td><pre>  operatingElements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OperatingElements</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="105"></td><td><pre></pre></td></tr><tr><td data-num="106"></td><td><pre>  <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="107"></td><td><pre>  <span class="token comment">// 所有小圆点事件</span></pre></td></tr><tr><td data-num="108"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> operatingElements<span class="token punctuation">.</span>indicatorDots<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="109"></td><td><pre>    operatingElements<span class="token punctuation">.</span>indicatorDots<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="110"></td><td><pre>      operatingElements<span class="token punctuation">.</span><span class="token function">resetClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="111"></td><td><pre>      operatingElements<span class="token punctuation">.</span>indicatorDots<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'indicator-dot active'</span></pre></td></tr><tr><td data-num="112"></td><td><pre>      index <span class="token operator">=</span> i</pre></td></tr><tr><td data-num="113"></td><td><pre>      <span class="token function">animate</span><span class="token punctuation">(</span>operatingElements<span class="token punctuation">.</span>swiperItem<span class="token punctuation">,</span> <span class="token operator">-</span>operatingElements<span class="token punctuation">.</span>swiperItemWidth <span class="token operator">*</span> i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="114"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="115"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="116"></td><td><pre></pre></td></tr><tr><td data-num="117"></td><td><pre>  <span class="token keyword">let</span> circle <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="118"></td><td><pre></pre></td></tr><tr><td data-num="119"></td><td><pre>  <span class="token comment">// 左按钮</span></pre></td></tr><tr><td data-num="120"></td><td><pre>  <span class="token keyword">function</span> <span class="token function">btnLeftClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="121"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>operatingElements<span class="token punctuation">.</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="122"></td><td><pre>      operatingElements<span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="123"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="124"></td><td><pre>        index <span class="token operator">=</span> operatingElements<span class="token punctuation">.</span>indicatorDots<span class="token punctuation">.</span>length</pre></td></tr><tr><td data-num="125"></td><td><pre>        operatingElements<span class="token punctuation">.</span>swiperItem<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token operator">-</span>index <span class="token operator">*</span> operatingElements<span class="token punctuation">.</span>swiperItemWidth <span class="token operator">+</span> <span class="token string">'px'</span></pre></td></tr><tr><td data-num="126"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="127"></td><td><pre>  </pre></td></tr><tr><td data-num="128"></td><td><pre>      index<span class="token operator">--</span></pre></td></tr><tr><td data-num="129"></td><td><pre>      <span class="token function">animate</span><span class="token punctuation">(</span>operatingElements<span class="token punctuation">.</span>swiperItem<span class="token punctuation">,</span> operatingElements<span class="token punctuation">.</span>swiperItemWidth <span class="token operator">*</span> <span class="token operator">-</span>index<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> operatingElements<span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="130"></td><td><pre>  </pre></td></tr><tr><td data-num="131"></td><td><pre>      circle<span class="token operator">--</span></pre></td></tr><tr><td data-num="132"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span>circle <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> circle <span class="token operator">=</span> operatingElements<span class="token punctuation">.</span>indicatorDots<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="133"></td><td><pre>  </pre></td></tr><tr><td data-num="134"></td><td><pre>      operatingElements<span class="token punctuation">.</span><span class="token function">circleChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="135"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="136"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="137"></td><td><pre></pre></td></tr><tr><td data-num="138"></td><td><pre>  <span class="token comment">// 右按钮</span></pre></td></tr><tr><td data-num="139"></td><td><pre>  <span class="token keyword">function</span> <span class="token function">btnRightClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="140"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>operatingElements<span class="token punctuation">.</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="141"></td><td><pre>      operatingElements<span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="142"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> operatingElements<span class="token punctuation">.</span>indicatorDots<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="143"></td><td><pre>        operatingElements<span class="token punctuation">.</span>swiperItem<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="144"></td><td><pre>        index <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="145"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="146"></td><td><pre>  </pre></td></tr><tr><td data-num="147"></td><td><pre>      index<span class="token operator">++</span></pre></td></tr><tr><td data-num="148"></td><td><pre>      <span class="token comment">// 执行动画函数 计算动画的距离 传入回调函数进行节流阀操作</span></pre></td></tr><tr><td data-num="149"></td><td><pre>      <span class="token function">animate</span><span class="token punctuation">(</span>operatingElements<span class="token punctuation">.</span>swiperItem<span class="token punctuation">,</span> <span class="token operator">-</span>operatingElements<span class="token punctuation">.</span>swiperItemWidth <span class="token operator">*</span> index<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> operatingElements<span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="150"></td><td><pre>  </pre></td></tr><tr><td data-num="151"></td><td><pre>      circle<span class="token operator">++</span></pre></td></tr><tr><td data-num="152"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> operatingElements<span class="token punctuation">.</span>indicatorDots<span class="token punctuation">.</span>length<span class="token punctuation">)</span> circle <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="153"></td><td><pre>  </pre></td></tr><tr><td data-num="154"></td><td><pre>      operatingElements<span class="token punctuation">.</span><span class="token function">circleChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="155"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="156"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="157"></td><td><pre></pre></td></tr><tr><td data-num="158"></td><td><pre>  <span class="token comment">// 左右按钮点击事件</span></pre></td></tr><tr><td data-num="159"></td><td><pre>  operatingElements<span class="token punctuation">.</span>btnLeft<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> btnLeftClick<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="160"></td><td><pre>  operatingElements<span class="token punctuation">.</span>btnRight<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> btnRightClick<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="161"></td><td><pre></pre></td></tr><tr><td data-num="162"></td><td><pre>  <span class="token comment">// 自动播放 间隔 3000ms</span></pre></td></tr><tr><td data-num="163"></td><td><pre>  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span></pre></td></tr><tr><td data-num="164"></td><td><pre>  <span class="token keyword">function</span> <span class="token function">autoplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="165"></td><td><pre>    timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="166"></td><td><pre>      operatingElements<span class="token punctuation">.</span>btnRight<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="167"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="168"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="169"></td><td><pre>  <span class="token function">autoplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="170"></td><td><pre></pre></td></tr><tr><td data-num="171"></td><td><pre>  <span class="token comment">// 进入隐藏按钮</span></pre></td></tr><tr><td data-num="172"></td><td><pre>  operatingElements<span class="token punctuation">.</span>swiper<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mouseenter'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="173"></td><td><pre>    operatingElements<span class="token punctuation">.</span>btnLeft<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'block'</span></pre></td></tr><tr><td data-num="174"></td><td><pre>    operatingElements<span class="token punctuation">.</span>btnRight<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'block'</span></pre></td></tr><tr><td data-num="175"></td><td><pre>    <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="176"></td><td><pre>    timer <span class="token operator">=</span> <span class="token keyword">null</span></pre></td></tr><tr><td data-num="177"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="178"></td><td><pre>  <span class="token comment">// 离开显示按钮</span></pre></td></tr><tr><td data-num="179"></td><td><pre>  operatingElements<span class="token punctuation">.</span>swiper<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mouseleave'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="180"></td><td><pre>    operatingElements<span class="token punctuation">.</span>btnLeft<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span></pre></td></tr><tr><td data-num="181"></td><td><pre>    operatingElements<span class="token punctuation">.</span>btnRight<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span></pre></td></tr><tr><td data-num="182"></td><td><pre>    <span class="token function">autoplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="183"></td><td><pre>  <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="184"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>operatingElements<span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="185"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;html结构&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#html结构&quot;&gt;#&lt;/a&gt; HTML 结构&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;HTML 结构搭建&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;figcaption</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://nekoaimer.com/categories/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.com/categories/JavaScript/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.com/tags/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.com/tags/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 实现 Vuex</title>
    <link href="https://nekoaimer.com/2022/02/01/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/vuex/"/>
    <id>https://nekoaimer.com/2022/02/01/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/vuex/</id>
    <published>2022-02-01T12:27:24.000Z</published>
    <updated>2022-03-25T04:29:39.072Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vuex-介绍"><a class="anchor" href="#vuex-介绍">#</a> Vuex 介绍</h2><ul><li>Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式 + 库</strong>。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</li><li>详情查看：<span class="exturl" data-url="aHR0cHM6Ly92dWV4LnZ1ZWpzLm9yZy96aC8=">Vuex 是什么？ | Vuex (vuejs.org)</span></li></ul><h2 id="实现-vuex-思路"><a class="anchor" href="#实现-vuex-思路">#</a> 实现 Vuex 思路</h2><ul><li><p>首先 Vuex 是通过  <code>Vue.use(vuex)</code> ，说明 <code>vuex</code>  是个插件，肯定是要 <code>install</code>  函数</p></li><li><p>同时会传入 Vue，因为 vuex 是离不开 Vue 的，或者说是为他量身打造的一个工具</p></li><li><p>其次每个组件都可以使用 <code>$store</code> ，说明是挂载在每个组件上的，那么我们可以使用混入 (mixin)，在 <code>beforeCreate</code>  生命周期中混入是最好的</p></li><li><p>然后就是进行的一些列针对 <code>Store</code>  的操作，其中最核心的是 <code>module</code> ，或者说 <code>vuex</code>  最核心的部分就是模块化了</p></li><li><p>那么根据 module 我们会创建一个类 <code>(ModuleCollection)</code>  通过递归注册模块，形成树结构</p></li><li><p>最就是根据树结构我们会实现一个函数，通过递归来安装模块，其中会封装一写工具函数，或者封装类和类的公用方法</p></li><li><p>另外还会就是实现注册模块、vuex 的插件持久化，以及严格模式下 (strice:true) 只能通过 mutation 来更改状态等功能和一些辅助函数</p><ul><li>最后放一张最终完成后的目录结构图</li></ul></li></ul><p><img data-src="directory-structure.png" alt="directory-structure" /></p><h2 id="mixin"><a class="anchor" href="#mixin">#</a> mixin</h2><ul><li>这是第一步，给每个组件添加 <code>$store</code>  属性，供所有组件都能使用</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">vuexInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$options<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token comment">// 判断根组件是否有 store</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>store<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token comment">// 根实例先添加</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>$store <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$options<span class="token punctuation">.</span>store</pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>parent <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>$store<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token comment">// 子组件拿到父组件的 store</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>$store <span class="token operator">=</span> options<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>$store<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">const</span> <span class="token function-variable function">applyMixin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">Vue</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  Vue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token literal-property property">beforeCreate</span><span class="token operator">:</span> vuexInit</pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> applyMixin</pre></td></tr></table></figure><h2 id="util"><a class="anchor" href="#util">#</a> util</h2><ul><li>将工具函数抽取出来，使代码简洁明了点</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 这个函数功能会经常用到包括（模块的一些方法），所以在此封装成一个函数</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">forEachValue</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=></span> <span class="token function">fn</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// 根据路径获取最新的 state</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token parameter">store<span class="token punctuation">,</span> path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token keyword">return</span> path<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">newState<span class="token punctuation">,</span> current</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">return</span> newState<span class="token punctuation">[</span>current<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> store<span class="token punctuation">.</span>state<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="module"><a class="anchor" href="#module">#</a> module</h2><ul><li>封装的模块类，使每个类都能用到一些方法</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> forEachValue <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../utils"</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Module</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">rootModule</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>_rawModule <span class="token operator">=</span> rootModule</pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>_children <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> rootModule<span class="token punctuation">.</span>state</pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">get</span> <span class="token function">namespaced</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 属性访问器</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_rawModule<span class="token punctuation">.</span>namespaced</pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token function">getChild</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_children<span class="token punctuation">[</span>key<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token function">addChild</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> module</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>_children<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> module</pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token function">forEachMutation</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_rawModule<span class="token punctuation">.</span>mutations<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>      <span class="token function">forEachValue</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_rawModule<span class="token punctuation">.</span>mutations<span class="token punctuation">,</span> fn<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token function">forEachAction</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_rawModule<span class="token punctuation">.</span>actions<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>      <span class="token function">forEachValue</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_rawModule<span class="token punctuation">.</span>actions<span class="token punctuation">,</span> fn<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>  <span class="token function">forEachGetter</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_rawModule<span class="token punctuation">.</span>getters<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>      <span class="token function">forEachValue</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_rawModule<span class="token punctuation">.</span>getters<span class="token punctuation">,</span> fn<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>  <span class="token function">forEachChild</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_children<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>      <span class="token function">forEachValue</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_children<span class="token punctuation">,</span> fn<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="modulecollection"><a class="anchor" href="#modulecollection">#</a> moduleCollection</h2><ul><li>递归注册模块，形参树结构</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> forEachValue <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../utils"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> Module <span class="token keyword">from</span> <span class="token string">"./module"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">ModuleCollection</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token comment">// 注册模块 递归注册 根模块</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token function">register</span><span class="token punctuation">(</span><span class="token parameter">path<span class="token punctuation">,</span> rootModule</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token comment">// 创建 Module 类的实例，Module 类中封装了许多方法</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">let</span> newModule <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Module</span><span class="token punctuation">(</span>rootModule<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token comment">// 把当前要注册的模块上做了一个映射</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    rootModule<span class="token punctuation">.</span>rawModule <span class="token operator">=</span> newModule</pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>      <span class="token comment">// 刚开始肯定是没有 path 肯定是不存在的，所有添加一个 root 属性存入根模块</span></pre></td></tr><tr><td data-num="17"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> newModule</pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>      <span class="token comment">// 例如：['a', 'b', 'c'] 这种路径形式，代表 a 模块中有 b 模块，b 模块中有 c 模块</span></pre></td></tr><tr><td data-num="21"></td><td><pre>      <span class="token comment">// 那么其作用就是 c 应该在 b 模块中，所有 slice (0,-1) 拿到除最后一个的数组即 ['a','b']</span></pre></td></tr><tr><td data-num="22"></td><td><pre>      <span class="token comment">// 通过 reduce 取到 b 模块，再将 c 模块放入 b 模块中</span></pre></td></tr><tr><td data-num="23"></td><td><pre>      <span class="token keyword">let</span> parent <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=></span> module<span class="token punctuation">.</span><span class="token function">getChild</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>      parent<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span><span class="token punctuation">[</span>path<span class="token punctuation">[</span>path<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> newModule<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token comment">// 如果有 modules，说明有子模块进行递归注册</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rootModule<span class="token punctuation">.</span>modules<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>      <span class="token function">forEachValue</span><span class="token punctuation">(</span>rootModule<span class="token punctuation">.</span>modules<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> moduleName</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>path<span class="token punctuation">,</span> moduleName<span class="token punctuation">]</span><span class="token punctuation">,</span> module<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre>  <span class="token comment">// 获取命名空间</span></pre></td></tr><tr><td data-num="37"></td><td><pre>  <span class="token function">getNamespace</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token keyword">let</span> root <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root</pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token comment">// 根据 path 不断拿到对于模块查看是否有 namespace 属性</span></pre></td></tr><tr><td data-num="40"></td><td><pre>    <span class="token keyword">return</span> path<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">namespace<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>      root <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">getChild</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token comment">// 不断拿到子模块</span></pre></td></tr><tr><td data-num="42"></td><td><pre>      <span class="token comment">//// 有的话拼接上作为地址</span></pre></td></tr><tr><td data-num="43"></td><td><pre>      <span class="token keyword">return</span> namespace <span class="token operator">+</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>namespaced <span class="token operator">?</span> key <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="44"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="45"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="installmodule"><a class="anchor" href="#installmodule">#</a> installModule</h2><ul><li>递归安装模块及 Store 传入的 options</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> getState <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../utils'</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">installModule</span><span class="token punctuation">(</span><span class="token parameter">store<span class="token punctuation">,</span> rootState<span class="token punctuation">,</span> path<span class="token punctuation">,</span> module</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token comment">// 注册事件时 需要注册到对应的命名空间中 path 就是所有的路径 根据 path 算出一个空间里</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">let</span> namespace <span class="token operator">=</span> store<span class="token punctuation">.</span>_modules<span class="token punctuation">.</span><span class="token function">getNamespace</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">let</span> parent <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> current</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>      <span class="token keyword">return</span> state<span class="token punctuation">[</span>current<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> rootState<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>    store<span class="token punctuation">.</span><span class="token function">_withCommitting</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>      Vue<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> path<span class="token punctuation">[</span>path<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> module<span class="token punctuation">.</span>state<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre>  module<span class="token punctuation">.</span><span class="token function">forEachMutation</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">mutation<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    store<span class="token punctuation">.</span>_mutations<span class="token punctuation">[</span>namespace <span class="token operator">+</span> type<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>store<span class="token punctuation">.</span>_mutations<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    store<span class="token punctuation">.</span>_mutations<span class="token punctuation">[</span>namespace <span class="token operator">+</span> type<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">payload</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>      store<span class="token punctuation">.</span><span class="token function">_withCommitting</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token function">mutation</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> <span class="token function">getState</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>      store<span class="token punctuation">.</span>_subscribers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">sub</span> <span class="token operator">=></span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> mutation<span class="token punctuation">,</span> type <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> store<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre>  module<span class="token punctuation">.</span><span class="token function">forEachAction</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">action<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    store<span class="token punctuation">.</span>_actions<span class="token punctuation">[</span>namespace <span class="token operator">+</span> type<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>store<span class="token punctuation">.</span>_actions<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    store<span class="token punctuation">.</span>_actions<span class="token punctuation">[</span>namespace <span class="token operator">+</span> type<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">payload</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>      <span class="token function">action</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> store<span class="token punctuation">,</span> payload<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre>  module<span class="token punctuation">.</span><span class="token function">forEachGetter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">getter<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    store<span class="token punctuation">.</span>_wrappedGetters<span class="token punctuation">[</span>namespace <span class="token operator">+</span> key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>      <span class="token keyword">return</span> <span class="token function">getter</span><span class="token punctuation">(</span><span class="token function">getState</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre>  module<span class="token punctuation">.</span><span class="token function">forEachChild</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">child<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>    <span class="token function">installModule</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> rootState<span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">,</span> child<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="41"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="resetstorevm"><a class="anchor" href="#resetstorevm">#</a> resetStoreVm</h2><ul><li>将状态都挂载到 Vue 实例中，数据响应式</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> forEachValue <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../utils"</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">resetStoreVm</span><span class="token punctuation">(</span><span class="token parameter">store<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">const</span> wrappedGetters <span class="token operator">=</span> store<span class="token punctuation">.</span>_wrappedGetters</pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">let</span> oldVm <span class="token operator">=</span> store<span class="token punctuation">.</span>_vm</pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token keyword">let</span> computed <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  store<span class="token punctuation">.</span>getters <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token comment">//computed 缓存效果 当 computed 中值发送变化时再次订阅</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token function">forEachValue</span><span class="token punctuation">(</span>wrappedGetters<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    computed<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>      <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 将 getters 对应 key 的函数调用</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>getters<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>      <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> store<span class="token punctuation">.</span>_vm<span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token comment">// 读取时在 vm 上拿</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token comment">// 创建 Vue 实例实现数据响应式</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  store<span class="token punctuation">.</span>_vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>      <span class="token literal-property property">$$state</span><span class="token operator">:</span> state</pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    computed</pre></td></tr><tr><td data-num="26"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>store<span class="token punctuation">.</span>strict<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>strict<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token comment">// 状态一变化就会立即执行</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    store<span class="token punctuation">.</span>_vm<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> store<span class="token punctuation">.</span>_vm<span class="token punctuation">.</span>_data<span class="token punctuation">.</span>$$state<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>      console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>_committing<span class="token punctuation">,</span> <span class="token string">'在mutation之外更改了状态'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">deep</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">sync</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// 深度 同步</span></pre></td></tr><tr><td data-num="34"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVm<span class="token punctuation">)</span> Vue<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> oldVm<span class="token punctuation">.</span><span class="token function">$destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="class-store"><a class="anchor" href="#class-store">#</a> class store</h2><ul><li>这是针对 Store 的类</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> applyMixin <span class="token keyword">from</span> <span class="token string">'./mixin'</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> forEachValue<span class="token punctuation">,</span> getState <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./utils'</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> ModuleCollection <span class="token keyword">from</span> <span class="token string">'./module/moduleCollection'</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">import</span> installModule <span class="token keyword">from</span> <span class="token string">'./module/installModule'</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">import</span> resetStoreVm <span class="token keyword">from</span> <span class="token string">'./module/resetStoreVm'</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">let</span> Vue</pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Store</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">options <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>_modules <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModuleCollection</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>_mutations <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 存放所有模块中的 mutations</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>_actions <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 存放所有模块中的 actions</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>_wrappedGetters <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 存放所有模块中的 getters  </span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>_subscribers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 存放订阅的插件</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>strict <span class="token operator">=</span> options<span class="token punctuation">.</span>strict <span class="token comment">// 严格模式</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>_committing <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">// 同步的 watcher</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">let</span> state <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_modules<span class="token punctuation">.</span>root<span class="token punctuation">.</span>state <span class="token comment">// 根模块 state</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token function">installModule</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_modules<span class="token punctuation">.</span>root<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token comment">// 将状态放到 vue 的实例中</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token function">resetStoreVm</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre>    options<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">plugin</span> <span class="token operator">=></span> <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token comment">// </span></pre></td></tr><tr><td data-num="28"></td><td><pre>  <span class="token function">_withCommitting</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token keyword">let</span> committing <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_committing</pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>_committing <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// 在函数调用前标识_committing 为 true</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>_committing <span class="token operator">=</span> committing</pre></td></tr><tr><td data-num="33"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre>  <span class="token comment">// 用于持久化保存数据替换原数据的方法</span></pre></td></tr><tr><td data-num="36"></td><td><pre>  <span class="token function">replaceState</span><span class="token punctuation">(</span><span class="token parameter">newState</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>_vm<span class="token punctuation">.</span>_data<span class="token punctuation">.</span>$$state <span class="token operator">=</span> newState</pre></td></tr><tr><td data-num="38"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="39"></td><td><pre></pre></td></tr><tr><td data-num="40"></td><td><pre>  <span class="token comment">// 订阅收集</span></pre></td></tr><tr><td data-num="41"></td><td><pre>  <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>_subscribers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre></pre></td></tr><tr><td data-num="45"></td><td><pre>  <span class="token comment">// commit</span></pre></td></tr><tr><td data-num="46"></td><td><pre>  <span class="token function-variable function">commit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> payload</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>_mutations<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">fn</span> <span class="token operator">=></span> <span class="token function">fn</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="48"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="49"></td><td><pre></pre></td></tr><tr><td data-num="50"></td><td><pre>  <span class="token comment">// dispatch</span></pre></td></tr><tr><td data-num="51"></td><td><pre>  <span class="token function-variable function">dispatch</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> payload</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>_actions<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">fn</span> <span class="token operator">=></span> <span class="token function">fn</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="53"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="54"></td><td><pre></pre></td></tr><tr><td data-num="55"></td><td><pre>  <span class="token comment">// 类的属性访问器</span></pre></td></tr><tr><td data-num="56"></td><td><pre>  <span class="token keyword">get</span> <span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_vm<span class="token punctuation">.</span>_data<span class="token punctuation">.</span>$$state</pre></td></tr><tr><td data-num="58"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="59"></td><td><pre></pre></td></tr><tr><td data-num="60"></td><td><pre>  <span class="token comment">// 动态注册</span></pre></td></tr><tr><td data-num="61"></td><td><pre>  <span class="token function">registerModule</span><span class="token punctuation">(</span><span class="token parameter">path<span class="token punctuation">,</span> rawModule</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span> path <span class="token operator">=</span> <span class="token punctuation">[</span>path<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="63"></td><td><pre></pre></td></tr><tr><td data-num="64"></td><td><pre>    <span class="token comment">// 注册模块</span></pre></td></tr><tr><td data-num="65"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>_modules<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> rawModule<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="66"></td><td><pre></pre></td></tr><tr><td data-num="67"></td><td><pre>    <span class="token comment">// 安装模块 并动态将状态新增上去</span></pre></td></tr><tr><td data-num="68"></td><td><pre>    <span class="token function">installModule</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">,</span> path<span class="token punctuation">,</span> rawModule<span class="token punctuation">.</span>rawModule<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="69"></td><td><pre></pre></td></tr><tr><td data-num="70"></td><td><pre>    <span class="token comment">// 重构数据响应式</span></pre></td></tr><tr><td data-num="71"></td><td><pre>    <span class="token function">resetStoreVm</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="72"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="73"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="74"></td><td><pre></pre></td></tr><tr><td data-num="75"></td><td><pre><span class="token keyword">const</span> <span class="token function-variable function">install</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">_Vue</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="76"></td><td><pre>  Vue <span class="token operator">=</span> _Vue</pre></td></tr><tr><td data-num="77"></td><td><pre>  <span class="token function">applyMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="78"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="79"></td><td><pre></pre></td></tr><tr><td data-num="80"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="81"></td><td><pre>  Store<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="82"></td><td><pre>  install</pre></td></tr><tr><td data-num="83"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="84"></td><td><pre></pre></td></tr><tr><td data-num="85"></td><td><pre><span class="token keyword">export</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="86"></td><td><pre>  Store<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="87"></td><td><pre>  install</pre></td></tr><tr><td data-num="88"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="实现持久化插件-store-数据"><a class="anchor" href="#实现持久化插件-store-数据">#</a> 实现持久化插件 &amp; Store 数据</h2><ul><li>实现持久化插件，放入到 <code>plugins</code>  数组中</li><li><code>subscribe</code>  只要状态变了就会执行</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'../vuex'</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// import Vuex from 'vuex'</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// import  logger  from 'vuex/dist/logger'</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 持久化插件</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">function</span> <span class="token function">persists</span><span class="token punctuation">(</span><span class="token parameter">store</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">let</span> local <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'VUEX:STATE'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>local<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    store<span class="token punctuation">.</span><span class="token function">replaceState</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>local<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">mutation<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token comment">// 只要频繁操作 就要考虑防抖和节流</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'VUEX:STATE'</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token literal-property property">strict</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 严格模式下，只能通过 mutation 来更改状态</span></pre></td></tr><tr><td data-num="24"></td><td><pre>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    persists<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token comment">// logger()</span></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="28"></td><td><pre>  <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'lain'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="32"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="33"></td><td><pre>  <span class="token literal-property property">getters</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token function">addCount</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> count <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>      <span class="token comment">// console.log("".concat(state.name, "123").concat(state.age));</span></pre></td></tr><tr><td data-num="36"></td><td><pre>      <span class="token comment">// return `$&#123;state.name&#125;123$&#123;state.age&#125;`</span></pre></td></tr><tr><td data-num="37"></td><td><pre>      <span class="token comment">// return "".concat(state.name);</span></pre></td></tr><tr><td data-num="38"></td><td><pre>      <span class="token comment">// return "".concat(state.name, 123).concat(state.age);</span></pre></td></tr><tr><td data-num="39"></td><td><pre>      <span class="token keyword">return</span> count<span class="token operator">++</span></pre></td></tr><tr><td data-num="40"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="42"></td><td><pre>  <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>    <span class="token function">changeAge</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> payload</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>      state<span class="token punctuation">.</span>age <span class="token operator">+=</span> payload</pre></td></tr><tr><td data-num="45"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token function">redAge</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> payload</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>      state<span class="token punctuation">.</span>age <span class="token operator">-=</span> payload</pre></td></tr><tr><td data-num="48"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="50"></td><td><pre>  <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>    <span class="token function">redAge</span><span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> payload</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>        ctx<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'redAge'</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="54"></td><td><pre>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="55"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="58"></td><td><pre></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> store</pre></td></tr></table></figure><h2 id="实现辅助函数-helpers"><a class="anchor" href="#实现辅助函数-helpers">#</a> 实现辅助函数 (helpers)</h2><ul><li><strong>vue</strong>x 提供了一些非常方便的<strong>辅助</strong>函数，比如 mapState、mapGetter、mapMutation、mapAction</li><li>下面来实现一下这些辅助函数，只要明白一个原理其余都是类似的</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">mapState</span> <span class="token operator">=</span> <span class="token parameter">arrList</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    obj<span class="token punctuation">[</span>arrList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">[</span>arrList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token keyword">return</span> obj<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">mapGetters</span> <span class="token operator">=</span> <span class="token parameter">arrList</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    obj<span class="token punctuation">[</span>arrList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">[</span>arrList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token keyword">return</span> obj</pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">mapMutations</span> <span class="token operator">=</span> <span class="token parameter">arrList</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    obj<span class="token punctuation">[</span>arrList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">payload</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span>arrList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>  <span class="token keyword">return</span> obj</pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">mapActions</span> <span class="token operator">=</span> <span class="token parameter">arrList</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    obj<span class="token punctuation">[</span>arrList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">payload</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>arrList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>  <span class="token keyword">return</span> obj</pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="index"><a class="anchor" href="#index">#</a> index</h2><ul><li>最终统一导出</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> mapState<span class="token punctuation">,</span> mapGetters<span class="token punctuation">,</span> mapMutations<span class="token punctuation">,</span> mapActions <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./helpers"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Store<span class="token punctuation">,</span> install <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./store"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  Store<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  install<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  mapState<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  mapGetters<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  mapMutations<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  mapActions</pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">export</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  Store<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  install<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  mapState<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  mapGetters<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  mapMutations<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  mapActions</pre></td></tr><tr><td data-num="21"></td><td><pre> <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>那么 Vuex 的实现也告辞段落，下面进行简单测试，其余的模块或者命名空间等可以自行测试</li></ul><h2 id="测试-app"><a class="anchor" href="#测试-app">#</a> 测试 App</h2><figure class="highlight js"><figcaption data-lang="JavaScript"><span>vue</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span>template<span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token operator">&lt;</span>h2<span class="token operator">></span>年龄<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> $store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>age <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token operator">&lt;</span>h2<span class="token operator">></span>姓名：<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> $store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>name <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token operator">&lt;</span>h2<span class="token operator">></span>age<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> age <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token operator">&lt;</span>h2<span class="token operator">></span>addCount<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> addCount <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"changeAge(1)"</span><span class="token operator">></span>changeAge<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"redAge(1)"</span><span class="token operator">></span>redAge<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token operator">&lt;</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> mapState<span class="token punctuation">,</span> mapGetters<span class="token punctuation">,</span> mapMutations<span class="token punctuation">,</span> mapActions <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./vuex"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"App"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"age"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"addCount"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"changeAge"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"redAge"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="24"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token operator">&lt;</span>style<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;vuex-介绍&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#vuex-介绍&quot;&gt;#&lt;/a&gt; Vuex 介绍&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Vuex 是一个专为 Vue.js 应用程序开发的&lt;strong&gt;状态管理模式 + 库&lt;/strong&gt;。它采用集中式存储</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://nekoaimer.com/categories/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.com/categories/JavaScript/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.com/tags/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.com/tags/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 实现图片懒加载</title>
    <link href="https://nekoaimer.com/2022/01/31/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/lazyload/"/>
    <id>https://nekoaimer.com/2022/01/31/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/lazyload/</id>
    <published>2022-01-31T05:00:00.000Z</published>
    <updated>2022-03-20T06:33:56.492Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是图片懒加载"><a class="anchor" href="#什么是图片懒加载">#</a> 什么是图片懒加载</h2><ul><li>图片的懒加载就是在页面打开的时候，不要一次性全部显示页面所有的图片，而是只显示当前视口内的图片，一般在移动端使用（PC 端主要是前端分页或者后端分页）。</li></ul><h2 id="为什么需要懒加载"><a class="anchor" href="#为什么需要懒加载">#</a> 为什么需要懒加载</h2><ul><li>对于一个页面加载速度影响最大的因素之一就是图片资源，如果一个页面图片太多（比如某宝，某东等），整个页面的图片大小可以到达几百兆，即使在百兆宽带，全部下载的话，也需要上十秒的时间，这对于用户耐心的考验是巨大的，更别说网络差的地方了。</li><li>因此，懒加载是必须要做的，对于页面未在可视区域内显示的图片先不做加载处理，只加载第一映入眼帘的图片，由于可视区域显示的图片少，加载速度就会大大提升，用户体验也会更好。</li><li>而且，用户可能只翻看一两页就退出了，剩下未查看的图片也就不需要加载了。这也相当于节省了带宽资源。</li></ul><h2 id="懒加载实现原理"><a class="anchor" href="#懒加载实现原理">#</a> 懒加载实现原理</h2><ul><li>由于浏览器会自动对页面中的 img 标签的 src 属性发送请求并下载图片。因此，通过 html5 自定义属性  <code>data-xxx</code>  先暂存 src 的值，然后在需要显示的时候，再将  <code>data-xxx</code>  的值重新赋值到 img 的 src 属性即可。</li></ul><h2 id="懒加载思路及实现"><a class="anchor" href="#懒加载思路及实现">#</a> 懒加载思路及实现</h2><ul><li>实现懒加载有四个步骤，如下：<ul><li>加载 loading 图片</li><li>判断哪些图片要加载【重点】</li><li>隐形加载图片</li><li>替换真图片</li></ul></li><li>另外这里还涉及到了节流函数与瀑布流布局不懂的可以查看之前发的文章，这里贴一下代码</li></ul><h2 id="瀑布流代码"><a class="anchor" href="#瀑布流代码">#</a> 瀑布流代码</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">,</span> <span class="token function">waterFall</span><span class="token punctuation">(</span><span class="token string">'#main'</span><span class="token punctuation">,</span> <span class="token string">'.box'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 1.0 定义一个函数 接收 父元素 与 子元素们 选择器</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">function</span> <span class="token function">waterFall</span><span class="token punctuation">(</span><span class="token parameter">parent<span class="token punctuation">,</span> childs</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">// 1.1 获取标签父元素与其中的所有子元素</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">const</span> parentEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token keyword">const</span> childsEls <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span>childs<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token comment">// 1.2 获取一个子元素的宽度</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token keyword">const</span> childElWidth <span class="token operator">=</span> childsEls<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>offsetWidth</pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token comment">// 1.3 获取屏幕的宽度 进行兼容判断</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token keyword">const</span> screenWidth <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientWidth</pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token comment">// 1.4 根据上面条件计算出应排版列数</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token keyword">const</span> cols <span class="token operator">=</span> <span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span>screenWidth <span class="token operator">/</span> childElWidth<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token comment">// 1.5 给父元素宽度并进行居中</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  parentEl<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> cols <span class="token operator">*</span> childElWidth <span class="token operator">+</span> <span class="token string">'px'</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  parentEl<span class="token punctuation">.</span>style<span class="token punctuation">.</span>margin <span class="token operator">=</span> <span class="token string">'0 auto'</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>  <span class="token comment">// 2.0 声明数组 存放每次应该定位的高度 数组长度与列数一致</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token keyword">const</span> childsElHeightArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="24"></td><td><pre>  <span class="token comment">// 2.1 声明三个变量 分别用于保存 数组中最小高度、元素高度与最小索引值</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token keyword">let</span> minChildElHeight <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> childElHeight <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> minIndex <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token comment">// 3.0 对所有子元素进行遍历</span></pre></td></tr><tr><td data-num="28"></td><td><pre>  childsEls<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token comment">// 3.1 遍历获取元素的高度</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    childElHeight <span class="token operator">=</span> item<span class="token punctuation">.</span>offsetHeight</pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token comment">// 3.2 判断如果列数小于 index 则是第一排元素 添加进数组用于计算高度 </span></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cols <span class="token operator">></span> index<span class="token punctuation">)</span> <span class="token keyword">return</span> childsElHeightArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>childElHeight<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre>    <span class="token comment">// 3.3 否则利用算法金星定位</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token comment">// 3.4 计算出数组中的最小高度</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    minChildElHeight <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token operator">...</span>childsElHeightArr<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token comment">// 3.5 计算数组最小高度所在的索引 这里我封装一个函数 calcMinIndex 即 -> 4.0 </span></pre></td></tr><tr><td data-num="40"></td><td><pre>    minIndex <span class="token operator">=</span> <span class="token function">calcMinIndex</span><span class="token punctuation">(</span>childsElHeightArr<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="41"></td><td><pre></pre></td></tr><tr><td data-num="42"></td><td><pre>    <span class="token comment">// 3.6 进行绝对定位</span></pre></td></tr><tr><td data-num="43"></td><td><pre>    item<span class="token punctuation">.</span>style<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token string">'absolute'</span></pre></td></tr><tr><td data-num="44"></td><td><pre></pre></td></tr><tr><td data-num="45"></td><td><pre>    <span class="token comment">// 3.7 利用最小索引 * 元素宽度 得出子元素据左的距离</span></pre></td></tr><tr><td data-num="46"></td><td><pre>    item<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> minIndex <span class="token operator">*</span> childElWidth <span class="token operator">+</span> <span class="token string">'px'</span></pre></td></tr><tr><td data-num="47"></td><td><pre></pre></td></tr><tr><td data-num="48"></td><td><pre>    <span class="token comment">// 3.8 将每次最小高度赋值给元素的高度</span></pre></td></tr><tr><td data-num="49"></td><td><pre>    item<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> minChildElHeight <span class="token operator">+</span> <span class="token string">'px'</span></pre></td></tr><tr><td data-num="50"></td><td><pre></pre></td></tr><tr><td data-num="51"></td><td><pre>    <span class="token comment">// 3.9 将每次最小高度值与元素高度进行相加</span></pre></td></tr><tr><td data-num="52"></td><td><pre>    childsElHeightArr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">+=</span> childElHeight</pre></td></tr><tr><td data-num="53"></td><td><pre></pre></td></tr><tr><td data-num="54"></td><td><pre>    <span class="token comment">// 4.0 封装计算数组最小值的索引</span></pre></td></tr><tr><td data-num="55"></td><td><pre>    <span class="token keyword">function</span> <span class="token function">calcMinIndex</span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>      <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="57"></td><td><pre>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">></span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> index <span class="token operator">=</span> i</pre></td></tr><tr><td data-num="59"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>      <span class="token keyword">return</span> index</pre></td></tr><tr><td data-num="61"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="节流函数"><a class="anchor" href="#节流函数">#</a> 节流函数</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> interval<span class="token punctuation">,</span> options <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token literal-property property">leading</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token literal-property property">trailing</span><span class="token operator">:</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">let</span> lastTriggerTime <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    leading<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    trailing<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    resultCallback</pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token punctuation">&#125;</span> <span class="token operator">=</span> options</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token keyword">const</span> <span class="token function-variable function">_throtle</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>      <span class="token keyword">const</span> triggerTime <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>leading <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>lastTriggerTime<span class="token punctuation">)</span> lastTriggerTime <span class="token operator">=</span> triggerTime</pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>      <span class="token keyword">const</span> remainTime <span class="token operator">=</span> interval <span class="token operator">-</span> <span class="token punctuation">(</span>triggerTime <span class="token operator">-</span> lastTriggerTime<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span>remainTime <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>          <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>          timer <span class="token operator">=</span> <span class="token keyword">null</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>resultCallback<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Function]'</span><span class="token punctuation">)</span> <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>          <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre>        <span class="token keyword">return</span> lastTriggerTime <span class="token operator">=</span> triggerTime</pre></td></tr><tr><td data-num="36"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span>trailing <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>timer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>        timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>          <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="41"></td><td><pre></pre></td></tr><tr><td data-num="42"></td><td><pre>          <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>resultCallback<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Function]'</span><span class="token punctuation">)</span> <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="44"></td><td><pre>          <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>            <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="46"></td><td><pre>          <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="47"></td><td><pre></pre></td></tr><tr><td data-num="48"></td><td><pre>          timer <span class="token operator">=</span> <span class="token keyword">null</span></pre></td></tr><tr><td data-num="49"></td><td><pre>          lastTriggerTime <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span></pre></td></tr><tr><td data-num="50"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> remainTime<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="51"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="53"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="54"></td><td><pre></pre></td></tr><tr><td data-num="55"></td><td><pre>  _throtle<span class="token punctuation">.</span><span class="token function-variable function">cancel</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="58"></td><td><pre>      timer <span class="token operator">=</span> <span class="token keyword">null</span></pre></td></tr><tr><td data-num="59"></td><td><pre>      lastTriggerTime <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="60"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="62"></td><td><pre></pre></td></tr><tr><td data-num="63"></td><td><pre>  <span class="token keyword">return</span> _throtle</pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="实现-lazyload"><a class="anchor" href="#实现-lazyload">#</a> 实现 lazyload</h2><ul><li>不熟悉 <code>getBoundingClientRect</code>  详情 MDN 查看：<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL0VsZW1lbnQvZ2V0Qm91bmRpbmdDbGllbnRSZWN0">https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect</span></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">lazyload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">// 1. 获取当前文档高度</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">const</span> viewHeight <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight <span class="token operator">||</span> window<span class="token punctuation">.</span>innerHeight</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">// 2. 获取文档中所有拥有 data-src lazyload 属性的 & lt;img > 节点 即需要懒加载的图片标签</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">let</span> imgs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'img[data-src][lazyload]'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  imgs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">img<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token comment">// 3.HTMLElement.dataset 属性允许无论是在读取模式和写入模式下访问在 HTML 或 DOM 中的元素上设置的所有自定义数据属性 (data -*) 集。</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>img<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>src<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token comment">// 如果自定义 data-src 为空直接 return</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token comment">// 4.dataset 能获取到 data - 开头的自定义属性</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">let</span> src <span class="token operator">=</span> img<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>src</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token comment">// 5.1 返回值是一个 DOMRect 对象，这个对象是由该元素的 getClientRects () 方法返回的一组矩形的集合，就是该元素的 CSS 边框大小。</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token comment">// 5.2 返回的结果是包含完整元素的最小矩形，并且拥有 left, top, right, bottom, x, y, width, 和 height 这几个以像素为单位的只读属性用于描述整个边框。</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token comment">// 5.3 除了 width 和 height 以外的属性是相对于视图窗口的左上角来计算的。</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">let</span> <span class="token punctuation">&#123;</span> bottom<span class="token punctuation">,</span> top <span class="token punctuation">&#125;</span> <span class="token operator">=</span> img<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token comment">// 6. 其 top 值是相对于当前视窗的顶部而言的而不是绝对的顶部，所以 top 值 &lt; window.innerHeight 的话图片就出现在底部了就需要加载</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bottom <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> top <span class="token operator">&lt;</span> viewHeight<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>      <span class="token comment">// 7.new 了一个 Image 创建 img 标签，img 加载图片路径，触发 onload 事件再给原来的 html 结构中的 img 赋值路径</span></pre></td></tr><tr><td data-num="22"></td><td><pre>      <span class="token keyword">const</span> image <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>      image<span class="token punctuation">.</span>src <span class="token operator">=</span> src</pre></td></tr><tr><td data-num="24"></td><td><pre>      image<span class="token punctuation">.</span>onload <span class="token operator">=</span> img<span class="token punctuation">.</span>src <span class="token operator">=</span> src</pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre>      <span class="token comment">// 8. 移除属性避免重复加载</span></pre></td></tr><tr><td data-num="27"></td><td><pre>      img<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">'data-src'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre>      img<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">'lazyload'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token comment">// 先调用一次加载最初显示在视窗中的图片</span></pre></td></tr><tr><td data-num="34"></td><td><pre>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">,</span> lazyload<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token comment">// 节流 leading 先触发一次 trailing 最后一次也会触发</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token keyword">const</span> throttle_lazyload <span class="token operator">=</span> <span class="token function">throttle</span><span class="token punctuation">(</span>lazyload<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>  <span class="token literal-property property">leading</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="39"></td><td><pre>  <span class="token literal-property property">trailing</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="41"></td><td><pre></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token comment">// 箭头 scroll (滚动) 事件</span></pre></td></tr><tr><td data-num="43"></td><td><pre>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'scroll'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>  <span class="token function">throttle_lazyload</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="45"></td><td><pre>  <span class="token function">waterFall</span><span class="token punctuation">(</span><span class="token string">'#main'</span><span class="token punctuation">,</span> <span class="token string">'.box'</span><span class="token punctuation">,</span> main<span class="token punctuation">)</span> <span class="token comment">// 瀑布流</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><ul><li>至此，实现图片懒加载篇章也告辞段落了，完成了之前瀑布流文章中许下的承诺了～</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是图片懒加载&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#什么是图片懒加载&quot;&gt;#&lt;/a&gt; 什么是图片懒加载&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;图片的懒加载就是在页面打开的时候，不要一次性全部显示页面所有的图片，而是只显示当前视口内的图片，一般在移动端使用（P</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://nekoaimer.com/categories/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.com/categories/JavaScript/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.com/tags/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.com/tags/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 实现数组扁平化</title>
    <link href="https://nekoaimer.com/2022/01/29/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/arrayFlat/"/>
    <id>https://nekoaimer.com/2022/01/29/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/arrayFlat/</id>
    <published>2022-01-29T09:25:20.000Z</published>
    <updated>2022-04-18T08:51:07.323Z</updated>
    
    <content type="html"><![CDATA[<h2 id="flat-实现"><a class="anchor" href="#flat-实现">#</a> flat 实现</h2><ul><li><code>flat()</code>  方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'abc'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>arr1<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></pre></td></tr><tr><td data-num="5"></td><td><pre>arr2<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span> <span class="token comment">// [1,  2, &#123;&#125;, 3, 4, 5, &#123;&#125;, 'abc']</span></pre></td></tr></table></figure><h2 id="tostring-实现"><a class="anchor" href="#tostring-实现">#</a> toString 实现</h2><ul><li><code>toString()</code>  方法返回一个表示该对象的字符串。</li><li>也可以用来扁平化，但是只针对基本数据类型</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'abc'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>arr1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span> <span class="token comment">// ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// 1. 无法针对非基本数据类型，如果有其他类型则会很麻烦</span></pre></td></tr><tr><td data-num="7"></td><td><pre>arr2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span> <span class="token comment">// ['1', '2', '[object Object]', '3', '4', '5', '[object Object]', 'abc']</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// 2. 最后再恢复成数字类型</span></pre></td></tr><tr><td data-num="10"></td><td><pre>arr2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token operator">+</span>item<span class="token punctuation">)</span> <span class="token comment">// [1, 2, NaN, 3, 4, 5, NaN, NaN]</span></pre></td></tr></table></figure><h2 id="join-实现"><a class="anchor" href="#join-实现">#</a> join 实现</h2><ul><li><code>join</code>  实现也只针对基本类型</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'abc'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>arr1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?:,|\|)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token operator">+</span>item<span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// 1. 无法针对非基本数据类型</span></pre></td></tr><tr><td data-num="7"></td><td><pre>arr2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?:,|\|)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span> <span class="token comment">// ['1', '2', '[object Object]', '3', '4', '5', '[object Object]', 'abc']</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// 2. 最后再转成数字类型</span></pre></td></tr><tr><td data-num="10"></td><td><pre>arr2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?:,|\|)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token operator">+</span>item<span class="token punctuation">)</span> <span class="token comment">// [1, 2, NaN, 3, 4, 5, NaN, NaN]</span></pre></td></tr></table></figure><h2 id="jsonstringify-实现"><a class="anchor" href="#jsonstringify-实现">#</a> JSON.stringify 实现</h2><ul><li><code>JSON.stringify</code>  是可以实现扁平化的， 但是最后要转换成原来的类型是比较麻烦的</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'abc'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 1. 如果都是数字类型就比较简单，但如果有字符串类型或其他类型则需要以下判断 比较麻烦</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\[|\])</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token operator">+</span>item<span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 2. 这样扁平化之后，其他类型则是比较麻烦</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\[|\])</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span> <span class="token comment">// ['1', '2', '&#123;"age":16&#125;', '3', '4', '5', '&#123;&#125;', '"abc"']</span></pre></td></tr></table></figure><h2 id="for循环递归-实现"><a class="anchor" href="#for循环递归-实现">#</a> for 循环递归 实现</h2><h3 id="函数递归"><a class="anchor" href="#函数递归">#</a> 函数递归</h3><ul><li>使用递归来循环变量实现扁平化</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">flat</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> val<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>val<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>val<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">else</span> <span class="token function">flat</span><span class="token punctuation">(</span>val<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> newArr<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">return</span> newArr</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'abc'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">flat</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token function">flat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span> <span class="token comment">// [1, 2, &#123;age: 16&#125;, 3, 4, 5, &#123;&#125;, 'abc', 6, 7]</span></pre></td></tr></table></figure><h3 id="闭包递归"><a class="anchor" href="#闭包递归">#</a> 闭包递归</h3><ul><li>使用闭包形式递归实现扁平化</li><li>这里说几个函数前面符号的意思<ul><li><code>! </code> 对返回值的真假取反</li><li><code>+ 、-</code>  是对返回值进行数学运算</li><li><code>~</code>  按位非运算符，反转操作数的位，对返回值进行按位取反</li><li><code>;</code>  是为了防止代码压缩时，前面代码没写 <code>;</code>  造成报错。</li></ul></li><li>在函数前面加这些或者在括号中，那么此函数就变成了函数表达式，函数表达式就可以立即执行</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 立即执行函数，转为表达式</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">~</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">function</span> <span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">else</span> <span class="token function">fn</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">return</span> result</pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>flat <span class="token operator">=</span> flat</pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'abc'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>arr1<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></pre></td></tr><tr><td data-num="5"></td><td><pre>arr2<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// [1, 2, &#123;age: 16&#125;, 3, 4, 5, &#123;&#125;, 'abc', 6, 7]</span></pre></td></tr></table></figure><h2 id="while-some-实现"><a class="anchor" href="#while-some-实现">#</a> while &amp; some 实现</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">flat</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">while</span> <span class="token punctuation">(</span>val<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="3"></td><td><pre>    val <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token operator">...</span>val<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">return</span> val</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'abc'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">flat</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token function">flat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span> <span class="token comment">// [ 1, 2, &#123; age: 16 &#125;, 3, 4, 5, &#123;&#125;, 'abc' ]</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;flat-实现&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#flat-实现&quot;&gt;#&lt;/a&gt; flat 实现&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;flat()&lt;/code&gt;  方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://nekoaimer.com/categories/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.com/categories/JavaScript/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.com/tags/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.com/tags/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>instanceof &amp; new &amp; typeof 原理</title>
    <link href="https://nekoaimer.com/2022/01/27/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/instanceof-new-typeof/"/>
    <id>https://nekoaimer.com/2022/01/27/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/instanceof-new-typeof/</id>
    <published>2022-01-27T02:44:52.000Z</published>
    <updated>2022-04-07T15:28:20.400Z</updated>
    
    <content type="html"><![CDATA[<h2 id="instanceof-原理"><a class="anchor" href="#instanceof-原理">#</a> instanceof 原理</h2><ul><li><strong> <code>instanceof</code> </strong> <strong>运算符</strong>用于检测构造函数的  <code>prototype</code>  属性是否出现在某个实例对象的原型链上。</li><li>语法  <code>object instanceof constructor</code></li><li>参数  <code>object(某个实例对象)</code>  、 <code>constructor(某个构造函数)</code></li><li>本质上  <code>instanceof</code>  运算符用来检测  <code>constructor.prototype </code> 是否存在于参数  <code>object</code>  的原型链上。</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">_instanceof</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> origin</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">// 这里需要加层判断</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> target <span class="token operator">!==</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">// 循环 当 target 为 null 时 (代表已经达到顶层原型已经指向 null)，那么停止循环</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">while</span> <span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">===</span> origin<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="8"></td><td><pre>      </pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token comment">// 否则再取出 target 的隐式原型对象</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    target <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">return</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="instanceof-测试"><a class="anchor" href="#instanceof-测试">#</a> instanceof 测试</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span></pre></td></tr><tr><td data-num="3"></td><td><pre>            </pre></td></tr><tr><td data-num="4"></td><td><pre>f <span class="token keyword">instanceof</span> <span class="token class-name">Foo</span>    <span class="token comment">// true</span></pre></td></tr><tr><td data-num="5"></td><td><pre>f <span class="token keyword">instanceof</span> <span class="token class-name">Object</span>   <span class="token comment">// true</span></pre></td></tr><tr><td data-num="6"></td><td><pre>f <span class="token keyword">instanceof</span> <span class="token class-name">Function</span> <span class="token comment">// false</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            </pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token string">'abc'</span> <span class="token keyword">instanceof</span> <span class="token class-name">String</span>        <span class="token comment">// false</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token number">123</span> <span class="token keyword">instanceof</span> <span class="token class-name">Number</span>          <span class="token comment">// false</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span>            <span class="token comment">// true</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span>           <span class="token comment">// true</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span>   <span class="token comment">// true</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Function</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span>    <span class="token comment">// false</span></pre></td></tr></table></figure><h3 id="_instanceof-测试"><a class="anchor" href="#_instanceof-测试">#</a> _instanceof 测试</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">_instanceof</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> Foo<span class="token punctuation">)</span>      <span class="token comment">// true</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token function">_instanceof</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> Object<span class="token punctuation">)</span>   <span class="token comment">// true</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token function">_instanceof</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> Function<span class="token punctuation">)</span> <span class="token comment">// false</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token function">_instanceof</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">,</span> String<span class="token punctuation">)</span>      <span class="token comment">// false</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token function">_instanceof</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> Number<span class="token punctuation">)</span>        <span class="token comment">// false</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token function">_instanceof</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Array<span class="token punctuation">)</span>          <span class="token comment">// true</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token function">_instanceof</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> Object<span class="token punctuation">)</span>         <span class="token comment">// true</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token function">_instanceof</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> Object<span class="token punctuation">)</span>   <span class="token comment">// true</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token function">_instanceof</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> Function<span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token function">_instanceof</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> Array<span class="token punctuation">)</span>   <span class="token comment">// false</span></pre></td></tr></table></figure><h2 id="new-原理"><a class="anchor" href="#new-原理">#</a> new 原理</h2><ul><li><p><code>new</code>  实际做了什么？</p><ul><li><p>创建一个新的空对象</p></li><li><p>把新对象的原型绑定到构造函数的原型上</p></li><li><p>构造函数被执行，执行过程中的 <code>this</code>  被绑定在新的对象上</p></li><li><p>返回这个新对象 (构造函数中一般不会显示返回， 但有时也可以 return this)</p></li></ul></li></ul><h3 id="objectsetprototypeof-实现"><a class="anchor" href="#objectsetprototypeof-实现">#</a> Object.setPrototypeOf 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">_new</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">// 1. 创建新的空对象</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  </pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">// 2. 把新对象的原型绑定到构造函数的原型上</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> fn<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token comment">// 3. 构造函数被执行，绑定 `this` 与传入参数在新的对象上，并获取 obj 函数执行的结果</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token comment">// 4. 如果执行结果有返回值并且是一个对象，返回执行的结果，否则，返回新创建的对象 </span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Object]'</span> <span class="token operator">?</span> result <span class="token operator">:</span> obj</pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">_new</span><span class="token punctuation">(</span>Foo<span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Foo</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="5"></td><td><pre>foo <span class="token keyword">instanceof</span> <span class="token class-name">Foo</span> <span class="token comment">// true</span></pre></td></tr></table></figure><h3 id="object-create-实现"><a class="anchor" href="#object-create-实现">#</a> Object. create 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">_new</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">// 1. 基于 obj 的原型创建一个新的对象</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">const</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>fn<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">// 2. 添加属性到新创建的 newObj 上，并获取 obj 函数执行的结果</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token comment">// 3. 如果执行结果有返回值并且是一个对象，返回执行的结果，否则，返回新创建的对象</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Object]'</span> <span class="token operator">?</span> result <span class="token operator">:</span> obj</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">_new</span><span class="token punctuation">(</span>Foo<span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Foo</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="5"></td><td><pre>foo <span class="token keyword">instanceof</span> <span class="token class-name">Foo</span> <span class="token comment">// true</span></pre></td></tr></table></figure><h2 id="typeof-原理"><a class="anchor" href="#typeof-原理">#</a> typeof 原理</h2><ul><li><p><code>typeof</code>  一般被用于判断一个变量的类型，我们可以利用  <code>typeof</code>  来判断 <code>number</code> ,   <code>string</code> ,   <code>object</code> ,   <code>boolean</code> ,   <code>function</code> ,  <code>undefined</code> ,   <code>symbol</code>  这七种类型</p></li><li><p>这种判断能帮助我们搞定一些问题，比如在判断不是 object 类型的数据的时候， <code>typeof</code>  能比较清楚的告诉我们具体是哪一类的类型。</p></li><li><p>但是，很遗憾的一点是， <code>typeof</code>  在判断一个 object 的数据的时候只能告诉我们这个数据是 object, 而不能细致的具体到是哪一种 object</p></li><li><p>, 比如我们都知道  <code>typeof(null) === 'object'</code> ，关于原因，在小黄书《你不知道的<span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9wcm9kdWN0L3Ntcz9mcm9tPTEwNjgw"> JavaScript</span>》中有这么一段解释：</p><blockquote><p>原理是这样的， 不同的对象在底层都表示为二进制， 在 JavaScript 中二进制前三位都为 0 的话会被判断为 object 类型， null 的二进制表示是全 0， 自然前三位也是 0， 所以执行 typeof 时会返回 “object”。</p></blockquote></li><li><p>javascript 中的  <code>null</code> ：既是对象，又不是对象，史称「薛定谔的对象」。</p></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">typeof</span> <span class="token keyword">null</span> <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">null</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span>  <span class="token comment">// false</span></pre></td></tr></table></figure><ul><li>如果我们这样比较</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">null</span> <span class="token keyword">instanceof</span> <span class="token class-name">null</span></pre></td></tr></table></figure><ul><li>会抛出异常： <code>TypeError: invalid 'instanceof' operand null</code></li><li>在 javascript 的最初版本中，使用的 32 位系统，为了性能考虑使用低位存储了变量的类型信息：<ul><li>000：对象</li><li>1：整数</li><li>010：浮点数</li><li>100：字符串</li><li>110：布尔</li></ul></li><li>有 2 个值比较特殊：<ul><li>undefined：用 - （−2^30）表示。</li><li>null：对应机器码的 NULL 指针，一般是全零。</li></ul></li><li>在第一版的 javascript 实现中，判断类型的代码是这么写的：</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">JSVAL_IS_VOID</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// (1)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    type <span class="token operator">=</span> <span class="token constant">JSTYPE_VOID</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">JSVAL_IS_OBJECT</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// (2)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    obj <span class="token operator">=</span> <span class="token constant">JSVAL_TO_OBJECT</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">&amp;&amp;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token punctuation">(</span>ops <span class="token operator">=</span> obj<span class="token operator">-</span><span class="token operator">></span>map<span class="token operator">-</span><span class="token operator">></span>ops<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            ops <span class="token operator">==</span> <span class="token operator">&amp;</span>js_ObjectOps</pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token operator">?</span> <span class="token punctuation">(</span>clasp <span class="token operator">=</span> <span class="token constant">OBJ_GET_CLASS</span><span class="token punctuation">(</span>cx<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            clasp<span class="token operator">-</span><span class="token operator">></span>call <span class="token operator">||</span> clasp <span class="token operator">==</span> <span class="token operator">&amp;</span>js_FunctionClass<span class="token punctuation">)</span> <span class="token comment">// (3,4)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token operator">:</span> ops<span class="token operator">-</span><span class="token operator">></span>call <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// (3)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        type <span class="token operator">=</span> <span class="token constant">JSTYPE_FUNCTION</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        type <span class="token operator">=</span> <span class="token constant">JSTYPE_OBJECT</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">JSVAL_IS_NUMBER</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    type <span class="token operator">=</span> <span class="token constant">JSTYPE_NUMBER</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">JSVAL_IS_STRING</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    type <span class="token operator">=</span> <span class="token constant">JSTYPE_STRING</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">JSVAL_IS_BOOLEAN</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    type <span class="token operator">=</span> <span class="token constant">JSTYPE_BOOLEAN</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>判断是否为 undefined</li><li>如果不是 undefined，判断是否为对象</li><li>如果不是对象，判断是否为数字</li><li>......</li><li>这样一来， <code>null</code>  就出了一个 bug。根据 type tags 信息，低位是  <code>000</code> ，因此  <code>null</code>  被判断成了一个对象。这就是为什么  <code>typeof null</code>  的返回值是  <code>object</code> 。</li><li>摘自：<span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xMzYyNjYw">https://cloud.tencent.com/developer/article/1362660</span></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;instanceof-原理&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#instanceof-原理&quot;&gt;#&lt;/a&gt; instanceof 原理&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;instanceof&lt;/code&gt; &lt;/strong&gt; </summary>
      
    
    
    
    <category term="JavaScript" scheme="https://nekoaimer.com/categories/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.com/categories/JavaScript/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.com/tags/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.com/tags/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
</feed>
