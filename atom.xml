<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>nekoaimer</title>
  
  <subtitle>清心如水，清水即心</subtitle>
  <link href="https://nekoaimer.github.io/nekoaimer.github.io/atom.xml" rel="self"/>
  
  <link href="https://nekoaimer.github.io/nekoaimer.github.io/"/>
  <updated>2022-04-08T12:52:05.885Z</updated>
  <id>https://nekoaimer.github.io/nekoaimer.github.io/</id>
  
  <author>
    <name>Nico Niconi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CSS 三角形</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2022/04/08/css/CSS%20Demo/CSS%E4%B8%89%E8%A7%92%E5%BD%A2/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2022/04/08/css/CSS%20Demo/CSS%E4%B8%89%E8%A7%92%E5%BD%A2/</id>
    <published>2022-04-08T12:32:28.999Z</published>
    <updated>2022-04-08T12:52:05.885Z</updated>
    
    <content type="html"><![CDATA[<h2 id="预览效果"><a class="anchor" href="#预览效果">#</a> 预览效果</h2><p> <style>#triangle {  width: 0;  height: 0;  border: 50px solid transparent;  border-left: 50px solid #4ad3e2;  border-right: 50px solid #4ad3e2;  border-top: 50px solid #ffb1a3;  border-bottom: 50px solid #f9cb8f;}[class^=triangle] {  margin: 30px;  width: 0;  height: 0;  border: 50px solid transparent;}.triangle-left {  border-left: 50px solid #4ad3e2;}.triangle-right {  border-right: 50px solid #4ad3e2;}.triangle-top {  border-top: 50px solid #ffb1a3;}.triangle-bottom {  border-bottom: 50px solid #f9cb8f;}</style><div id="triangle"></div><div class="triangle-left"></div><div class="triangle-right"></div><div class="triangle-top"></div><div class="triangle-bottom"></div></p><h2 id="html结构"><a class="anchor" href="#html结构">#</a> HTML 结构</h2><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>triangle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>triangle-left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>triangle-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>triangle-top<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>triangle-bottom<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><h2 id="css-样式"><a class="anchor" href="#css-样式">#</a> CSS 样式</h2><figure class="highlight css"><figcaption data-lang="CSS"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">#triangle</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token property">border</span><span class="token punctuation">:</span> 50px solid transparent<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token property">border-left</span><span class="token punctuation">:</span> 50px solid #4ad3e2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token property">border-right</span><span class="token punctuation">:</span> 50px solid #4ad3e2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token property">border-top</span><span class="token punctuation">:</span> 50px solid #ffb1a3<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> 50px solid #f9cb8f<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token selector">[class^=triangle]</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token property">margin</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token property">border</span><span class="token punctuation">:</span> 50px solid transparent<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token selector">.triangle-left</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token property">border-left</span><span class="token punctuation">:</span> 50px solid #4ad3e2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token selector">.triangle-right</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token property">border-right</span><span class="token punctuation">:</span> 50px solid #4ad3e2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token selector">.triangle-top</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token property">border-top</span><span class="token punctuation">:</span> 50px solid #ffb1a3<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token selector">.triangle-bottom</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> 50px solid #f9cb8f<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="stylus-样式"><a class="anchor" href="#stylus-样式">#</a> Stylus 样式</h2><ul><li><code>stylus index.styl -o  index.css  -w</code></li></ul><figure class="highlight stylus"><figcaption data-lang="stylus"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">#triangle</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token property-declaration"><span class="token property">width</span> <span class="token number">0</span></span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token property-declaration"><span class="token property">height</span> <span class="token number">0</span></span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token property-declaration"><span class="token property">border</span> <span class="token number">50</span><span class="token unit">px</span> solid <span class="token color">transparent</span></span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token property-declaration"><span class="token property">border-left</span> <span class="token number">50</span><span class="token unit">px</span> solid <span class="token hexcode">#4ad3e2</span></span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token property-declaration"><span class="token property">border-right</span> <span class="token number">50</span><span class="token unit">px</span> solid <span class="token hexcode">#4ad3e2</span></span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token property-declaration"><span class="token property">border-top</span> <span class="token number">50</span><span class="token unit">px</span> solid <span class="token hexcode">#ffb1a3</span></span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token property-declaration"><span class="token property">border-bottom</span> <span class="token number">50</span><span class="token unit">px</span> solid <span class="token hexcode">#f9cb8f</span></span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token selector">[class^=triangle]</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token property-declaration"><span class="token property">margin</span> <span class="token number">30</span><span class="token unit">px</span></span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token property-declaration"><span class="token property">width</span> <span class="token number">0</span></span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token property-declaration"><span class="token property">height</span> <span class="token number">0</span></span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token property-declaration"><span class="token property">border</span> <span class="token number">50</span><span class="token unit">px</span> solid <span class="token color">transparent</span></span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token selector">.triangle-left</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token property-declaration"><span class="token property">border-left</span> <span class="token number">50</span><span class="token unit">px</span> solid <span class="token hexcode">#4ad3e2</span></span></pre></td></tr><tr><td data-num="18"></td><td><pre>  </pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token selector">.triangle-right</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token property-declaration"><span class="token property">border-right</span> <span class="token number">50</span><span class="token unit">px</span> solid <span class="token hexcode">#4ad3e2</span></span></pre></td></tr><tr><td data-num="21"></td><td><pre>  </pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token selector">.triangle-top</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token property-declaration"><span class="token property">border-top</span> <span class="token number">50</span><span class="token unit">px</span> solid <span class="token hexcode">#ffb1a3</span></span></pre></td></tr><tr><td data-num="24"></td><td><pre>  </pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token selector">.triangle-bottom</span></pre></td></tr><tr><td data-num="26"></td><td><pre>  <span class="token property-declaration"><span class="token property">border-bottom</span> <span class="token number">50</span><span class="token unit">px</span> solid <span class="token hexcode">#f9cb8f</span></span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;预览效果&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#预览效果&quot;&gt;#&lt;/a&gt; 预览效果&lt;/h2&gt;
&lt;p&gt; 
&lt;style&gt;
#triangle {
  width: 0;
  height: 0;
  border: 50px solid transpar</summary>
      
    
    
    
    <category term="CSS" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/css/"/>
    
    <category term="CSS Demo" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/css/CSS-Demo/"/>
    
    
    <category term="CSS" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/CSS/"/>
    
    <category term="CSS Demo" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/CSS-Demo/"/>
    
  </entry>
  
  <entry>
    <title>Git 武沛齐笔记</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2022/03/16/Git/Git/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2022/03/16/Git/Git/</id>
    <published>2022-03-16T06:52:22.000Z</published>
    <updated>2022-03-18T02:09:37.213Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一章-快速入门"><a class="anchor" href="#第一章-快速入门">#</a> 第一章 快速入门</h2><h3 id="什么是git"><a class="anchor" href="#什么是git">#</a> 什么是 Git</h3><ul><li><p>Git 是一个分布式的版本控制软件。</p></li><li><p>软件，类似于 QQ、office、dota 等安装到电脑上才能使用的工具。</p></li><li><p>版本控制，类似于毕业论文、写文案、视频剪辑等，需要反复修改和保留原历史数据。</p></li><li><p>分布式</p><ul><li>文件夹拷贝</li><li>本地版本控制</li><li>集中式版本控制</li><li>分布式版本控制</li></ul></li></ul><h3 id="为什么要做版本控制"><a class="anchor" href="#为什么要做版本控制">#</a> 为什么要做版本控制</h3><ul><li>要保留之前所有的版本，以便回滚和修改。</li></ul><h3 id="安装-git"><a class="anchor" href="#安装-git">#</a> 安装 GIT</h3><ul><li>详见：<span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9ib29rL3poL3YyLyVFOCVCNSVCNyVFNiVBRCVBNS0lRTUlQUUlODklRTglQTMlODUtR2l0">https://git-scm.com/book/zh/v2 / 起步 - 安装 - Git</span></li></ul><h2 id="第二章-东北热-创业史"><a class="anchor" href="#第二章-东北热-创业史">#</a> 第二章 东北热 创业史</h2><h3 id="第一阶段单枪匹马开始干"><a class="anchor" href="#第一阶段单枪匹马开始干">#</a> 第一阶段：单枪匹马开始干</h3><ul><li><p>想要让 git 对一个目录进行版本控制需要以下步骤：</p></li><li><p>进入要管理的文件夹</p></li><li><p>执行初始化命令</p></li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git init</pre></td></tr></table></figure><ul><li>管理目录下的文件状态</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git status</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>注：新增的文件和修改过后的文件都是红色</pre></td></tr></table></figure><ul><li>管理指定文件（红变绿）</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git add xxx(文件名)</pre></td></tr><tr><td data-num="2"></td><td><pre>git add . 所有文件</pre></td></tr></table></figure><ul><li>个人信息配置：用户名、邮箱【一次即可】</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git config --global user.email "you@example </pre></td></tr><tr><td data-num="2"></td><td><pre>git config --global user.name <span class="token string">"Your Name"</span></pre></td></tr></table></figure><ul><li>生成版本</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git commit -m '描述信息’</pre></td></tr></table></figure><ul><li>查看版本记录</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git log</pre></td></tr></table></figure><h3 id="第二阶段拓展新功能"><a class="anchor" href="#第二阶段拓展新功能">#</a> 第二阶段：拓展新功能</h3><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git add</pre></td></tr><tr><td data-num="2"></td><td><pre>git commit -m '短视频’</pre></td></tr></table></figure><h3 id="第三阶段约饭事件"><a class="anchor" href="#第三阶段约饭事件">#</a> 第三阶段：“约饭事件”</h3><ul><li>回滚至之前版本</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git log</pre></td></tr><tr><td data-num="2"></td><td><pre>git reset --hard 版本号</pre></td></tr></table></figure><ul><li>回滚之之后版本</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git reflog</pre></td></tr><tr><td data-num="2"></td><td><pre>git reset --hard 版本号</pre></td></tr></table></figure><ul><li>小总结</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git init</pre></td></tr><tr><td data-num="2"></td><td><pre>git add</pre></td></tr><tr><td data-num="3"></td><td><pre>git commit</pre></td></tr><tr><td data-num="4"></td><td><pre>git log</pre></td></tr><tr><td data-num="5"></td><td><pre>git reflog</pre></td></tr><tr><td data-num="6"></td><td><pre>git reset --hard 版本号</pre></td></tr></table></figure><p><img data-src="xiaozongjie.bmp" alt="xiaozongjie" /></p><h3 id="第四阶段商城紧急修复bug"><a class="anchor" href="#第四阶段商城紧急修复bug">#</a> 第四阶段：商城 &amp; 紧急修复 bug</h3><h4 id="分支"><a class="anchor" href="#分支">#</a> 分支</h4><ul><li>分支可以给使用者提供多个环境的可以，意味着你可以把你的工作从开发主线上分离开来，以免影响开 发主线。</li></ul><h4 id="紧急修复bug方案"><a class="anchor" href="#紧急修复bug方案">#</a> 紧急修复 bug 方案</h4><p><img data-src="bug.png" alt="bug" /></p><h4 id="命令总结"><a class="anchor" href="#命令总结">#</a> 命令总结</h4><ul><li>查看分支</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git branch</pre></td></tr></table></figure><ul><li>创建分支</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git branch 分支名称</pre></td></tr></table></figure><ul><li>切换分支</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git checkout 分支名称</pre></td></tr></table></figure><ul><li>分支合并（可能产生冲突）</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git merge 要合并的分支</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>注意：切换分支再合并</pre></td></tr></table></figure><ul><li>删除分支</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git branch -d 分支名称</pre></td></tr></table></figure><h4 id="工作流"><a class="anchor" href="#工作流">#</a> 工作流</h4><p><img data-src="gongzuoliu.png" alt="gongzuoliu" /></p><h3 id="第五阶段进军三里屯"><a class="anchor" href="#第五阶段进军三里屯">#</a> 第五阶段：进军三里屯</h3><ul><li>有钱之后就要造呀，一个人在三里屯买了一层楼做办公室。</li></ul><p><img data-src="sanlitun.png" alt="sanlitun" /></p><h4 id="第一天上班在家上传代码"><a class="anchor" href="#第一天上班在家上传代码">#</a> 第一天上班在家上传代码</h4><ul><li>首先，需要注册 github 账号，并创建远程仓库，然后再执行如下命令，将代码上传到 github。</li></ul><p><img data-src="register-github.png" alt="register-github" /></p><p><img data-src="git-push.png" alt="git-push" /></p><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>1. 给远程仓库起别名</pre></td></tr><tr><td data-num="2"></td><td><pre> git remote add origin 远程仓库地址</pre></td></tr><tr><td data-num="3"></td><td><pre> </pre></td></tr><tr><td data-num="4"></td><td><pre>2.创建分支</pre></td></tr><tr><td data-num="5"></td><td><pre> git branch -M 分支</pre></td></tr><tr><td data-num="6"></td><td><pre> </pre></td></tr><tr><td data-num="7"></td><td><pre>3. 向远程推送代码</pre></td></tr><tr><td data-num="8"></td><td><pre> git push -u origin 分支</pre></td></tr></table></figure><h4 id="初次在公司新电脑下载代码"><a class="anchor" href="#初次在公司新电脑下载代码">#</a> 初次在公司新电脑下载代码</h4><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>1.克隆远程仓库代码</pre></td></tr><tr><td data-num="2"></td><td><pre>  git clone远程仓库地址（内部已实现git remote add origin远程仓库地址）</pre></td></tr><tr><td data-num="3"></td><td><pre>2.切换分支</pre></td></tr><tr><td data-num="4"></td><td><pre>  git checkout 分支</pre></td></tr></table></figure><ul><li>在公司下载完代码后，继续开发</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>1.切换到dev分支进行开发</pre></td></tr><tr><td data-num="2"></td><td><pre>  git checkout dev</pre></td></tr><tr><td data-num="3"></td><td><pre>2.把master分支合并到dev ［仅一次］</pre></td></tr><tr><td data-num="4"></td><td><pre>  git merge master</pre></td></tr><tr><td data-num="5"></td><td><pre>3.修改代码</pre></td></tr><tr><td data-num="6"></td><td><pre>4.提交代码</pre></td></tr><tr><td data-num="7"></td><td><pre>  git add .</pre></td></tr><tr><td data-num="8"></td><td><pre>  git commit -m <span class="token string">'xx'</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  git push origin dev</pre></td></tr></table></figure><h4 id="下班回到家继续写代码"><a class="anchor" href="#下班回到家继续写代码">#</a> 下班回到家继续写代码</h4><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>1.切换到dev分支进行开发 </pre></td></tr><tr><td data-num="2"></td><td><pre>  git checkout dev</pre></td></tr><tr><td data-num="3"></td><td><pre>2.拉代码</pre></td></tr><tr><td data-num="4"></td><td><pre>  git pull origin dev</pre></td></tr><tr><td data-num="5"></td><td><pre>3.继续开发</pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>4.提交代码</pre></td></tr><tr><td data-num="8"></td><td><pre>  git add .</pre></td></tr><tr><td data-num="9"></td><td><pre>  git commit -m <span class="token string">'xx'</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  git push origin dev</pre></td></tr></table></figure><h4 id="到公司继续开发"><a class="anchor" href="#到公司继续开发">#</a> 到公司继续开发</h4><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>1.切换到dev分支进行开发</pre></td></tr><tr><td data-num="2"></td><td><pre>  git checkout dev</pre></td></tr><tr><td data-num="3"></td><td><pre>2.拉最新代码（不必再clone,只需要通过pull获取最新代码即可）</pre></td></tr><tr><td data-num="4"></td><td><pre>  git pull origin dev</pre></td></tr><tr><td data-num="5"></td><td><pre>3.继续开发</pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>4.提交代码</pre></td></tr><tr><td data-num="8"></td><td><pre>  git add .</pre></td></tr><tr><td data-num="9"></td><td><pre>  git commit -m <span class="token string">'xx'</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  git push origin dev</pre></td></tr></table></figure><h4 id="开发完毕要上线"><a class="anchor" href="#开发完毕要上线">#</a> 开发完毕，要上线</h4><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>1.将dev分支合并到master,进行上线</pre></td></tr><tr><td data-num="2"></td><td><pre>  git checkout master </pre></td></tr><tr><td data-num="3"></td><td><pre>  git merge dev</pre></td></tr><tr><td data-num="4"></td><td><pre>  git push origin master</pre></td></tr><tr><td data-num="5"></td><td><pre>2.把dev分支也推送到远程</pre></td></tr><tr><td data-num="6"></td><td><pre>  git checkout dev </pre></td></tr><tr><td data-num="7"></td><td><pre>  git merge master</pre></td></tr><tr><td data-num="8"></td><td><pre>  git push origin dev</pre></td></tr></table></figure><h4 id="在公司约妹子忘记提交代码"><a class="anchor" href="#在公司约妹子忘记提交代码">#</a> 在公司约妹子忘记提交代码</h4><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>1.拉代码 </pre></td></tr><tr><td data-num="2"></td><td><pre>  git pull origin dev</pre></td></tr><tr><td data-num="3"></td><td><pre>2.继续开发</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>3.提交代码</pre></td></tr><tr><td data-num="6"></td><td><pre>  git add .</pre></td></tr><tr><td data-num="7"></td><td><pre>  git commit -m <span class="token string">'xx'</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  </pre></td></tr><tr><td data-num="9"></td><td><pre>注：忘记push 了</pre></td></tr></table></figure><h4 id="回家继续写代码"><a class="anchor" href="#回家继续写代码">#</a> 回家继续写代码</h4><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>1.拉代码，发现在公司写的代码忘记提交...</pre></td></tr><tr><td data-num="2"></td><td><pre>  git pull origin dev</pre></td></tr><tr><td data-num="3"></td><td><pre>  </pre></td></tr><tr><td data-num="4"></td><td><pre>2.继续开发其他功能</pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>3.把dev分支也推送到远程</pre></td></tr><tr><td data-num="7"></td><td><pre>  git add .</pre></td></tr><tr><td data-num="8"></td><td><pre>  git commit -m <span class="token string">'xx'</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  git push origin dev</pre></td></tr></table></figure><h4 id="到公司继续写代码"><a class="anchor" href="#到公司继续写代码">#</a> 到公司继续写代码</h4><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>1.拉代码，把晚上在家写的代码拉到本地（有合并、可能产生冲突）</pre></td></tr><tr><td data-num="2"></td><td><pre>  git pull origin dev</pre></td></tr><tr><td data-num="3"></td><td><pre>  </pre></td></tr><tr><td data-num="4"></td><td><pre>2.如果有冲突，手动解决冲突</pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>3.继续开发其他功能</pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>4.把dev分支也推送到远程</pre></td></tr><tr><td data-num="9"></td><td><pre>  git add .</pre></td></tr><tr><td data-num="10"></td><td><pre>  git commit -m <span class="token string">'xx'</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  git push origin dev</pre></td></tr></table></figure><h4 id="补充命令"><a class="anchor" href="#补充命令">#</a> 补充命令</h4><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git pull origin dev</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>等价于</pre></td></tr><tr><td data-num="4"></td><td><pre>git fetch origin dev // 拉到版本库</pre></td></tr><tr><td data-num="5"></td><td><pre>git merge origin/dev // 更新到工作区</pre></td></tr></table></figure><p><img data-src="qita.png" alt="qita" /></p><h3 id="rebase-的作用"><a class="anchor" href="#rebase-的作用">#</a> rebase 的作用？</h3><ul><li>rebase 可以保持提交记录简洁，不分叉</li></ul><p><img data-src="rebase.png" alt="rebase" /></p><h4 id="快速解决冲突"><a class="anchor" href="#快速解决冲突">#</a> 快速解决冲突</h4><ul><li>安装 beyond compare</li><li>在 git 中配置</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git config --local merge.tool bc3</pre></td></tr><tr><td data-num="2"></td><td><pre>  git config --local mergetool.path <span class="token string">'usr/local/bin/bcomp'</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  git config --local mergetool.keepBackup false</pre></td></tr></table></figure><ul><li>3. 应用 beyond compare 解决冲突</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git mergetool</pre></td></tr></table></figure><h4 id="小总结"><a class="anchor" href="#小总结">#</a> 小总结</h4><ul><li>添加远程连接（别名）</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git remote add origin 地址</pre></td></tr></table></figure><ul><li>推送代码</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git push origin dev</pre></td></tr></table></figure><ul><li>下载代码</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git clone 地址</pre></td></tr></table></figure><ul><li>拉取代码</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git pull origin dev</pre></td></tr><tr><td data-num="2"></td><td><pre>等价于</pre></td></tr><tr><td data-num="3"></td><td><pre>git fetch origin dev </pre></td></tr><tr><td data-num="4"></td><td><pre>git merge origin/dev</pre></td></tr></table></figure><ul><li>保持代码提交整洁（变基）</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git rebase 分支</pre></td></tr></table></figure><ul><li>记录图形展示</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git log --graph --pretty=format:"%h %s</pre></td></tr></table></figure><h3 id="第六阶段多人协同开发工作流"><a class="anchor" href="#第六阶段多人协同开发工作流">#</a> 第六阶段：多人协同开发工作流</h3><p><img data-src="duoren.png" alt="duoren" /></p><h4 id="创建项目-邀请成员"><a class="anchor" href="#创建项目-邀请成员">#</a> 创建项目 &amp; 邀请成员</h4><ul><li>协同开发时，需要所有成员都可以对同一个项目进行操作，需要邀请成员并赋予权限，否则无法开发。 github 支持两种创建项目的方式（供多人协同开发）。</li><li>合作者，将用户添加到仓库合作者中之后，该用户就可以向当前仓库提交代码。</li></ul><p><img data-src="hezuozhe.png" alt="hezuozhe" /></p><ul><li>组织，将成员邀请进入组织，组织下可以创建多个仓库，组织成员可以向组织下仓库提交代码。</li></ul><p><img data-src="zuzhi.png" alt="zuzhi" /></p><ul><li>v1.2 、v2.0 版本</li></ul><table><thead><tr><th>git tag -a v1.0 -m ' 版本介绍'</th><th>创建本地创建 Tag 信息</th></tr></thead><tbody><tr><td>git tag -d v1.0</td><td>删除 Tag</td></tr><tr><td>git push origin --tags</td><td>将本地 tag 信息推送到远程仓库</td></tr><tr><td>git pull origin --tags</td><td>更新本地 tag 版本信息</td></tr><tr><td>git checkout v.10</td><td>切换 tag</td></tr><tr><td>git clone -b v0.1 地址</td><td>指定 tag 下载代码</td></tr></tbody></table><h4 id="小弟开发"><a class="anchor" href="#小弟开发">#</a> 小弟开发</h4><ul><li>小弟注册 Github 或 Gitlab 账号</li><li>邀请小弟进入组织（默认对组织中的项目具有读权限）</li></ul><p><img data-src="yaoqing.png" alt="yaoqing" /></p><ul><li>邀请小弟成为某项目的合作者</li></ul><p><img data-src="hezuozheyaoqing.png" alt="hezuozheyaoqing" /></p><ul><li>小弟在自己电脑上下载代码并开发</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git clone https://github.com/oldboy-org/dbhot.git cd dbhot</pre></td></tr><tr><td data-num="2"></td><td><pre>git checkout dev</pre></td></tr><tr><td data-num="3"></td><td><pre>git checkout -b dzz</pre></td></tr><tr><td data-num="4"></td><td><pre>写代码...</pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>git add .</pre></td></tr><tr><td data-num="7"></td><td><pre>git commit -m <span class="token string">'斗地主功能开发完成'</span></pre></td></tr><tr><td data-num="8"></td><td><pre>git push origin ddz</pre></td></tr></table></figure><h4 id="code-review"><a class="anchor" href="#code-review">#</a> code review</h4><ul><li>配置，代码 review 之后才能合并到 dev 分支。</li></ul><p><img data-src="code-review1.png" alt="code-review1" /></p><p><img data-src="code-review2.png" alt="code-review1" /></p><ul><li>小弟提交 code review 申请</li></ul><p><img data-src="code-review3.png" alt="code-review1" /></p><p><img data-src="code-review4.png" alt="code-review1" /></p><ul><li>组长做 code review</li></ul><p><img data-src="code-review5.png" alt="code-review1" /></p><p><img data-src="code-review6.png" alt="code-review1" /></p><h4 id="提测上线预发布"><a class="anchor" href="#提测上线预发布">#</a> 提测上线（预发布）</h4><ul><li>由专门团队或团队 leader 执行以下步骤:</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>1.基于dev分值创建release分值</pre></td></tr><tr><td data-num="2"></td><td><pre>git checkout dev</pre></td></tr><tr><td data-num="3"></td><td><pre>git checkout -b release</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>2.测试等</pre></td></tr><tr><td data-num="6"></td><td><pre>3.合并到master</pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>  使用 pull request</pre></td></tr><tr><td data-num="9"></td><td><pre>  或</pre></td></tr><tr><td data-num="10"></td><td><pre>  本地将release合并到master分支</pre></td></tr><tr><td data-num="11"></td><td><pre>  </pre></td></tr><tr><td data-num="12"></td><td><pre>4.在master分支打tag</pre></td></tr><tr><td data-num="13"></td><td><pre>  git tag -a v2 -m '第二版 斗地主功能’</pre></td></tr><tr><td data-num="14"></td><td><pre>  git push origin --tags</pre></td></tr><tr><td data-num="15"></td><td><pre>  </pre></td></tr><tr><td data-num="16"></td><td><pre>5.运维人员就可以去下载代码做上线了</pre></td></tr><tr><td data-num="17"></td><td><pre>  git clone -b v2 地址</pre></td></tr></table></figure><h3 id="第七阶段给开源软件贡献代码"><a class="anchor" href="#第七阶段给开源软件贡献代码">#</a> 第七阶段：给开源软件贡献代码</h3><ul><li>fork 源代码将别人源代码拷贝到我自己的远程仓库。</li><li>在自己仓库进行修改代码</li><li>给源代码的作者提交修复 bug 的申请 (pull request)</li></ul><h2 id="第三章-其他"><a class="anchor" href="#第三章-其他">#</a> 第三章 其他</h2><h3 id="配置"><a class="anchor" href="#配置">#</a> 配置</h3><ul><li>项目配置文件：项目 /.git/config</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git config --local user.name <span class="token string">'武沛齐'</span></pre></td></tr><tr><td data-num="2"></td><td><pre>git config --local user.email 'wupeiqi@xx.com</pre></td></tr></table></figure><ul><li>全局配置文件:~/.gitconfig</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git config --global user.name <span class="token string">'wupeiq'</span></pre></td></tr><tr><td data-num="2"></td><td><pre>git config --global user.name 'wupeiqi@xx.com</pre></td></tr></table></figure><ul><li>系统配置文件：/etc/.gitconfig</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git config --system user.name <span class="token string">'wupeiq'</span></pre></td></tr><tr><td data-num="2"></td><td><pre>git config --system user.name <span class="token string">'wupeiqi@xx.com'</span></pre></td></tr><tr><td data-num="3"></td><td><pre>注意：需要有root权限</pre></td></tr></table></figure><ul><li>应用场景</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>git config --local user.name <span class="token string">'武沛齐'</span></pre></td></tr><tr><td data-num="2"></td><td><pre>git config --local user.email <span class="token string">'wupeiqi@xx.com'</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>git config --local merge.tool bc3</pre></td></tr><tr><td data-num="5"></td><td><pre>git config --local mergetool.path <span class="token string">'/usr/local/bin/bcomp'</span></pre></td></tr><tr><td data-num="6"></td><td><pre>git config --local mergetool.keepBackup false</pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>git remote add origin地址，默认添加在本地配置文件中（--local）</pre></td></tr></table></figure><h3 id="免密码登录"><a class="anchor" href="#免密码登录">#</a> 免密码登录</h3><ul><li>URL 中体现</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>原来的地址：https://github.com/WuPeiqi/dbhot.git</pre></td></tr><tr><td data-num="2"></td><td><pre>修改的地址：https://用户名：密码@github.com/WuPeiqi/dbhot.git</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>git remote add origin https://用户名：密码@github.com/WuPeiqi/dbhot.git git push origin master</pre></td></tr></table></figure><ul><li>SH 实现</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>1.生成公钥和私钥（默认放在~/.ssh目录下，id_rsa.pub公钥、id_rsa私钥）</pre></td></tr><tr><td data-num="2"></td><td><pre>  ssh-keygen</pre></td></tr><tr><td data-num="3"></td><td><pre>2.拷贝公钥的内容，并设置到github中。</pre></td></tr><tr><td data-num="4"></td><td><pre>3.在git本地中配置ssh地址</pre></td></tr><tr><td data-num="5"></td><td><pre>  git remote add origin git@github.com:WuPeiqi/dbhot.git</pre></td></tr><tr><td data-num="6"></td><td><pre>4.以后使用</pre></td></tr><tr><td data-num="7"></td><td><pre>  git push origin master</pre></td></tr></table></figure><ul><li>git 自动管理凭证</li></ul><h3 id="git忽略文件"><a class="anchor" href="#git忽略文件">#</a> git 忽略文件</h3><ul><li>让 Git 不再管理当前目录下的某些文件</li></ul><figure class="highlight git"><figcaption data-lang="git"></figcaption><table><tr><td data-num="1"></td><td><pre>*.h</pre></td></tr><tr><td data-num="2"></td><td><pre>! a. h</pre></td></tr><tr><td data-num="3"></td><td><pre>fi les/</pre></td></tr><tr><td data-num="4"></td><td><pre>*.py[c|a|d]</pre></td></tr></table></figure><ul><li>更多参考：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dpdGh1Yi9naXRpZ25vcmU=">https://github.com/github/gitignore</span></li></ul><h3 id="github任务管理相关"><a class="anchor" href="#github任务管理相关">#</a> github 任务管理相关</h3><ul><li>issues，文档以及任务管理</li><li>wiki，项目文档</li></ul><h2 id="结课"><a class="anchor" href="#结课">#</a> 结课</h2><ul><li>感谢各位同学的关注和学习，希望 git 实战课程对你能够有所帮助，更多资源关注:<ul><li>小猿圈 <span class="exturl" data-url="aHR0cDovL3d3dy5hcGVsYW5kLmNu">www.apeland.cn</span></li><li>路飞学城 <span class="exturl" data-url="aHR0cDovL3d3dy5sdWZmeWNpdHkuY29t">www.luffycity.com</span></li><li>老男孩 IT 教育 <span class="exturl" data-url="aHR0cDovL3d3dy5vbGRib3llZHUuY29t">www.oldboyedu.com</span></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;第一章-快速入门&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#第一章-快速入门&quot;&gt;#&lt;/a&gt; 第一章 快速入门&lt;/h2&gt;
&lt;h3 id=&quot;什么是git&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#什么是git&quot;&gt;#&lt;/a&gt; 什么是 Git&lt;/h3&gt;</summary>
      
    
    
    
    <category term="Git" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/Git/"/>
    
    
    <category term="Git" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 实现无缝滚动轮播图(carousel)</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2022/02/12/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/carousel/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2022/02/12/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/carousel/</id>
    <published>2022-02-12T06:16:58.000Z</published>
    <updated>2022-04-04T02:25:56.112Z</updated>
    
    <content type="html"><![CDATA[<h2 id="html结构"><a class="anchor" href="#html结构">#</a> HTML 结构</h2><ul><li>HTML 结构搭建</li></ul><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./index.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>swiper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>swiper-items<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="15"></td><td><pre>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>swiper-item swiper-item1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./images/808.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="17"></td><td><pre>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="18"></td><td><pre>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>swiper-item swiper-item2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./images/821.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="20"></td><td><pre>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="21"></td><td><pre>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>swiper-item swiper-item3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./images/822.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="23"></td><td><pre>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="24"></td><td><pre>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>swiper-item swiper-item4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./images/823.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="26"></td><td><pre>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>indicator-dots<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn-left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Left<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Right<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>'</pre></td></tr><tr><td data-num="31"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="32"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./animation.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="33"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./index.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><h2 id="stylus-样式"><a class="anchor" href="#stylus-样式">#</a> Stylus 样式</h2><ul><li>Stylus ： <code>stylus -w index.styl -o index.css</code></li></ul><figure class="highlight stylus"><figcaption data-lang="stylus"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">* </span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token property-declaration"><span class="token property">margin</span> <span class="token number">0</span></span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token property-declaration"><span class="token property">padding</span> <span class="token number">0</span></span></pre></td></tr><tr><td data-num="4"></td><td><pre>  </pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token selector">.active</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token property-declaration"><span class="token property">background-color</span> <span class="token color">skyblue</span> <span class="token important">!important</span></span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token selector">.swiper </span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token property-declaration"><span class="token property">position</span> relative</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token property-declaration"><span class="token property">margin</span> <span class="token number">120</span><span class="token unit">px</span> auto</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token property-declaration"><span class="token property">width</span> <span class="token number">800</span><span class="token unit">px</span></span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token property-declaration"><span class="token property">height</span> <span class="token number">500</span><span class="token unit">px</span></span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token property-declaration"><span class="token property">overflow</span> hidden </span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token property-declaration"><span class="token property">background-color</span> <span class="token color">pink</span></span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token property-declaration"><span class="token property">box-sizing</span> border-box</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token selector">.swiper-items</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token property-declaration"><span class="token property">position</span> relative</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token comment">// width 3000px</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token property-declaration"><span class="token property">height</span> <span class="token number">500</span><span class="token unit">px</span></span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token property-declaration"><span class="token property">background-size</span> cover</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token selector">img </span></pre></td></tr><tr><td data-num="24"></td><td><pre>      <span class="token property-declaration"><span class="token property">width</span> <span class="token number">100</span><span class="token unit">%</span></span></pre></td></tr><tr><td data-num="25"></td><td><pre>      <span class="token property-declaration"><span class="token property">height</span> <span class="token number">100</span><span class="token unit">%</span></span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre>   <span class="token selector">.swiper-item</span></pre></td></tr><tr><td data-num="28"></td><td><pre>      <span class="token property-declaration"><span class="token property">float</span> left</span></pre></td></tr><tr><td data-num="29"></td><td><pre>      <span class="token property-declaration"><span class="token property">width</span> <span class="token number">800</span><span class="token unit">px</span></span></pre></td></tr><tr><td data-num="30"></td><td><pre>      <span class="token property-declaration"><span class="token property">height</span> <span class="token number">500</span><span class="token unit">px</span></span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre>   <span class="token selector">.swiper-item1</span></pre></td></tr><tr><td data-num="33"></td><td><pre>     <span class="token property-declaration"><span class="token property">background-color</span> <span class="token color">red</span></span></pre></td></tr><tr><td data-num="34"></td><td><pre>  </pre></td></tr><tr><td data-num="35"></td><td><pre>   <span class="token selector">.swiper-item2</span></pre></td></tr><tr><td data-num="36"></td><td><pre>     <span class="token property-declaration"><span class="token property">background-color</span> <span class="token color">purple</span></span></pre></td></tr><tr><td data-num="37"></td><td><pre>  </pre></td></tr><tr><td data-num="38"></td><td><pre>   <span class="token selector">.swiper-item3</span></pre></td></tr><tr><td data-num="39"></td><td><pre>     <span class="token property-declaration"><span class="token property">background-color</span> <span class="token color">pink</span></span></pre></td></tr><tr><td data-num="40"></td><td><pre>  </pre></td></tr><tr><td data-num="41"></td><td><pre>   <span class="token selector">.swiper-item4</span></pre></td></tr><tr><td data-num="42"></td><td><pre>     <span class="token property-declaration"><span class="token property">background-color</span> <span class="token color">yellow</span></span></pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre></pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token selector">.indicator-dots </span></pre></td></tr><tr><td data-num="47"></td><td><pre>  <span class="token property-declaration"><span class="token property">display</span> flex</span></pre></td></tr><tr><td data-num="48"></td><td><pre>  <span class="token property-declaration"><span class="token property">justify-content</span> center</span></pre></td></tr><tr><td data-num="49"></td><td><pre>  <span class="token property-declaration"><span class="token property">align-items</span>  center</span></pre></td></tr><tr><td data-num="50"></td><td><pre>  <span class="token property-declaration"><span class="token property">position</span> absolute</span></pre></td></tr><tr><td data-num="51"></td><td><pre>  <span class="token property-declaration"><span class="token property">bottom</span> <span class="token number">20</span><span class="token unit">px</span></span></pre></td></tr><tr><td data-num="52"></td><td><pre>  <span class="token property-declaration"><span class="token property">left</span> <span class="token number">50</span><span class="token unit">%</span></span></pre></td></tr><tr><td data-num="53"></td><td><pre>  <span class="token property-declaration"><span class="token property">transform</span> <span class="token func"><span class="token function">translateX</span><span class="token punctuation">(</span><span class="token number">-50</span><span class="token unit">%</span><span class="token punctuation">)</span></span></span></pre></td></tr><tr><td data-num="54"></td><td><pre>  <span class="token property-declaration"><span class="token property">width</span> <span class="token number">100</span><span class="token unit">%</span></span></pre></td></tr><tr><td data-num="55"></td><td><pre>  <span class="token property-declaration"><span class="token property">height</span> <span class="token number">30</span><span class="token unit">px</span></span></pre></td></tr><tr><td data-num="56"></td><td><pre>  <span class="token selector">&amp;>div</span></pre></td></tr><tr><td data-num="57"></td><td><pre>    <span class="token property-declaration"><span class="token property">cursor</span> pointer</span></pre></td></tr><tr><td data-num="58"></td><td><pre>    <span class="token property-declaration"><span class="token property">margin</span> <span class="token number">0</span> <span class="token number">5</span><span class="token unit">px</span></span></pre></td></tr><tr><td data-num="59"></td><td><pre>    <span class="token property-declaration"><span class="token property">width</span> <span class="token number">10</span><span class="token unit">px</span></span></pre></td></tr><tr><td data-num="60"></td><td><pre>    <span class="token property-declaration"><span class="token property">height</span> <span class="token number">10</span><span class="token unit">px</span></span></pre></td></tr><tr><td data-num="61"></td><td><pre>    <span class="token property-declaration"><span class="token property">border-radius</span> <span class="token number">50</span><span class="token unit">%</span></span></pre></td></tr><tr><td data-num="62"></td><td><pre>    <span class="token property-declaration"><span class="token property">border</span> <span class="token number">1</span><span class="token unit">px</span> solid <span class="token hexcode">#ccc</span></span></pre></td></tr><tr><td data-num="63"></td><td><pre>    <span class="token property-declaration"><span class="token property">background-color</span> <span class="token hexcode">#fff</span></span></pre></td></tr><tr><td data-num="64"></td><td><pre>    <span class="token selector">&amp;hover</span></pre></td></tr><tr><td data-num="65"></td><td><pre>      <span class="token property-declaration"><span class="token property">background-color</span> <span class="token color">skyblue</span></span></pre></td></tr><tr><td data-num="66"></td><td><pre></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token selector">.btn-left</pre></td></tr><tr><td data-num="68"></td><td><pre>.btn-right</span></pre></td></tr><tr><td data-num="69"></td><td><pre>  <span class="token property-declaration"><span class="token property">cursor</span> pointer</span></pre></td></tr><tr><td data-num="70"></td><td><pre>  <span class="token property-declaration"><span class="token property">color</span> <span class="token hexcode">#fff</span></span></pre></td></tr><tr><td data-num="71"></td><td><pre>  <span class="token property-declaration"><span class="token property">position</span> absolute</span></pre></td></tr><tr><td data-num="72"></td><td><pre>  <span class="token property-declaration"><span class="token property">top</span> <span class="token number">50</span><span class="token unit">%</span></span></pre></td></tr><tr><td data-num="73"></td><td><pre>  <span class="token property-declaration"><span class="token property">transform</span> <span class="token func"><span class="token function">translateY</span><span class="token punctuation">(</span><span class="token number">-50</span><span class="token unit">%</span><span class="token punctuation">)</span></span></span></pre></td></tr><tr><td data-num="74"></td><td><pre>  <span class="token property-declaration"><span class="token property">width</span> <span class="token number">50</span><span class="token unit">px</span></span></pre></td></tr><tr><td data-num="75"></td><td><pre>  <span class="token property-declaration"><span class="token property">height</span> <span class="token number">40</span><span class="token unit">px</span></span></pre></td></tr><tr><td data-num="76"></td><td><pre>  <span class="token property-declaration"><span class="token property">text-align</span> center</span></pre></td></tr><tr><td data-num="77"></td><td><pre>  <span class="token property-declaration"><span class="token property">line-height</span> <span class="token number">40</span><span class="token unit">px</span></span></pre></td></tr><tr><td data-num="78"></td><td><pre>  <span class="token property-declaration"><span class="token property">background-color</span> <span class="token func"><span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0.486</span><span class="token punctuation">)</span></span></span></pre></td></tr><tr><td data-num="79"></td><td><pre>  <span class="token property-declaration"><span class="token property">transition</span> all <span class="token number">.3</span><span class="token unit">s</span></span></pre></td></tr><tr><td data-num="80"></td><td><pre>  <span class="token selector">&amp;hover</span></pre></td></tr><tr><td data-num="81"></td><td><pre>    <span class="token property-declaration"><span class="token property">background-color</span> <span class="token hexcode">#ccc</span></span></pre></td></tr><tr><td data-num="82"></td><td><pre><span class="token selector">.btn-left</span></pre></td></tr><tr><td data-num="83"></td><td><pre>  <span class="token property-declaration"><span class="token property">left</span> <span class="token number">0</span></span></pre></td></tr><tr><td data-num="84"></td><td><pre>  <span class="token property-declaration"><span class="token property">border-top-right-radius</span> <span class="token number">10</span><span class="token unit">%</span></span></pre></td></tr><tr><td data-num="85"></td><td><pre>  <span class="token property-declaration"><span class="token property">border-bottom-right-radius</span> <span class="token number">10</span><span class="token unit">%</span></span></pre></td></tr><tr><td data-num="86"></td><td><pre></pre></td></tr><tr><td data-num="87"></td><td><pre><span class="token selector">.btn-right</span></pre></td></tr><tr><td data-num="88"></td><td><pre>  <span class="token property-declaration"><span class="token property">right</span> <span class="token number">0</span></span></pre></td></tr><tr><td data-num="89"></td><td><pre>  <span class="token property-declaration"><span class="token property">border-top-left-radius</span> <span class="token number">10</span><span class="token unit">%</span></span></pre></td></tr><tr><td data-num="90"></td><td><pre>  <span class="token property-declaration"><span class="token property">border-bottom-left-radius</span> <span class="token number">10</span><span class="token unit">%</span></span></pre></td></tr></table></figure><h2 id="css-样式"><a class="anchor" href="#css-样式">#</a> CSS 样式</h2><ul><li>编译后的 CSS 样式</li></ul><figure class="highlight css"><figcaption data-lang="CSS"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">*</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token selector">.active</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token property">background-color</span><span class="token punctuation">:</span> #87ceeb <span class="token important">!important</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token selector">.swiper</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token property">margin</span><span class="token punctuation">:</span> 120px auto<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token property">width</span><span class="token punctuation">:</span> 800px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token property">height</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token property">background-color</span><span class="token punctuation">:</span> #ffc0cb<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token selector">.swiper .swiper-items</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token property">height</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token property">background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token selector">.swiper .swiper-items img</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token selector">.swiper .swiper-item</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>  <span class="token property">width</span><span class="token punctuation">:</span> 800px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>  <span class="token property">height</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token selector">.swiper .swiper-item1</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>  <span class="token property">background-color</span><span class="token punctuation">:</span> #f00<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token selector">.swiper .swiper-item2</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>  <span class="token property">background-color</span><span class="token punctuation">:</span> #800080<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token selector">.swiper .swiper-item3</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>  <span class="token property">background-color</span><span class="token punctuation">:</span> #ffc0cb<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token selector">.swiper .swiper-item4</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>  <span class="token property">background-color</span><span class="token punctuation">:</span> #ff0<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token selector">.indicator-dots</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>  <span class="token property">bottom</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>  <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>-50%<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>  <span class="token property">height</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token selector">.indicator-dots>div</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>  <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>  <span class="token property">margin</span><span class="token punctuation">:</span> 0 5px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>  <span class="token property">width</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>  <span class="token property">height</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>  <span class="token property">border-radius</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #ccc<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>  <span class="token property">background-color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token selector">.indicator-dots>divhover</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>  <span class="token property">background-color</span><span class="token punctuation">:</span> #87ceeb<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token selector">.btn-left,</pre></td></tr><tr><td data-num="67"></td><td><pre>.btn-right</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>  <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>  <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="70"></td><td><pre>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="71"></td><td><pre>  <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="72"></td><td><pre>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-50%<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="73"></td><td><pre>  <span class="token property">width</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="74"></td><td><pre>  <span class="token property">height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="75"></td><td><pre>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="76"></td><td><pre>  <span class="token property">line-height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="77"></td><td><pre>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span>255<span class="token punctuation">,</span>255<span class="token punctuation">,</span>0.486<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="78"></td><td><pre>  <span class="token property">transition</span><span class="token punctuation">:</span> all 0.3s<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="79"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="80"></td><td><pre><span class="token selector">.btn-left:hover,</pre></td></tr><tr><td data-num="81"></td><td><pre>.btn-right:hover</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="82"></td><td><pre>  <span class="token property">background-color</span><span class="token punctuation">:</span> #ccc<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="83"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="84"></td><td><pre><span class="token selector">.btn-left</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="85"></td><td><pre>  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="86"></td><td><pre>  <span class="token property">border-top-right-radius</span><span class="token punctuation">:</span> 10%<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="87"></td><td><pre>  <span class="token property">border-bottom-right-radius</span><span class="token punctuation">:</span> 10%<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="88"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="89"></td><td><pre><span class="token selector">.btn-right</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="90"></td><td><pre>  <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="91"></td><td><pre>  <span class="token property">border-top-left-radius</span><span class="token punctuation">:</span> 10%<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="92"></td><td><pre>  <span class="token property">border-bottom-left-radius</span><span class="token punctuation">:</span> 10%<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="93"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="animate-动画"><a class="anchor" href="#animate-动画">#</a> animate 动画</h2><ul><li>封装动画效果，支持左右上下滚动</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">animate</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> target<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> offsetDirection <span class="token operator">=</span> <span class="token string">'offsetLeft'</span><span class="token punctuation">,</span> delay <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>timer<span class="token punctuation">)</span> <span class="token function">clearInterval</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>timer<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token comment">// 实现 timing-function 效果</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token keyword">function</span> <span class="token function">calcStep</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> x <span class="token operator">=</span> <span class="token number">10</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">let</span> step <span class="token operator">=</span> <span class="token punctuation">(</span>target <span class="token operator">-</span> obj<span class="token punctuation">[</span>offsetDirection<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> x</pre></td></tr><tr><td data-num="9"></td><td><pre>    step <span class="token operator">=</span> step <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span> <span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">return</span> step</pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token comment">// 判断哪种滚动方式</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token keyword">const</span> <span class="token function-variable function">offset</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> offsetDirection <span class="token operator">===</span> <span class="token string">'offsetTop'</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  </pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token comment">//setInterval 执行的回调函数</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token keyword">const</span> <span class="token function-variable function">handler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token comment">// 如果到达目的地清除定时器且判断后是否执行 callback 函数 这里用于节流</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">[</span>offsetDirection<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </pre></td></tr><tr><td data-num="20"></td><td><pre>      <span class="token function">clearInterval</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>timer<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>      callback <span class="token operator">&amp;&amp;</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> obj<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> obj<span class="token punctuation">[</span>offsetDirection<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">calcStep</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'px'</span></pre></td></tr><tr><td data-num="24"></td><td><pre>      <span class="token keyword">else</span> obj<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> obj<span class="token punctuation">[</span>offsetDirection<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">calcStep</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'px'</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>  </pre></td></tr><tr><td data-num="28"></td><td><pre>  obj<span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="indexjs"><a class="anchor" href="#indexjs">#</a> index.js</h2><ul><li>操作元素实例</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">,</span> loadCallback<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">function</span> <span class="token function">loadCallback</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token comment">// 将选择器以对象形式存储</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token literal-property property">swiper</span><span class="token operator">:</span> <span class="token string">'.swiper'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token literal-property property">swiperItem</span><span class="token operator">:</span> <span class="token string">'.swiper-item'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token literal-property property">swiperItems</span><span class="token operator">:</span> <span class="token string">'.swiper-items'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token literal-property property">indicatorDot</span><span class="token operator">:</span> <span class="token string">'.indicator-dot'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token literal-property property">indicatorDots</span><span class="token operator">:</span> <span class="token string">'.indicator-dots'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token literal-property property">btnLeft</span><span class="token operator">:</span> <span class="token string">'.btn-left'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token literal-property property">btnRight</span><span class="token operator">:</span> <span class="token string">'.btn-right'</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token keyword">class</span> <span class="token class-name">OperatingElements</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>      <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> swiper<span class="token punctuation">,</span> swiperItems<span class="token punctuation">,</span> indicatorDots<span class="token punctuation">,</span> btnLeft<span class="token punctuation">,</span> btnRight <span class="token punctuation">&#125;</span> <span class="token operator">=</span> options</pre></td></tr><tr><td data-num="18"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// 控制节流阀开关</span></pre></td></tr><tr><td data-num="19"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>options <span class="token operator">=</span> options <span class="token comment">// 所有选择器</span></pre></td></tr><tr><td data-num="20"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>swiper <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getElement</span><span class="token punctuation">(</span>swiper<span class="token punctuation">)</span>  <span class="token comment">// 获取 class -> swiper 盒子 </span></pre></td></tr><tr><td data-num="21"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>swiperItem <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getElement</span><span class="token punctuation">(</span>swiperItems<span class="token punctuation">)</span> <span class="token comment">// 获取 class -> swiper-swiperItems 盒子</span></pre></td></tr><tr><td data-num="22"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>indicatorDot <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getElement</span><span class="token punctuation">(</span>indicatorDots<span class="token punctuation">)</span> <span class="token comment">// 获取指示器</span></pre></td></tr><tr><td data-num="23"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>btnLeft <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getElement</span><span class="token punctuation">(</span>btnLeft<span class="token punctuation">)</span> <span class="token comment">// 获取做左按钮</span></pre></td></tr><tr><td data-num="24"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>btnRight <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getElement</span><span class="token punctuation">(</span>btnRight<span class="token punctuation">)</span> <span class="token comment">// 获取做右按钮</span></pre></td></tr><tr><td data-num="25"></td><td><pre>      <span class="token comment">// 这里需要先等 this.swiperItems 全部获取图片父盒子元素到再执行获取第一张图片盒子宽度</span></pre></td></tr><tr><td data-num="26"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span>swiperItemWidth <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getElWidth</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>swiperItems<span class="token punctuation">)</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="27"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>swiperItem<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>swiperItemFirst<span class="token punctuation">)</span> <span class="token comment">// 追加克隆的图片到最后面</span></pre></td></tr><tr><td data-num="28"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSwiperItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 再次获取所有图片父盒子宽度</span></pre></td></tr><tr><td data-num="29"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>indicatorDots<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'indicator-dot active'</span> <span class="token comment">// 默认第一个小圆圈加样式</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token comment">// 再次初始化</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>      <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> swiperItem<span class="token punctuation">,</span> swiperItems<span class="token punctuation">,</span> indicatorDot<span class="token punctuation">,</span> indicatorDots <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options</pre></td></tr><tr><td data-num="34"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>swiperItems <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getElement</span><span class="token punctuation">(</span>swiperItem<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// 获取所有图片父盒子</span></pre></td></tr><tr><td data-num="35"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>swiperItemFirst <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cloneEl</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>swiperItems<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 克隆第一张</span></pre></td></tr><tr><td data-num="36"></td><td><pre>      callback <span class="token operator">&amp;&amp;</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 回调</span></pre></td></tr><tr><td data-num="37"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>indicatorDots <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getElement</span><span class="token punctuation">(</span>indicatorDot<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// 获取所有指示器</span></pre></td></tr><tr><td data-num="38"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createIndicatorDots</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>swiperItems<span class="token punctuation">)</span> <span class="token comment">// 动态创建所有指示器</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>    <span class="token comment">// 获取所有 calss 是 swiper-item 的元素 </span></pre></td></tr><tr><td data-num="41"></td><td><pre>    <span class="token function">getSwiperItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>swiperItems <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getElement</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>swiperItem<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>    <span class="token comment">// 传入选择器获取元素</span></pre></td></tr><tr><td data-num="45"></td><td><pre>    <span class="token function">getElement</span><span class="token punctuation">(</span><span class="token parameter">selector<span class="token punctuation">,</span> isAll <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span>isAll<span class="token punctuation">)</span> <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="47"></td><td><pre>      <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="48"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>    <span class="token comment">// 获取元素宽度</span></pre></td></tr><tr><td data-num="50"></td><td><pre>    <span class="token function">getElWidth</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>swiperItems<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object NodeList]'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>        <span class="token keyword">return</span> target<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>offsetWidth</pre></td></tr><tr><td data-num="53"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>      <span class="token keyword">return</span> target<span class="token punctuation">.</span>offsetWidth</pre></td></tr><tr><td data-num="55"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>    <span class="token comment">// 克隆元素</span></pre></td></tr><tr><td data-num="57"></td><td><pre>    <span class="token function">cloneEl</span><span class="token punctuation">(</span><span class="token parameter">targetEl<span class="token punctuation">,</span> deep <span class="token operator">=</span> <span class="token boolean">true</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>      <span class="token keyword">return</span> targetEl<span class="token operator">?.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span>deep<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="59"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>    <span class="token comment">// 插入元素 并再次给计算 class 是 swiper-item 盒子的宽度</span></pre></td></tr><tr><td data-num="61"></td><td><pre>    <span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token parameter">parentEl<span class="token punctuation">,</span> cihldEl<span class="token punctuation">,</span> isExec</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>      parentEl <span class="token operator">&amp;&amp;</span> parentEl<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>cihldEl<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="63"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span>isExec<span class="token punctuation">)</span> <span class="token keyword">return</span></pre></td></tr><tr><td data-num="64"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSwiperItemsWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="65"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="66"></td><td><pre>    <span class="token comment">// 创建元素</span></pre></td></tr><tr><td data-num="67"></td><td><pre>    <span class="token function">createEl</span><span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>      <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="69"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="70"></td><td><pre>    <span class="token comment">// 设置属性</span></pre></td></tr><tr><td data-num="71"></td><td><pre>    <span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="72"></td><td><pre>      target<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="73"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="74"></td><td><pre>    <span class="token comment">// 设置 class 是 swiper-item 的盒子元素宽度</span></pre></td></tr><tr><td data-num="75"></td><td><pre>    <span class="token function">setSwiperItemsWidth</span><span class="token punctuation">(</span><span class="token parameter">swiperItems<span class="token punctuation">,</span> targetEl</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="76"></td><td><pre>      targetEl <span class="token operator">||=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getElement</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>swiperItems<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="77"></td><td><pre>      swiperItems <span class="token operator">||=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getElement</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>swiperItem<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="78"></td><td><pre>      <span class="token keyword">const</span> width <span class="token operator">=</span> swiperItems<span class="token punctuation">.</span>length <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getElWidth</span><span class="token punctuation">(</span>swiperItems<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="79"></td><td><pre>      targetEl<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> width <span class="token operator">+</span> <span class="token string">'px'</span></pre></td></tr><tr><td data-num="80"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="81"></td><td><pre>    <span class="token comment">// 动态追加小圆圈</span></pre></td></tr><tr><td data-num="82"></td><td><pre>    <span class="token function">createIndicatorDots</span><span class="token punctuation">(</span><span class="token parameter">swiperItems</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="83"></td><td><pre>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> swiperItems<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="84"></td><td><pre>        <span class="token keyword">const</span> indicatorDot <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createEl</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="85"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>indicatorDot<span class="token punctuation">,</span> <span class="token string">'class'</span><span class="token punctuation">,</span> <span class="token string">'indicator-dot'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="86"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>indicatorDot<span class="token punctuation">,</span> indicatorDot<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="87"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="88"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>indicatorDots <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getElement</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>indicatorDot<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="89"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="90"></td><td><pre>    <span class="token comment">// 清除 class 为 indicator-dot 的所有样式</span></pre></td></tr><tr><td data-num="91"></td><td><pre>    <span class="token function">resetClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="92"></td><td><pre>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>indicatorDots<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="93"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>indicatorDots<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'indicator-dot'</span></pre></td></tr><tr><td data-num="94"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="95"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="96"></td><td><pre>    <span class="token comment">// 点击的小圆圈追加样式</span></pre></td></tr><tr><td data-num="97"></td><td><pre>    <span class="token function">circleChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="98"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resetClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="99"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>indicatorDots<span class="token punctuation">[</span>circle<span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'indicator-dot active'</span></pre></td></tr><tr><td data-num="100"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="101"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="102"></td><td><pre></pre></td></tr><tr><td data-num="103"></td><td><pre>  <span class="token comment">// 实例</span></pre></td></tr><tr><td data-num="104"></td><td><pre>  operatingElements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OperatingElements</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="105"></td><td><pre></pre></td></tr><tr><td data-num="106"></td><td><pre>  <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="107"></td><td><pre>  <span class="token comment">// 所有小圆点事件</span></pre></td></tr><tr><td data-num="108"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> operatingElements<span class="token punctuation">.</span>indicatorDots<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="109"></td><td><pre>    operatingElements<span class="token punctuation">.</span>indicatorDots<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="110"></td><td><pre>      operatingElements<span class="token punctuation">.</span><span class="token function">resetClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="111"></td><td><pre>      operatingElements<span class="token punctuation">.</span>indicatorDots<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'indicator-dot active'</span></pre></td></tr><tr><td data-num="112"></td><td><pre>      index <span class="token operator">=</span> i</pre></td></tr><tr><td data-num="113"></td><td><pre>      <span class="token function">animate</span><span class="token punctuation">(</span>operatingElements<span class="token punctuation">.</span>swiperItem<span class="token punctuation">,</span> <span class="token operator">-</span>operatingElements<span class="token punctuation">.</span>swiperItemWidth <span class="token operator">*</span> i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="114"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="115"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="116"></td><td><pre></pre></td></tr><tr><td data-num="117"></td><td><pre>  <span class="token keyword">let</span> circle <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="118"></td><td><pre></pre></td></tr><tr><td data-num="119"></td><td><pre>  <span class="token comment">// 左按钮</span></pre></td></tr><tr><td data-num="120"></td><td><pre>  <span class="token keyword">function</span> <span class="token function">btnLeftClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="121"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>operatingElements<span class="token punctuation">.</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="122"></td><td><pre>      operatingElements<span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="123"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="124"></td><td><pre>        index <span class="token operator">=</span> operatingElements<span class="token punctuation">.</span>indicatorDots<span class="token punctuation">.</span>length</pre></td></tr><tr><td data-num="125"></td><td><pre>        operatingElements<span class="token punctuation">.</span>swiperItem<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token operator">-</span>index <span class="token operator">*</span> operatingElements<span class="token punctuation">.</span>swiperItemWidth <span class="token operator">+</span> <span class="token string">'px'</span></pre></td></tr><tr><td data-num="126"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="127"></td><td><pre>  </pre></td></tr><tr><td data-num="128"></td><td><pre>      index<span class="token operator">--</span></pre></td></tr><tr><td data-num="129"></td><td><pre>      <span class="token function">animate</span><span class="token punctuation">(</span>operatingElements<span class="token punctuation">.</span>swiperItem<span class="token punctuation">,</span> operatingElements<span class="token punctuation">.</span>swiperItemWidth <span class="token operator">*</span> <span class="token operator">-</span>index<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> operatingElements<span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="130"></td><td><pre>  </pre></td></tr><tr><td data-num="131"></td><td><pre>      circle<span class="token operator">--</span></pre></td></tr><tr><td data-num="132"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span>circle <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> circle <span class="token operator">=</span> operatingElements<span class="token punctuation">.</span>indicatorDots<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="133"></td><td><pre>  </pre></td></tr><tr><td data-num="134"></td><td><pre>      operatingElements<span class="token punctuation">.</span><span class="token function">circleChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="135"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="136"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="137"></td><td><pre></pre></td></tr><tr><td data-num="138"></td><td><pre>  <span class="token comment">// 右按钮</span></pre></td></tr><tr><td data-num="139"></td><td><pre>  <span class="token keyword">function</span> <span class="token function">btnRightClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="140"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>operatingElements<span class="token punctuation">.</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="141"></td><td><pre>      operatingElements<span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="142"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> operatingElements<span class="token punctuation">.</span>indicatorDots<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="143"></td><td><pre>        operatingElements<span class="token punctuation">.</span>swiperItem<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="144"></td><td><pre>        index <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="145"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="146"></td><td><pre>  </pre></td></tr><tr><td data-num="147"></td><td><pre>      index<span class="token operator">++</span></pre></td></tr><tr><td data-num="148"></td><td><pre>      <span class="token comment">// 执行动画函数 计算动画的距离 传入回调函数进行节流阀操作</span></pre></td></tr><tr><td data-num="149"></td><td><pre>      <span class="token function">animate</span><span class="token punctuation">(</span>operatingElements<span class="token punctuation">.</span>swiperItem<span class="token punctuation">,</span> <span class="token operator">-</span>operatingElements<span class="token punctuation">.</span>swiperItemWidth <span class="token operator">*</span> index<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> operatingElements<span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="150"></td><td><pre>  </pre></td></tr><tr><td data-num="151"></td><td><pre>      circle<span class="token operator">++</span></pre></td></tr><tr><td data-num="152"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> operatingElements<span class="token punctuation">.</span>indicatorDots<span class="token punctuation">.</span>length<span class="token punctuation">)</span> circle <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="153"></td><td><pre>  </pre></td></tr><tr><td data-num="154"></td><td><pre>      operatingElements<span class="token punctuation">.</span><span class="token function">circleChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="155"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="156"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="157"></td><td><pre></pre></td></tr><tr><td data-num="158"></td><td><pre>  <span class="token comment">// 左右按钮点击事件</span></pre></td></tr><tr><td data-num="159"></td><td><pre>  operatingElements<span class="token punctuation">.</span>btnLeft<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> btnLeftClick<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="160"></td><td><pre>  operatingElements<span class="token punctuation">.</span>btnRight<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> btnRightClick<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="161"></td><td><pre></pre></td></tr><tr><td data-num="162"></td><td><pre>  <span class="token comment">// 自动播放 间隔 3000ms</span></pre></td></tr><tr><td data-num="163"></td><td><pre>  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span></pre></td></tr><tr><td data-num="164"></td><td><pre>  <span class="token keyword">function</span> <span class="token function">autoplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="165"></td><td><pre>    timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="166"></td><td><pre>      operatingElements<span class="token punctuation">.</span>btnRight<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="167"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="168"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="169"></td><td><pre>  <span class="token function">autoplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="170"></td><td><pre></pre></td></tr><tr><td data-num="171"></td><td><pre>  <span class="token comment">// 进入隐藏按钮</span></pre></td></tr><tr><td data-num="172"></td><td><pre>  operatingElements<span class="token punctuation">.</span>swiper<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mouseenter'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="173"></td><td><pre>    operatingElements<span class="token punctuation">.</span>btnLeft<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'block'</span></pre></td></tr><tr><td data-num="174"></td><td><pre>    operatingElements<span class="token punctuation">.</span>btnRight<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'block'</span></pre></td></tr><tr><td data-num="175"></td><td><pre>    <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="176"></td><td><pre>    timer <span class="token operator">=</span> <span class="token keyword">null</span></pre></td></tr><tr><td data-num="177"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="178"></td><td><pre>  <span class="token comment">// 离开显示按钮</span></pre></td></tr><tr><td data-num="179"></td><td><pre>  operatingElements<span class="token punctuation">.</span>swiper<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mouseleave'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="180"></td><td><pre>    operatingElements<span class="token punctuation">.</span>btnLeft<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span></pre></td></tr><tr><td data-num="181"></td><td><pre>    operatingElements<span class="token punctuation">.</span>btnRight<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span></pre></td></tr><tr><td data-num="182"></td><td><pre>    <span class="token function">autoplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="183"></td><td><pre>  <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="184"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>operatingElements<span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="185"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;html结构&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#html结构&quot;&gt;#&lt;/a&gt; HTML 结构&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;HTML 结构搭建&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;figcaption</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 实现 vue-router</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2022/02/05/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/vue-router/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2022/02/05/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/vue-router/</id>
    <published>2022-02-05T05:54:12.000Z</published>
    <updated>2022-03-25T05:55:05.079Z</updated>
    
    
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 实现 Vuex</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2022/02/01/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/vuex/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2022/02/01/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/vuex/</id>
    <published>2022-02-01T12:27:24.000Z</published>
    <updated>2022-03-25T04:29:39.072Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vuex-介绍"><a class="anchor" href="#vuex-介绍">#</a> Vuex 介绍</h2><ul><li>Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式 + 库</strong>。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</li><li>详情查看：<span class="exturl" data-url="aHR0cHM6Ly92dWV4LnZ1ZWpzLm9yZy96aC8=">Vuex 是什么？ | Vuex (vuejs.org)</span></li></ul><h2 id="实现-vuex-思路"><a class="anchor" href="#实现-vuex-思路">#</a> 实现 Vuex 思路</h2><ul><li><p>首先 Vuex 是通过  <code>Vue.use(vuex)</code> ，说明 <code>vuex</code>  是个插件，肯定是要 <code>install</code>  函数</p></li><li><p>同时会传入 Vue，因为 vuex 是离不开 Vue 的，或者说是为他量身打造的一个工具</p></li><li><p>其次每个组件都可以使用 <code>$store</code> ，说明是挂载在每个组件上的，那么我们可以使用混入 (mixin)，在 <code>beforeCreate</code>  生命周期中混入是最好的</p></li><li><p>然后就是进行的一些列针对 <code>Store</code>  的操作，其中最核心的是 <code>module</code> ，或者说 <code>vuex</code>  最核心的部分就是模块化了</p></li><li><p>那么根据 module 我们会创建一个类 <code>(ModuleCollection)</code>  通过递归注册模块，形成树结构</p></li><li><p>最就是根据树结构我们会实现一个函数，通过递归来安装模块，其中会封装一写工具函数，或者封装类和类的公用方法</p></li><li><p>另外还会就是实现注册模块、vuex 的插件持久化，以及严格模式下 (strice:true) 只能通过 mutation 来更改状态等功能和一些辅助函数</p><ul><li>最后放一张最终完成后的目录结构图</li></ul></li></ul><p><img data-src="directory-structure.png" alt="directory-structure" /></p><h2 id="mixin"><a class="anchor" href="#mixin">#</a> mixin</h2><ul><li>这是第一步，给每个组件添加 <code>$store</code>  属性，供所有组件都能使用</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">vuexInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$options<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token comment">// 判断根组件是否有 store</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>store<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token comment">// 根实例先添加</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>$store <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$options<span class="token punctuation">.</span>store</pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>parent <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>$store<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token comment">// 子组件拿到父组件的 store</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>$store <span class="token operator">=</span> options<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>$store<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">const</span> <span class="token function-variable function">applyMixin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">Vue</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  Vue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token literal-property property">beforeCreate</span><span class="token operator">:</span> vuexInit</pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> applyMixin</pre></td></tr></table></figure><h2 id="util"><a class="anchor" href="#util">#</a> util</h2><ul><li>将工具函数抽取出来，使代码简洁明了点</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 这个函数功能会经常用到包括（模块的一些方法），所以在此封装成一个函数</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">forEachValue</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=></span> <span class="token function">fn</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// 根据路径获取最新的 state</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token parameter">store<span class="token punctuation">,</span> path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token keyword">return</span> path<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">newState<span class="token punctuation">,</span> current</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">return</span> newState<span class="token punctuation">[</span>current<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> store<span class="token punctuation">.</span>state<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="module"><a class="anchor" href="#module">#</a> module</h2><ul><li>封装的模块类，使每个类都能用到一些方法</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> forEachValue <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../utils"</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Module</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">rootModule</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>_rawModule <span class="token operator">=</span> rootModule</pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>_children <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> rootModule<span class="token punctuation">.</span>state</pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">get</span> <span class="token function">namespaced</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 属性访问器</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_rawModule<span class="token punctuation">.</span>namespaced</pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token function">getChild</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_children<span class="token punctuation">[</span>key<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token function">addChild</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> module</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>_children<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> module</pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token function">forEachMutation</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_rawModule<span class="token punctuation">.</span>mutations<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>      <span class="token function">forEachValue</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_rawModule<span class="token punctuation">.</span>mutations<span class="token punctuation">,</span> fn<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token function">forEachAction</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_rawModule<span class="token punctuation">.</span>actions<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>      <span class="token function">forEachValue</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_rawModule<span class="token punctuation">.</span>actions<span class="token punctuation">,</span> fn<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>  <span class="token function">forEachGetter</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_rawModule<span class="token punctuation">.</span>getters<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>      <span class="token function">forEachValue</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_rawModule<span class="token punctuation">.</span>getters<span class="token punctuation">,</span> fn<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>  <span class="token function">forEachChild</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_children<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>      <span class="token function">forEachValue</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_children<span class="token punctuation">,</span> fn<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="modulecollection"><a class="anchor" href="#modulecollection">#</a> moduleCollection</h2><ul><li>递归注册模块，形参树结构</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> forEachValue <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../utils"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> Module <span class="token keyword">from</span> <span class="token string">"./module"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">ModuleCollection</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token comment">// 注册模块 递归注册 根模块</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token function">register</span><span class="token punctuation">(</span><span class="token parameter">path<span class="token punctuation">,</span> rootModule</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token comment">// 创建 Module 类的实例，Module 类中封装了许多方法</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">let</span> newModule <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Module</span><span class="token punctuation">(</span>rootModule<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token comment">// 把当前要注册的模块上做了一个映射</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    rootModule<span class="token punctuation">.</span>rawModule <span class="token operator">=</span> newModule</pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>      <span class="token comment">// 刚开始肯定是没有 path 肯定是不存在的，所有添加一个 root 属性存入根模块</span></pre></td></tr><tr><td data-num="17"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> newModule</pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>      <span class="token comment">// 例如：['a', 'b', 'c'] 这种路径形式，代表 a 模块中有 b 模块，b 模块中有 c 模块</span></pre></td></tr><tr><td data-num="21"></td><td><pre>      <span class="token comment">// 那么其作用就是 c 应该在 b 模块中，所有 slice (0,-1) 拿到除最后一个的数组即 ['a','b']</span></pre></td></tr><tr><td data-num="22"></td><td><pre>      <span class="token comment">// 通过 reduce 取到 b 模块，再将 c 模块放入 b 模块中</span></pre></td></tr><tr><td data-num="23"></td><td><pre>      <span class="token keyword">let</span> parent <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=></span> module<span class="token punctuation">.</span><span class="token function">getChild</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>      parent<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span><span class="token punctuation">[</span>path<span class="token punctuation">[</span>path<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> newModule<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token comment">// 如果有 modules，说明有子模块进行递归注册</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rootModule<span class="token punctuation">.</span>modules<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>      <span class="token function">forEachValue</span><span class="token punctuation">(</span>rootModule<span class="token punctuation">.</span>modules<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> moduleName</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>path<span class="token punctuation">,</span> moduleName<span class="token punctuation">]</span><span class="token punctuation">,</span> module<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre>  <span class="token comment">// 获取命名空间</span></pre></td></tr><tr><td data-num="37"></td><td><pre>  <span class="token function">getNamespace</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token keyword">let</span> root <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root</pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token comment">// 根据 path 不断拿到对于模块查看是否有 namespace 属性</span></pre></td></tr><tr><td data-num="40"></td><td><pre>    <span class="token keyword">return</span> path<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">namespace<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>      root <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">getChild</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token comment">// 不断拿到子模块</span></pre></td></tr><tr><td data-num="42"></td><td><pre>      <span class="token comment">//// 有的话拼接上作为地址</span></pre></td></tr><tr><td data-num="43"></td><td><pre>      <span class="token keyword">return</span> namespace <span class="token operator">+</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>namespaced <span class="token operator">?</span> key <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="44"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="45"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="installmodule"><a class="anchor" href="#installmodule">#</a> installModule</h2><ul><li>递归安装模块及 Store 传入的 options</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> getState <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../utils'</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">installModule</span><span class="token punctuation">(</span><span class="token parameter">store<span class="token punctuation">,</span> rootState<span class="token punctuation">,</span> path<span class="token punctuation">,</span> module</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token comment">// 注册事件时 需要注册到对应的命名空间中 path 就是所有的路径 根据 path 算出一个空间里</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">let</span> namespace <span class="token operator">=</span> store<span class="token punctuation">.</span>_modules<span class="token punctuation">.</span><span class="token function">getNamespace</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">let</span> parent <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> current</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>      <span class="token keyword">return</span> state<span class="token punctuation">[</span>current<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> rootState<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>    store<span class="token punctuation">.</span><span class="token function">_withCommitting</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>      Vue<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> path<span class="token punctuation">[</span>path<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> module<span class="token punctuation">.</span>state<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre>  module<span class="token punctuation">.</span><span class="token function">forEachMutation</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">mutation<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    store<span class="token punctuation">.</span>_mutations<span class="token punctuation">[</span>namespace <span class="token operator">+</span> type<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>store<span class="token punctuation">.</span>_mutations<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    store<span class="token punctuation">.</span>_mutations<span class="token punctuation">[</span>namespace <span class="token operator">+</span> type<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">payload</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>      store<span class="token punctuation">.</span><span class="token function">_withCommitting</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token function">mutation</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> <span class="token function">getState</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>      store<span class="token punctuation">.</span>_subscribers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">sub</span> <span class="token operator">=></span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> mutation<span class="token punctuation">,</span> type <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> store<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre>  module<span class="token punctuation">.</span><span class="token function">forEachAction</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">action<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    store<span class="token punctuation">.</span>_actions<span class="token punctuation">[</span>namespace <span class="token operator">+</span> type<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>store<span class="token punctuation">.</span>_actions<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    store<span class="token punctuation">.</span>_actions<span class="token punctuation">[</span>namespace <span class="token operator">+</span> type<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">payload</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>      <span class="token function">action</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> store<span class="token punctuation">,</span> payload<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre>  module<span class="token punctuation">.</span><span class="token function">forEachGetter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">getter<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    store<span class="token punctuation">.</span>_wrappedGetters<span class="token punctuation">[</span>namespace <span class="token operator">+</span> key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>      <span class="token keyword">return</span> <span class="token function">getter</span><span class="token punctuation">(</span><span class="token function">getState</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre>  module<span class="token punctuation">.</span><span class="token function">forEachChild</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">child<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>    <span class="token function">installModule</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> rootState<span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">,</span> child<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="41"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="resetstorevm"><a class="anchor" href="#resetstorevm">#</a> resetStoreVm</h2><ul><li>将状态都挂载到 Vue 实例中，数据响应式</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> forEachValue <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../utils"</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">resetStoreVm</span><span class="token punctuation">(</span><span class="token parameter">store<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">const</span> wrappedGetters <span class="token operator">=</span> store<span class="token punctuation">.</span>_wrappedGetters</pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">let</span> oldVm <span class="token operator">=</span> store<span class="token punctuation">.</span>_vm</pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token keyword">let</span> computed <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  store<span class="token punctuation">.</span>getters <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token comment">//computed 缓存效果 当 computed 中值发送变化时再次订阅</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token function">forEachValue</span><span class="token punctuation">(</span>wrappedGetters<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    computed<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>      <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 将 getters 对应 key 的函数调用</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>getters<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>      <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> store<span class="token punctuation">.</span>_vm<span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token comment">// 读取时在 vm 上拿</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token comment">// 创建 Vue 实例实现数据响应式</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  store<span class="token punctuation">.</span>_vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>      <span class="token literal-property property">$$state</span><span class="token operator">:</span> state</pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    computed</pre></td></tr><tr><td data-num="26"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>store<span class="token punctuation">.</span>strict<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>strict<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token comment">// 状态一变化就会立即执行</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    store<span class="token punctuation">.</span>_vm<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> store<span class="token punctuation">.</span>_vm<span class="token punctuation">.</span>_data<span class="token punctuation">.</span>$$state<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>      console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>_committing<span class="token punctuation">,</span> <span class="token string">'在mutation之外更改了状态'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">deep</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">sync</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// 深度 同步</span></pre></td></tr><tr><td data-num="34"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVm<span class="token punctuation">)</span> Vue<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> oldVm<span class="token punctuation">.</span><span class="token function">$destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="class-store"><a class="anchor" href="#class-store">#</a> class store</h2><ul><li>这是针对 Store 的类</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> applyMixin <span class="token keyword">from</span> <span class="token string">'./mixin'</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> forEachValue<span class="token punctuation">,</span> getState <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./utils'</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> ModuleCollection <span class="token keyword">from</span> <span class="token string">'./module/moduleCollection'</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">import</span> installModule <span class="token keyword">from</span> <span class="token string">'./module/installModule'</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">import</span> resetStoreVm <span class="token keyword">from</span> <span class="token string">'./module/resetStoreVm'</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">let</span> Vue</pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Store</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">options <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>_modules <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModuleCollection</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>_mutations <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 存放所有模块中的 mutations</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>_actions <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 存放所有模块中的 actions</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>_wrappedGetters <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 存放所有模块中的 getters  </span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>_subscribers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 存放订阅的插件</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>strict <span class="token operator">=</span> options<span class="token punctuation">.</span>strict <span class="token comment">// 严格模式</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>_committing <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">// 同步的 watcher</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">let</span> state <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_modules<span class="token punctuation">.</span>root<span class="token punctuation">.</span>state <span class="token comment">// 根模块 state</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token function">installModule</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_modules<span class="token punctuation">.</span>root<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token comment">// 将状态放到 vue 的实例中</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token function">resetStoreVm</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre>    options<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">plugin</span> <span class="token operator">=></span> <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token comment">// </span></pre></td></tr><tr><td data-num="28"></td><td><pre>  <span class="token function">_withCommitting</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token keyword">let</span> committing <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_committing</pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>_committing <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// 在函数调用前标识_committing 为 true</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>_committing <span class="token operator">=</span> committing</pre></td></tr><tr><td data-num="33"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre>  <span class="token comment">// 用于持久化保存数据替换原数据的方法</span></pre></td></tr><tr><td data-num="36"></td><td><pre>  <span class="token function">replaceState</span><span class="token punctuation">(</span><span class="token parameter">newState</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>_vm<span class="token punctuation">.</span>_data<span class="token punctuation">.</span>$$state <span class="token operator">=</span> newState</pre></td></tr><tr><td data-num="38"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="39"></td><td><pre></pre></td></tr><tr><td data-num="40"></td><td><pre>  <span class="token comment">// 订阅收集</span></pre></td></tr><tr><td data-num="41"></td><td><pre>  <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>_subscribers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre></pre></td></tr><tr><td data-num="45"></td><td><pre>  <span class="token comment">// commit</span></pre></td></tr><tr><td data-num="46"></td><td><pre>  <span class="token function-variable function">commit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> payload</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>_mutations<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">fn</span> <span class="token operator">=></span> <span class="token function">fn</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="48"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="49"></td><td><pre></pre></td></tr><tr><td data-num="50"></td><td><pre>  <span class="token comment">// dispatch</span></pre></td></tr><tr><td data-num="51"></td><td><pre>  <span class="token function-variable function">dispatch</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> payload</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>_actions<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">fn</span> <span class="token operator">=></span> <span class="token function">fn</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="53"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="54"></td><td><pre></pre></td></tr><tr><td data-num="55"></td><td><pre>  <span class="token comment">// 类的属性访问器</span></pre></td></tr><tr><td data-num="56"></td><td><pre>  <span class="token keyword">get</span> <span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_vm<span class="token punctuation">.</span>_data<span class="token punctuation">.</span>$$state</pre></td></tr><tr><td data-num="58"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="59"></td><td><pre></pre></td></tr><tr><td data-num="60"></td><td><pre>  <span class="token comment">// 动态注册</span></pre></td></tr><tr><td data-num="61"></td><td><pre>  <span class="token function">registerModule</span><span class="token punctuation">(</span><span class="token parameter">path<span class="token punctuation">,</span> rawModule</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span> path <span class="token operator">=</span> <span class="token punctuation">[</span>path<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="63"></td><td><pre></pre></td></tr><tr><td data-num="64"></td><td><pre>    <span class="token comment">// 注册模块</span></pre></td></tr><tr><td data-num="65"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>_modules<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> rawModule<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="66"></td><td><pre></pre></td></tr><tr><td data-num="67"></td><td><pre>    <span class="token comment">// 安装模块 并动态将状态新增上去</span></pre></td></tr><tr><td data-num="68"></td><td><pre>    <span class="token function">installModule</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">,</span> path<span class="token punctuation">,</span> rawModule<span class="token punctuation">.</span>rawModule<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="69"></td><td><pre></pre></td></tr><tr><td data-num="70"></td><td><pre>    <span class="token comment">// 重构数据响应式</span></pre></td></tr><tr><td data-num="71"></td><td><pre>    <span class="token function">resetStoreVm</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="72"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="73"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="74"></td><td><pre></pre></td></tr><tr><td data-num="75"></td><td><pre><span class="token keyword">const</span> <span class="token function-variable function">install</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">_Vue</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="76"></td><td><pre>  Vue <span class="token operator">=</span> _Vue</pre></td></tr><tr><td data-num="77"></td><td><pre>  <span class="token function">applyMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="78"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="79"></td><td><pre></pre></td></tr><tr><td data-num="80"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="81"></td><td><pre>  Store<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="82"></td><td><pre>  install</pre></td></tr><tr><td data-num="83"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="84"></td><td><pre></pre></td></tr><tr><td data-num="85"></td><td><pre><span class="token keyword">export</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="86"></td><td><pre>  Store<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="87"></td><td><pre>  install</pre></td></tr><tr><td data-num="88"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="实现持久化插件-store-数据"><a class="anchor" href="#实现持久化插件-store-数据">#</a> 实现持久化插件 &amp; Store 数据</h2><ul><li>实现持久化插件，放入到 <code>plugins</code>  数组中</li><li><code>subscribe</code>  只要状态变了就会执行</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'../vuex'</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// import Vuex from 'vuex'</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// import  logger  from 'vuex/dist/logger'</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 持久化插件</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">function</span> <span class="token function">persists</span><span class="token punctuation">(</span><span class="token parameter">store</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">let</span> local <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'VUEX:STATE'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>local<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    store<span class="token punctuation">.</span><span class="token function">replaceState</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>local<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">mutation<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token comment">// 只要频繁操作 就要考虑防抖和节流</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'VUEX:STATE'</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token literal-property property">strict</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 严格模式下，只能通过 mutation 来更改状态</span></pre></td></tr><tr><td data-num="24"></td><td><pre>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    persists<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token comment">// logger()</span></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="28"></td><td><pre>  <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'lain'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="32"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="33"></td><td><pre>  <span class="token literal-property property">getters</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token function">addCount</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> count <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>      <span class="token comment">// console.log("".concat(state.name, "123").concat(state.age));</span></pre></td></tr><tr><td data-num="36"></td><td><pre>      <span class="token comment">// return `$&#123;state.name&#125;123$&#123;state.age&#125;`</span></pre></td></tr><tr><td data-num="37"></td><td><pre>      <span class="token comment">// return "".concat(state.name);</span></pre></td></tr><tr><td data-num="38"></td><td><pre>      <span class="token comment">// return "".concat(state.name, 123).concat(state.age);</span></pre></td></tr><tr><td data-num="39"></td><td><pre>      <span class="token keyword">return</span> count<span class="token operator">++</span></pre></td></tr><tr><td data-num="40"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="42"></td><td><pre>  <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>    <span class="token function">changeAge</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> payload</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>      state<span class="token punctuation">.</span>age <span class="token operator">+=</span> payload</pre></td></tr><tr><td data-num="45"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token function">redAge</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> payload</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>      state<span class="token punctuation">.</span>age <span class="token operator">-=</span> payload</pre></td></tr><tr><td data-num="48"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="50"></td><td><pre>  <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>    <span class="token function">redAge</span><span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> payload</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>        ctx<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'redAge'</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="54"></td><td><pre>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="55"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="58"></td><td><pre></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> store</pre></td></tr></table></figure><h2 id="实现辅助函数-helpers"><a class="anchor" href="#实现辅助函数-helpers">#</a> 实现辅助函数 (helpers)</h2><ul><li><strong>vue</strong>x 提供了一些非常方便的<strong>辅助</strong>函数，比如 mapState、mapGetter、mapMutation、mapAction</li><li>下面来实现一下这些辅助函数，只要明白一个原理其余都是类似的</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">mapState</span> <span class="token operator">=</span> <span class="token parameter">arrList</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    obj<span class="token punctuation">[</span>arrList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">[</span>arrList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token keyword">return</span> obj<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">mapGetters</span> <span class="token operator">=</span> <span class="token parameter">arrList</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    obj<span class="token punctuation">[</span>arrList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">[</span>arrList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token keyword">return</span> obj</pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">mapMutations</span> <span class="token operator">=</span> <span class="token parameter">arrList</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    obj<span class="token punctuation">[</span>arrList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">payload</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span>arrList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>  <span class="token keyword">return</span> obj</pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">mapActions</span> <span class="token operator">=</span> <span class="token parameter">arrList</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    obj<span class="token punctuation">[</span>arrList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">payload</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>arrList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>  <span class="token keyword">return</span> obj</pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="index"><a class="anchor" href="#index">#</a> index</h2><ul><li>最终统一导出</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> mapState<span class="token punctuation">,</span> mapGetters<span class="token punctuation">,</span> mapMutations<span class="token punctuation">,</span> mapActions <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./helpers"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Store<span class="token punctuation">,</span> install <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./store"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  Store<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  install<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  mapState<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  mapGetters<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  mapMutations<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  mapActions</pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">export</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  Store<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  install<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  mapState<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  mapGetters<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  mapMutations<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  mapActions</pre></td></tr><tr><td data-num="21"></td><td><pre> <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>那么 Vuex 的实现也告辞段落，下面进行简单测试，其余的模块或者命名空间等可以自行测试</li></ul><h2 id="测试-app"><a class="anchor" href="#测试-app">#</a> 测试 App</h2><figure class="highlight js"><figcaption data-lang="JavaScript"><span>vue</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span>template<span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token operator">&lt;</span>h2<span class="token operator">></span>年龄<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> $store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>age <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token operator">&lt;</span>h2<span class="token operator">></span>姓名：<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> $store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>name <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token operator">&lt;</span>h2<span class="token operator">></span>age<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> age <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token operator">&lt;</span>h2<span class="token operator">></span>addCount<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> addCount <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"changeAge(1)"</span><span class="token operator">></span>changeAge<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"redAge(1)"</span><span class="token operator">></span>redAge<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token operator">&lt;</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> mapState<span class="token punctuation">,</span> mapGetters<span class="token punctuation">,</span> mapMutations<span class="token punctuation">,</span> mapActions <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./vuex"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"App"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"age"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"addCount"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"changeAge"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"redAge"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="24"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token operator">&lt;</span>style<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;vuex-介绍&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#vuex-介绍&quot;&gt;#&lt;/a&gt; Vuex 介绍&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Vuex 是一个专为 Vue.js 应用程序开发的&lt;strong&gt;状态管理模式 + 库&lt;/strong&gt;。它采用集中式存储</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 实现图片懒加载</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2022/01/31/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/lazyload/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2022/01/31/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/lazyload/</id>
    <published>2022-01-31T05:00:00.000Z</published>
    <updated>2022-03-20T06:33:56.492Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是图片懒加载"><a class="anchor" href="#什么是图片懒加载">#</a> 什么是图片懒加载</h2><ul><li>图片的懒加载就是在页面打开的时候，不要一次性全部显示页面所有的图片，而是只显示当前视口内的图片，一般在移动端使用（PC 端主要是前端分页或者后端分页）。</li></ul><h2 id="为什么需要懒加载"><a class="anchor" href="#为什么需要懒加载">#</a> 为什么需要懒加载</h2><ul><li>对于一个页面加载速度影响最大的因素之一就是图片资源，如果一个页面图片太多（比如某宝，某东等），整个页面的图片大小可以到达几百兆，即使在百兆宽带，全部下载的话，也需要上十秒的时间，这对于用户耐心的考验是巨大的，更别说网络差的地方了。</li><li>因此，懒加载是必须要做的，对于页面未在可视区域内显示的图片先不做加载处理，只加载第一映入眼帘的图片，由于可视区域显示的图片少，加载速度就会大大提升，用户体验也会更好。</li><li>而且，用户可能只翻看一两页就退出了，剩下未查看的图片也就不需要加载了。这也相当于节省了带宽资源。</li></ul><h2 id="懒加载实现原理"><a class="anchor" href="#懒加载实现原理">#</a> 懒加载实现原理</h2><ul><li>由于浏览器会自动对页面中的 img 标签的 src 属性发送请求并下载图片。因此，通过 html5 自定义属性  <code>data-xxx</code>  先暂存 src 的值，然后在需要显示的时候，再将  <code>data-xxx</code>  的值重新赋值到 img 的 src 属性即可。</li></ul><h2 id="懒加载思路及实现"><a class="anchor" href="#懒加载思路及实现">#</a> 懒加载思路及实现</h2><ul><li>实现懒加载有四个步骤，如下：<ul><li>加载 loading 图片</li><li>判断哪些图片要加载【重点】</li><li>隐形加载图片</li><li>替换真图片</li></ul></li><li>另外这里还涉及到了节流函数与瀑布流布局不懂的可以查看之前发的文章，这里贴一下代码</li></ul><h2 id="瀑布流代码"><a class="anchor" href="#瀑布流代码">#</a> 瀑布流代码</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">,</span> <span class="token function">waterFall</span><span class="token punctuation">(</span><span class="token string">'#main'</span><span class="token punctuation">,</span> <span class="token string">'.box'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 1.0 定义一个函数 接收 父元素 与 子元素们 选择器</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">function</span> <span class="token function">waterFall</span><span class="token punctuation">(</span><span class="token parameter">parent<span class="token punctuation">,</span> childs</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">// 1.1 获取标签父元素与其中的所有子元素</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">const</span> parentEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token keyword">const</span> childsEls <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span>childs<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token comment">// 1.2 获取一个子元素的宽度</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token keyword">const</span> childElWidth <span class="token operator">=</span> childsEls<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>offsetWidth</pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token comment">// 1.3 获取屏幕的宽度 进行兼容判断</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token keyword">const</span> screenWidth <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientWidth</pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token comment">// 1.4 根据上面条件计算出应排版列数</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token keyword">const</span> cols <span class="token operator">=</span> <span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span>screenWidth <span class="token operator">/</span> childElWidth<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token comment">// 1.5 给父元素宽度并进行居中</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  parentEl<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> cols <span class="token operator">*</span> childElWidth <span class="token operator">+</span> <span class="token string">'px'</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  parentEl<span class="token punctuation">.</span>style<span class="token punctuation">.</span>margin <span class="token operator">=</span> <span class="token string">'0 auto'</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>  <span class="token comment">// 2.0 声明数组 存放每次应该定位的高度 数组长度与列数一致</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token keyword">const</span> childsElHeightArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="24"></td><td><pre>  <span class="token comment">// 2.1 声明三个变量 分别用于保存 数组中最小高度、元素高度与最小索引值</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token keyword">let</span> minChildElHeight <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> childElHeight <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> minIndex <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token comment">// 3.0 对所有子元素进行遍历</span></pre></td></tr><tr><td data-num="28"></td><td><pre>  childsEls<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token comment">// 3.1 遍历获取元素的高度</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    childElHeight <span class="token operator">=</span> item<span class="token punctuation">.</span>offsetHeight</pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token comment">// 3.2 判断如果列数小于 index 则是第一排元素 添加进数组用于计算高度 </span></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cols <span class="token operator">></span> index<span class="token punctuation">)</span> <span class="token keyword">return</span> childsElHeightArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>childElHeight<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre>    <span class="token comment">// 3.3 否则利用算法金星定位</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token comment">// 3.4 计算出数组中的最小高度</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    minChildElHeight <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token operator">...</span>childsElHeightArr<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token comment">// 3.5 计算数组最小高度所在的索引 这里我封装一个函数 calcMinIndex 即 -> 4.0 </span></pre></td></tr><tr><td data-num="40"></td><td><pre>    minIndex <span class="token operator">=</span> <span class="token function">calcMinIndex</span><span class="token punctuation">(</span>childsElHeightArr<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="41"></td><td><pre></pre></td></tr><tr><td data-num="42"></td><td><pre>    <span class="token comment">// 3.6 进行绝对定位</span></pre></td></tr><tr><td data-num="43"></td><td><pre>    item<span class="token punctuation">.</span>style<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token string">'absolute'</span></pre></td></tr><tr><td data-num="44"></td><td><pre></pre></td></tr><tr><td data-num="45"></td><td><pre>    <span class="token comment">// 3.7 利用最小索引 * 元素宽度 得出子元素据左的距离</span></pre></td></tr><tr><td data-num="46"></td><td><pre>    item<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> minIndex <span class="token operator">*</span> childElWidth <span class="token operator">+</span> <span class="token string">'px'</span></pre></td></tr><tr><td data-num="47"></td><td><pre></pre></td></tr><tr><td data-num="48"></td><td><pre>    <span class="token comment">// 3.8 将每次最小高度赋值给元素的高度</span></pre></td></tr><tr><td data-num="49"></td><td><pre>    item<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> minChildElHeight <span class="token operator">+</span> <span class="token string">'px'</span></pre></td></tr><tr><td data-num="50"></td><td><pre></pre></td></tr><tr><td data-num="51"></td><td><pre>    <span class="token comment">// 3.9 将每次最小高度值与元素高度进行相加</span></pre></td></tr><tr><td data-num="52"></td><td><pre>    childsElHeightArr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">+=</span> childElHeight</pre></td></tr><tr><td data-num="53"></td><td><pre></pre></td></tr><tr><td data-num="54"></td><td><pre>    <span class="token comment">// 4.0 封装计算数组最小值的索引</span></pre></td></tr><tr><td data-num="55"></td><td><pre>    <span class="token keyword">function</span> <span class="token function">calcMinIndex</span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>      <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="57"></td><td><pre>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">></span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> index <span class="token operator">=</span> i</pre></td></tr><tr><td data-num="59"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>      <span class="token keyword">return</span> index</pre></td></tr><tr><td data-num="61"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="节流函数"><a class="anchor" href="#节流函数">#</a> 节流函数</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> interval<span class="token punctuation">,</span> options <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token literal-property property">leading</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token literal-property property">trailing</span><span class="token operator">:</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">let</span> lastTriggerTime <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    leading<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    trailing<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    resultCallback</pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token punctuation">&#125;</span> <span class="token operator">=</span> options</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token keyword">const</span> <span class="token function-variable function">_throtle</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>      <span class="token keyword">const</span> triggerTime <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>leading <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>lastTriggerTime<span class="token punctuation">)</span> lastTriggerTime <span class="token operator">=</span> triggerTime</pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>      <span class="token keyword">const</span> remainTime <span class="token operator">=</span> interval <span class="token operator">-</span> <span class="token punctuation">(</span>triggerTime <span class="token operator">-</span> lastTriggerTime<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span>remainTime <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>          <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>          timer <span class="token operator">=</span> <span class="token keyword">null</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>resultCallback<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Function]'</span><span class="token punctuation">)</span> <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>          <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre>        <span class="token keyword">return</span> lastTriggerTime <span class="token operator">=</span> triggerTime</pre></td></tr><tr><td data-num="36"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span>trailing <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>timer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>        timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>          <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="41"></td><td><pre></pre></td></tr><tr><td data-num="42"></td><td><pre>          <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>resultCallback<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Function]'</span><span class="token punctuation">)</span> <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="44"></td><td><pre>          <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>            <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="46"></td><td><pre>          <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="47"></td><td><pre></pre></td></tr><tr><td data-num="48"></td><td><pre>          timer <span class="token operator">=</span> <span class="token keyword">null</span></pre></td></tr><tr><td data-num="49"></td><td><pre>          lastTriggerTime <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span></pre></td></tr><tr><td data-num="50"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> remainTime<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="51"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="53"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="54"></td><td><pre></pre></td></tr><tr><td data-num="55"></td><td><pre>  _throtle<span class="token punctuation">.</span><span class="token function-variable function">cancel</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="58"></td><td><pre>      timer <span class="token operator">=</span> <span class="token keyword">null</span></pre></td></tr><tr><td data-num="59"></td><td><pre>      lastTriggerTime <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="60"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="62"></td><td><pre></pre></td></tr><tr><td data-num="63"></td><td><pre>  <span class="token keyword">return</span> _throtle</pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="实现-lazyload"><a class="anchor" href="#实现-lazyload">#</a> 实现 lazyload</h2><ul><li>不熟悉 <code>getBoundingClientRect</code>  详情 MDN 查看：<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL0VsZW1lbnQvZ2V0Qm91bmRpbmdDbGllbnRSZWN0">https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect</span></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">lazyload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">// 1. 获取当前文档高度</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">const</span> viewHeight <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight <span class="token operator">||</span> window<span class="token punctuation">.</span>innerHeight</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">// 2. 获取文档中所有拥有 data-src lazyload 属性的 & lt;img > 节点 即需要懒加载的图片标签</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">let</span> imgs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'img[data-src][lazyload]'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  imgs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">img<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token comment">// 3.HTMLElement.dataset 属性允许无论是在读取模式和写入模式下访问在 HTML 或 DOM 中的元素上设置的所有自定义数据属性 (data -*) 集。</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>img<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>src<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token comment">// 如果自定义 data-src 为空直接 return</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token comment">// 4.dataset 能获取到 data - 开头的自定义属性</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">let</span> src <span class="token operator">=</span> img<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>src</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token comment">// 5.1 返回值是一个 DOMRect 对象，这个对象是由该元素的 getClientRects () 方法返回的一组矩形的集合，就是该元素的 CSS 边框大小。</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token comment">// 5.2 返回的结果是包含完整元素的最小矩形，并且拥有 left, top, right, bottom, x, y, width, 和 height 这几个以像素为单位的只读属性用于描述整个边框。</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token comment">// 5.3 除了 width 和 height 以外的属性是相对于视图窗口的左上角来计算的。</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">let</span> <span class="token punctuation">&#123;</span> bottom<span class="token punctuation">,</span> top <span class="token punctuation">&#125;</span> <span class="token operator">=</span> img<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token comment">// 6. 其 top 值是相对于当前视窗的顶部而言的而不是绝对的顶部，所以 top 值 &lt; window.innerHeight 的话图片就出现在底部了就需要加载</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bottom <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> top <span class="token operator">&lt;</span> viewHeight<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>      <span class="token comment">// 7.new 了一个 Image 创建 img 标签，img 加载图片路径，触发 onload 事件再给原来的 html 结构中的 img 赋值路径</span></pre></td></tr><tr><td data-num="22"></td><td><pre>      <span class="token keyword">const</span> image <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>      image<span class="token punctuation">.</span>src <span class="token operator">=</span> src</pre></td></tr><tr><td data-num="24"></td><td><pre>      image<span class="token punctuation">.</span>onload <span class="token operator">=</span> img<span class="token punctuation">.</span>src <span class="token operator">=</span> src</pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre>      <span class="token comment">// 8. 移除属性避免重复加载</span></pre></td></tr><tr><td data-num="27"></td><td><pre>      img<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">'data-src'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre>      img<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">'lazyload'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token comment">// 先调用一次加载最初显示在视窗中的图片</span></pre></td></tr><tr><td data-num="34"></td><td><pre>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">,</span> lazyload<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token comment">// 节流 leading 先触发一次 trailing 最后一次也会触发</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token keyword">const</span> throttle_lazyload <span class="token operator">=</span> <span class="token function">throttle</span><span class="token punctuation">(</span>lazyload<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>  <span class="token literal-property property">leading</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="39"></td><td><pre>  <span class="token literal-property property">trailing</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="41"></td><td><pre></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token comment">// 箭头 scroll (滚动) 事件</span></pre></td></tr><tr><td data-num="43"></td><td><pre>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'scroll'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>  <span class="token function">throttle_lazyload</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="45"></td><td><pre>  <span class="token function">waterFall</span><span class="token punctuation">(</span><span class="token string">'#main'</span><span class="token punctuation">,</span> <span class="token string">'.box'</span><span class="token punctuation">,</span> main<span class="token punctuation">)</span> <span class="token comment">// 瀑布流</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><ul><li>至此，实现图片懒加载篇章也告辞段落了，完成了之前瀑布流文章中许下的承诺了～</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是图片懒加载&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#什么是图片懒加载&quot;&gt;#&lt;/a&gt; 什么是图片懒加载&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;图片的懒加载就是在页面打开的时候，不要一次性全部显示页面所有的图片，而是只显示当前视口内的图片，一般在移动端使用（P</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 实现数组扁平化</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2022/01/29/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/arrayFlat/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2022/01/29/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/arrayFlat/</id>
    <published>2022-01-29T09:25:20.000Z</published>
    <updated>2022-03-05T12:28:57.825Z</updated>
    
    <content type="html"><![CDATA[<h2 id="flat-实现"><a class="anchor" href="#flat-实现">#</a> flat 实现</h2><ul><li><code>flat()</code>  方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'abc'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>arr1<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></pre></td></tr><tr><td data-num="5"></td><td><pre>arr2<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span> <span class="token comment">// [1,  2, &#123;&#125;, 3, 4, 5, &#123;&#125;, 'abc']</span></pre></td></tr></table></figure><h2 id="tostring-实现"><a class="anchor" href="#tostring-实现">#</a> toString 实现</h2><ul><li><code>toString()</code>  方法返回一个表示该对象的字符串。</li><li>也可以用来扁平化，但是只针对基本数据类型</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'abc'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>arr1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span> <span class="token comment">// ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// 1. 无法针对非基本数据类型，如果有其他类型则会很麻烦</span></pre></td></tr><tr><td data-num="7"></td><td><pre>arr2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span> <span class="token comment">// ['1', '2', '[object Object]', '3', '4', '5', '[object Object]', 'abc']</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// 2. 最后再恢复成数字类型</span></pre></td></tr><tr><td data-num="10"></td><td><pre>arr2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token operator">+</span>item<span class="token punctuation">)</span> <span class="token comment">// [1, 2, NaN, 3, 4, 5, NaN, NaN]</span></pre></td></tr></table></figure><h2 id="join-实现"><a class="anchor" href="#join-实现">#</a> join 实现</h2><ul><li><code>join</code>  实现也只针对基本类型</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'abc'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>arr1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?:,|\|)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token operator">+</span>item<span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// 1. 无法针对非基本数据类型</span></pre></td></tr><tr><td data-num="7"></td><td><pre>arr2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?:,|\|)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span> <span class="token comment">// ['1', '2', '[object Object]', '3', '4', '5', '[object Object]', 'abc']</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// 2. 最后再转成数字类型</span></pre></td></tr><tr><td data-num="10"></td><td><pre>arr2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?:,|\|)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token operator">+</span>item<span class="token punctuation">)</span> <span class="token comment">// [1, 2, NaN, 3, 4, 5, NaN, NaN]</span></pre></td></tr></table></figure><h2 id="jsonstringify-实现"><a class="anchor" href="#jsonstringify-实现">#</a> JSON.stringify 实现</h2><ul><li><code>JSON.stringify</code>  是可以实现扁平化的， 但是最后要转换成原来的类型是比较麻烦的</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'abc'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 1. 如果都是数字类型就比较简单，但如果有字符串类型或其他类型则需要以下判断 比较麻烦</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\[|\])</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token operator">+</span>item<span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 2. 这样扁平化之后，其他类型则是比较麻烦</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\[|\])</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span> <span class="token comment">// ['1', '2', '&#123;"age":16&#125;', '3', '4', '5', '&#123;&#125;', '"abc"']</span></pre></td></tr></table></figure><h2 id="for循环递归-实现"><a class="anchor" href="#for循环递归-实现">#</a> for 循环递归 实现</h2><h3 id="函数递归"><a class="anchor" href="#函数递归">#</a> 函数递归</h3><ul><li>使用递归来循环变量实现扁平化</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">flat</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> val</pre></td></tr><tr><td data-num="3"></td><td><pre>  </pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">else</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> val<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>      newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">flat</span><span class="token punctuation">(</span>val<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> newArr<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>  newArr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">return</span> newArr</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'abc'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">flat</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token function">flat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span> <span class="token comment">// [1, 2, &#123; age: 16 &#125;, 3, 4, 5, &#123;&#125;]</span></pre></td></tr></table></figure><h3 id="闭包递归"><a class="anchor" href="#闭包递归">#</a> 闭包递归</h3><ul><li>使用闭包形式递归实现扁平化</li><li>这里说几个函数前面符号的意思<ul><li><code>! </code> 对返回值的真假取反</li><li><code>+ 、-</code>  是对返回值进行数学运算</li><li><code>~</code>  按位非运算符，反转操作数的位，对返回值进行按位取反</li><li><code>;</code>  是为了防止代码压缩时，前面代码没写 <code>;</code>  造成报错。</li></ul></li><li>在函数前面加这些或者在括号中，那么此函数就变成了函数表达式，函数表达式就可以立即执行</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 立即执行函数，转为表达式</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">~</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">function</span> <span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>      <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>          _this <span class="token operator">=</span> <span class="token keyword">this</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>      <span class="token keyword">let</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>          <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>          result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>      </pre></td></tr><tr><td data-num="14"></td><td><pre>      <span class="token function">fn</span><span class="token punctuation">(</span>_this<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre>      <span class="token keyword">return</span> result</pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>flat <span class="token operator">=</span> flat</pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'abc'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>arr1<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></pre></td></tr><tr><td data-num="5"></td><td><pre>arr2<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// [1, 2, &#123; age: 16 &#125;, 3, 4, 5, &#123;&#125;]</span></pre></td></tr></table></figure><h2 id="while-some-实现"><a class="anchor" href="#while-some-实现">#</a> while &amp; some 实现</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">flat</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">while</span> <span class="token punctuation">(</span>val<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="3"></td><td><pre>    val <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token operator">...</span>val<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">return</span> val</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'abc'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">flat</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token function">flat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span> <span class="token comment">// [ 1, 2, &#123; age: 16 &#125;, 3, 4, 5, &#123;&#125;, 'abc' ]</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;flat-实现&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#flat-实现&quot;&gt;#&lt;/a&gt; flat 实现&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;flat()&lt;/code&gt;  方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>instanceof &amp; new &amp; typeof 原理</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2022/01/27/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/instanceof-new-typeof/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2022/01/27/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/instanceof-new-typeof/</id>
    <published>2022-01-27T02:44:52.000Z</published>
    <updated>2022-04-07T15:28:20.400Z</updated>
    
    <content type="html"><![CDATA[<h2 id="instanceof-原理"><a class="anchor" href="#instanceof-原理">#</a> instanceof 原理</h2><ul><li><strong> <code>instanceof</code> </strong> <strong>运算符</strong>用于检测构造函数的  <code>prototype</code>  属性是否出现在某个实例对象的原型链上。</li><li>语法  <code>object instanceof constructor</code></li><li>参数  <code>object(某个实例对象)</code>  、 <code>constructor(某个构造函数)</code></li><li>本质上  <code>instanceof</code>  运算符用来检测  <code>constructor.prototype </code> 是否存在于参数  <code>object</code>  的原型链上。</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">_instanceof</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> origin</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">// 这里需要加层判断</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> target <span class="token operator">!==</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">// 循环 当 target 为 null 时 (代表已经达到顶层原型已经指向 null)，那么停止循环</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">while</span> <span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">===</span> origin<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="8"></td><td><pre>      </pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token comment">// 否则再取出 target 的隐式原型对象</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    target <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">return</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="instanceof-测试"><a class="anchor" href="#instanceof-测试">#</a> instanceof 测试</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span></pre></td></tr><tr><td data-num="3"></td><td><pre>            </pre></td></tr><tr><td data-num="4"></td><td><pre>f <span class="token keyword">instanceof</span> <span class="token class-name">Foo</span>    <span class="token comment">// true</span></pre></td></tr><tr><td data-num="5"></td><td><pre>f <span class="token keyword">instanceof</span> <span class="token class-name">Object</span>   <span class="token comment">// true</span></pre></td></tr><tr><td data-num="6"></td><td><pre>f <span class="token keyword">instanceof</span> <span class="token class-name">Function</span> <span class="token comment">// false</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            </pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token string">'abc'</span> <span class="token keyword">instanceof</span> <span class="token class-name">String</span>        <span class="token comment">// false</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token number">123</span> <span class="token keyword">instanceof</span> <span class="token class-name">Number</span>          <span class="token comment">// false</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span>            <span class="token comment">// true</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span>           <span class="token comment">// true</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span>   <span class="token comment">// true</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Function</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span>    <span class="token comment">// false</span></pre></td></tr></table></figure><h3 id="_instanceof-测试"><a class="anchor" href="#_instanceof-测试">#</a> _instanceof 测试</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">_instanceof</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> Foo<span class="token punctuation">)</span>      <span class="token comment">// true</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token function">_instanceof</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> Object<span class="token punctuation">)</span>   <span class="token comment">// true</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token function">_instanceof</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> Function<span class="token punctuation">)</span> <span class="token comment">// false</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token function">_instanceof</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">,</span> String<span class="token punctuation">)</span>      <span class="token comment">// false</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token function">_instanceof</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> Number<span class="token punctuation">)</span>        <span class="token comment">// false</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token function">_instanceof</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Array<span class="token punctuation">)</span>          <span class="token comment">// true</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token function">_instanceof</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> Object<span class="token punctuation">)</span>         <span class="token comment">// true</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token function">_instanceof</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> Object<span class="token punctuation">)</span>   <span class="token comment">// true</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token function">_instanceof</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> Function<span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token function">_instanceof</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> Array<span class="token punctuation">)</span>   <span class="token comment">// false</span></pre></td></tr></table></figure><h2 id="new-原理"><a class="anchor" href="#new-原理">#</a> new 原理</h2><ul><li><p><code>new</code>  实际做了什么？</p><ul><li><p>创建一个新的空对象</p></li><li><p>把新对象的原型绑定到构造函数的原型上</p></li><li><p>构造函数被执行，执行过程中的 <code>this</code>  被绑定在新的对象上</p></li><li><p>返回这个新对象 (构造函数中一般不会显示返回， 但有时也可以 return this)</p></li></ul></li></ul><h3 id="objectsetprototypeof-实现"><a class="anchor" href="#objectsetprototypeof-实现">#</a> Object.setPrototypeOf 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">_new</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">// 1. 创建新的空对象</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  </pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">// 2. 把新对象的原型绑定到构造函数的原型上</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> fn<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token comment">// 3. 构造函数被执行，绑定 `this` 与传入参数在新的对象上，并获取 obj 函数执行的结果</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token comment">// 4. 如果执行结果有返回值并且是一个对象，返回执行的结果，否则，返回新创建的对象 </span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Object]'</span> <span class="token operator">?</span> result <span class="token operator">:</span> obj</pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">_new</span><span class="token punctuation">(</span>Foo<span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Foo</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="5"></td><td><pre>foo <span class="token keyword">instanceof</span> <span class="token class-name">Foo</span> <span class="token comment">// true</span></pre></td></tr></table></figure><h3 id="object-create-实现"><a class="anchor" href="#object-create-实现">#</a> Object. create 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">_new</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">// 1. 基于 obj 的原型创建一个新的对象</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">const</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>fn<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">// 2. 添加属性到新创建的 newObj 上，并获取 obj 函数执行的结果</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token comment">// 3. 如果执行结果有返回值并且是一个对象，返回执行的结果，否则，返回新创建的对象</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Object]'</span> <span class="token operator">?</span> result <span class="token operator">:</span> obj</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">_new</span><span class="token punctuation">(</span>Foo<span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Foo</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="5"></td><td><pre>foo <span class="token keyword">instanceof</span> <span class="token class-name">Foo</span> <span class="token comment">// true</span></pre></td></tr></table></figure><h2 id="typeof-原理"><a class="anchor" href="#typeof-原理">#</a> typeof 原理</h2><ul><li><p><code>typeof</code>  一般被用于判断一个变量的类型，我们可以利用  <code>typeof</code>  来判断 <code>number</code> ,   <code>string</code> ,   <code>object</code> ,   <code>boolean</code> ,   <code>function</code> ,  <code>undefined</code> ,   <code>symbol</code>  这七种类型</p></li><li><p>这种判断能帮助我们搞定一些问题，比如在判断不是 object 类型的数据的时候， <code>typeof</code>  能比较清楚的告诉我们具体是哪一类的类型。</p></li><li><p>但是，很遗憾的一点是， <code>typeof</code>  在判断一个 object 的数据的时候只能告诉我们这个数据是 object, 而不能细致的具体到是哪一种 object</p></li><li><p>, 比如我们都知道  <code>typeof(null) === 'object'</code> ，关于原因，在小黄书《你不知道的<span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9wcm9kdWN0L3Ntcz9mcm9tPTEwNjgw"> JavaScript</span>》中有这么一段解释：</p><blockquote><p>原理是这样的， 不同的对象在底层都表示为二进制， 在 JavaScript 中二进制前三位都为 0 的话会被判断为 object 类型， null 的二进制表示是全 0， 自然前三位也是 0， 所以执行 typeof 时会返回 “object”。</p></blockquote></li><li><p>javascript 中的  <code>null</code> ：既是对象，又不是对象，史称「薛定谔的对象」。</p></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">typeof</span> <span class="token keyword">null</span> <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">null</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span>  <span class="token comment">// false</span></pre></td></tr></table></figure><ul><li>如果我们这样比较</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">null</span> <span class="token keyword">instanceof</span> <span class="token class-name">null</span></pre></td></tr></table></figure><ul><li>会抛出异常： <code>TypeError: invalid 'instanceof' operand null</code></li><li>在 javascript 的最初版本中，使用的 32 位系统，为了性能考虑使用低位存储了变量的类型信息：<ul><li>000：对象</li><li>1：整数</li><li>010：浮点数</li><li>100：字符串</li><li>110：布尔</li></ul></li><li>有 2 个值比较特殊：<ul><li>undefined：用 - （−2^30）表示。</li><li>null：对应机器码的 NULL 指针，一般是全零。</li></ul></li><li>在第一版的 javascript 实现中，判断类型的代码是这么写的：</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">JSVAL_IS_VOID</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// (1)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    type <span class="token operator">=</span> <span class="token constant">JSTYPE_VOID</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">JSVAL_IS_OBJECT</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// (2)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    obj <span class="token operator">=</span> <span class="token constant">JSVAL_TO_OBJECT</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">&amp;&amp;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token punctuation">(</span>ops <span class="token operator">=</span> obj<span class="token operator">-</span><span class="token operator">></span>map<span class="token operator">-</span><span class="token operator">></span>ops<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            ops <span class="token operator">==</span> <span class="token operator">&amp;</span>js_ObjectOps</pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token operator">?</span> <span class="token punctuation">(</span>clasp <span class="token operator">=</span> <span class="token constant">OBJ_GET_CLASS</span><span class="token punctuation">(</span>cx<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            clasp<span class="token operator">-</span><span class="token operator">></span>call <span class="token operator">||</span> clasp <span class="token operator">==</span> <span class="token operator">&amp;</span>js_FunctionClass<span class="token punctuation">)</span> <span class="token comment">// (3,4)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token operator">:</span> ops<span class="token operator">-</span><span class="token operator">></span>call <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// (3)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        type <span class="token operator">=</span> <span class="token constant">JSTYPE_FUNCTION</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        type <span class="token operator">=</span> <span class="token constant">JSTYPE_OBJECT</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">JSVAL_IS_NUMBER</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    type <span class="token operator">=</span> <span class="token constant">JSTYPE_NUMBER</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">JSVAL_IS_STRING</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    type <span class="token operator">=</span> <span class="token constant">JSTYPE_STRING</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">JSVAL_IS_BOOLEAN</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    type <span class="token operator">=</span> <span class="token constant">JSTYPE_BOOLEAN</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>判断是否为 undefined</li><li>如果不是 undefined，判断是否为对象</li><li>如果不是对象，判断是否为数字</li><li>......</li><li>这样一来， <code>null</code>  就出了一个 bug。根据 type tags 信息，低位是  <code>000</code> ，因此  <code>null</code>  被判断成了一个对象。这就是为什么  <code>typeof null</code>  的返回值是  <code>object</code> 。</li><li>摘自：<span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xMzYyNjYw">https://cloud.tencent.com/developer/article/1362660</span></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;instanceof-原理&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#instanceof-原理&quot;&gt;#&lt;/a&gt; instanceof 原理&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;instanceof&lt;/code&gt; &lt;/strong&gt; </summary>
      
    
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>fill &amp; join &amp; includes 原理</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2022/01/25/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/fill-includes-join/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2022/01/25/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/fill-includes-join/</id>
    <published>2022-01-25T03:14:44.000Z</published>
    <updated>2022-04-01T05:53:19.126Z</updated>
    
    <content type="html"><![CDATA[<h2 id="fill-原理"><a class="anchor" href="#fill-原理">#</a> fill 原理</h2><h3 id="使用-for-实现"><a class="anchor" href="#使用-for-实现">#</a> 使用 for 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_fill</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">//start 大于数组长度 或 end 大于数组长度返回自身 不然下面的 this [i] 会改变自身长度</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">||</span> end <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">this</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">//start &lt; 0 或 end &lt; 0 则是按 length + start|end 来计算，MDN 有介绍 </span></pre></td></tr><tr><td data-num="6"></td><td><pre>  start <span class="token operator">=</span> start <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">+</span> start <span class="token operator">:</span> start</pre></td></tr><tr><td data-num="7"></td><td><pre>  end <span class="token operator">=</span> end <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">+</span> end <span class="token operator">:</span> end </pre></td></tr><tr><td data-num="8"></td><td><pre>  </pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token comment">// 边界判断 什么参数都不传则都为 undefined</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">undefined</span> </pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">else</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> value</pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token punctuation">&#125;</span> </pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token keyword">return</span> <span class="token keyword">this</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="测试"><a class="anchor" href="#测试">#</a> 测试</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// fill</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// [undefined, undefined, undefined]</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>               <span class="token comment">// [4, 4, 4]</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token comment">// [1, 4, 4]</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>         <span class="token comment">// [1, 4, 3]</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>         <span class="token comment">// [1, 2, 3]</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>         <span class="token comment">// [1, 2, 3]</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>       <span class="token comment">// [4, 2, 3]</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">)</span>     <span class="token comment">// [1, 2, 3]</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>         <span class="token comment">// [1, 2, 3]</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>                <span class="token comment">// [4, 4, 4]</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>  <span class="token comment">// &#123;0: 4, 1: 4, 2: 4, length: 3&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token comment">// _fill</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">_fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token comment">// [undefined, undefined, undefined]</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">_fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>              <span class="token comment">// [4, 4, 4]</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">_fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>           <span class="token comment">// [1, 4, 4]</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">_fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token comment">// [1, 4, 3]</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">_fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment">// [1, 2, 3]</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">_fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>        <span class="token comment">// [1, 2, 3]</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">_fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>      <span class="token comment">// [4, 2, 3]</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">_fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">)</span>    <span class="token comment">// [1, 2, 3]</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>         <span class="token comment">// [1, 2, 3]</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">_fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>               <span class="token comment">// [4, 4, 4]</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">_fill</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">// &#123;0: 4, 1: 4, 2: 4, length: 3&#125;</span></pre></td></tr></table></figure><h3 id="使用-for-in-实现"><a class="anchor" href="#使用-for-in-实现">#</a> 使用 for in 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_fill</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">//start 大于数组长度 或 end 大于数组长度返回自身 不然下面的 this [i] 会改变自身长度</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">||</span> end <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">this</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">//start &lt; 0 或 end &lt; 0 则是按 length + start|end 来计算，MDN 有介绍 </span></pre></td></tr><tr><td data-num="6"></td><td><pre>  start <span class="token operator">=</span> start <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">+</span> start <span class="token operator">:</span> start</pre></td></tr><tr><td data-num="7"></td><td><pre>  end <span class="token operator">=</span> end <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">+</span> end <span class="token operator">:</span> end </pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token comment">// 用于判断类似 Array (4)._fill (4) this+'' 这种情况时 此时会是三个逗号</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token keyword">const</span> commaLength <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token keyword">let</span> comma <span class="token operator">=</span> <span class="token string">''</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> commaLength<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> comma <span class="token operator">+=</span> <span class="token string">','</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  </pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token comment">// 进行的边界判断 </span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">+</span> <span class="token string">''</span> <span class="token operator">==</span> comma <span class="token operator">||</span> <span class="token keyword">this</span> <span class="token operator">+</span> <span class="token string">''</span> <span class="token operator">===</span> <span class="token string">'[object Object]'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> value</pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token keyword">return</span> <span class="token keyword">this</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>  <span class="token comment">// 进行遍历</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'_fill'</span> <span class="token operator">===</span> key<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">this</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token comment">// 从 start 开始 小于 start 就跳过</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&lt;</span> start<span class="token punctuation">)</span> <span class="token keyword">continue</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token comment">// 小于 end 就停止</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value</pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token comment">// 判断上面什么参数也没传则都为 undefined</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">undefined</span>  </pre></td></tr><tr><td data-num="33"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="测试-2"><a class="anchor" href="#测试-2">#</a> 测试</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// fill</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// [4, 4, 4]</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// [1, 4, 4]</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// [1, 4, 3]</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// [1, 2, 3]</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// [1, 2, 3]</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// [4, 2, 3]</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// [1, 2, 3]</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// [1, 2, 3]</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// [4, 4, 4]</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// &#123;0: 4, 1: 4, 2: 4, length: 3&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">// _fill</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">_fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>              <span class="token comment">// [4, 4, 4]</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">_fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>           <span class="token comment">// [1, 4, 4]</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">_fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token comment">// [1, 4, 3]</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">_fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment">// [1, 2, 3]</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">_fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>        <span class="token comment">// [1, 2, 3]</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">_fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>      <span class="token comment">// [4, 2, 3]</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">_fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">)</span>    <span class="token comment">// [1, 2, 3]</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>         <span class="token comment">// [1, 2, 3]</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">_fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>               <span class="token comment">// [4, 4, 4]</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">_fill</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">// &#123;0: 4, 1: 4, 2: 4, length: 3&#125;</span></pre></td></tr></table></figure><h2 id="join-原理"><a class="anchor" href="#join-原理">#</a> join 原理</h2><h3 id="使用-for-实现-2"><a class="anchor" href="#使用-for-实现-2">#</a> 使用 for 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_join</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>separator <span class="token operator">=</span> <span class="token string">','</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">''</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    str <span class="token operator">=</span> i <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>str<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>separator<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">return</span> str</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="测试-3"><a class="anchor" href="#测试-3">#</a> 测试</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// join</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Wind'</span><span class="token punctuation">,</span> <span class="token string">'Rain'</span><span class="token punctuation">,</span> <span class="token string">'Fire'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">// Wind,Rain,Fire</span></pre></td></tr><tr><td data-num="4"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">', '</span><span class="token punctuation">)</span>  <span class="token comment">// Wind, Rain, Fire</span></pre></td></tr><tr><td data-num="5"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">' + '</span><span class="token punctuation">)</span> <span class="token comment">// Wind + Rain + Fire</span></pre></td></tr><tr><td data-num="6"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token comment">// WindRainFire</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// _join</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Wind'</span><span class="token punctuation">,</span> <span class="token string">'Rain'</span><span class="token punctuation">,</span> <span class="token string">'Fire'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="10"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">_join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">// Wind,Rain,Fire</span></pre></td></tr><tr><td data-num="11"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">_join</span><span class="token punctuation">(</span><span class="token string">', '</span><span class="token punctuation">)</span>  <span class="token comment">// Wind, Rain, Fire</span></pre></td></tr><tr><td data-num="12"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">_join</span><span class="token punctuation">(</span><span class="token string">' + '</span><span class="token punctuation">)</span> <span class="token comment">// Wind + Rain + Fire</span></pre></td></tr><tr><td data-num="13"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">_join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token comment">// WindRainFire</span></pre></td></tr></table></figure><h3 id="使用-for-in-实现-2"><a class="anchor" href="#使用-for-in-实现-2">#</a> 使用 for in 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_join</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">','</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">''</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">'_join'</span> <span class="token operator">===</span> key<span class="token punctuation">)</span> <span class="token keyword">return</span> str</pre></td></tr><tr><td data-num="5"></td><td><pre>    str <span class="token operator">=</span> key <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>str<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>str<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="测试-4"><a class="anchor" href="#测试-4">#</a> 测试</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// join</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Wind'</span><span class="token punctuation">,</span> <span class="token string">'Rain'</span><span class="token punctuation">,</span> <span class="token string">'Fire'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">// Wind,Rain,Fire</span></pre></td></tr><tr><td data-num="4"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">', '</span><span class="token punctuation">)</span>  <span class="token comment">// Wind, Rain, Fire</span></pre></td></tr><tr><td data-num="5"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">' + '</span><span class="token punctuation">)</span> <span class="token comment">// Wind + Rain + Fire</span></pre></td></tr><tr><td data-num="6"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token comment">// WindRainFire</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// _join</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Wind'</span><span class="token punctuation">,</span> <span class="token string">'Rain'</span><span class="token punctuation">,</span> <span class="token string">'Fire'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="10"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">_join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">// Wind,Rain,Fire</span></pre></td></tr><tr><td data-num="11"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">_join</span><span class="token punctuation">(</span><span class="token string">', '</span><span class="token punctuation">)</span>  <span class="token comment">// Wind, Rain, Fire</span></pre></td></tr><tr><td data-num="12"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">_join</span><span class="token punctuation">(</span><span class="token string">' + '</span><span class="token punctuation">)</span> <span class="token comment">// Wind + Rain + Fire</span></pre></td></tr><tr><td data-num="13"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">_join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token comment">// WindRainFire</span></pre></td></tr></table></figure><h2 id="string-includes-原理"><a class="anchor" href="#string-includes-原理">#</a> String includes 原理</h2><h3 id="使用-for-实现-3"><a class="anchor" href="#使用-for-实现-3">#</a> 使用 for 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">String</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_includes</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">searchString<span class="token punctuation">,</span> position <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">// 1. 如果值一样直接 return true 节约性能</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>searchString <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">// 2. 当 position 索引大于自身长度时则直接返回 false</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  </pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token comment">// 3. 字符串的长度</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">const</span> searchStringLength <span class="token operator">=</span> searchString<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length</pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token comment">// 4. 如果为负数从 0 开始查找</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  position <span class="token operator">=</span> position <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> position</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token comment">// 5. 定义用来接收每次遍历完的字符串 来和 searchString 比较</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token keyword">let</span> resultStr <span class="token operator">=</span> <span class="token string">''</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  </pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token comment">// 6. 需要遍历的次数 例如：abcde 查找 de -> ab bc cd de 需要遍历 4 次</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token keyword">let</span> cycleIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> searchStringLength <span class="token operator">+</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  </pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token comment">// 7.getStr 函数用于获取每次递进的字符串</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  <span class="token comment">// 8. 举栗:'abcde' -> 会以这种形式依次进行遍历 ab -> bc -> cd -> de</span></pre></td></tr><tr><td data-num="22"></td><td><pre>  <span class="token keyword">const</span> <span class="token function-variable function">getStr</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> searchStringLength<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre>      resultStr <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token keyword">return</span> resultStr</pre></td></tr><tr><td data-num="26"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> position<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cycleIndex<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token comment">// 如果没查到就置空</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>searchString <span class="token operator">!=</span> <span class="token function">getStr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> resultStr <span class="token operator">=</span> <span class="token string">''</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="32"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre>  <span class="token keyword">return</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="测试-5"><a class="anchor" href="#测试-5">#</a> 测试</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'To be, or not to be, that is the question.'</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// includes</span></pre></td></tr><tr><td data-num="3"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'To be'</span><span class="token punctuation">)</span>       <span class="token comment">// true</span></pre></td></tr><tr><td data-num="4"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'question'</span><span class="token punctuation">)</span>    <span class="token comment">// true</span></pre></td></tr><tr><td data-num="5"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'nonexistent'</span><span class="token punctuation">)</span> <span class="token comment">// false</span></pre></td></tr><tr><td data-num="6"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'To be'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">// false</span></pre></td></tr><tr><td data-num="7"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'TO BE'</span><span class="token punctuation">)</span>       <span class="token comment">// false</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// _includes</span></pre></td></tr><tr><td data-num="10"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">_includes</span><span class="token punctuation">(</span><span class="token string">'To be'</span><span class="token punctuation">)</span>       <span class="token comment">// true</span></pre></td></tr><tr><td data-num="11"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">_includes</span><span class="token punctuation">(</span><span class="token string">'question'</span><span class="token punctuation">)</span>    <span class="token comment">// true</span></pre></td></tr><tr><td data-num="12"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">_includes</span><span class="token punctuation">(</span><span class="token string">'nonexistent'</span><span class="token punctuation">)</span> <span class="token comment">// false</span></pre></td></tr><tr><td data-num="13"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">_includes</span><span class="token punctuation">(</span><span class="token string">'To be'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">// false</span></pre></td></tr><tr><td data-num="14"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">_includes</span><span class="token punctuation">(</span><span class="token string">'TO BE'</span><span class="token punctuation">)</span>       <span class="token comment">// false</span></pre></td></tr></table></figure><h3 id="使用-while-实现"><a class="anchor" href="#使用-while-实现">#</a> 使用 while  实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">String</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_includes</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> startIndex <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> value<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token comment">// 字符串长度</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">const</span> length <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length</pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token comment">// 参数字符串长度</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token keyword">const</span> valueLength <span class="token operator">=</span> value<span class="token punctuation">.</span>length</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token comment">//startIndex &lt; 0 就从 0 开始搜索</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  startIndex <span class="token operator">=</span> startIndex <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> startIndex</pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token keyword">let</span> i <span class="token operator">=</span> startIndex</pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token comment">// 循环次数</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> valueLength <span class="token operator">&lt;=</span> length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> str <span class="token operator">=</span> <span class="token string">''</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    </pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token comment">// 判断需要遍历次数 例如 abcde 查找 de -> ab bc cd de 4 次</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> valueLength<span class="token punctuation">)</span> str <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i <span class="token operator">+</span> num<span class="token operator">++</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    i<span class="token operator">++</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token comment">// 如果查找到返回 true</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">===</span> value<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>  <span class="token keyword">return</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="测试-6"><a class="anchor" href="#测试-6">#</a> 测试</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'To be, or not to be, that is the question.'</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// includes</span></pre></td></tr><tr><td data-num="3"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'To be'</span><span class="token punctuation">)</span>       <span class="token comment">// true</span></pre></td></tr><tr><td data-num="4"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'question'</span><span class="token punctuation">)</span>    <span class="token comment">// true</span></pre></td></tr><tr><td data-num="5"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'nonexistent'</span><span class="token punctuation">)</span> <span class="token comment">// false</span></pre></td></tr><tr><td data-num="6"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'To be'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">// false</span></pre></td></tr><tr><td data-num="7"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'TO BE'</span><span class="token punctuation">)</span>       <span class="token comment">// false</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// _includes</span></pre></td></tr><tr><td data-num="10"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">_includes</span><span class="token punctuation">(</span><span class="token string">'To be'</span><span class="token punctuation">)</span>       <span class="token comment">// true</span></pre></td></tr><tr><td data-num="11"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">_includes</span><span class="token punctuation">(</span><span class="token string">'question'</span><span class="token punctuation">)</span>    <span class="token comment">// true</span></pre></td></tr><tr><td data-num="12"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">_includes</span><span class="token punctuation">(</span><span class="token string">'nonexistent'</span><span class="token punctuation">)</span> <span class="token comment">// false</span></pre></td></tr><tr><td data-num="13"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">_includes</span><span class="token punctuation">(</span><span class="token string">'To be'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">// false</span></pre></td></tr><tr><td data-num="14"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">_includes</span><span class="token punctuation">(</span><span class="token string">'TO BE'</span><span class="token punctuation">)</span>       <span class="token comment">// false</span></pre></td></tr></table></figure><h2 id="array-includex-原理"><a class="anchor" href="#array-includex-原理">#</a> Array includex 原理</h2><h3 id="使用-for-实现-4"><a class="anchor" href="#使用-for-实现-4">#</a> 使用 for 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_includes</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> start <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  start <span class="token operator">=</span> start <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">+</span> start <span class="token operator">:</span> start</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> value <span class="token operator">||</span> Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token keyword">return</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="测试-7"><a class="anchor" href="#测试-7">#</a> 测试</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// includes</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>     <span class="token comment">// false </span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>     <span class="token comment">// false</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment">// true</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// _includes</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>     <span class="token comment">// true</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>     <span class="token comment">// false </span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment">// false</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr></table></figure><h3 id="使用-for-in-实现-3"><a class="anchor" href="#使用-for-in-实现-3">#</a> 使用 for in 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_includes</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> start <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  start <span class="token operator">=</span> start <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">+</span> start <span class="token operator">:</span> start</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">&lt;</span> start<span class="token punctuation">)</span> <span class="token keyword">continue</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">||</span> Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token operator">===</span> Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">return</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="测试-8"><a class="anchor" href="#测试-8">#</a> 测试</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// includes</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>     <span class="token comment">// false </span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>     <span class="token comment">// false</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment">// true</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// _includes</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>     <span class="token comment">// true</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>     <span class="token comment">// false </span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment">// false</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;fill-原理&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fill-原理&quot;&gt;#&lt;/a&gt; fill 原理&lt;/h2&gt;
&lt;h3 id=&quot;使用-for-实现&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#使用-for-实现&quot;&gt;#&lt;/a&gt; 使用 for 实现</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>every &amp; some &amp; find &amp; findIndex 原理</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2022/01/23/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/every-some-find-findIndex/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2022/01/23/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/every-some-find-findIndex/</id>
    <published>2022-01-23T08:29:59.000Z</published>
    <updated>2022-03-07T03:45:56.547Z</updated>
    
    <content type="html"><![CDATA[<h2 id="every-原理"><a class="anchor" href="#every-原理">#</a> every 原理</h2><h3 id="使用-for-实现"><a class="anchor" href="#使用-for-实现">#</a> 使用 for 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_every</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">return</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'稚名真白'</span><span class="token punctuation">,</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'蝶祈'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">const</span> flag <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">_every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token keyword">return</span> value <span class="token operator">!==</span> <span class="token string">'入间同学'</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token comment">//return value !== ' 蝶祈 ' //false</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr></table></figure><h3 id="使用-for-in-实现"><a class="anchor" href="#使用-for-in-实现">#</a> 使用 for in 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_every</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">'NaN'</span> <span class="token operator">===</span> <span class="token punctuation">(</span><span class="token operator">+</span>key <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">return</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'稚名真白'</span><span class="token punctuation">,</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'蝶祈'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">const</span> flag <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">_every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token comment">//return value !== ' 入间同学 ' //true</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">return</span> value <span class="token operator">!==</span> <span class="token string">'蝶祈'</span> <span class="token comment">// false</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token comment">// false</span></pre></td></tr></table></figure><h2 id="some-原理"><a class="anchor" href="#some-原理">#</a> some 原理</h2><h3 id="使用-for-实现-2"><a class="anchor" href="#使用-for-实现-2">#</a> 使用 for 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_some</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">return</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'稚名真白'</span><span class="token punctuation">,</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'蝶祈'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">const</span> flag <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">_some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token keyword">return</span> value <span class="token operator">===</span> <span class="token string">'入间同学'</span> <span class="token comment">// false</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token comment">//return value === ' 蝶祈 ' //true</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token comment">// false</span></pre></td></tr></table></figure><h3 id="使用-for-in-实现-2"><a class="anchor" href="#使用-for-in-实现-2">#</a> 使用 for in 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_some</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">'NaN'</span> <span class="token operator">===</span> <span class="token punctuation">(</span><span class="token operator">+</span>key <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">return</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'稚名真白'</span><span class="token punctuation">,</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'蝶祈'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">const</span> flag <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">_some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token keyword">return</span> value <span class="token operator">===</span> <span class="token string">'入间同学'</span> <span class="token comment">// false</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token comment">//return value === ' 蝶祈 ' //true</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token comment">// false</span></pre></td></tr></table></figure><h2 id="find-原理"><a class="anchor" href="#find-原理">#</a> find 原理</h2><h3 id="使用-for-实现-3"><a class="anchor" href="#使用-for-实现-3">#</a> 使用 for 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_find</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">undefined</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">return</span> <span class="token keyword">undefined</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'稚名真白'</span><span class="token punctuation">,</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'蝶祈'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">const</span> res <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">_find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token keyword">return</span> value <span class="token operator">===</span> <span class="token string">'入间同学'</span> <span class="token comment">// undefined</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token comment">//return value === ' 蝶祈 ' // 蝶祈</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment">// undefined</span></pre></td></tr></table></figure><h3 id="使用-for-in-实现-3"><a class="anchor" href="#使用-for-in-实现-3">#</a> 使用 for in 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_find</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">undefined</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">'NaN'</span> <span class="token operator">===</span> <span class="token punctuation">(</span><span class="token operator">+</span>key <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">undefined</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token keyword">return</span> <span class="token keyword">undefined</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'稚名真白'</span><span class="token punctuation">,</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'蝶祈'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">const</span> res <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">_find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token keyword">return</span> value <span class="token operator">===</span> <span class="token string">'入间同学'</span> <span class="token comment">// undefined</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token comment">//return value === ' 蝶祈 ' // 蝶祈</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment">// 蝶祈</span></pre></td></tr></table></figure><h2 id="findindex-原理"><a class="anchor" href="#findindex-原理">#</a> findIndex 原理</h2><h3 id="使用-for-实现-4"><a class="anchor" href="#使用-for-实现-4">#</a> 使用 for 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_findIndex</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> i</pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'稚名真白'</span><span class="token punctuation">,</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'蝶祈'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">const</span> res <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">_findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token comment">//return value === ' 入间同学 ' //-1</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">return</span> value <span class="token operator">===</span> <span class="token string">'蝶祈'</span> <span class="token comment">// 2</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment">// -1</span></pre></td></tr></table></figure><h3 id="使用-for-in-实现-4"><a class="anchor" href="#使用-for-in-实现-4">#</a> 使用 for in 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_findIndex</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">'NaN'</span> <span class="token operator">===</span> <span class="token operator">+</span>key <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">+</span>key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">+</span>key</pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'稚名真白'</span><span class="token punctuation">,</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'蝶祈'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">const</span> res <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">_findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token comment">//return value === ' 入间同学 ' //-1</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">return</span> value <span class="token operator">===</span> <span class="token string">'蝶祈'</span> <span class="token comment">// 2</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment">// 2</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;every-原理&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#every-原理&quot;&gt;#&lt;/a&gt; every 原理&lt;/h2&gt;
&lt;h3 id=&quot;使用-for-实现&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#使用-for-实现&quot;&gt;#&lt;/a&gt; 使用 for</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>forEach &amp; filter &amp; map &amp; reduce 原理</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2022/01/21/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/forEach-filter-map-reduce/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2022/01/21/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/forEach-filter-map-reduce/</id>
    <published>2022-01-21T07:26:10.000Z</published>
    <updated>2022-02-08T16:40:30.027Z</updated>
    
    <content type="html"><![CDATA[<h2 id="foreach-原理"><a class="anchor" href="#foreach-原理">#</a> forEach 原理</h2><h3 id="使用-for-实现"><a class="anchor" href="#使用-for-实现">#</a> 使用 for 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'稚名真白'</span><span class="token punctuation">,</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'蝶祈'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_forEach</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>array<span class="token punctuation">.</span><span class="token function">_forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment">/*</pre></td></tr><tr><td data-num="13"></td><td><pre> 稚名真白 0 [' 稚名真白 ', ' 樱岛麻衣 ', ' 蝶祈 ']</pre></td></tr><tr><td data-num="14"></td><td><pre> 樱岛麻衣 1 [ ' 稚名真白 ', ' 樱岛麻衣 ', ' 蝶祈 ' ]</pre></td></tr><tr><td data-num="15"></td><td><pre> 蝶祈 2 [ ' 稚名真白 ', ' 樱岛麻衣 ', ' 蝶祈 ' ]</pre></td></tr><tr><td data-num="16"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id="使用-for-in-实现"><a class="anchor" href="#使用-for-in-实现">#</a> 使用 for in 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'稚名真白'</span><span class="token punctuation">,</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'蝶祈'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_forEach</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'NaN'</span> <span class="token operator">===</span> <span class="token punctuation">(</span><span class="token operator">+</span>key <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>array<span class="token punctuation">.</span><span class="token function">_forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">/*</pre></td></tr><tr><td data-num="14"></td><td><pre> 稚名真白 0 [' 稚名真白 ', ' 樱岛麻衣 ', ' 蝶祈 ']</pre></td></tr><tr><td data-num="15"></td><td><pre> 樱岛麻衣 1 [ ' 稚名真白 ', ' 樱岛麻衣 ', ' 蝶祈 ' ]</pre></td></tr><tr><td data-num="16"></td><td><pre> 蝶祈 2 [ ' 稚名真白 ', ' 樱岛麻衣 ', ' 蝶祈 ' ]</pre></td></tr><tr><td data-num="17"></td><td><pre>*/</span></pre></td></tr></table></figure><h2 id="filter-原理"><a class="anchor" href="#filter-原理">#</a> filter 原理</h2><h3 id="使用-for-实现-2"><a class="anchor" href="#使用-for-实现-2">#</a> 使用 for 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'稚名真白'</span><span class="token punctuation">,</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'蝶祈'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_filter</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token keyword">return</span> res</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">const</span> ゆずりはいのり <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">_filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">return</span> value <span class="token operator">===</span> <span class="token string">'蝶祈'</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ゆずりはいのり<span class="token punctuation">)</span> <span class="token comment">// [' 蝶祈 ']</span></pre></td></tr></table></figure><h3 id="使用-for-in-实现-2"><a class="anchor" href="#使用-for-in-实现-2">#</a> 使用 for in 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'稚名真白'</span><span class="token punctuation">,</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'蝶祈'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_filter</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'NaN'</span> <span class="token operator">===</span> <span class="token punctuation">(</span><span class="token operator">+</span>key <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res</pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">const</span> ゆずりはいのり <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">_filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">return</span> value <span class="token operator">===</span> <span class="token string">'蝶祈'</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ゆずりはいのり<span class="token punctuation">)</span> <span class="token comment">// [' 蝶祈 ']</span></pre></td></tr></table></figure><h2 id="map-原理"><a class="anchor" href="#map-原理">#</a> map 原理</h2><h3 id="使用-for-实现-3"><a class="anchor" href="#使用-for-实现-3">#</a> 使用 for 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'稚名真白'</span><span class="token punctuation">,</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'蝶祈'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_map</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token keyword">return</span> res</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">const</span> newArray <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">_map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">return</span> index <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> value</pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArray<span class="token punctuation">)</span> <span class="token comment">// ['0 - 稚名真白 ', '1 - 樱岛麻衣 ', '2 - 蝶祈 ']</span></pre></td></tr></table></figure><h3 id="使用-for-in-实现-3"><a class="anchor" href="#使用-for-in-实现-3">#</a> 使用 for in 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'稚名真白'</span><span class="token punctuation">,</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'蝶祈'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_map</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'NaN'</span> <span class="token operator">===</span> <span class="token punctuation">(</span><span class="token operator">+</span>key <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res</pre></td></tr><tr><td data-num="7"></td><td><pre>    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">const</span> newArray <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">_map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">return</span> index <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> value</pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArray<span class="token punctuation">)</span> <span class="token comment">// ['0 - 稚名真白 ', '1 - 樱岛麻衣 ', '2 - 蝶祈 ']</span></pre></td></tr></table></figure><h2 id="reduce"><a class="anchor" href="#reduce">#</a> reduce</h2><h3 id="使用-for-实现-4"><a class="anchor" href="#使用-for-实现-4">#</a> 使用 for 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_reduce</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback<span class="token punctuation">,</span> initValue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">'[object Function]'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'callback must be function'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token comment">// 判断是否传了初始值，没有传就从下标 1 开始遍历，否则从下标 0 开始遍历</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">let</span> initIndex <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token comment">// 判断初始值，如果没传就默认取下标 0 的元素，否则取传过来的初始值为默认值</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">let</span> accumulator <span class="token operator">=</span> initIndex <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">:</span> initValue</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> initIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> accumulator <span class="token operator">=</span> <span class="token function">callback</span><span class="token punctuation">(</span>accumulator<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token keyword">return</span> accumulator  </pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">const</span> res <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">_reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> currentIndex<span class="token punctuation">,</span>  array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>accumulator<span class="token punctuation">)</span> <span class="token comment">// 10 14 30 66 115</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token keyword">return</span> accumulator <span class="token operator">+=</span> currentValue <span class="token operator">**</span> <span class="token number">2</span> <span class="token comment">// (10 + 2**2) (14 + 4**4) (30 + 6**6) (66 + 7**7) (115 + 8**8)</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment">// 179</span></pre></td></tr></table></figure><h3 id="使用-for-in-实现-4"><a class="anchor" href="#使用-for-in-实现-4">#</a> 使用 for in 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_reduce</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback<span class="token punctuation">,</span> initValue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">'[object Function]'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'callback must be function'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token comment">// 判断是否传了初始值，没有传就从下标 1 开始遍历，否则从下标 0 开始遍历</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">let</span> initIndex <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token comment">// 判断初始值，如果没传就默认取下标 0 的元素，否则取传过来的初始值为默认值</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">let</span> accumulator <span class="token operator">=</span> initIndex <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">:</span> initValue</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">'NaN'</span> <span class="token operator">===</span> <span class="token operator">+</span>key <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token keyword">return</span> accumulator</pre></td></tr><tr><td data-num="16"></td><td><pre>    accumulator <span class="token operator">=</span> <span class="token function">callback</span><span class="token punctuation">(</span>accumulator<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">const</span> res <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">_reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> currentIndex<span class="token punctuation">,</span>  array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>accumulator<span class="token punctuation">)</span> <span class="token comment">// 10 14 30 66 115</span></pre></td></tr><tr><td data-num="22"></td><td><pre>  <span class="token keyword">return</span> accumulator <span class="token operator">+=</span> currentValue <span class="token operator">**</span> <span class="token number">2</span> <span class="token comment">// 执行流程 -> (10 + 2**2) (14 + 4**4) (30 + 6**6) (66 + 7**7) (115 + 8**8)</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment">// 179</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;foreach-原理&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#foreach-原理&quot;&gt;#&lt;/a&gt; forEach 原理&lt;/h2&gt;
&lt;h3 id=&quot;使用-for-实现&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#使用-for-实现&quot;&gt;#&lt;/a&gt; </summary>
      
    
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>优先级队列实现 (PriorityQueue)</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2022/01/19/data-structures-and-algorithms/data-structure/priority-queue/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2022/01/19/data-structures-and-algorithms/data-structure/priority-queue/</id>
    <published>2022-01-19T15:01:23.000Z</published>
    <updated>2022-02-12T12:52:45.947Z</updated>
    
    <content type="html"><![CDATA[<h2 id="优先级队列结构"><a class="anchor" href="#优先级队列结构">#</a> 优先级队列结构</h2><ul><li><p>优先级队列的特点</p><ul><li>我们知道，普通的队列插入一个元素，数据会被放在后端。并且需要前面所有的元素都处理完后才会处理前面的数据。</li><li>但是优先级队列，再插入一个元素的时候会考虑该数据的优先级。和其他数据优先级 <code>进行比较</code></li><li>比较完成后，可以得出这个元素在队列中正确的位置</li><li>其他处理方式，和基本队列的处理方式一样。</li></ul></li><li><p>优先级队列主要考虑的问题：</p><ul><li>每个元素不再只是一个数据，而且包含数据的优先级</li></ul></li></ul><h2 id="example"><a class="anchor" href="#example">#</a> Example</h2><ul><li>生活中的优先级队列例子<ul><li>比如某些家庭在吃饭时，老人优先级更高，先动筷子，其次是父母，最后才是小孩。</li><li>你正在吃饭，突然非常想去五谷轮回之所，于是你就去了。</li></ul></li></ul><p><strong>Example 1:</strong></p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>每次插入几组数据：</pre></td></tr><tr><td data-num="2"></td><td><pre>'Saber'<span class="token punctuation">,</span> <span class="token number">100</span></pre></td></tr><tr><td data-num="3"></td><td><pre>'Nekoaimer'<span class="token punctuation">,</span> <span class="token number">1000</span></pre></td></tr><tr><td data-num="4"></td><td><pre>'Lain'<span class="token punctuation">,</span> <span class="token number">10</span></pre></td></tr><tr><td data-num="5"></td><td><pre>输出：'Lain'<span class="token punctuation">,</span> 10  'Saber'<span class="token punctuation">,</span> 100  'Nekoaimer'<span class="token punctuation">,</span> <span class="token number">1000</span></pre></td></tr></table></figure><ul><li>解释：第一个是为元素，第二个是为优先级。<strong> <code>那么这个例子我们就以认为数字越低 优先级越高来实现优先级队列</code> </strong> 那么每次插入数据都会进行比较 排列，所以会得出这个结果。</li></ul><p><strong>Example 2:</strong></p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>每次插入几组数据：</pre></td></tr><tr><td data-num="2"></td><td><pre>'Saber'<span class="token punctuation">,</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="3"></td><td><pre>'Nekoaimer'<span class="token punctuation">,</span> <span class="token number">3</span></pre></td></tr><tr><td data-num="4"></td><td><pre>'Lain'<span class="token punctuation">,</span> <span class="token number">2</span></pre></td></tr><tr><td data-num="5"></td><td><pre>输出：Saber 1  Lain 2  Nekoaimer 3</pre></td></tr></table></figure><h2 id="solving-ideas"><a class="anchor" href="#solving-ideas">#</a> Solving Ideas</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 封装优先级队列</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">function</span> <span class="token function">PriorityQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token comment">// 1. 内部类</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">function</span> <span class="token function">QueueElement</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> priority</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>el <span class="token operator">=</span> el</pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>priority <span class="token operator">=</span> priority</pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token comment">// 封装属性</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token keyword">this</span><span class="token punctuation">.</span>items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token comment">// 封装方法</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token comment">// 实现插入方法</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token class-name">PriorityQueue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">enqueue</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> priority</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token comment">// 1. 创建 QueueElement 对象</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">const</span> queueElement <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueueElement</span><span class="token punctuation">(</span>el <span class="token punctuation">,</span>priority<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>queueElement<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token comment">// 3. 判断队列是否为空</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>queueElement<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>      <span class="token keyword">let</span> added <span class="token operator">=</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="23"></td><td><pre>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>queueElement<span class="token punctuation">.</span>priority <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>priority<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>          <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> queueElement<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre>          added <span class="token operator">=</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="27"></td><td><pre>          <span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>queueElement<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre>   <span class="token comment">// 4. 从队列中删除前端元素</span></pre></td></tr><tr><td data-num="35"></td><td><pre>   <span class="token class-name">PriorityQueue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">dequeue</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="37"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre>  <span class="token comment">// 5. 查看前端的元素</span></pre></td></tr><tr><td data-num="40"></td><td><pre>  <span class="token class-name">PriorityQueue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">front</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="42"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre>  <span class="token comment">// 6. 查看队列是否为空</span></pre></td></tr><tr><td data-num="45"></td><td><pre>  <span class="token class-name">PriorityQueue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">isEmpty</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="47"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="48"></td><td><pre></pre></td></tr><tr><td data-num="49"></td><td><pre>  <span class="token comment">// 7. 查看队列中元素个数</span></pre></td></tr><tr><td data-num="50"></td><td><pre>  <span class="token class-name">PriorityQueue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">size</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length</pre></td></tr><tr><td data-num="52"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="53"></td><td><pre></pre></td></tr><tr><td data-num="54"></td><td><pre>  <span class="token comment">// 8.toString 方法</span></pre></td></tr><tr><td data-num="55"></td><td><pre>  <span class="token class-name">PriorityQueue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">toString</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>    <span class="token keyword">let</span> resStr <span class="token operator">=</span> <span class="token string">''</span></pre></td></tr><tr><td data-num="57"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span>key <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>      resStr <span class="token operator">+=</span> key<span class="token punctuation">.</span>el <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> key<span class="token punctuation">.</span>priority <span class="token operator">+</span> <span class="token string">'  '</span></pre></td></tr><tr><td data-num="59"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>    <span class="token keyword">return</span> resStr</pre></td></tr><tr><td data-num="61"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="63"></td><td><pre></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token comment">// 测试代码</span></pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token keyword">const</span> pq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="66"></td><td><pre>pq<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token string">'Lain'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="67"></td><td><pre>pq<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token string">'Saber'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="68"></td><td><pre>pq<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token string">'Nekoaimer'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="69"></td><td><pre></pre></td></tr><tr><td data-num="70"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pq<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="71"></td><td><pre><span class="token comment">/*</pre></td></tr><tr><td data-num="72"></td><td><pre>PriorityQueue &#123;</pre></td></tr><tr><td data-num="73"></td><td><pre>  items: [</pre></td></tr><tr><td data-num="74"></td><td><pre>    QueueElement &#123; el: 'Lain', priority: 10 &#125;,      </pre></td></tr><tr><td data-num="75"></td><td><pre>    QueueElement &#123; el: 'Saber', priority: 100 &#125;,    </pre></td></tr><tr><td data-num="76"></td><td><pre>    QueueElement &#123; el: 'Nekoaimer', priority: 1000 &#125;</pre></td></tr><tr><td data-num="77"></td><td><pre>  ]</pre></td></tr><tr><td data-num="78"></td><td><pre>&#125;</pre></td></tr><tr><td data-num="79"></td><td><pre>*/</span></pre></td></tr><tr><td data-num="80"></td><td><pre></pre></td></tr><tr><td data-num="81"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pq<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Lain 10  Saber 100  Nekoaimer 1000</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;优先级队列结构&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#优先级队列结构&quot;&gt;#&lt;/a&gt; 优先级队列结构&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;优先级队列的特点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们知道，普通的队列插入一个元素，数据会被放在后端。并且需要前面所有的</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/data-structures-and-algorithms/"/>
    
    <category term="data structure" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/data-structures-and-algorithms/data-structure/"/>
    
    
    <category term="数据结构与算法" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>队列实现击鼓传花 (Queue)</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2022/01/19/data-structures-and-algorithms/data-structure/pass-the-parcel/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2022/01/19/data-structures-and-algorithms/data-structure/pass-the-parcel/</id>
    <published>2022-01-19T01:58:35.000Z</published>
    <updated>2022-02-12T12:52:58.136Z</updated>
    
    <content type="html"><![CDATA[<h2 id="队列结构queue"><a class="anchor" href="#队列结构queue">#</a> 队列结构（Queue）</h2><ul><li><p>队列是一个简单的数据结构，它是一个 <code>允许在一端进行插入操作，而在另一端进行删除操作的线性表</code> 。队列遵循先进先出（FIFO, First-In-First-Out）的特征，和栈（LIFO, Last In First Out）刚好相反。</p></li><li><p>队列，它是一种受限的线性表</p><ul><li>受限之处在于它只允许在表的前端 (front) 进行删除操作</li><li>而在表的后端 (rear) 进行插入操作</li></ul></li><li><p>生活中类似的队列结构</p><ul><li>比如电影院、商城、奶茶店排队</li><li>优先排队的人，优先处理</li></ul></li></ul><h2 id="实现队列"><a class="anchor" href="#实现队列">#</a> 实现队列</h2><ul><li><code>封装一个队列实现下面的击鼓传花</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 封装队列类</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">function</span> <span class="token function">Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token comment">// 属性</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">this</span><span class="token punctuation">.</span>items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token comment">// 方法</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token comment">// 1. 将元素加入到队列中</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token class-name">Queue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">enqueue</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token comment">// 2. 从队列中删除前端元素</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token class-name">Queue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">dequeue</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token comment">// 3. 查看前端的元素</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token class-name">Queue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">front</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>  <span class="token comment">// 4. 查看队列是否为空</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token class-name">Queue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">isEmpty</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token comment">// 5. 查看队列中元素个数</span></pre></td></tr><tr><td data-num="28"></td><td><pre>  <span class="token class-name">Queue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">size</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length</pre></td></tr><tr><td data-num="30"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre>  <span class="token comment">// 6.toString 方法</span></pre></td></tr><tr><td data-num="33"></td><td><pre>  <span class="token class-name">Queue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">toString</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token keyword">let</span> resStr <span class="token operator">=</span> <span class="token string">''</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span>key <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>      resStr<span class="token operator">+=</span> key</pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token keyword">return</span> resStr</pre></td></tr><tr><td data-num="39"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="example"><a class="anchor" href="#example">#</a> Example</h2><ul><li>原游戏击鼓传花规则是，例如班级的学生围城一圈，从某位学生手里向旁边的同学传一束花。这个时候某个人在击鼓， 鼓声停下的一刻，花落在谁手里，谁就出来表演节目</li><li>修改游戏规则<ul><li>学生们围成一圈， 开始数数， 数到某个数的人自动淘汰，最后剩下的人获得游戏胜利，并获得胜利者的位置。</li></ul></li></ul><p><strong>Example 1:</strong></p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>输入：<span class="token punctuation">[</span><span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'小鸟游六花'</span><span class="token punctuation">,</span> <span class="token string">'入间同学'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">6</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token key atrule">输出：el</span><span class="token punctuation">:</span> <span class="token key atrule">入间同学  index</span><span class="token punctuation">:</span> <span class="token number">2</span></pre></td></tr></table></figure><ul><li>解释：从 0 开始数到 6 是樱岛麻衣，那么樱岛麻衣被淘汰此时数组剩下两个元素 [' 小鸟游六花 ', ' 入间同学 '],</li><li>接着被淘汰的元素往下从 0 数到 6，是小鸟游六花，那么小鸟游六花被淘汰</li><li>此时数组只剩下入间同学，并获取原来的下标值，那么就是 2</li></ul><p><strong>Example 2:</strong></p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>输入：<span class="token punctuation">[</span><span class="token string">'Saber'</span><span class="token punctuation">,</span> <span class="token string">'Lain'</span><span class="token punctuation">,</span> <span class="token string">'Nico'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">8</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token key atrule">输出：el</span><span class="token punctuation">:</span> <span class="token key atrule">Lain  index</span><span class="token punctuation">:</span> <span class="token number">1</span></pre></td></tr></table></figure><h2 id="solving-ideas"><a class="anchor" href="#solving-ideas">#</a> Solving Ideas</h2><ul><li><code>我们使用上面封装的队列方法实现击鼓传花</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">passGame</span><span class="token punctuation">(</span><span class="token parameter">nameList<span class="token punctuation">,</span> num</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">// 1. 创建一个队列</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">// 2. 将所有人依次加入到队列中</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nameList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    queue<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>nameList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token comment">// 3. 开始数数字</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>      queue<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    queue<span class="token punctuation">.</span><span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">index: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>nameList<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> : el: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>queue<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">passGame</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Saber'</span><span class="token punctuation">,</span> <span class="token string">'Lain'</span><span class="token punctuation">,</span> <span class="token string">'Nico'</span><span class="token punctuation">,</span> <span class="token string">'Nekoaimer'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment">// el: Nekoaimer  index: 3</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;队列结构queue&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#队列结构queue&quot;&gt;#&lt;/a&gt; 队列结构（Queue）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;队列是一个简单的数据结构，它是一个 &lt;code&gt;允许在一端进行插入操作，而在另一端进行删除操作的线</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/data-structures-and-algorithms/"/>
    
    <category term="data structure" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/data-structures-and-algorithms/data-structure/"/>
    
    
    <category term="数据结构与算法" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>CSS (小三角)大于号</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2022/01/16/css/CSS%20Demo/CSS%E5%A4%A7%E4%BA%8E%E5%8F%B7/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2022/01/16/css/CSS%20Demo/CSS%E5%A4%A7%E4%BA%8E%E5%8F%B7/</id>
    <published>2022-01-16T09:35:48.000Z</published>
    <updated>2022-04-08T12:48:56.546Z</updated>
    
    <content type="html"><![CDATA[<h2 id="预览效果"><a class="anchor" href="#预览效果">#</a> 预览效果</h2><p> <style>  [class^=triangle] {    margin: 50px auto;    width: 20px;    height: 20px;    transform: rotate(45deg);  }  .triangle-left {    border-left: 4px solid #4ad3e2;    border-bottom: 4px solid #4ad3e2;  }  .triangle-right {    border-right: 4px solid #4ad3e2;    border-top: 4px solid #4ad3e2;  }  .triangle-top {    border-left: 4px solid #4ad3e2;    border-top: 4px solid #4ad3e2;  }  .triangle-bottom {    border-right: 4px solid #4ad3e2;    border-bottom: 4px solid #4ad3e2;  }</style><div class="triangle-left"></div><div class="triangle-right"></div><div class="triangle-top"></div><div class="triangle-bottom"></div></p><h2 id="html-结构"><a class="anchor" href="#html-结构">#</a> HTML 结构</h2><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>triangle-left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>triangle-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>triangle-top<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>triangle-bottom<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><h2 id="css-样式"><a class="anchor" href="#css-样式">#</a> CSS 样式</h2><ul><li>给上两条边框并旋转下即可，例如：</li><li>需要 <code>&gt;</code>  这个方向的，那么就需要左下边框</li><li>需要 <code>&lt;</code>  这个方向的，那么就需要右上边框</li></ul><figure class="highlight css"><figcaption data-lang="CSS"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">[class^=triangle]</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token property">margin</span><span class="token punctuation">:</span> 50px auto<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token property">width</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token property">height</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>45deg<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token selector">.triangle-left</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token property">border-left</span><span class="token punctuation">:</span> 4px solid #4ad3e2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> 4px solid #4ad3e2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token selector">.triangle-right</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token property">border-right</span><span class="token punctuation">:</span> 4px solid #4ad3e2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token property">border-top</span><span class="token punctuation">:</span> 4px solid #4ad3e2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token selector">.triangle-top</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token property">border-left</span><span class="token punctuation">:</span> 4px solid #4ad3e2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token property">border-top</span><span class="token punctuation">:</span> 4px solid #4ad3e2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token selector">.triangle-bottom</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token property">border-right</span><span class="token punctuation">:</span> 4px solid #4ad3e2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> 4px solid #4ad3e2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="stylus-样式"><a class="anchor" href="#stylus-样式">#</a> Stylus 样式</h2><ul><li><code>stylus index.styl -o index.css -w</code></li></ul><figure class="highlight stylus"><figcaption data-lang="stylus"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">[class^=triangle] </span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token property-declaration"><span class="token property">margin</span> <span class="token number">50</span><span class="token unit">px</span> auto</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token property-declaration"><span class="token property">width</span> <span class="token number">20</span><span class="token unit">px</span></span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token property-declaration"><span class="token property">height</span> <span class="token number">20</span><span class="token unit">px</span></span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token property-declaration"><span class="token property">transform</span> <span class="token func"><span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token unit">deg</span><span class="token punctuation">)</span></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token selector">.triangle-left </span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token property-declaration"><span class="token property">border-left</span> <span class="token number">4</span><span class="token unit">px</span> solid <span class="token hexcode">#4ad3e2</span></span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token property-declaration"><span class="token property">border-bottom</span> <span class="token number">4</span><span class="token unit">px</span> solid <span class="token hexcode">#4ad3e2</span></span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token selector">.triangle-right </span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token property-declaration"><span class="token property">border-right</span> <span class="token number">4</span><span class="token unit">px</span> solid <span class="token hexcode">#4ad3e2</span></span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token property-declaration"><span class="token property">border-top</span> <span class="token number">4</span><span class="token unit">px</span> solid <span class="token hexcode">#4ad3e2</span></span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token selector">.triangle-top </span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token property-declaration"><span class="token property">border-left</span> <span class="token number">4</span><span class="token unit">px</span> solid <span class="token hexcode">#4ad3e2</span></span></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token property-declaration"><span class="token property">border-top</span> <span class="token number">4</span><span class="token unit">px</span> solid <span class="token hexcode">#4ad3e2</span></span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token selector">.triangle-bottom </span></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token property-declaration"><span class="token property">border-right</span> <span class="token number">4</span><span class="token unit">px</span> solid <span class="token hexcode">#4ad3e2</span></span></pre></td></tr><tr><td data-num="21"></td><td><pre>  <span class="token property-declaration"><span class="token property">border-bottom</span> <span class="token number">4</span><span class="token unit">px</span> solid <span class="token hexcode">#4ad3e2</span></span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;预览效果&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#预览效果&quot;&gt;#&lt;/a&gt; 预览效果&lt;/h2&gt;
&lt;p&gt; 
&lt;style&gt;
  [class^=triangle] {
    margin: 50px auto;
    width: 20px;
    </summary>
      
    
    
    
    <category term="CSS" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/css/"/>
    
    <category term="CSS Demo" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/css/CSS-Demo/"/>
    
    
    <category term="CSS" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/CSS/"/>
    
    <category term="CSS Demo" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/CSS-Demo/"/>
    
  </entry>
  
  <entry>
    <title>进制转换</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2022/01/16/data-structures-and-algorithms/algorithm/problems/easy/HexBinDecOct/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2022/01/16/data-structures-and-algorithms/algorithm/problems/easy/HexBinDecOct/</id>
    <published>2022-01-16T06:49:39.000Z</published>
    <updated>2022-01-19T05:59:34.721Z</updated>
    
    <content type="html"><![CDATA[<h2 id="dec2bin-example"><a class="anchor" href="#dec2bin-example">#</a> Dec2Bin Example</h2><p><strong>Example 1:</strong></p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>输入：n = 10</pre></td></tr><tr><td data-num="2"></td><td><pre>输出：1010</pre></td></tr><tr><td data-num="3"></td><td><pre>解释：将十进制转换为二进制</pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>输入：n = 15</pre></td></tr><tr><td data-num="2"></td><td><pre>输出：1111</pre></td></tr><tr><td data-num="3"></td><td><pre>解释：将十进制转换为二进制</pre></td></tr></table></figure><h2 id="solving-ideas"><a class="anchor" href="#solving-ideas">#</a> Solving Ideas</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">dec2bin</span><span class="token punctuation">(</span><span class="token parameter">decNumber</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token comment">//decNumber > 0 停止循环</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">while</span> <span class="token punctuation">(</span>decNumber <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token comment">// 将每次取模的数存入栈中</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>decNumber <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token comment">// 同时向下取 / 2 的值 </span></pre></td></tr><tr><td data-num="11"></td><td><pre>    decNumber <span class="token operator">=</span> <span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span>decNumber <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token comment">// 将数组颠倒转换成字符串再强制转换为数字</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token keyword">return</span> <span class="token operator">+</span>stack<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">dec2bin</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="bin2dec-example"><a class="anchor" href="#bin2dec-example">#</a> Bin2Dec Example</h2><p><strong>Example 1:</strong></p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>输入：n = 1010</pre></td></tr><tr><td data-num="2"></td><td><pre>输出：10</pre></td></tr><tr><td data-num="3"></td><td><pre>解释：将二进制转换为十进制</pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>输入：n = 1111</pre></td></tr><tr><td data-num="2"></td><td><pre>输出：15</pre></td></tr><tr><td data-num="3"></td><td><pre>解释：将二进制转换为十进制</pre></td></tr></table></figure><h2 id="solving-ideas-2"><a class="anchor" href="#solving-ideas-2">#</a> Solving Ideas</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">bin2dec</span><span class="token punctuation">(</span><span class="token parameter">binNumber</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">// 将其切割成数组</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">(</span>binNumber <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">// edge case</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  stack<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">+</span>item <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Please enter the correct binary number'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token comment">// 用于记录数字位置的次方 从最后一位开始</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token keyword">let</span> pow <span class="token operator">=</span> stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> stack<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>      </pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token comment">// 如果数组中是 0, 就不必算</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>      stack<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">**</span> pow</pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    </pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token comment">// 递减</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    pow<span class="token operator">--</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>  </pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token comment">// 将数组元素依次相加</span></pre></td></tr><tr><td data-num="26"></td><td><pre>  stack<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> res <span class="token operator">+=</span> <span class="token operator">+</span>item<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre>  <span class="token keyword">return</span> res</pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;dec2bin-example&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#dec2bin-example&quot;&gt;#&lt;/a&gt; Dec2Bin Example&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;figure cla</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/data-structures-and-algorithms/"/>
    
    <category term="Easy" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/data-structures-and-algorithms/Easy/"/>
    
    
    <category term="数据结构与算法" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    <category term="Easy" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/Easy/"/>
    
  </entry>
  
  <entry>
    <title>CSS 边框滑块</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2022/01/15/css/CSS%20Demo/CSS%E8%BE%B9%E6%A1%86%E6%BB%91%E5%9D%97/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2022/01/15/css/CSS%20Demo/CSS%E8%BE%B9%E6%A1%86%E6%BB%91%E5%9D%97/</id>
    <published>2022-01-15T13:07:49.000Z</published>
    <updated>2022-04-08T12:54:07.633Z</updated>
    
    <content type="html"><![CDATA[<h2 id="预览效果"><a class="anchor" href="#预览效果">#</a> 预览效果</h2><p> <style>  body {  --bgc: #353b48;  background-color: var(--bgc);}.container {  display: flex;  flex-direction: row;  flex-wrap: wrap;  justify-content: space-around;  width: 100%;}.container .btn {  width: 35vw;  height: 60px;  border: 3px solid;  background: none;  color: var(--c);  cursor: pointer;  font-size: 16px;  font-width: 700;  margin: 20px;  position: relative;}.container .btn::before,.container .btn::after {  content: '';  position: absolute;  width: 14px;  height: 4px;  background-color: var(--bgc);  transform: skewX(30deg);  transition: .4s ease;}.container .btn::before {  top: -4px;  left: 10%;}.container .btn::after {  bottom: -4px;  right: 10%;}.container .btn:hover::before {  left: 80%}.container .btn:hover::after {  right: 80%;  /* animation: after 2s timing-function delay iteration-count direction fill-mode; */  animation: after 2s;}.container .btn:nth-child(1) {  --c: #4ad3e2}.container .btn:nth-child(2) {  --c: #93edd4}.container .btn:nth-child(3) {  --c: #f9cb8f}.container .btn:nth-child(4) {  --c: #ffb1a3}</style>    <div class="container">      <button class="btn">点赞</button>      <button class="btn">投币</button></button>      <button class="btn">收藏</button>      <button class="btn">分享</button></button>    </div></p><h2 id="html结构"><a class="anchor" href="#html结构">#</a> HTML 结构</h2><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点赞<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>投币<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>收藏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>分享<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><h2 id="css-样式"><a class="anchor" href="#css-样式">#</a> CSS 样式</h2><figure class="highlight css"><figcaption data-lang="CSS"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">body</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token property">--bgc</span><span class="token punctuation">:</span> #353b48<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--bgc<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token selector">.container</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token property">flex-direction</span><span class="token punctuation">:</span> row<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token property">justify-content</span><span class="token punctuation">:</span> space-around<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token selector">.container .btn</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token property">height</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token property">border</span><span class="token punctuation">:</span> 3px solid<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token property">background</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--c<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token property">font-size</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token property">font-width</span><span class="token punctuation">:</span> 700<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  <span class="token property">margin</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token selector">.container .btn::before,</pre></td></tr><tr><td data-num="25"></td><td><pre>.container .btn::after</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>  <span class="token property">width</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>  <span class="token property">height</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--bgc<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">skewX</span><span class="token punctuation">(</span>30deg<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>  <span class="token property">transition</span><span class="token punctuation">:</span> .4s ease<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token selector">.container .btn::before</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>  <span class="token property">top</span><span class="token punctuation">:</span> -4px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>  <span class="token property">left</span><span class="token punctuation">:</span> 10%<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token selector">.container .btn::after</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>  <span class="token property">bottom</span><span class="token punctuation">:</span> -4px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>  <span class="token property">right</span><span class="token punctuation">:</span> 10%<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token selector">.container .btn:hover::before</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>  <span class="token property">left</span><span class="token punctuation">:</span> 80%</pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token selector">.container .btn:hover::after</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>  <span class="token property">right</span><span class="token punctuation">:</span> 80%<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>  <span class="token comment">/* animation: after 2s timing-function delay iteration-count direction fill-mode; */</span></pre></td></tr><tr><td data-num="48"></td><td><pre>  <span class="token property">animation</span><span class="token punctuation">:</span> after 2s<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token selector">.container .btn:nth-child(1)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>  <span class="token property">--c</span><span class="token punctuation">:</span> #4ad3e2</pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token selector">.container .btn:nth-child(2)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>  <span class="token property">--c</span><span class="token punctuation">:</span> #93edd4</pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token selector">.container .btn:nth-child(3)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>  <span class="token property">--c</span><span class="token punctuation">:</span> #f9cb8f</pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token selector">.container .btn:nth-child(4)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>  <span class="token property">--c</span><span class="token punctuation">:</span> #ffb1a3</pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="stylus-样式"><a class="anchor" href="#stylus-样式">#</a> Stylus 样式</h2><ul><li><code>stylus index.styl -o  index.css  -w</code></li></ul><figure class="highlight stylus"><figcaption data-lang="stylus"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">body </span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token property-declaration"><span class="token property">--bgc</span> <span class="token hexcode">#353b48</span></span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token property-declaration"><span class="token property">background-color</span> <span class="token func"><span class="token function">var</span><span class="token punctuation">(</span><span class="token operator">-</span>-bgc<span class="token punctuation">)</span></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token selector">.container </span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token property-declaration"><span class="token property">display</span> flex</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token property-declaration"><span class="token property">flex-direction</span> row</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token property-declaration"><span class="token property">flex-wrap</span> wrap</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token property-declaration"><span class="token property">justify-content</span> space-around</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token property-declaration"><span class="token property">width</span> <span class="token number">500</span><span class="token unit">px</span> </span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token selector">.btn </span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token property-declaration"><span class="token property">width</span> <span class="token number">200</span><span class="token unit">px</span></span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token property-declaration"><span class="token property">height</span> <span class="token number">60</span><span class="token unit">px</span></span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token property-declaration"><span class="token property">border</span> <span class="token number">3</span><span class="token unit">px</span> solid</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token property-declaration"><span class="token property">background</span> none</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token property-declaration"><span class="token property">color</span> <span class="token func"><span class="token function">var</span><span class="token punctuation">(</span><span class="token operator">-</span>-c<span class="token punctuation">)</span></span></span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token property-declaration"><span class="token property">cursor</span> pointer</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token property-declaration"><span class="token property">font-size</span> <span class="token number">16</span><span class="token unit">px</span></span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token property-declaration"><span class="token property">font-width</span> <span class="token number">700</span></span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token property-declaration"><span class="token property">margin</span> <span class="token number">20</span><span class="token unit">px</span></span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token property-declaration"><span class="token property">position</span> relative</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token selector">.btn::before<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="24"></td><td><pre>  .btn::after </span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token property-declaration"><span class="token property">content</span> <span class="token string">''</span></span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token property-declaration"><span class="token property">position</span> absolute</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token property-declaration"><span class="token property">width</span> <span class="token number">14</span><span class="token unit">px</span></span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token property-declaration"><span class="token property">height</span> <span class="token number">4</span><span class="token unit">px</span></span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token property-declaration"><span class="token property">background-color</span> <span class="token func"><span class="token function">var</span><span class="token punctuation">(</span><span class="token operator">-</span>-bgc<span class="token punctuation">)</span></span></span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token property-declaration"><span class="token property">transform</span> <span class="token func"><span class="token function">skewX</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token unit">deg</span><span class="token punctuation">)</span></span></span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token property-declaration"><span class="token property">transition</span> <span class="token number">.4</span><span class="token unit">s</span> ease</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre>  <span class="token selector">.btn::before </span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token property-declaration"><span class="token property">top</span> <span class="token number">-4</span><span class="token unit">px</span></span></pre></td></tr><tr><td data-num="35"></td><td><pre>    <span class="token property-declaration"><span class="token property">left</span> <span class="token number">10</span><span class="token unit">%</span></span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre>  <span class="token selector">.btn::after </span></pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token property-declaration"><span class="token property">bottom</span> <span class="token number">-4</span><span class="token unit">px</span></span></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token property-declaration"><span class="token property">right</span> <span class="token number">10</span><span class="token unit">%</span></span></pre></td></tr><tr><td data-num="40"></td><td><pre></pre></td></tr><tr><td data-num="41"></td><td><pre>  <span class="token selector">.btn:hover::before </span></pre></td></tr><tr><td data-num="42"></td><td><pre>    <span class="token property-declaration"><span class="token property">left</span> <span class="token number">80</span><span class="token unit">%</span></span></pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre>  <span class="token selector">.btn:hover::after </span></pre></td></tr><tr><td data-num="45"></td><td><pre>    <span class="token property-declaration"><span class="token property">right</span> <span class="token number">80</span><span class="token unit">%</span></span></pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token comment">/* animation after 2s timing-function delay iteration-count direction fill-mode */</span></pre></td></tr><tr><td data-num="47"></td><td><pre>    <span class="token property-declaration"><span class="token property">animation</span> after <span class="token number">2</span><span class="token unit">s</span></span></pre></td></tr><tr><td data-num="48"></td><td><pre>  </pre></td></tr><tr><td data-num="49"></td><td><pre>  <span class="token selector">.btn:nth-child(1) </span></pre></td></tr><tr><td data-num="50"></td><td><pre>    <span class="token property-declaration"><span class="token property">--c</span> <span class="token hexcode">#4ad3e2</span></span></pre></td></tr><tr><td data-num="51"></td><td><pre></pre></td></tr><tr><td data-num="52"></td><td><pre>  <span class="token selector">.btn:nth-child(2) </span></pre></td></tr><tr><td data-num="53"></td><td><pre>    <span class="token property-declaration"><span class="token property">--c</span> <span class="token hexcode">#93edd4</span></span></pre></td></tr><tr><td data-num="54"></td><td><pre></pre></td></tr><tr><td data-num="55"></td><td><pre>  <span class="token selector">.btn:nth-child(3) </span></pre></td></tr><tr><td data-num="56"></td><td><pre>    <span class="token property-declaration"><span class="token property">--c</span> <span class="token hexcode">#f9cb8f</span></span></pre></td></tr><tr><td data-num="57"></td><td><pre></pre></td></tr><tr><td data-num="58"></td><td><pre>  <span class="token selector">.btn:nth-child(4) </span></pre></td></tr><tr><td data-num="59"></td><td><pre>    <span class="token property-declaration"><span class="token property">--c</span> <span class="token hexcode">#ffb1a3</span></span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;预览效果&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#预览效果&quot;&gt;#&lt;/a&gt; 预览效果&lt;/h2&gt;
&lt;p&gt; 
&lt;style&gt;
  body {
  --bgc: #353b48;
  background-color: var(--bgc);
}
.cont</summary>
      
    
    
    
    <category term="CSS" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/css/"/>
    
    <category term="CSS Demo" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/css/CSS-Demo/"/>
    
    
    <category term="CSS" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/CSS/"/>
    
    <category term="CSS Demo" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/CSS-Demo/"/>
    
  </entry>
  
  <entry>
    <title>计算力扣银行的钱</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2022/01/15/data-structures-and-algorithms/algorithm/problems/easy/calculate-money-in-leetcode-bank/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2022/01/15/data-structures-and-algorithms/algorithm/problems/easy/calculate-money-in-leetcode-bank/</id>
    <published>2022-01-15T10:27:49.000Z</published>
    <updated>2022-01-19T05:59:30.007Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言声明"><a class="anchor" href="#前言声明">#</a> 前言声明</h2><p>来源：力扣（LeetCode）<br />链接：<span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvY2FsY3VsYXRlLW1vbmV5LWluLWxlZXRjb2RlLWJhbms=">https://leetcode-cn.com/problems/calculate-money-in-leetcode-bank</span></p><h2 id="计算力扣银行的钱"><a class="anchor" href="#计算力扣银行的钱">#</a> 计算力扣银行的钱</h2><ul><li>Hercy 想要为购买第一辆车存钱。他 每天 都往力扣银行里存钱。</li><li>最开始，他在周一的时候存入 1 块钱。从周二到周日，他每天都比前一天多存入 1 块钱。在接下来每一个周一，他都会比 前一个周一 多存入 1 块钱。</li><li>给你 n 天，请你返回在第 n 天结束的时候他在力扣银行总共存了多少块钱。</li></ul><h2 id="example"><a class="anchor" href="#example">#</a> Example</h2><p><strong>Example 1:</strong></p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>输入：n = 4</pre></td></tr><tr><td data-num="2"></td><td><pre>输出：10</pre></td></tr><tr><td data-num="3"></td><td><pre>解释：第 4 天后，总额为 1 + 2 + 3 + 4 = 10 。</pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>输入：n = 10</pre></td></tr><tr><td data-num="2"></td><td><pre>输出：37</pre></td></tr><tr><td data-num="3"></td><td><pre>解释：第 10 天后，总额为 (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4) = 37 。注意到第二个星期一，Hercy 存入 2 块钱。</pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>输入：n = 20</pre></td></tr><tr><td data-num="2"></td><td><pre>输出：96</pre></td></tr><tr><td data-num="3"></td><td><pre>解释：第 20 天后，总额为 (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4 + 5 + 6 + 7 + 8) + (3 + 4 + 5 + 6 + 7 + 8) = 96 。</pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 1000</code></li></ul><h2 id="solving-ideas"><a class="anchor" href="#solving-ideas">#</a> Solving Ideas</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> <span class="token function-variable function">totalMoney</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">// 每周一的钱</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">let</span> WeekStartMoney <span class="token operator">=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">// 一周 0-6 表示 配合 WeekStartMoney 实现每天递增一元和每周一起始钱加 1</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">let</span> dayMoney <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token comment">// 保存结果</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  </pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    res <span class="token operator">+=</span> WeekStartMoney <span class="token operator">+</span> dayMoney</pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token operator">++</span>dayMoney</pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token comment">// 如果等于 7 代表是第二个星期 </span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dayMoney <span class="token operator">===</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>      <span class="token comment">// 起始钱 + 1</span></pre></td></tr><tr><td data-num="18"></td><td><pre>      WeekStartMoney<span class="token operator">++</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>      <span class="token comment">// 初始为周一</span></pre></td></tr><tr><td data-num="21"></td><td><pre>      dayMoney <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>      </pre></td></tr><tr><td data-num="24"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token keyword">return</span> res</pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token function">totalMoney</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span> <span class="token comment">// 63</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token function">totalMoney</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment">// 96</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言声明&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#前言声明&quot;&gt;#&lt;/a&gt; 前言声明&lt;/h2&gt;
&lt;p&gt;来源：力扣（LeetCode）&lt;br /&gt;
链接：&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9sZWV0Y29k</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/data-structures-and-algorithms/"/>
    
    <category term="Easy" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/data-structures-and-algorithms/Easy/"/>
    
    
    <category term="数据结构与算法" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    <category term="Easy" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/Easy/"/>
    
  </entry>
  
  <entry>
    <title>两数之和</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2022/01/15/data-structures-and-algorithms/algorithm/problems/easy/two-sum/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2022/01/15/data-structures-and-algorithms/algorithm/problems/easy/two-sum/</id>
    <published>2022-01-15T09:22:25.000Z</published>
    <updated>2022-01-19T05:59:37.871Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言声明"><a class="anchor" href="#前言声明">#</a> 前言声明</h2><ul><li>来源：力扣（LeetCode）</li><li>链接：<span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdHdvLXN1bQ==">https://leetcode-cn.com/problems/two-sum</span></li></ul><h2 id="两数之和"><a class="anchor" href="#两数之和">#</a> 两数之和</h2><ul><li><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。</p></li><li><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p></li><li><p>你可以按任意顺序返回答案。</p></li></ul><p>Example 1:</p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>输入：nums = <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target = 10</pre></td></tr><tr><td data-num="2"></td><td><pre>输出：<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre>解释：因为 nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> + nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> == 10 ，返回 <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span></pre></td></tr></table></figure><p>Example 2:</p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>输入：nums = <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target = 7</pre></td></tr><tr><td data-num="2"></td><td><pre>输出：<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre>解释：因为 nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> + nums<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> == 7 ，返回 <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span></pre></td></tr></table></figure><p>提示：</p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>2 &lt;= nums.length &lt;= 104</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">-</span>109 &lt;= nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> &lt;= 109</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">-</span>109 &lt;= target &lt;= 109</pre></td></tr><tr><td data-num="4"></td><td><pre>只会存在一个有效答案</pre></td></tr></table></figure><ul><li>进阶：你可以想出一个时间复杂度小于 O (n2) 的算法吗？</li></ul><h2 id="solving-ideas"><a class="anchor" href="#solving-ideas">#</a> Solving Ideas</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> <span class="token function-variable function">twoSum</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">// 用于保存遍历过的数据</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">const</span> hash <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">// 遍历数组</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token comment">// 判断 hash 中第二个值是否存在数组中  </span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>hash<span class="token punctuation">[</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>      <span class="token comment">// 一旦存在就返回最近符合的数组下标</span></pre></td></tr><tr><td data-num="12"></td><td><pre>     <span class="token keyword">return</span> <span class="token punctuation">[</span>hash<span class="token punctuation">[</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token comment">// 将遍历过的元素以 key:value 保存在 hash 中</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    hash<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i</pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    </pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token comment">// 没有找到就返回空数组</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment">// [2, 3]</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span> <span class="token comment">// []</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言声明&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#前言声明&quot;&gt;#&lt;/a&gt; 前言声明&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;来源：力扣（LeetCode）&lt;/li&gt;
&lt;li&gt;链接：&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/data-structures-and-algorithms/"/>
    
    <category term="Easy" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/data-structures-and-algorithms/Easy/"/>
    
    
    <category term="数据结构与算法" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    <category term="Easy" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/Easy/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 实现 Snabbdom 库</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2022/01/01/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/vue-source-code-analysis/snabbdom/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2022/01/01/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/vue-source-code-analysis/snabbdom/</id>
    <published>2022-01-01T04:33:52.000Z</published>
    <updated>2022-02-23T09:52:39.252Z</updated>
    
    <content type="html"><![CDATA[<h2 id="diff-算法"><a class="anchor" href="#diff-算法">#</a> diff 算法</h2><ul><li><p>diff 算法可以进行精细化对比，实现最小量更新</p></li><li><p><strong>虚拟节点变成 DOM 节点</strong>在 diff 中可以做到</p></li><li><p>新虚拟 DOM 和旧虚拟 DOM 进行 diff (精细化比较)，算出应该如何最小量更新，最后反映到真正的 DOM 上</p></li></ul><h2 id="snabbdom"><a class="anchor" href="#snabbdom">#</a> snabbdom</h2><ul><li><code>snabbdom</code>  (瑞典语，“速度”) 是著名的虚拟 DOM 库，是 diff 算法的鼻祖</li><li><span class="exturl" data-url="aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT1WdWUmYW1wO3NwbT0xMDAxLjIxMDEuMzAwMS43MDIw">Vue</span> 源码借鉴了 <code>snabbdom</code></li><li>源码使用 TypeScript 写的 https://github.com/snabbdom/snabbdom</li><li>从 npm 下载的是 build 出来的 JavaScript 版本</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"><span>npm</span></figcaption><table><tr><td data-num="1"></td><td><pre>npm install <span class="token operator">-</span><span class="token constant">D</span> snabbdom</pre></td></tr></table></figure><h2 id="环境配置"><a class="anchor" href="#环境配置">#</a> 环境配置</h2><ul><li><code>安装snabbdom</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"><span>npm</span></figcaption><table><tr><td data-num="1"></td><td><pre>npm install <span class="token operator">-</span><span class="token constant">S</span> snabbdom</pre></td></tr></table></figure><ul><li>安装并配置，安装不了或慢用 <code>cnpm</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>npm i <span class="token operator">-</span><span class="token constant">D</span> webpack@<span class="token number">5</span> webpack<span class="token operator">-</span>cli@<span class="token number">3</span> webpack<span class="token operator">-</span>dev<span class="token operator">-</span>server@<span class="token number">3</span></pre></td></tr></table></figure><ul><li>​ <code>package.json</code></li></ul><figure class="highlight json"><figcaption data-lang="JSON"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"snabbdom"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"vue.js"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"webpack-dev-server"</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"ISC"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token property">"snabbdom"</span><span class="token operator">:</span> <span class="token string">"^3.3.1"</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token property">"webpack"</span><span class="token operator">:</span> <span class="token string">"^5.11.0"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token property">"webpack-cli"</span><span class="token operator">:</span> <span class="token string">"^3.3.12"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token property">"webpack-dev-server"</span><span class="token operator">:</span> <span class="token string">"^3.11.3"</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li><code>webpack.config.js</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">//webpack5 不用配置 mode</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token comment">// 入口</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">"./src/index.js"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">// 出口</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token comment">// 虚拟打包路径，文件夹不会真正生成，而是在 8080 端口虚拟生成</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token literal-property property">publicPath</span><span class="token operator">:</span> <span class="token string">"/dist/"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token comment">// 打包出来的文件名</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'bundle.js'</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token comment">// 配置 webpack-dev-server</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token comment">// 静态根目录</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token literal-property property">contentBase</span><span class="token operator">:</span> <span class="token string">'dist'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token comment">// 端口号</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">8080</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="example"><a class="anchor" href="#example">#</a> Example</h2><ul><li>这是官方的例子， 我已经克隆过来了</li><li>注意在 <code>index.html</code>  里面加一个 <code>id='container'</code>  的标签并引入 <code>dist/bundle.js</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  init<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  classModule<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  propsModule<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  styleModule<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  eventListenersModule<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  h<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"snabbdom"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">const</span> patch <span class="token operator">=</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">[</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token comment">// Init patch function with chosen modules</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  classModule<span class="token punctuation">,</span> <span class="token comment">// makes it easy to toggle classes</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  propsModule<span class="token punctuation">,</span> <span class="token comment">// for setting properties on DOM elements</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  styleModule<span class="token punctuation">,</span> <span class="token comment">// handles styling on elements with support for animations</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  eventListenersModule<span class="token punctuation">,</span> <span class="token comment">// attaches event listeners</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">const</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"container"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">"div#container.two.classes"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">on</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token function-variable function">click</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">style</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">fontWeight</span><span class="token operator">:</span> <span class="token string">"bold"</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"This is bold"</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="22"></td><td><pre>  <span class="token string">" and this is just normal text"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">href</span><span class="token operator">:</span> <span class="token string">"/foo"</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"I'll take you places!"</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token comment">// Patch into empty DOM element – this modifies the DOM as a side effect</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token function">patch</span><span class="token punctuation">(</span>container<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">const</span> newVnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="29"></td><td><pre>  <span class="token string">"div#container.two.classes"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="30"></td><td><pre>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">on</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token function-variable function">click</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="31"></td><td><pre>  <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token function">h</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="33"></td><td><pre>      <span class="token string">"span"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="34"></td><td><pre>      <span class="token punctuation">&#123;</span> <span class="token literal-property property">style</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">fontWeight</span><span class="token operator">:</span> <span class="token string">"normal"</span><span class="token punctuation">,</span> <span class="token literal-property property">fontStyle</span><span class="token operator">:</span> <span class="token string">"italic"</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="35"></td><td><pre>      <span class="token string">"This is now italic type"</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token string">" and this is still just normal text"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">href</span><span class="token operator">:</span> <span class="token string">"/bar"</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"I'll take you places!"</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="39"></td><td><pre>  <span class="token punctuation">]</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token comment">// Second `patch` invocation</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token function">patch</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> newVnode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Snabbdom efficiently updates the old view to the new state</span></pre></td></tr></table></figure><ul><li>出现这句给代表成功了： <code>This is now italic type* and this is still just normal text[I'll take you places!](http://127.0.0.1:8080/bar)</code></li></ul><h2 id="snabbdom-h-函数使用"><a class="anchor" href="#snabbdom-h-函数使用">#</a> snabbdom h 函数使用</h2><ul><li>h 函数用来产生 <code>虚拟节点(vnode)</code></li><li>比如这样调用 h 函数</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 1. 创建 patch 函数</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> patch <span class="token operator">=</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">[</span>init<span class="token punctuation">,</span> classModule<span class="token punctuation">,</span> propsModule<span class="token punctuation">,</span> styleModule<span class="token punctuation">,</span> </pre></td></tr><tr><td data-num="3"></td><td><pre>eventListenersModule<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 2. 创建 h 虚拟节点 函数 写法 1</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token literal-property property">href</span><span class="token operator">:</span> <span class="token string">'https:nekoaimer.com'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">'_blank'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token punctuation">&#125;</span> </pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'Hello World'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">// 3. 让虚拟节点上树</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">const</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#container'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token function">patch</span><span class="token punctuation">(</span>container<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token comment">// 当然还有很多写法， 不过注意 h 函数在有两个参数时才可以直接写 h 函数或文本</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment">// 写法 2</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">// const vnode = h('a', h('span', '233'))</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token comment">// 写法 3</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token comment">// const vnode = h('a', [h('span', '111'), h('span', '222'), h('span', '333')])</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token comment">// 写法 4</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token comment">// const vnode = h('a', [h('span', '111'), h('span',  [h('span', '222')])])</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token comment">/* 写法 5</pre></td></tr><tr><td data-num="29"></td><td><pre>const vnode1 = h ('head', ' 我是 head')</pre></td></tr><tr><td data-num="30"></td><td><pre>const vnode2 = h ('div', ' 我是 div')</pre></td></tr><tr><td data-num="31"></td><td><pre>const vnode3 = h ('span', h ('a', ' 我是 span 中的 a'))</pre></td></tr><tr><td data-num="32"></td><td><pre>const vnode4 = h ('main', [vnode1,vnode2,vnode3])</pre></td></tr><tr><td data-num="33"></td><td><pre>*/</span></pre></td></tr></table></figure><ul><li>只有真正了解实现原理，才能灵活应用它！所以我们接下来实现一个 h 函数！</li></ul><h2 id="实现-snabbdom-思路图流程"><a class="anchor" href="#实现-snabbdom-思路图流程">#</a> 实现 snabbdom 思路图流程</h2><ul><li>这里我分享下我实现 <code>mini-snabbdom</code>  的思路流程图</li></ul><p><img data-src="snabbdom-Flow-chart.png" alt="snabbdom-Flow-chart" /></p><h2 id="实现-h-函数"><a class="anchor" href="#实现-h-函数">#</a> 实现 h 函数</h2><ul><li>这里我又写封装了两个功能函数<ul><li><code>is</code>  函数</li><li><code>objectFlat</code>  函数</li></ul></li><li>另外引用的 <code>vnode</code>  函数用于将参数以对象形式返回</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> vnode <span class="token keyword">from</span> <span class="token string">"./vnode.js"</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> is <span class="token keyword">from</span> <span class="token string">'./utils/is.js'</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> objectFlat <span class="token keyword">from</span> <span class="token string">'./utils/objectFlat.js'</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token parameter">sel<span class="token punctuation">,</span> data<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">let</span> text</pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token keyword">let</span> children <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token comment">// 1. 判断只有一个参数时 data 返回空对象 c 返回空数组</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>      data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token comment">// 2. 参数只有两个时的情况</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token comment">// 2.1 如果第二个参数为 String 或 Number 类型</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">||</span> is<span class="token punctuation">.</span><span class="token function">Number</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>      text <span class="token operator">=</span> data</pre></td></tr><tr><td data-num="19"></td><td><pre>      data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token comment">// 2.2 如果参数为数组时</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">Array</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>      <span class="token comment">// 2.2.1 遍历数组中元素</span></pre></td></tr><tr><td data-num="25"></td><td><pre>      <span class="token keyword">let</span> cSel <span class="token operator">=</span> sel</pre></td></tr><tr><td data-num="26"></td><td><pre>      <span class="token comment">// 2.2.2 如果数组最后一项以 $ 开头则默认为子元素标签</span></pre></td></tr><tr><td data-num="27"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>data<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        cSel <span class="token operator">=</span> data<span class="token punctuation">[</span>data<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        data<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>      </pre></td></tr><tr><td data-num="32"></td><td><pre>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token comment">// 2.2.3 如果数组中元素为文本时</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> is<span class="token punctuation">.</span><span class="token function">Number</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>          children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">sel</span><span class="token operator">:</span> cSel<span class="token punctuation">,</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token literal-property property">text</span><span class="token operator">:</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token literal-property property">elm</span><span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre>        <span class="token comment">// 2.2.4 如果参数为对象时 且 有 props 属性时 </span></pre></td></tr><tr><td data-num="39"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">Object</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>props<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>          <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>$isObjFlat<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="41"></td><td><pre>            data <span class="token operator">=</span> <span class="token function">objectFlat</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="42"></td><td><pre>          </pre></td></tr><tr><td data-num="43"></td><td><pre>          children <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="44"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>        </pre></td></tr><tr><td data-num="46"></td><td><pre>        <span class="token comment">// 2.2.5 没有 props 属性时 代表 data 中是子元素数组而不是 data 对象</span></pre></td></tr><tr><td data-num="47"></td><td><pre>        <span class="token keyword">else</span> </pre></td></tr><tr><td data-num="48"></td><td><pre>          children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="49"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="50"></td><td><pre></pre></td></tr><tr><td data-num="51"></td><td><pre>      <span class="token comment">// 2.3 如果 children 有长度代表是子元素那么 data 中就应该是空对象 因为这是两个参数的判断</span></pre></td></tr><tr><td data-num="52"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span>children<span class="token punctuation">.</span>length<span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="53"></td><td><pre>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="56"></td><td><pre></pre></td></tr><tr><td data-num="57"></td><td><pre>  <span class="token comment">// 3. 三个参数都有时的情况下</span></pre></td></tr><tr><td data-num="58"></td><td><pre>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>    <span class="token comment">// 3.1 且第二个参数为对象的情况 是否需要 flat 对象 添加属性 $isObjFlat: true</span></pre></td></tr><tr><td data-num="60"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">Object</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">.</span>$isObjFlat<span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="61"></td><td><pre>      data <span class="token operator">=</span> <span class="token function">objectFlat</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="62"></td><td><pre>      </pre></td></tr><tr><td data-num="63"></td><td><pre>    <span class="token comment">// 3.2 如果第三个参数为 String 或 Number 类型</span></pre></td></tr><tr><td data-num="64"></td><td><pre>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">||</span> is<span class="token punctuation">.</span><span class="token function">Number</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="65"></td><td><pre>      text <span class="token operator">=</span> c</pre></td></tr><tr><td data-num="66"></td><td><pre></pre></td></tr><tr><td data-num="67"></td><td><pre>    <span class="token comment">// 3.3 如果第三个参数为数组 则代表里面应该都是 h 函数 进行遍历数组</span></pre></td></tr><tr><td data-num="68"></td><td><pre>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">Array</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>      <span class="token comment">// 3.3.1 如果数组最 h 后一项以 $ 开头则默认成为所有的子元素标签 否则依据父元素标签 但需满足 3.2.2 的情况</span></pre></td></tr><tr><td data-num="70"></td><td><pre>      <span class="token keyword">let</span> cSel <span class="token operator">=</span> sel</pre></td></tr><tr><td data-num="71"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>c<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="72"></td><td><pre>        cSel <span class="token operator">=</span> c<span class="token punctuation">[</span>c<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="73"></td><td><pre>        c<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="74"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="75"></td><td><pre></pre></td></tr><tr><td data-num="76"></td><td><pre>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> c<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="77"></td><td><pre>        <span class="token comment">// 3.3.2 继上面如果第三参数数组中元素为 String 或 Number 类型</span></pre></td></tr><tr><td data-num="78"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> is<span class="token punctuation">.</span><span class="token function">Number</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="79"></td><td><pre>          children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">sel</span><span class="token operator">:</span> cSel<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token literal-property property">text</span><span class="token operator">:</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token literal-property property">elm</span><span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="80"></td><td><pre></pre></td></tr><tr><td data-num="81"></td><td><pre>        <span class="token comment">// 3.3.3 如果第三参数数组中也存在数组</span></pre></td></tr><tr><td data-num="82"></td><td><pre>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">Array</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="83"></td><td><pre>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">数组中不可嵌套数组</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="84"></td><td><pre>        </pre></td></tr><tr><td data-num="85"></td><td><pre>        <span class="token comment">// 3.3.4 如果第三参数数组中为对象类型 则必然应该是 h 函数</span></pre></td></tr><tr><td data-num="86"></td><td><pre>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">Object</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">?.</span>sel<span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="87"></td><td><pre>          children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="88"></td><td><pre>        </pre></td></tr><tr><td data-num="89"></td><td><pre>        <span class="token keyword">else</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'children参数里面只能全部为字符串数字或全部是h函数'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="90"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="91"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="92"></td><td><pre></pre></td></tr><tr><td data-num="93"></td><td><pre>    <span class="token comment">// 3.4 如果第三个参数为对象 则代表里面都是 h 函数 进行遍历数组</span></pre></td></tr><tr><td data-num="94"></td><td><pre>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">Object</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </pre></td></tr><tr><td data-num="95"></td><td><pre>      <span class="token comment">// 3.5 如果存在 sel 属性代表是 h 函数 追加到 children 中当子元素</span></pre></td></tr><tr><td data-num="96"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">?.</span>sel<span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="97"></td><td><pre>        children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="98"></td><td><pre></pre></td></tr><tr><td data-num="99"></td><td><pre>      <span class="token comment">// 3.6 如果是普通对象则当成属性与 data 结合 data 中存在相同属性名会被后者覆盖</span></pre></td></tr><tr><td data-num="100"></td><td><pre>      <span class="token keyword">else</span> </pre></td></tr><tr><td data-num="101"></td><td><pre>        data <span class="token operator">=</span> <span class="token function">objectFlat</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> data<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="102"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="103"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="104"></td><td><pre></pre></td></tr><tr><td data-num="105"></td><td><pre>  <span class="token comment">// 4. 返回 vnode</span></pre></td></tr><tr><td data-num="106"></td><td><pre>  <span class="token keyword">return</span> <span class="token function">vnode</span><span class="token punctuation">(</span>sel<span class="token punctuation">,</span> data<span class="token punctuation">,</span> children<span class="token punctuation">,</span> text<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="107"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li><p>下面说明下我实现的 <code>h</code>  函数它的功能</p></li><li><p>如果只传了一个参数时它的结构</p></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">&#123;</span><span class="token literal-property property">sel</span><span class="token operator">:</span> <span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token literal-property property">elm</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>如果传如了两个参数时它的结构<ul><li>当第二个参数是普通文本，则会将文本类容放入 <code>text</code>  中</li><li>当第二个参数是数组是</li></ul></li></ul><h2 id="vnode-函数"><a class="anchor" href="#vnode-函数">#</a> vnode 函数</h2><ul><li>函数的功能主要是把传入的 5 个参数组合成对象返回</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">vnode</span><span class="token punctuation">(</span><span class="token parameter">sel<span class="token punctuation">,</span> data<span class="token punctuation">,</span> children<span class="token punctuation">,</span> text<span class="token punctuation">,</span> elm</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">const</span> key <span class="token operator">=</span> data<span class="token operator">?.</span>key</pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    sel<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    data<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    children<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    text<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    elm<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    key</pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="is-函数"><a class="anchor" href="#is-函数">#</a> is 函数</h2><ul><li>主要是用来判断类型的</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token literal-property property">Array</span><span class="token operator">:</span> Array<span class="token punctuation">.</span>isArray<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token function-variable function">String</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'[object String]'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token function-variable function">Number</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'[object Number]'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token function-variable function">Function</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'[object Function]'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token function-variable function">Object</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'[object Object]'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token function-variable function">toString</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="objectflat-函数"><a class="anchor" href="#objectflat-函数">#</a> objectFlat 函数</h2><ul><li>这个函数作用于将多维对象转为一维对象</li><li>如果不是 <code>attributiveJudgment</code>  中属性，其余名字的属性都会被降至一维保存到 <code>data.chaoticProps</code>  中</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> is <span class="token keyword">from</span> <span class="token string">'./is.js'</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 类型判断</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">function</span> <span class="token function">typeJudge</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">return</span> is<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[object </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>type<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">]</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// 判断指定属性名无需降维</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">function</span> <span class="token function">attributiveJudgment</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token keyword">return</span> <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    key <span class="token operator">==</span> <span class="token string">'attributes'</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token operator">||</span> key <span class="token operator">==</span> <span class="token string">'props'</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token operator">||</span> key <span class="token operator">==</span> <span class="token string">'class'</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token operator">||</span> key <span class="token operator">==</span> <span class="token string">'dataset'</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token operator">||</span> key <span class="token operator">==</span> <span class="token string">'on'</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token operator">||</span> key <span class="token operator">==</span> <span class="token string">'style'</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token operator">||</span> key <span class="token operator">==</span> <span class="token string">'key'</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token comment">// 将对象降至一维</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">objectFlat</span><span class="token punctuation">(</span><span class="token parameter">oldObj<span class="token punctuation">,</span> chaoticProps <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>  <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>chaoticProps<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'&#123;&#125;'</span> <span class="token operator">?</span> data<span class="token punctuation">.</span>chaoticProps <span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token comment">// 如果为数组进行遍历递归</span></pre></td></tr><tr><td data-num="26"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">typeJudge</span><span class="token punctuation">(</span>oldObj<span class="token punctuation">,</span> <span class="token string">'Array'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="27"></td><td><pre>    oldObj<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">obj</span> <span class="token operator">=></span> <span class="token function">objectFlat</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> data<span class="token punctuation">.</span>chaoticProps<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre>  </pre></td></tr><tr><td data-num="29"></td><td><pre>  <span class="token comment">// 如果为对象进行取值</span></pre></td></tr><tr><td data-num="30"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">typeJudge</span><span class="token punctuation">(</span>oldObj<span class="token punctuation">,</span> <span class="token string">'Object'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token comment">// 遍历对象</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> oldObj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">attributiveJudgment</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="35"></td><td><pre>        data<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> oldObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre>      <span class="token comment">// 如果对象存在 key</span></pre></td></tr><tr><td data-num="38"></td><td><pre>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldObj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>        <span class="token comment">// 取出 key 的值</span></pre></td></tr><tr><td data-num="40"></td><td><pre>        <span class="token keyword">let</span> val <span class="token operator">=</span> oldObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="41"></td><td><pre></pre></td></tr><tr><td data-num="42"></td><td><pre>        <span class="token comment">// 如果 key 的值不为数组或对象直接往新对象添加数组与值</span></pre></td></tr><tr><td data-num="43"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">typeJudge</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> <span class="token string">'Array'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">typeJudge</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> <span class="token string">'Object'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="44"></td><td><pre>        chaoticProps<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val</pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre>        <span class="token comment">// 否则继续递归</span></pre></td></tr><tr><td data-num="47"></td><td><pre>        <span class="token keyword">else</span> </pre></td></tr><tr><td data-num="48"></td><td><pre>          <span class="token function">objectFlat</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> data<span class="token punctuation">.</span>chaoticProps<span class="token punctuation">,</span> data<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="49"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>  <span class="token comment">// 将降维的对象都放在 data.chaoticProps 中</span></pre></td></tr><tr><td data-num="53"></td><td><pre>  data<span class="token punctuation">.</span>chaoticProps <span class="token operator">=</span> chaoticProps</pre></td></tr><tr><td data-num="54"></td><td><pre>  <span class="token keyword">return</span> data</pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="createelement-函数"><a class="anchor" href="#createelement-函数">#</a> createElement 函数</h2><ul><li>主要作用将 vnode 虚拟节点创建为 DOM 节点 <code>并可以添加对应的属性、事件和样式等</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> is <span class="token keyword">from</span> <span class="token string">"./utils/is"</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> objectFlat <span class="token keyword">from</span> <span class="token string">"./utils/objectFlat"</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token parameter">vnode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">// 1. 根据 vnode.sel 创建对应的 DOM 标签节点</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">const</span> domNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>sel<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token comment">// 2. 获得 data 进行属性操作</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">objectFlat</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>data<span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token comment">// 2.1 设置 dom 元素的属性，使用 setAttribute ()</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>attributes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">const</span> attributes <span class="token operator">=</span> data<span class="token punctuation">.</span>attributes</pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> attributes<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>      domNode<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> attributes<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token comment">// 2.2 和 attributes 模块类似，设置 dom 的属性，但是是以 element [attr] = value 的形式设置的</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>props<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">const</span> props <span class="token operator">=</span> data<span class="token punctuation">.</span>props</pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> props<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>      domNode<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> props<span class="token punctuation">[</span>key<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="23"></td><td><pre>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>domNode<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token comment">// 2.3 类样式</span></pre></td></tr><tr><td data-num="28"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>class<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token keyword">const</span> klass <span class="token operator">=</span> data<span class="token punctuation">.</span>class</pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token class-name">let</span> classMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> klass<span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="32"></td><td><pre>      classMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> klass<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    </pre></td></tr><tr><td data-num="34"></td><td><pre>    classMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> val<span class="token punctuation">,</span> map</span><span class="token punctuation">)</span> <span class="token operator">=></span> domNode<span class="token punctuation">.</span>className <span class="token operator">+=</span> <span class="token string">' '</span> <span class="token operator">+</span> val<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre>  <span class="token comment">// 2.4 设置 data-* 的自定义属性</span></pre></td></tr><tr><td data-num="38"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token keyword">const</span> dataset <span class="token operator">=</span> data<span class="token punctuation">.</span>dataset</pre></td></tr><tr><td data-num="40"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> dataset<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="41"></td><td><pre>      domNode<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> dataset<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="42"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre>  <span class="token comment">// 2.5 注册事件</span></pre></td></tr><tr><td data-num="45"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>on<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token keyword">const</span> ons <span class="token operator">=</span> data<span class="token punctuation">.</span>on</pre></td></tr><tr><td data-num="47"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> ons<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>      <span class="token keyword">let</span> skey</pre></td></tr><tr><td data-num="49"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^on|ON|oN|On</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="50"></td><td><pre>        skey <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="51"></td><td><pre>      </pre></td></tr><tr><td data-num="52"></td><td><pre>      domNode<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>skey<span class="token punctuation">,</span> ons<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="53"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="55"></td><td><pre></pre></td></tr><tr><td data-num="56"></td><td><pre>  <span class="token comment">// 2.6 设置行内样式</span></pre></td></tr><tr><td data-num="57"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>style<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>    <span class="token keyword">let</span> styles <span class="token operator">=</span> data<span class="token punctuation">.</span>style</pre></td></tr><tr><td data-num="59"></td><td><pre>    <span class="token keyword">let</span> styleMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="60"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> styles<span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="61"></td><td><pre>      styleMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>styles<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="62"></td><td><pre>      </pre></td></tr><tr><td data-num="63"></td><td><pre>    styleMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> val<span class="token punctuation">,</span> map</span><span class="token punctuation">)</span> <span class="token operator">=></span> domNode<span class="token punctuation">.</span>style<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="64"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="65"></td><td><pre>  </pre></td></tr><tr><td data-num="66"></td><td><pre>  <span class="token comment">// 3. 判断 children 必须为空数组时代表没有子节点 将内部文字赋给创建的 domNode 即可</span></pre></td></tr><tr><td data-num="67"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">Array</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>vnode<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>    <span class="token comment">// 使用 textContent 可以防止 XSS 攻击 下面用到 textContent 也是如此</span></pre></td></tr><tr><td data-num="69"></td><td><pre>    domNode<span class="token punctuation">.</span>textContent <span class="token operator">=</span> vnode<span class="token punctuation">.</span>text</pre></td></tr><tr><td data-num="70"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="71"></td><td><pre></pre></td></tr><tr><td data-num="72"></td><td><pre>  <span class="token comment">// 4. 如果 children 是个数组并不为空 代表里面有子节点 需要递归创建子节点</span></pre></td></tr><tr><td data-num="73"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">Array</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> vnode<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="74"></td><td><pre>    <span class="token comment">// 4.1 优化：将数组长度提出再进行遍历 效率略高 同时 for 比 forOf 与 forIn 效率高</span></pre></td></tr><tr><td data-num="75"></td><td><pre>    <span class="token keyword">const</span> childrenLength <span class="token operator">=</span> vnode<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length</pre></td></tr><tr><td data-num="76"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> childrenLength<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="77"></td><td><pre>      <span class="token comment">// 4.2 递归创建 因为此函数返回的即是创建出来的节点</span></pre></td></tr><tr><td data-num="78"></td><td><pre>      <span class="token keyword">let</span> ch <span class="token operator">=</span> <span class="token function">createElement</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="79"></td><td><pre>      </pre></td></tr><tr><td data-num="80"></td><td><pre>      <span class="token comment">// 4.3 这句可加可不加 因为上面递归判断空数组时也会创建文本</span></pre></td></tr><tr><td data-num="81"></td><td><pre>      <span class="token comment">// ch.textContent = vnode.children[i].text</span></pre></td></tr><tr><td data-num="82"></td><td><pre>      </pre></td></tr><tr><td data-num="83"></td><td><pre>      <span class="token comment">// 4.3 将子节点追加进一开始的 vnode.sel 父节点中</span></pre></td></tr><tr><td data-num="84"></td><td><pre>      domNode<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="85"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="86"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="87"></td><td><pre></pre></td></tr><tr><td data-num="88"></td><td><pre>  <span class="token comment">// 5. 补充 elm 节点 代表该已节点上树</span></pre></td></tr><tr><td data-num="89"></td><td><pre>  vnode<span class="token punctuation">.</span>elm <span class="token operator">=</span> domNode</pre></td></tr><tr><td data-num="90"></td><td><pre></pre></td></tr><tr><td data-num="91"></td><td><pre>  <span class="token comment">// 6. 返回 elm 对象 当作递归的返回值</span></pre></td></tr><tr><td data-num="92"></td><td><pre>  <span class="token keyword">return</span> vnode<span class="token punctuation">.</span>elm</pre></td></tr><tr><td data-num="93"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="patch-函数"><a class="anchor" href="#patch-函数">#</a> patch 函数</h2><ul><li>首先判断旧节点是否上树，如果是 <code>DOM节点则转化为vnode对象</code></li><li>其次如果不是同一节点则进行暴力删除再插入新的节点</li><li>最好判断是同一节点进行精细化比较，由于代码量多放在 <code>patchVnode</code>  函数中</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> vnode <span class="token keyword">from</span> <span class="token string">'./vnode.js'</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> createElement <span class="token keyword">from</span> <span class="token string">'./createElement'</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> patchVnode <span class="token keyword">from</span> <span class="token string">'./patchVnode'</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">patch</span><span class="token punctuation">(</span><span class="token parameter">oldVnode<span class="token punctuation">,</span> newVnode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token comment">// 1. 如果 oldVnode 没有 sel 属性代表还未上树 将其转化为虚拟节点</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>oldVnode<span class="token punctuation">.</span>sel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token comment">// 获取 DOM 标签 </span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">let</span> sel <span class="token operator">=</span> oldVnode<span class="token punctuation">.</span>tagName<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">let</span> attrs <span class="token operator">=</span> oldVnode<span class="token punctuation">.</span>attributes</pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token comment">// 与它的属性并存放在 data 中</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">function</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token parameter">attrs<span class="token punctuation">,</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> attrs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        data<span class="token punctuation">[</span>attrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> attrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value</pre></td></tr><tr><td data-num="15"></td><td><pre>      <span class="token keyword">return</span> data</pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    oldVnode <span class="token operator">=</span> <span class="token function">vnode</span><span class="token punctuation">(</span>sel<span class="token punctuation">,</span> <span class="token function">getData</span><span class="token punctuation">(</span>attrs<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> oldVnode<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token comment">// 2. 判断 oldVnode 与 newVnode 是否是同一节点 先判断 key 效率略高</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>key <span class="token operator">===</span> newVnode<span class="token punctuation">.</span>key <span class="token operator">&amp;&amp;</span> oldVnode<span class="token punctuation">.</span>sel <span class="token operator">===</span> newVnode<span class="token punctuation">.</span>sel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token function">patchVnode</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> newVnode<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token comment">// 3. 如果不是同一节点暴力插入</span></pre></td></tr><tr><td data-num="26"></td><td><pre>  <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token keyword">let</span> dom <span class="token operator">=</span> <span class="token function">createElement</span><span class="token punctuation">(</span>newVnode<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    oldVnode<span class="token punctuation">.</span>elm<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>dom<span class="token punctuation">,</span> oldVnode<span class="token punctuation">.</span>elm<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    oldVnode<span class="token punctuation">.</span>elm<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>elm<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="patchvnode"><a class="anchor" href="#patchvnode">#</a> patchVnode</h2><ul><li>这个函数中都是同一节点不同条件所进行的精细化比较</li><li>如果是同一个对象 (代表地址一样) 则直接终止比较即可</li><li>如果新节点有文本且没有子元素时代表只需要将文本渲染到页面上即可，这里用到了 <code>textContent</code>  是因为可以防止一些 <code>xss</code>  攻击，且性能上会高于 <code>innerHTML与innerText</code></li><li>如果新节点有子节点但旧节点没有，则只需将旧节点文件情况将新节点中的所有子节点创建出来再渲染到页面上即可</li><li>如果旧节点与新节点都有子元素则进行更加精细的比较，也是 diff 算法的核心，就是经典的 <code>旧前新前 旧后新后 旧前新后 旧后新前 </code> 以及 <code>缓存策略</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> createElement <span class="token keyword">from</span> <span class="token string">"./createElement"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> is <span class="token keyword">from</span> <span class="token string">"./utils/is"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> updateChildren <span class="token keyword">from</span> <span class="token string">'./updateChildren'</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 4. 判断新旧节点 children 都是数组且有子元素</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">function</span> <span class="token function">isUpdate</span><span class="token punctuation">(</span><span class="token parameter">oldVnode<span class="token punctuation">,</span> newVnode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token keyword">return</span> <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    is<span class="token punctuation">.</span><span class="token function">Array</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    is<span class="token punctuation">.</span><span class="token function">Array</span><span class="token punctuation">(</span>newVnode<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    oldVnode<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    newVnode<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length</pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">patchVnode</span><span class="token punctuation">(</span><span class="token parameter">oldVnode<span class="token punctuation">,</span> newVnode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token comment">// 1. 判断是否是同一个对象</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVnode <span class="token operator">==</span> newVnode<span class="token punctuation">)</span> <span class="token keyword">return</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  </pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token comment">// 2. 判断新节点是否有 text 属性 &amp;&amp; children 为数组且是空数组 (代表没有子元素)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>newVnode<span class="token punctuation">.</span>text <span class="token operator">&amp;&amp;</span> is<span class="token punctuation">.</span><span class="token function">Array</span><span class="token punctuation">(</span>newVnode<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>newVnode<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token comment">// 2.1 并且文本不相等时 将新节点的 text 文本重新渲染到老节点的 elm 上 (elm 就是标签)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newVnode<span class="token punctuation">.</span>text <span class="token operator">!=</span> oldVnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>      oldVnode<span class="token punctuation">.</span>elm<span class="token punctuation">.</span>textContent <span class="token operator">=</span> newVnode<span class="token punctuation">.</span>text </pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token comment">// 2. 判断新节点是否 children 为数组且有子元素 判断 children 是否为数组建议不省</span></pre></td></tr><tr><td data-num="28"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">Array</span><span class="token punctuation">(</span>newVnode<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> newVnode<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token comment">// 3. 如果旧节点 children 为空数组直接超度文本即可</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">Array</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>oldVnode<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>      <span class="token comment">// 3.1 首先将就节点文本超度 </span></pre></td></tr><tr><td data-num="32"></td><td><pre>      oldVnode<span class="token punctuation">.</span>elm<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">''</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre>      <span class="token comment">// 3.2 保存新节点 childern 长度 效率略高</span></pre></td></tr><tr><td data-num="35"></td><td><pre>      <span class="token keyword">const</span> newChLength <span class="token operator">=</span> newVnode<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length</pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre>      <span class="token comment">// 3.3 这里之所以要遍历创建是因为如果你直接 createElement (newVnode) 插入的话 会删除掉原先的父节点 再重新创建父节点</span></pre></td></tr><tr><td data-num="38"></td><td><pre>      <span class="token comment">// 3.4 相当于是暴力删除就节点再插入，而遍历的话是创建一个个标签由父级 appendChild 将子节点追加进去</span></pre></td></tr><tr><td data-num="39"></td><td><pre>      <span class="token comment">/* 3.5 你们可下去自行测试 就不需要 for 循环了，或者我把代码放下面</pre></td></tr><tr><td data-num="40"></td><td><pre>         const chDOM = createElement (newVnode)</pre></td></tr><tr><td data-num="41"></td><td><pre>         oldVnode.elm.parentNode.appendChild (chDOM)</pre></td></tr><tr><td data-num="42"></td><td><pre>         oldVnode.elm.parentNode.removeChild (oldVnode.elm)</pre></td></tr><tr><td data-num="43"></td><td><pre>      */</span></pre></td></tr><tr><td data-num="44"></td><td><pre>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> newChLength<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>        <span class="token comment">// 3.6 这种循环追加才是最佳方式</span></pre></td></tr><tr><td data-num="46"></td><td><pre>        <span class="token keyword">const</span> chDOM <span class="token operator">=</span> <span class="token function">createElement</span><span class="token punctuation">(</span>newVnode<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="47"></td><td><pre>        oldVnode<span class="token punctuation">.</span>elm<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>chDOM<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="48"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="50"></td><td><pre></pre></td></tr><tr><td data-num="51"></td><td><pre>    <span class="token comment">// 4. 调用 isUpdate 方法进行判断 </span></pre></td></tr><tr><td data-num="52"></td><td><pre>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUpdate</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> newVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>      <span class="token function">updateChildren</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> oldVnode<span class="token punctuation">.</span>children<span class="token punctuation">,</span> newVnode<span class="token punctuation">.</span>children<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="54"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="updatechildren"><a class="anchor" href="#updatechildren">#</a> updateChildren</h2><ul><li>这里就是本篇的核心所在，首先创建 <code>旧前 新前 旧后 新后 旧前节点 旧后节点 新前节点 新后节点 </code> 这几个 <code>核心变量</code></li><li>然后进行命中判断，并无论如何都是以 <code>(①②③④)</code>  的顺序判断<ul><li>命中一：旧前新前</li><li>命中二：旧后新后</li><li>命中三：旧前新后</li><li>命中四：旧后新前</li></ul></li><li>如果上面四种都没有命中则进行循环，但是 <code>diff算法</code> 这里又用到了非常精妙的缓存策略</li><li>就是先将旧节点所有的 <code>key</code>  与对应所在的 <code>索引位置</code> 保存起来，如果上面四种都未命中就会将缓存的旧节点 <code>key</code>  与新节点的 key 进行比较</li><li>如果匹配到该 <code>key</code>  则获取它的 <code>索引</code> ，再通过 <code>索引</code> 获取 <code>oldCh(即旧节点)</code>  中配匹到的 <code>vnode</code> ，那么该虚拟节点则就是应该被插入的节点了 (当然要先判断通过索引是否获取到并存在的节点)</li><li>接着因为该节点还是 <code>vnode</code> ，所以需要通过 <code>createElement</code>  创建节点为元素，然后进行插入到旧前即可</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> patchVnode <span class="token keyword">from</span> <span class="token string">"./patchVnode"</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> createElement <span class="token keyword">from</span> <span class="token string">"./createElement"</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">function</span> <span class="token function">checkSameVnode</span><span class="token punctuation">(</span><span class="token parameter">oldVnod<span class="token punctuation">,</span> newVnode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">return</span> oldVnod<span class="token punctuation">.</span>key <span class="token operator">===</span> newVnode<span class="token punctuation">.</span>key <span class="token operator">&amp;&amp;</span> oldVnod<span class="token punctuation">.</span>sel <span class="token operator">===</span> newVnode<span class="token punctuation">.</span>sel </pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// 提升最大的寻找效率 进行缓存 key, 用于寻找 keyMap 映射对象，这样不用每次都遍历 oldCh 对象了</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">function</span> <span class="token function">createKeyToOldIdx</span><span class="token punctuation">(</span><span class="token parameter">oldCh<span class="token punctuation">,</span> beginIdx<span class="token punctuation">,</span> endIdx</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token comment">// 当 beginIdx &lt;= endIdx 代表中间 vnode 都未匹配到 会删除，在之前先保存映射</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> beginIdx<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> endIdx<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">const</span> key <span class="token operator">=</span> oldCh<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">?.</span>key</pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="15"></td><td><pre>      map<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> i</pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token keyword">return</span> map</pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">updataChild</span><span class="token punctuation">(</span><span class="token parameter">parentElm<span class="token punctuation">,</span> oldCh<span class="token punctuation">,</span> newCh</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  <span class="token comment">// 1. 定义四个指针</span></pre></td></tr><tr><td data-num="22"></td><td><pre>  <span class="token comment">// 旧前</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token keyword">let</span> oldStartIdx <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="24"></td><td><pre>  <span class="token comment">// 新前</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token keyword">let</span> newStartIdx <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="26"></td><td><pre>  <span class="token comment">// 旧后</span></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token keyword">let</span> oldEndIdx <span class="token operator">=</span> oldCh<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="28"></td><td><pre>  <span class="token comment">// 新后</span></pre></td></tr><tr><td data-num="29"></td><td><pre>  <span class="token keyword">let</span> newEndIdx <span class="token operator">=</span> newCh<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre>  <span class="token comment">// 2. 指针指向的四个节点</span></pre></td></tr><tr><td data-num="32"></td><td><pre>  <span class="token comment">// 旧前节点</span></pre></td></tr><tr><td data-num="33"></td><td><pre>  <span class="token keyword">let</span> oldStartVnode <span class="token operator">=</span> oldCh<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="34"></td><td><pre>  <span class="token comment">// 新前节点</span></pre></td></tr><tr><td data-num="35"></td><td><pre>  <span class="token keyword">let</span> newStartVnode <span class="token operator">=</span> newCh<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="36"></td><td><pre>  <span class="token comment">// 旧后节点</span></pre></td></tr><tr><td data-num="37"></td><td><pre>  <span class="token keyword">let</span> oldEndVnode <span class="token operator">=</span> oldCh<span class="token punctuation">[</span>oldEndIdx<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="38"></td><td><pre>  <span class="token comment">// 新后节点</span></pre></td></tr><tr><td data-num="39"></td><td><pre>  <span class="token keyword">let</span> newEndVnode <span class="token operator">=</span> newCh<span class="token punctuation">[</span>newEndIdx<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="40"></td><td><pre>  <span class="token comment">// </span></pre></td></tr><tr><td data-num="41"></td><td><pre>  <span class="token keyword">let</span> oldKeyToIdx</pre></td></tr><tr><td data-num="42"></td><td><pre></pre></td></tr><tr><td data-num="43"></td><td><pre>  <span class="token keyword">let</span> idxInOld</pre></td></tr><tr><td data-num="44"></td><td><pre>  <span class="token comment">// 需要移动的 vndoe</span></pre></td></tr><tr><td data-num="45"></td><td><pre>  <span class="token keyword">let</span> elmToMove </pre></td></tr><tr><td data-num="46"></td><td><pre></pre></td></tr><tr><td data-num="47"></td><td><pre>  <span class="token comment">// 2. 加上终止循环条件</span></pre></td></tr><tr><td data-num="48"></td><td><pre>  <span class="token keyword">while</span> <span class="token punctuation">(</span>oldStartIdx <span class="token operator">&lt;=</span> oldEndIdx <span class="token operator">&amp;&amp;</span> newStartIdx <span class="token operator">&lt;=</span> newEndIdx<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>    <span class="token comment">// 代表被标记为 undefined 进行略过</span></pre></td></tr><tr><td data-num="50"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartVnode <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="51"></td><td><pre>      oldStartVnode <span class="token operator">=</span> oldCh<span class="token punctuation">[</span><span class="token operator">++</span>oldStartIdx<span class="token punctuation">]</span> </pre></td></tr><tr><td data-num="52"></td><td><pre>  </pre></td></tr><tr><td data-num="53"></td><td><pre>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndVnode <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="54"></td><td><pre>      oldEndVnode <span class="token operator">=</span> oldCh<span class="token punctuation">[</span><span class="token operator">--</span>oldEndIdx<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="55"></td><td><pre>  </pre></td></tr><tr><td data-num="56"></td><td><pre>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>newStartVnode <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="57"></td><td><pre>      newStartVnode <span class="token operator">=</span> newCh<span class="token punctuation">[</span><span class="token operator">++</span>newStartIdx<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="58"></td><td><pre>  </pre></td></tr><tr><td data-num="59"></td><td><pre>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>newEndVnode <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="60"></td><td><pre>      newEndVnode <span class="token operator">=</span> newCh<span class="token punctuation">[</span><span class="token operator">--</span>newEndIdx<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="61"></td><td><pre>  </pre></td></tr><tr><td data-num="62"></td><td><pre>    <span class="token comment">// 3. 命中① 旧前与新前</span></pre></td></tr><tr><td data-num="63"></td><td><pre>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkSameVnode</span><span class="token punctuation">(</span>oldStartVnode<span class="token punctuation">,</span> newStartVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>      <span class="token function">patchVnode</span><span class="token punctuation">(</span>oldStartVnode<span class="token punctuation">,</span> newStartVnode<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="65"></td><td><pre>      oldStartVnode <span class="token operator">=</span> oldCh<span class="token punctuation">[</span><span class="token operator">++</span>oldStartIdx<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="66"></td><td><pre>      newStartVnode <span class="token operator">=</span> newCh<span class="token punctuation">[</span><span class="token operator">++</span>newStartIdx<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="67"></td><td><pre>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">命中①旧前与新前</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="69"></td><td><pre></pre></td></tr><tr><td data-num="70"></td><td><pre>    <span class="token comment">// 4. 命中② 旧后与新后</span></pre></td></tr><tr><td data-num="71"></td><td><pre>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkSameVnode</span><span class="token punctuation">(</span>oldEndVnode<span class="token punctuation">,</span> newEndVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="72"></td><td><pre>      <span class="token function">patchVnode</span><span class="token punctuation">(</span>oldEndVnode<span class="token punctuation">,</span> newEndVnode<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="73"></td><td><pre>      oldEndVnode <span class="token operator">=</span> oldCh<span class="token punctuation">[</span><span class="token operator">--</span>oldEndIdx<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="74"></td><td><pre>      newEndVnode <span class="token operator">=</span> newCh<span class="token punctuation">[</span><span class="token operator">--</span>newEndIdx<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="75"></td><td><pre>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">命中①旧后与新后</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="76"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="77"></td><td><pre></pre></td></tr><tr><td data-num="78"></td><td><pre>    <span class="token comment">// 5. 命中③ 旧前与新后</span></pre></td></tr><tr><td data-num="79"></td><td><pre>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkSameVnode</span><span class="token punctuation">(</span>oldStartVnode<span class="token punctuation">,</span> newEndVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="80"></td><td><pre>      <span class="token function">patchVnode</span><span class="token punctuation">(</span>oldStartVnode<span class="token punctuation">,</span> newEndVnode<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="81"></td><td><pre>      <span class="token comment">// 0.oldEndVnode 是最后一个节点 所以将 oldStartVnode.elm 每次追加到它的后面，类似栈结构 举个栗子：比如 旧节点 ABCDE --> 新节点 EDCBA</span></pre></td></tr><tr><td data-num="82"></td><td><pre></pre></td></tr><tr><td data-num="83"></td><td><pre>      <span class="token comment">// 1. 命中①未找到 命中②也未找到，E 执行命中③(找到了)  此时旧节点 ABCDE ->  A 会到 E 的后面 -> BCDEA</span></pre></td></tr><tr><td data-num="84"></td><td><pre></pre></td></tr><tr><td data-num="85"></td><td><pre>      <span class="token comment">// 2. 继续命中会按照 (①②③④) 顺序，后面不在解释，所以 D 又命中③ 此时旧节点是 BCDEA -> D 会移动到 E 后面 -> CDEBA</span></pre></td></tr><tr><td data-num="86"></td><td><pre></pre></td></tr><tr><td data-num="87"></td><td><pre>      <span class="token comment">// 3.C 又会命中③ 此时旧节点是 CDEBA -> C 会移动到 E 后面 -> DECBA</span></pre></td></tr><tr><td data-num="88"></td><td><pre></pre></td></tr><tr><td data-num="89"></td><td><pre>      <span class="token comment">// 4.B 又会命中③ 此时旧节点是 DECBA -> B 会移动到 E 后面 -> EDCBA</span></pre></td></tr><tr><td data-num="90"></td><td><pre></pre></td></tr><tr><td data-num="91"></td><td><pre>      <span class="token comment">// 5. 最后 A 命中①  此时旧节点是 DECBA -> 保持不变 -> EDCBA</span></pre></td></tr><tr><td data-num="92"></td><td><pre>      </pre></td></tr><tr><td data-num="93"></td><td><pre>      parentElm<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>oldStartVnode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> oldEndVnode<span class="token punctuation">.</span>elm<span class="token punctuation">.</span>nextSibling<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="94"></td><td><pre>      oldStartVnode <span class="token operator">=</span> oldCh<span class="token punctuation">[</span><span class="token operator">++</span>oldStartIdx<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="95"></td><td><pre>      newEndVnode <span class="token operator">=</span> newCh<span class="token punctuation">[</span><span class="token operator">--</span>newEndIdx<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="96"></td><td><pre>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>oldStartVnode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">命中③旧前与新后</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="97"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="98"></td><td><pre></pre></td></tr><tr><td data-num="99"></td><td><pre>    <span class="token comment">// 6. 命中④ 旧后与新前</span></pre></td></tr><tr><td data-num="100"></td><td><pre>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkSameVnode</span><span class="token punctuation">(</span>oldEndVnode<span class="token punctuation">,</span> newStartVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="101"></td><td><pre>      <span class="token function">patchVnode</span><span class="token punctuation">(</span>oldEndVnode<span class="token punctuation">,</span> newStartVnode<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="102"></td><td><pre>      <span class="token comment">// 0.oldStartVnode 开始节点 所以将 oldEndVnode.elm 每次追加到它的前面，也类似栈结构 举个栗子：比如 旧节点 BCDXS --> 新节点 SDCBX</span></pre></td></tr><tr><td data-num="103"></td><td><pre></pre></td></tr><tr><td data-num="104"></td><td><pre>      <span class="token comment">// 1.（①②③都未命中），此时执行命中④(找到了) S  此时旧节点 BCDXS ->  S 会到 B 的前面 -> SBCDX</span></pre></td></tr><tr><td data-num="105"></td><td><pre>      </pre></td></tr><tr><td data-num="106"></td><td><pre>      <span class="token comment">// 2. 继续命中会按照 (①②③④) 顺序，后面不在解释。执行 X 命中② 此时旧节点是 SBCDX -> X 会保持不变 -> SBCDX</span></pre></td></tr><tr><td data-num="107"></td><td><pre></pre></td></tr><tr><td data-num="108"></td><td><pre>      <span class="token comment">// 3. 继续执行 (注意旧节点与新节点 SX 已处理) B 执行命中③ 此时旧节点是 SBCDX -> B 移动到 B 的前面 (相当于保持不变) -> SBCDX</span></pre></td></tr><tr><td data-num="109"></td><td><pre></pre></td></tr><tr><td data-num="110"></td><td><pre>      <span class="token comment">// 4. 继续执行 C 命中③ 此时旧节点 SBCDX -> 将 C 移动到 B 前面 -> SDCBX</span></pre></td></tr><tr><td data-num="111"></td><td><pre></pre></td></tr><tr><td data-num="112"></td><td><pre>      <span class="token comment">// 5. 最后都剩下 D 命中① 旧节点 SDCBX -> D 保持不变 -> SDCBX</span></pre></td></tr><tr><td data-num="113"></td><td><pre>      <span class="token comment">// 最后注意测试的时候指针都要变化，并且处理过的节点打上 undefined，就会略过，最好通过画图方式测试</span></pre></td></tr><tr><td data-num="114"></td><td><pre>      parentElm<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>oldEndVnode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> oldStartVnode<span class="token punctuation">.</span>elm<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="115"></td><td><pre>      oldEndVnode <span class="token operator">=</span> oldCh<span class="token punctuation">[</span><span class="token operator">--</span>oldEndIdx<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="116"></td><td><pre>      newStartVnode <span class="token operator">=</span> newCh<span class="token punctuation">[</span><span class="token operator">++</span>newStartIdx<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="117"></td><td><pre>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">命中④旧后与新前</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="118"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="119"></td><td><pre>      </pre></td></tr><tr><td data-num="120"></td><td><pre>    <span class="token comment">// 7. 上面四种都未命中时</span></pre></td></tr><tr><td data-num="121"></td><td><pre>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="122"></td><td><pre>      <span class="token comment">//console.log (' 上面四种都未命中 ')</span></pre></td></tr><tr><td data-num="123"></td><td><pre>      <span class="token comment">// 缓存 oldCh 里面的所有 key 与对应的位置 方便查找不用再循环查找</span></pre></td></tr><tr><td data-num="124"></td><td><pre>      oldKeyToIdx <span class="token operator">=</span> <span class="token function">createKeyToOldIdx</span><span class="token punctuation">(</span>oldCh<span class="token punctuation">,</span> oldStartIdx<span class="token punctuation">,</span> oldEndIdx<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="125"></td><td><pre>      <span class="token comment">// 匹配新属性是否有该 key 返回它的位置索引</span></pre></td></tr><tr><td data-num="126"></td><td><pre>      idxInOld <span class="token operator">=</span> oldKeyToIdx<span class="token punctuation">[</span>newStartVnode<span class="token punctuation">.</span>key<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="127"></td><td><pre></pre></td></tr><tr><td data-num="128"></td><td><pre>      <span class="token comment">// 根据位置索引取出对应的 old 的节点 作为移动的节点</span></pre></td></tr><tr><td data-num="129"></td><td><pre>      elmToMove <span class="token operator">=</span> oldCh<span class="token punctuation">[</span>idxInOld<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="130"></td><td><pre></pre></td></tr><tr><td data-num="131"></td><td><pre>      <span class="token comment">// 如果 idxInOld 为 undefined 或 null 代表是新的节点 需要创建并插入</span></pre></td></tr><tr><td data-num="132"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>idxInOld<span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="133"></td><td><pre>        parentElm<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span><span class="token function">createElement</span><span class="token punctuation">(</span>newStartVnode<span class="token punctuation">)</span><span class="token punctuation">,</span> oldStartVnode<span class="token punctuation">.</span>elm<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="134"></td><td><pre>      </pre></td></tr><tr><td data-num="135"></td><td><pre>      <span class="token comment">// 10. 否则不是新的 vnode 则需要进行移动节点</span></pre></td></tr><tr><td data-num="136"></td><td><pre>      <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="137"></td><td><pre>        <span class="token comment">// 说明不是全新的项，要移动</span></pre></td></tr><tr><td data-num="138"></td><td><pre>        </pre></td></tr><tr><td data-num="139"></td><td><pre>        <span class="token comment">// 进行 patchVnode 对比</span></pre></td></tr><tr><td data-num="140"></td><td><pre>        <span class="token function">patchVnode</span><span class="token punctuation">(</span>elmToMove<span class="token punctuation">,</span> newStartVnode<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="141"></td><td><pre>        </pre></td></tr><tr><td data-num="142"></td><td><pre>        <span class="token comment">// 把 vnode 设置为 undefined，代表已经处理完此 vnode</span></pre></td></tr><tr><td data-num="143"></td><td><pre>        oldCh<span class="token punctuation">[</span>idxInOld<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">undefined</span></pre></td></tr><tr><td data-num="144"></td><td><pre>      </pre></td></tr><tr><td data-num="145"></td><td><pre>        <span class="token comment">// 移动，调用 insertBefore 也可以实现移动。</span></pre></td></tr><tr><td data-num="146"></td><td><pre>        parentElm<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>elmToMove<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> oldStartVnode<span class="token punctuation">.</span>elm<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="147"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="148"></td><td><pre>        </pre></td></tr><tr><td data-num="149"></td><td><pre>      <span class="token comment">//newStartVndoe 也需要不断获取新节点 </span></pre></td></tr><tr><td data-num="150"></td><td><pre>      newStartVnode <span class="token operator">=</span> newCh<span class="token punctuation">[</span><span class="token operator">++</span>newStartIdx<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="151"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="152"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="153"></td><td><pre>  </pre></td></tr><tr><td data-num="154"></td><td><pre>  <span class="token comment">// 8. 说明 newCh，newStartIdx 与 newEndIdx 中间还有剩余节点没有处理，需要进行要追加这些节点</span></pre></td></tr><tr><td data-num="155"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>newStartIdx <span class="token operator">&lt;=</span> newEndIdx<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="156"></td><td><pre>    <span class="token comment">// 判断 before 是否有值，没有则返回 null 返回 null 的话 insertBefore 会默认插入到最后一行</span></pre></td></tr><tr><td data-num="157"></td><td><pre>    <span class="token keyword">const</span> before <span class="token operator">=</span> newCh<span class="token punctuation">[</span>newEndIdx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">?</span> newCh<span class="token punctuation">[</span>newEndIdx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>elm <span class="token operator">:</span> <span class="token keyword">null</span></pre></td></tr><tr><td data-num="158"></td><td><pre></pre></td></tr><tr><td data-num="159"></td><td><pre>    <span class="token comment">// 进行遍历插入 但插入的是虚拟节点 所以需要用 createElement 函数创建出元素再进行插入</span></pre></td></tr><tr><td data-num="160"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> newStartIdx<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> newEndIdx<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="161"></td><td><pre>      parentElm<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span><span class="token function">createElement</span><span class="token punctuation">(</span>newCh<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> before<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="162"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="163"></td><td><pre>  </pre></td></tr><tr><td data-num="164"></td><td><pre>  <span class="token comment">// 9. 说明 oldCh，oldStartIdx 与 oldEndIdx 中间还有剩余节点没有处理，需要进行删除这些节点</span></pre></td></tr><tr><td data-num="165"></td><td><pre>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartIdx <span class="token operator">&lt;=</span> oldEndIdx<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="166"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> oldStartIdx<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> oldEndIdx<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="167"></td><td><pre>      <span class="token comment">// 删除节点用父元素移除即可 </span></pre></td></tr><tr><td data-num="168"></td><td><pre>      <span class="token keyword">if</span><span class="token punctuation">(</span>oldCh<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="169"></td><td><pre>        parentElm<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>oldCh<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>elm<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="170"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="171"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>下面我还对 <code>旧前新前、旧后新后、旧前新后、旧后新前</code>  四种顺序做了画图演示</li></ul><h2 id="旧前新前执行顺序"><a class="anchor" href="#旧前新前执行顺序">#</a> 旧前新前执行顺序</h2><ul><li>简单介绍下旧前新前执行顺序，想要了解 diff 算法一定要谨记四大命中的执行顺序</li></ul><p><img data-src="oldStart-newStart.png" alt="oldStart-newStart" /></p><h2 id="旧后新后执行顺序"><a class="anchor" href="#旧后新后执行顺序">#</a> 旧后新后执行顺序</h2><ul><li>旧后与新后执行顺序，涉及到了四种都未命中的处理流程即对应的缓存策略，问题不大～</li></ul><p><img data-src="oldEnd-newEnd.png" alt="oldEnd-newEnd" /></p><ul><li>这里结合代码并且自己画图分析会更好理解～</li></ul><h2 id="旧前新后执行顺序"><a class="anchor" href="#旧前新后执行顺序">#</a> 旧前新后执行顺序</h2><ul><li>这里是旧前与新后的执行顺序</li></ul><p><img data-src="oldStart-newEnd.png" alt="oldStart-newEnd" /></p><h2 id="旧后新前执行顺序"><a class="anchor" href="#旧后新前执行顺序">#</a> 旧后新前执行顺序</h2><ul><li>这里是旧后与新前的执行顺序</li></ul><p><img data-src="oldEnd-newStart.png" alt="oldEnd-newStart" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;diff-算法&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#diff-算法&quot;&gt;#&lt;/a&gt; diff 算法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;diff 算法可以进行精细化对比，实现最小量更新&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;虚拟节点变成</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 实现 Mustache 模板引擎</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2021/12/29/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/vue-source-code-analysis/mustache/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2021/12/29/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/vue-source-code-analysis/mustache/</id>
    <published>2021-12-29T04:33:52.000Z</published>
    <updated>2022-02-21T13:54:04.160Z</updated>
    
    <content type="html"><![CDATA[<h2 id="正则表达式简单实现"><a class="anchor" href="#正则表达式简单实现">#</a> 正则表达式简单实现</h2><ul><li><p>最简单的实现则是利用 <code>replace</code>  方法，进行正则匹配</p></li><li><p><code>/\&#123;\&#123;\s*(\w+)\s*\&#125;\&#125;/g</code>  我是利用这个正则来匹配符合，括号里面允许有多余空格</p></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 1. 定义模板</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> templateStr <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;h2>我喜欢吃&#123;&#123;peach&#125;&#125;, &#123;&#123; lain &#125;&#125;也喜欢吃 &#123;&#123;peach&#125;&#125;吗?&lt;/h2></span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 2. 定义数据</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token literal-property property">lain</span><span class="token operator">:</span> <span class="token string">'lain'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token literal-property property">peach</span><span class="token operator">:</span> <span class="token string">'桃子'</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">// 3. 封装匹配符合 &#123;&#123;&#125;&#125; 语法的字符串</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">templateStr<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">return</span> templateStr<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\&#123;\&#123;\s*(\w+)\s*\&#125;\&#125;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">findStr<span class="token punctuation">,</span> $1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>$1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">return</span> data<span class="token punctuation">[</span>$1<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token comment">// 4. 返回新的字符串</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">const</span> newStr <span class="token operator">=</span> <span class="token function">render</span><span class="token punctuation">(</span>templateStr<span class="token punctuation">,</span> data<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newStr<span class="token punctuation">)</span> <span class="token comment">// &lt;h2 > 我喜欢吃桃子，lain 也喜欢吃 桃子吗？&lt;/h2></span></pre></td></tr></table></figure><h2 id="什么是-tokens"><a class="anchor" href="#什么是-tokens">#</a> 什么是 tokens</h2><ul><li><p>tokens 是一个 <code>JS的嵌套数组</code> ，也就是 <code>模板字符串JS表示</code></p></li><li><p><code>它是抽象语法树、&quot;虚拟节点&quot; 等等的开山鼻祖</code></p></li><li><p>例如普通模板字符串： <code>&lt;h2&gt;我喜欢吃&#123;&#123;peach&#125;&#125;, &#123;&#123;lain&#125;&#125;也喜欢吃&#123;&#123;peach&#125;&#125;吗?&lt;/h2&gt;</code></p></li><li><p><code>tokens:</code>  由一个个 <code>token</code>  组成</p></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token punctuation">[</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"&lt;h2>我喜欢吃"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// token</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"peach"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token comment">// token</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token punctuation">[</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">", "</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token comment">// token</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"lain"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token comment">// token</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token punctuation">[</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"也喜欢吃"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token comment">// token</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"peach"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token comment">// token</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token punctuation">[</span><span class="token string">"test "</span><span class="token punctuation">,</span> <span class="token string">"吗?&lt;/h2>"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token comment">// token</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">]</span></pre></td></tr></table></figure><ul><li>循环嵌套模板字符串</li></ul><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre>  &#123;&#123;#arr&#125;&#125;</pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>&#123;&#123;.&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre>  &#123;&#123;/arr&#125;&#125;</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><ul><li>由下面一个个 <code>token</code>  组成 <code>tokens:</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">,</span> <span class="token string">'&lt;ul>'</span><span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token punctuation">[</span> <span class="token string">'#'</span><span class="token punctuation">,</span> <span class="token string">'arr'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">,</span> <span class="token string">'&lt;li>&lt;span>'</span><span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">,</span> <span class="token string">'&lt;/span>&lt;/li>'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">,</span> <span class="token string">'&lt;/ul>'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">]</span></pre></td></tr></table></figure><ul><li><code>mustache</code>  库底层重点要做两个事情：<ul><li><code>将模板字符串编译为token形式</code></li><li><code>将tokens结合数据，解析为dom字符串</code></li></ul></li></ul><h2 id="使用webpack和webpack-dev-server构建"><a class="anchor" href="#使用webpack和webpack-dev-server构建">#</a> 使用 webpack 和 webpack-dev-server 构建</h2><ul><li>​模块化打包工具有 webpack (webpack-dev-server)、rollup、Parcel 等</li><li>mustache  <code>官方库使用rollup进行模块化打包</code> ，而我们使用今天使用 <code>webpack (webpack-dev-server)进行模块化打包</code> ，这是因为 webpack (webpack-dev-server) 能让我们更方便地在 <code>浏览器中 （而不是node.js环境中）</code>  实时调式程序，相比 node.js 控制后台， <code>览器控制台更好用</code> ，比如能够点击展开数组地每项</li><li>生成库是 <code>UMD</code>  的，这意味着它可以同时在 node.js 环境中使用，也可以在浏览器环境中使用。实现 UMD 不难，只需要一个 <code>通用头</code> 即可</li></ul><h2 id="webpack-所需配置文件"><a class="anchor" href="#webpack-所需配置文件">#</a> webpack 所需配置文件</h2><ul><li><code>package.json</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"mustache"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token string-property property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token string-property property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token string-property property">"main"</span><span class="token operator">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token string-property property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token string-property property">"dev"</span><span class="token operator">:</span> <span class="token string">"webpack-dev-server"</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token string-property property">"keywords"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token string-property property">"author"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token string-property property">"license"</span><span class="token operator">:</span> <span class="token string">"ISC"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token string-property property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token string-property property">"webpack"</span><span class="token operator">:</span> <span class="token string">"^4.44.2"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token string-property property">"webpack-cli"</span><span class="token operator">:</span> <span class="token string">"^3.3.12"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token string-property property">"webpack-dev-server"</span><span class="token operator">:</span> <span class="token string">"^3.11.0"</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li><code>webpack.config.js</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token comment">// 模式，开发</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token comment">// 入口</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token comment">// 打包到什么文件</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'bundle.js'</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token comment">// 配置 webpack-dev-server</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token literal-property property">hot</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token comment">// 静态文件根目录</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token literal-property property">contentBase</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token comment">// 不压缩</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token literal-property property">compress</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token comment">// 端口号</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">8080</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token comment">// 虚拟打包路径</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token literal-property property">publicPath</span><span class="token operator">:</span> <span class="token string">'/dist/'</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li><code>HTML</code>  引入</li></ul><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/dist/bundle.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><h2 id="scanner"><a class="anchor" href="#scanner">#</a> Scanner</h2><ul><li><code>扫描器类</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Scanner</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">template</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment">// 1. 定义 指针 尾巴 与 模板 变量</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>pos <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// 指针</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> template <span class="token comment">// 尾巴</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>template <span class="token operator">=</span> template <span class="token comment">// 模板</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token comment">// 2. 作用与越过指定 tag </span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token function">scan</span><span class="token punctuation">(</span><span class="token parameter">tag</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token comment">// 2.1 所以需要将 pos 与 tag 长度进行相加</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>pos <span class="token operator">+=</span> tag<span class="token punctuation">.</span>length</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token comment">// 2.2 所以需要将 并取 pos 之后的字符串</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>template<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>pos<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token comment">// 3. 让指针进行扫描，遇到指定 stopTag 结束，并返回之间路过的文字</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token function">scanUntil</span><span class="token punctuation">(</span><span class="token parameter">stopTag</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token comment">// 3.1 保存上次 this.pos 位置</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">let</span> pos_backup <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pos</pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token comment">// 3.2 当 pos 小于 template 长度 并且尾巴不是 stopTag, 说没没有扫描到 stopTag 才会继续循环  </span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tail<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>stopTag<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>      <span class="token comment">// 3.3 每循环依次让指针 ++</span></pre></td></tr><tr><td data-num="27"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>pos<span class="token operator">++</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre>      <span class="token comment">// 3.4 获取 this.template 下标 this.pos 的字符串</span></pre></td></tr><tr><td data-num="30"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>template<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>pos<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token comment">// 4. 返回开始到当前指针之前的字符串</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>template<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>pos_backup<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pos<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre>  <span class="token comment">// 5. 判断 pos 是否到 template 最后了</span></pre></td></tr><tr><td data-num="38"></td><td><pre>  <span class="token function">eos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pos <span class="token operator">>=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>template<span class="token punctuation">.</span>length </pre></td></tr><tr><td data-num="40"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="parsetemplatetotokens"><a class="anchor" href="#parsetemplatetotokens">#</a> parseTemplateToTokens</h2><ul><li><code>将模板字符串转为tokens数组</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> Scanner <span class="token keyword">from</span> <span class="token string">"./Scanner"</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> nestTokens <span class="token keyword">from</span> <span class="token string">"./nestTokens"</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">parseTemplateToTokens</span><span class="token punctuation">(</span><span class="token parameter">template</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">// 1. 定义数组 将模板字符串转为 tokens</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">const</span> tokens <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token comment">// 2. 创建 Scanner 实例</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">const</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token comment">// 3. 接收每次返回的字符串</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">let</span> words <span class="token operator">=</span> <span class="token string">''</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token comment">// 4. 匹配去掉空格</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token keyword">function</span> <span class="token function">trimWords</span><span class="token punctuation">(</span><span class="token parameter">words</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">return</span> words<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\s+(&lt;)|(>)\s+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'$1$2'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token comment">// 3. 判断 this.tail 与 this.template 长度是否一致 否则一直循环</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>scanner<span class="token punctuation">.</span><span class="token function">eos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token comment">// 3.1 扫描 &#123;&#123;  返回之前的字符串 text 类型</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    words <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">scanUntil</span><span class="token punctuation">(</span><span class="token string">'&#123;&#123;'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token comment">// 3.2 追入 tokens</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span> tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">,</span> <span class="token function">trimWords</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token comment">// 3.3 越过 &#123;&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    scanner<span class="token punctuation">.</span><span class="token function">scan</span><span class="token punctuation">(</span><span class="token string">'&#123;&#123;'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token comment">// 3.4 扫描 &#125;&#125;  返回之前的字符串 非 text 类型</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    words <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">scanUntil</span><span class="token punctuation">(</span><span class="token string">'&#125;&#125;'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token comment">// 4. 追入 tokens</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>words<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>      <span class="token comment">// 4.1 判断为 '#' 类型 </span></pre></td></tr><tr><td data-num="36"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span>words<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'#'</span><span class="token punctuation">)</span> tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'#'</span><span class="token punctuation">,</span> <span class="token function">trimWords</span><span class="token punctuation">(</span>words<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="37"></td><td><pre>        </pre></td></tr><tr><td data-num="38"></td><td><pre>      <span class="token comment">// 4.2 判断为 '/' 类型</span></pre></td></tr><tr><td data-num="39"></td><td><pre>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>words<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'/'</span><span class="token punctuation">)</span> tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token function">trimWords</span><span class="token punctuation">(</span>words<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="40"></td><td><pre>        </pre></td></tr><tr><td data-num="41"></td><td><pre>      <span class="token comment">// 4.3 判断为 'name' 类型 </span></pre></td></tr><tr><td data-num="42"></td><td><pre>      <span class="token keyword">else</span> tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span> words<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>    </pre></td></tr><tr><td data-num="45"></td><td><pre>    <span class="token comment">// 4.4 越过 &#125;&#125;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>    scanner<span class="token punctuation">.</span><span class="token function">scan</span><span class="token punctuation">(</span><span class="token string">'&#125;&#125;'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="47"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="48"></td><td><pre></pre></td></tr><tr><td data-num="49"></td><td><pre>  <span class="token comment">// 5. 返回 tokens</span></pre></td></tr><tr><td data-num="50"></td><td><pre>  <span class="token keyword">return</span> <span class="token function">nestTokens</span><span class="token punctuation">(</span>tokens<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="nesttokens"><a class="anchor" href="#nesttokens">#</a> nestTokens</h2><ul><li><code>折叠tokens，将#与/之间的tokens整合起来，作为下标为2的项</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">nestTokens</span><span class="token punctuation">(</span><span class="token parameter">tokens</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">// 1. 定义最终 tokens 数组 </span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">const</span> nestTokens <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">// 2. 定义栈结构，存放小 tokens</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">let</span> sections <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token comment">// 3. 收藏器 主要作用是需要巧妙地引用地址</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">let</span> collector <span class="token operator">=</span> nestTokens</pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token comment">// 4. 遍历原 tokens</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tokens<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token comment">// 4.1 取出一个个小 token</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">let</span> token <span class="token operator">=</span> tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token comment">// 5. 进行判断类型</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>token<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>      <span class="token comment">// 5.1 如果为 '#' 类型代表也是 tokens 需要黄 `# 与 /` 之间地数据放入 token [2]</span></pre></td></tr><tr><td data-num="19"></td><td><pre>      <span class="token keyword">case</span> <span class="token string">'#'</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token comment">// 5.2 先同时将 token 追加入 数组中</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        collector<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        sections<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token comment">// 5.3 这里是非常巧妙地利用了引用地址类型 token [2] 地址 给到了 collector</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token comment">// 代表接下来 collector 进行 push 数据时 都是往 token [2] 追加的</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        collector <span class="token operator">=</span> token<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>      </pre></td></tr><tr><td data-num="29"></td><td><pre>      <span class="token keyword">case</span> <span class="token string">'/'</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token comment">// 6. 遇到 `/` 代表需要进行弹栈 </span></pre></td></tr><tr><td data-num="31"></td><td><pre>        sections<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token comment">// 7. 判断 sections 中是否还有数组 有的话将数组地址给 collector</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        <span class="token comment">// 例如 [[1,2], [3,4]] 上面 pop 操作将 [3, 4] 弹出后剩下 [[1,2]], 那么此时 collector 地址 === [1,2] 地址 </span></pre></td></tr><tr><td data-num="35"></td><td><pre>        <span class="token comment">// 而 [1, 2] 地址也就是栈结构形式的一个个数组 </span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre>        <span class="token comment">// 8. 否则返回 nestTokens 而 nestTokens 被 collector 引用，所以返回的也是 collector</span></pre></td></tr><tr><td data-num="38"></td><td><pre>        collector <span class="token operator">=</span> sections<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> sections<span class="token punctuation">[</span>sections<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">:</span> nestTokens</pre></td></tr><tr><td data-num="39"></td><td><pre>        <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>      <span class="token keyword">default</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="41"></td><td><pre>        <span class="token comment">// 9. `text` 类型为普通文本 之间追加进入就可以了</span></pre></td></tr><tr><td data-num="42"></td><td><pre>        collector<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre></pre></td></tr><tr><td data-num="45"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="46"></td><td><pre></pre></td></tr><tr><td data-num="47"></td><td><pre>  <span class="token comment">// 10. 结果返回</span></pre></td></tr><tr><td data-num="48"></td><td><pre>  <span class="token keyword">return</span> nestTokens</pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>下面我补上分析数组引用的思路图</li></ul><p><img data-src="nestTokens.png" alt="nestTokens" /></p><ul><li>与代码对照图</li></ul><p><img data-src="nestTokens-code.png" alt="nestTokens-code" /></p><h2 id="rendertemplate"><a class="anchor" href="#rendertemplate">#</a> renderTemplate</h2><ul><li><code>将tokens数组变为DOM字符串</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> lookup <span class="token keyword">from</span> <span class="token string">"./lookup"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> parseToken <span class="token keyword">from</span> <span class="token string">"./parseToken"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">renderTemplate</span><span class="token punctuation">(</span><span class="token parameter">tokens<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">// 1. 定义结果字符串</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">let</span> resultStr <span class="token operator">=</span> <span class="token string">''</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token comment">// 2. 遍历 tokens</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tokens<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token comment">// 3. 循环获取 token</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">let</span> token <span class="token operator">=</span> tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token comment">// 4. 从 token [0] 第一项判断是什么类型 </span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>token<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    </pre></td></tr><tr><td data-num="15"></td><td><pre>      <span class="token comment">// 4.1 'text' 类型就行普通文本 直接相加即可</span></pre></td></tr><tr><td data-num="16"></td><td><pre>      <span class="token keyword">case</span> <span class="token string">'text'</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        resultStr <span class="token operator">+=</span> token<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>      </pre></td></tr><tr><td data-num="20"></td><td><pre>      <span class="token comment">// 4.2 'name' 则是 &#123;&#123;&#125;&#125; 里面的，代表是变量 通过 lookup 函数获取变量对应的值</span></pre></td></tr><tr><td data-num="21"></td><td><pre>      <span class="token keyword">case</span> <span class="token string">'name'</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        resultStr <span class="token operator">+=</span> <span class="token function">lookup</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> token<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>      </pre></td></tr><tr><td data-num="25"></td><td><pre>      <span class="token comment">// 4.3 '#' 代表也是 tokens, 需要将 tokens 再转为 token 进行链接 </span></pre></td></tr><tr><td data-num="26"></td><td><pre>      <span class="token keyword">case</span> <span class="token string">'#'</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token comment">// 5. 所以创建一个递归函数 parseToken</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        resultStr <span class="token operator">+=</span> <span class="token function">parseToken</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> data<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>  </pre></td></tr><tr><td data-num="33"></td><td><pre>  <span class="token comment">// 6. 返回字符串</span></pre></td></tr><tr><td data-num="34"></td><td><pre>  <span class="token keyword">return</span> resultStr</pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="lookup"><a class="anchor" href="#lookup">#</a> lookup</h2><ul><li><p><code>在对象中寻找连续点符号的keyName属性</code></p></li><li><p>举个栗子：</p></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> dataObj <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>      <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">100</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token function">lookup</span><span class="token punctuation">(</span>dataObj<span class="token punctuation">,</span> <span class="token string">'a.b.c'</span><span class="token punctuation">)</span> <span class="token comment">// 100</span></pre></td></tr></table></figure><ul><li><code>lookup</code>  函数</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">lookup</span><span class="token punctuation">(</span><span class="token parameter">dataObj<span class="token punctuation">,</span> keyName</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">// 1. 判断 keyName 本身不是。并且 keyName 中没有以。连接地属性名 </span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token comment">// 栗子：a.b.c</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>keyName <span class="token operator">!=</span> <span class="token string">'.'</span> <span class="token operator">&amp;&amp;</span> keyName<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token comment">// 2. 将上面 a.b.c 变成 ['a', 'b', 'c']</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">let</span> keys <span class="token operator">=</span> keyName<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token comment">// 3. 定义一个临时对象保存每次属性拿到的值 </span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">let</span> tempObj <span class="token operator">=</span> dataObj</pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token comment">// 4. 循环拿到值 举个栗子 tempObj = &#123;a: &#123;b: &#123;c: 100&#125; &#125; &#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token comment">// tempObj = dataObj[a] -> tempObj2 = tempObj[b] -> tempObj3 = tempObj2[c]</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> keys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> tempObj <span class="token operator">=</span> tempObj<span class="token punctuation">[</span>keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="14"></td><td><pre>      </pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token comment">// 5. 返回结果</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">return</span> tempObj</pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token comment">// 6. 如果本身就是。属性或者没有。连接的属性的话 就直接取值返回</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token keyword">return</span> dataObj<span class="token punctuation">[</span>keyName<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="parsetoken"><a class="anchor" href="#parsetoken">#</a> parseToken</h2><ul><li>处理 <code>tokens</code>  数组， 结合 <code>parseTemplateToTokens</code>  实现递归</li><li>注意函数参数时 token！不是  <code>tokens</code></li><li><code>token</code>  是一个简单的  <code>['#',  'friends', []]</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> lookup <span class="token keyword">from</span> <span class="token string">"./lookup"</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> renderTemplate <span class="token keyword">from</span> <span class="token string">"./renderTemplate"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">parseToken</span><span class="token punctuation">(</span><span class="token parameter">token<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token comment">// 1. 定义变量接收数据对象</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token keyword">const</span> v <span class="token operator">=</span> <span class="token function">lookup</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> token<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  </pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token comment">// 2. 作为结果字符串</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token keyword">let</span> resultStr <span class="token operator">=</span> <span class="token string">''</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token comment">// 3. 遍历数据的长度 递归次数与数据的长度一致</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    resultStr <span class="token operator">+=</span> <span class="token function">renderTemplate</span><span class="token punctuation">(</span>token<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>      <span class="token operator">...</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="16"></td><td><pre>      <span class="token string-property property">'.'</span><span class="token operator">:</span> v</pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token comment">// 4. 返回结果字符串</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  <span class="token keyword">return</span> resultStr</pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="index"><a class="anchor" href="#index">#</a> index</h2><ul><li>将模板转字符串转化为 tokens</li><li>将 tokens 渲染为 DOMString 结构</li><li>将 DOMString 返回</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> Scanner <span class="token keyword">from</span> <span class="token string">'./Scanner.js'</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> parseTemplateToTokens <span class="token keyword">from</span> <span class="token string">'./parseTemplateToTokens.js'</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> renderTemplate <span class="token keyword">from</span> <span class="token string">'./renderTemplate.js'</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>global<span class="token punctuation">.</span>TemplateEngine <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">template<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token comment">// 1. 将模板转字符串转化为 tokens</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">const</span> tokens <span class="token operator">=</span> <span class="token function">parseTemplateToTokens</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    </pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token comment">// 2. 将 tokens 渲染为 DOMString 结构</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">const</span> domStr <span class="token operator">=</span> <span class="token function">renderTemplate</span><span class="token punctuation">(</span>tokens<span class="token punctuation">,</span> data<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token comment">// 3. 将 DOMString 返回</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">return</span> domStr</pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>总结一下：这里尽量使用了 <code>switch</code> , 而没有使用 <code>if else if</code> ，是因为我认为 <code>switch</code>  效率会比  <code>if else if</code>  高</li></ul><h2 id="测试代码"><a class="anchor" href="#测试代码">#</a> 测试代码</h2><ul><li><p>我简单实现了 <code>mustache </code> ，的基本功能，下面进行测试，您也可以自行测试</p></li><li><p>如果您不了解用法，可以搜索我之前写的 <code>JavaScript Mustache 模板引擎用法</code></p></li><li><p>下面进行 <code>.</code>  测试</p></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> templateStr <span class="token operator">=</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;ul></pre></td></tr><tr><td data-num="3"></td><td><pre>    &#123;%#123;#arr&#125;%#125;</pre></td></tr><tr><td data-num="4"></td><td><pre>      &lt;li></pre></td></tr><tr><td data-num="5"></td><td><pre>        &#123;%#123;.&#125;%#125;</pre></td></tr><tr><td data-num="6"></td><td><pre>      &lt;/li></pre></td></tr><tr><td data-num="7"></td><td><pre>    &#123;%#123;/arr&#125;%#125;</pre></td></tr><tr><td data-num="8"></td><td><pre>  &lt;ul></pre></td></tr><tr><td data-num="9"></td><td><pre></span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token literal-property property">arr</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'苹果'</span><span class="token punctuation">,</span> <span class="token string">'西瓜'</span><span class="token punctuation">,</span> <span class="token string">'樱桃'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">const</span> domStr <span class="token operator">=</span> TemplateEngine<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>templateStr<span class="token punctuation">,</span> data<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>domStr<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>container<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> domStr</pre></td></tr></table></figure><ul><li>循环嵌套数组测试</li></ul><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./dist/bundle.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token comment">// 1. 定义模板字符串</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">const</span> templateStr <span class="token operator">=</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;ul></pre></td></tr><tr><td data-num="7"></td><td><pre>      &#123;&#123;#arr&#125;&#125;</pre></td></tr><tr><td data-num="8"></td><td><pre>        &lt;li class="a"></pre></td></tr><tr><td data-num="9"></td><td><pre>          &lt;span>姓名：&#123;&#123;name&#125;&#125;&lt;/span></pre></td></tr><tr><td data-num="10"></td><td><pre>          &lt;span>年龄：&#123;&#123;age&#125;&#125;&lt;/span></pre></td></tr><tr><td data-num="11"></td><td><pre>          &lt;ol></pre></td></tr><tr><td data-num="12"></td><td><pre>            &#123;&#123;#freiends&#125;&#125;</pre></td></tr><tr><td data-num="13"></td><td><pre>              &lt;li>freiends: &#123;&#123;.&#125;&#125;&lt;/li></pre></td></tr><tr><td data-num="14"></td><td><pre>            &#123;&#123;/freiends&#125;&#125;</pre></td></tr><tr><td data-num="15"></td><td><pre>          &lt;/ol></pre></td></tr><tr><td data-num="16"></td><td><pre>        &lt;/li></pre></td></tr><tr><td data-num="17"></td><td><pre>      &#123;&#123;/arr&#125;&#125;</pre></td></tr><tr><td data-num="18"></td><td><pre>    &lt;ul></pre></td></tr><tr><td data-num="19"></td><td><pre>  </span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token comment">// 2. 定义数据</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'lain'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token literal-property property">arr</span><span class="token operator">:</span> <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="25"></td><td><pre>      <span class="token punctuation">&#123;</span> <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'lain'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token literal-property property">freiends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'saber'</span><span class="token punctuation">,</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="26"></td><td><pre>      <span class="token punctuation">&#123;</span> <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'saber'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token literal-property property">freiends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'稚名真白'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="27"></td><td><pre>      <span class="token punctuation">&#123;</span> <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token literal-property property">freiends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'稚名真白'</span><span class="token punctuation">,</span> <span class="token string">'lain'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="28"></td><td><pre>      <span class="token punctuation">&#123;</span> <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'稚名真白'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token literal-property property">freiends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'lain'</span><span class="token punctuation">,</span> <span class="token string">'saber'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token punctuation">]</span></pre></td></tr><tr><td data-num="30"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre>  <span class="token comment">// 3. 返回遍历渲染完的新字符串</span></pre></td></tr><tr><td data-num="33"></td><td><pre>  <span class="token keyword">const</span> domStr <span class="token operator">=</span> TemplateEngine<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>templateStr<span class="token punctuation">,</span> data<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>domStr<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    </pre></td></tr><tr><td data-num="36"></td><td><pre>  <span class="token comment">// 4. 进行挂载 id 属性可以不用进行获取  </span></pre></td></tr><tr><td data-num="37"></td><td><pre>  container<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> domStr</pre></td></tr><tr><td data-num="38"></td><td><pre></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><h2 id="mustache-源码"><a class="anchor" href="#mustache-源码">#</a> Mustache 源码</h2><ul><li>这里放个官网地址以供参考</li></ul><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.bootcdn.net/ajax/libs/mustache.js/4.1.0/mustache.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;正则表达式简单实现&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#正则表达式简单实现&quot;&gt;#&lt;/a&gt; 正则表达式简单实现&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;最简单的实现则是利用 &lt;code&gt;replace&lt;/code&gt;  方法，进行正则匹配&lt;/p&gt;
&lt;/li</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
</feed>
