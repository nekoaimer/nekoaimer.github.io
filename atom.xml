<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>nekoaimer</title>
  
  <subtitle>清心如水，清水即心</subtitle>
  <link href="https://nekoaimer.github.io/nekoaimer.github.io/atom.xml" rel="self"/>
  
  <link href="https://nekoaimer.github.io/nekoaimer.github.io/"/>
  <updated>2022-03-07T10:03:18.808Z</updated>
  <id>https://nekoaimer.github.io/nekoaimer.github.io/</id>
  
  <author>
    <name>Nico Niconi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>李南江老师 Ajax 笔记 に</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2022/03/07/Ajax/02-Ajax/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2022/03/07/Ajax/02-Ajax/</id>
    <published>2022-03-07T10:00:21.195Z</published>
    <updated>2022-03-07T10:03:18.808Z</updated>
    
    <content type="html"><![CDATA[<h2 id="02-get-post"><a class="anchor" href="#02-get-post">#</a> 02-get-post</h2><ul><li>HTML</li></ul><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>02-get<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">&lt;!--</pre></td></tr><tr><td data-num="9"></td><td><pre>1. 可以通过 form 标签的 method 属性指定发送请求的类型</pre></td></tr><tr><td data-num="10"></td><td><pre>2. 如果是 get 请求会将提交的数据拼接到 URL 后面</pre></td></tr><tr><td data-num="11"></td><td><pre>?userName=lnj&amp;userPwd=123456</pre></td></tr><tr><td data-num="12"></td><td><pre>3. 如果是 post 请求会将提交的数据放到请求头中</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>4.GET 请求和 POST 请求的异同</pre></td></tr><tr><td data-num="15"></td><td><pre>4.1 相同点:</pre></td></tr><tr><td data-num="16"></td><td><pre>都是将数据提交到远程服务器</pre></td></tr><tr><td data-num="17"></td><td><pre>4.2 不同点:</pre></td></tr><tr><td data-num="18"></td><td><pre>4.2.1 提交数据存储的位置不同</pre></td></tr><tr><td data-num="19"></td><td><pre>GET 请求会将数据放到 URL 后面</pre></td></tr><tr><td data-num="20"></td><td><pre>POST 请求会将数据放到请求头中</pre></td></tr><tr><td data-num="21"></td><td><pre>4.2.2 提交数据大小限制不同</pre></td></tr><tr><td data-num="22"></td><td><pre>GET 请求对数据有大小限制</pre></td></tr><tr><td data-num="23"></td><td><pre>POST 请求对数据没有大小限制</pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre>5.GET/POST 请求应用场景</pre></td></tr><tr><td data-num="26"></td><td><pre>GET 请求用于提交非敏感数据和小数据</pre></td></tr><tr><td data-num="27"></td><td><pre>POST 请求用于提交敏感数据和大数据</pre></td></tr><tr><td data-num="28"></td><td><pre>--></span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>02-get-post.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userPwd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><ul><li>php</li></ul><figure class="highlight php"><figcaption data-lang="PHP"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token php language-php"><span class="token delimiter important">&lt;?php</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">//print_r($_GET);</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">//echo $_GET["userName"];</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">//echo $_GET["userPwd"];</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">//print_r($_POST);</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">//echo $_POST["userName"];</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">//echo $_POST["userPwd"];</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token delimiter important">?></span></span></pre></td></tr></table></figure><p><code>b站视频教程</code> ：<span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMTdXNDExMzdqbg==">https://www.bilibili.com/video/BV17W41137jn</span></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;02-get-post&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#02-get-post&quot;&gt;#&lt;/a&gt; 02-get-post&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;HTML&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;f</summary>
      
    
    
    
    
    <category term="Ajax" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>李南江老师 Ajax 笔记 いち</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2022/03/07/Ajax/01-Ajax/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2022/03/07/Ajax/01-Ajax/</id>
    <published>2022-03-07T06:22:49.936Z</published>
    <updated>2022-03-07T10:10:32.070Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本概念"><a class="anchor" href="#基本概念">#</a> 基本概念</h2><ul><li><p>什么是服务器？</p><ul><li><p>服务器也是电脑，只不过是一台 24 小时不断电，不关机的电脑</p></li><li><p>根据提供的服务功能不同：文件服务器、邮件服务器、Web 服务器等等；</p></li><li><p>简而言之：服务器其实就是一台 &quot;提供了某种服务功能&quot; 的超级电脑</p></li></ul></li><li><p>如何让电脑能够提供某种服务？</p><ul><li><p>如何让电脑可以聊天？听歌？浏览网页？</p></li><li><p>想让电脑提供聊天服务，可以安装相应的聊天软件，例如：QQ / 旺旺...</p></li><li><p>想让电脑可以提供听歌服务，可以安装相应音乐软件，例如：酷我 / 酷狗...</p></li><li><p>想让电脑可以提供浏览网页服务，可以安装相应浏览网页软件，例如：谷歌 / 欧朋..</p></li></ul></li><li><p>如何让电脑提供管理网站的服务？</p></li><li><p>安装 Web 服务相关软件，例如: Apache、IIS、Tomcat、Nginx、NodeJS 等；</p></li><li><p>安装了 Web 服务软件的电脑，我们称之为 &quot;Web 服务器&quot;</p></li><li><p>Web 服务器软件：Apache、IIS、Tomcat、Nginx、NodeJS 等；</p></li></ul><h2 id="什么是cs架构clientserver"><a class="anchor" href="#什么是cs架构clientserver">#</a> 什么是 C/S 架构 (Client/Server)</h2><ul><li><p>对于 C/S 架构，最为常见的例子就是网络游戏，例如 &quot;魔兽世界&quot; 如果不联网无法使用，你在软件内所做的所有操作通过互联网能够传递到其他玩家身上</p></li><li><p>优点：性能较高 / 界面酷炫 / 用户体验好</p></li><li><p>缺点：更新软件 / 重量级</p></li></ul><h2 id="什么是bs架构browserserver"><a class="anchor" href="#什么是bs架构browserserver">#</a> 什么是 B/S 架构 (Browser/Server)</h2><ul><li><p>对于 B/S 架构，现在所有的网站都是 B/S 架构，较为常见的例子有百度，淘宝，网易云音乐等等，所有只需要通过浏览器即可使用</p></li><li><p>优点：更新软件 / 轻量级 / 用户体验稍差</p></li><li><p>缺点：性能较低 / 兼容问题</p></li></ul><h2 id="http"><a class="anchor" href="#http">#</a> HTTP</h2><ul><li>HTTP（hypertext transport protocol）协议『超文本传输协议』，协议详细规定了浏览器和万维网服务器之间互相通信的规则。</li></ul><h3 id="http请求头"><a class="anchor" href="#http请求头">#</a> HTTP 请求头</h3><ul><li><p>User-Agent：浏览器的具体类型　　如：User-Agent：Mozilla/5.0 (Windows NT 6.1; rv:17.0) Gecko/20100101 Firefox/17.0</p></li><li><p>Accept：浏览器支持哪些数据类型　　如：Accept: text/html,application/xhtml+xml,application/xml;q=0.9;</p></li><li><p>Accept-Charset：浏览器采用的是哪种编码　　如：Accept-Charset: ISO-8859-1</p></li><li><p>Accept-Encoding：浏览器支持解码的数据压缩格式　　如：Accept-Encoding: gzip, deflate</p></li><li><p>Accept-Language：浏览器的语言环境　　如：Accept-Language zh-cn,zh;q=0.8,en-us;q=0.5,en;q=0.3</p></li><li><p>Host：请求的主机名，允许多个域名同处一个 IP 地址，即虚拟主机。Host:www.baidu.com</p></li><li><p>Connection：表示是否需要持久连接。Keep-Alive/close，HTTP1.1 默认是持久连接，它可以利用持久连接的优点，当页面包含多个元素时（例如 Applet，图片），显著地减少下载所需要的时间。要实现这一点，Servlet 需要在应答中发送一个 Content-Length 头，最简单的实现方法是：先把内容写入 ByteArrayOutputStream，然后在正式写出内容之前计算它的大小。如：Connection: Keep-Alive</p></li><li><p>Content-Length：表示请求消息正文的长度。对于 POST 请求来说 Content-Length 必须出现。</p></li><li><p>Content-Type：WEB 服务器告诉浏览器自己响应的对象的类型和字符集。例如：Content-Type: text/html; charset='gb2312'</p></li><li><p>Content-Encoding：WEB 服务器表明自己使用了什么压缩方法（gzip，deflate）压缩响应中的对象。例如：Content-Encoding：gzip</p></li><li><p>Content-Language：WEB 服务器告诉浏览器自己响应的对象的语言。</p></li><li><p>Cookie：最常用的请求头，浏览器每次都会将 cookie 发送到服务器上，允许服务器在客户端存储少量数据。</p></li><li><p>Referer：包含一个 URL，用户从该 URL 代表的页面出发访问当前请求的页面。服务器能知道你是从哪个页面过来的。Referer: <span class="exturl" data-url="aHR0cDovL3d3dy5iYWlkdS5jb20v">http://www.baidu.com/</span></p></li></ul><h3 id="http响应头"><a class="anchor" href="#http响应头">#</a> HTTP 响应头</h3><ul><li><p>Server:WEB 服务器表明自己是什么软件及版本等信息。例如：Server：Apache/2.0.61 (Unix)</p></li><li><p>Accept-Ranges:WEB 服务器表明自己是否接受获取其某个实体的一部分（比如文件的一部分）的请求。bytes：表示接受，none：表示不接受</p></li><li><p>Content-Type:WEB 服务器告诉浏览器自己响应的对象的类型。例如：Content-Type：application/xml</p></li><li><p>Etag: 就是一个对象（比如 URL）的标志值，就一个对象而言，比如一个 html 文件，如果被修改了，其 Etag 也会别修改，所以，ETag 的作用跟 Last-Modified 的作用差不多，主要供 WEB 服务器判断一个对象是否改变了。比如前一次请求某个 html 文件时，获得了其 ETag，当这次又请求这个文件时，浏览器就会把先前获得 ETag 值发送给 WEB 服务器，然后 WEB 服务器会把这个 ETag 跟该文件的当前 ETag 进行对比，然后就知道这个文件有没有改变了。</p></li><li><p>Allow: 服务器支持哪些请求方法（如 GET、POST 等）</p></li><li><p>Location: 表示客户应当到哪里去提取文档，用于将接收端定位到资源的位置（URL）上。Location 通常不是直接设置的，而是通过 HttpServletResponse 的 sendRedirect 方法，该方法同时设置状态代码为 302。</p></li><li><p>Content-Base: 解析主体中的相对 URL 时使用的基础 URL。</p></li><li><p>Content-Encoding:WEB 服务器表明自己使用了什么压缩方法（gzip，deflate）压缩响应中的对象。例如：Content-Encoding：gzip</p></li><li><p>Content-Language:WEB 服务器告诉浏览器理解主体时最适宜使用的自然语言。</p></li><li><p>Content-Length:WEB 服务器告诉浏览器自己响应的对象的长度或尺寸，例如：Content-Length: 26012</p></li><li><p>Content-Location: 资源实际所处的位置。</p></li><li><p>Content-MD5: 主体的 MD5 校验和。</p></li><li><p>Content-Range: 实体头用于指定整个实体中的一部分的插入位置，他也指示了整个实体的长度。在服务器向客户返回一个部分响应，它必须描述响应覆盖的范围和整个实体长度。一般格式： Content-Range:bytes-unitSPfirst-byte-pos-last-byte-pos/entity-legth。例如，传送头 500 个字节次字段的形式：Content-Range:bytes0- 499/1234 如果一个 http 消息包含此节（例如，对范围请求的响应或对一系列范围的重叠请求），Content-Range 表示传送的范围，Content-Length 表示实际传送的字节数。</p></li><li><p>Expires:WEB 服务器表明该实体将在什么时候过期，对于过期了的对象，只有在跟 WEB 服务器验证了其有效性后，才能用来响应客户请求。是 HTTP/1.0 的头部。例如：Expires：Sat, 23 May 2009 10:02:12 GMT</p></li><li><p>Last-Modified:WEB 服务器认为对象的最后修改时间，比如文件的最后修改时间，动态页面的最后产生时间等等。例如：Last-Modified：Tue, 06 May 2008 02:42:43 GMT</p></li></ul><h3 id="http-常见状态码"><a class="anchor" href="#http-常见状态码">#</a> http 常见状态码</h3><ul><li>100 Continue  继续，一般在发送 post 请求时，已发送了 http header 之后服务端将返回此信息，表示确认，之后发送具体参数信息</li><li>200 OK   正常返回信息</li><li>201 Created  请求成功并且服务器创建了新的资源</li><li>202 Accepted  服务器已接受请求，但尚未处理</li><li>301 Moved Permanently  请求的网页已永久移动到新位置</li><li>302 Found  临时性重定向</li><li>303 See Other  临时性重定向，且总是使用 GET 请求新的 URI</li><li>304 Not Modified  自从上次请求后，请求的网页未修改过</li><li>400 Bad Request  服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求</li><li>401 Unauthorized  请求未授权</li><li>403 Forbidden  禁止访问</li><li>404 Not Found  找不到如何与 URI 相匹配的资源</li><li>500 Internal Server Error  最常见的服务器端错误</li><li>503 Service Unavailable 服务器端暂时无法处理请求（可能是过载或维护）</li></ul><h2 id="web服务器搭建"><a class="anchor" href="#web服务器搭建">#</a> Web 服务器搭建</h2><h3 id="什么是wampserver软件"><a class="anchor" href="#什么是wampserver软件">#</a> 什么是 WAMPServer 软件？</h3><ul><li>W: Windows 操作系统</li><li>A: Apache 世界排名第一的服务器软件，特点是简单，速度快，性能稳定</li><li>M: MySQL 开源免费的数据库软件，特点是体积小、速度快、使用成本低</li><li>P: PHP 超文本预处理器，直接将代码嵌入 HTML 文档中执行，特点是简单易学，容易上手</li></ul><h3 id="如何搭建apache服务器"><a class="anchor" href="#如何搭建apache服务器">#</a> 如何搭建 Apache 服务器？</h3><ul><li><p>安装 WAMPServer</p></li><li><p>点击 Next</p></li><li><p>选择安装路径 (注意：路径中不要出现中文)</p></li><li><p>勾选两个方框，点击 next 继续安装</p></li><li><p>点击 install 开始安装</p></li><li><p>安装完毕以后点击 finish 即可启动 wamp</p></li></ul><h3 id="测试访问"><a class="anchor" href="#测试访问">#</a> 测试访问</h3><ul><li>打开浏览器输入 127.0.0.1 查看显示的内容</li><li>如何修改默认端口号？</li><li>在 httpd.conf 文件中搜索 Listen , 改为你想要的数字即可</li><li>重启 WAMP</li></ul><h3 id="如何运行编写好的php文件"><a class="anchor" href="#如何运行编写好的php文件">#</a> 如何运行编写好的 PHP 文件？</h3><ul><li><p>因为 PHP 是服务端编程语言，所以要在服务端运行</p></li><li><p>php 文件名称不能有中文</p></li><li><p>php 文件必须放到服务器文件夹下</p></li><li><p>通过 ip 找到服务器文件夹，选中 php 文件访问</p></li></ul><h3 id="服务端返回浏览器的是什么"><a class="anchor" href="#服务端返回浏览器的是什么">#</a> 服务端返回浏览器的是什么？</h3><ul><li><p>php 程序的执行结果</p></li><li><p>注意：执行结果中有中文，必须在 php 文件顶部设置</p></li><li><p>header(&quot;content-type:text/html; charset=utf-8&quot;);</p></li><li><p>浏览器访问 http 服务器，接收到响应时，会根据响应报文头的内容进行一些具体的操作，在 php 中，我们能够使用 header 来设置这些内容</p></li></ul><h2 id="phppai-huang-pian-基础"><a class="anchor" href="#phppai-huang-pian-基础">#</a> PHP (pai huang pian) 基础</h2><ul><li>PHP 基础语法大部分和 JS 差不多 (切菜)</li></ul><h3 id="php中如何定义变量"><a class="anchor" href="#php中如何定义变量">#</a> php 中如何定义变量？</h3><figure class="highlight php"><figcaption data-lang="PHP"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token php language-php"><span class="token delimiter important">&lt;?php</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token variable">$num</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token delimiter important">?></span></span></pre></td></tr></table></figure><h3 id="php中如何打印内容"><a class="anchor" href="#php中如何打印内容">#</a> php 中如何打印内容</h3><ul><li>注意点：后端编写的代码不能直接运行，只能放到服务器对应的文件夹下，通过服务器运行</li><li>如何通过服务器运行：通过 ip 地址 (127.0.0.1) 找到服务器对应的文件夹，然后再找到对应的文件运行</li></ul><figure class="highlight php"><figcaption data-lang="PHP"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token php language-php"><span class="token delimiter important">&lt;?php</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">echo</span> <span class="token variable">$num</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token delimiter important">?></span></span></pre></td></tr></table></figure><h3 id="php中如何定义集合"><a class="anchor" href="#php中如何定义集合">#</a> php 中如何定义集合</h3><figure class="highlight php"><figcaption data-lang="PHP"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token php language-php"><span class="token delimiter important">&lt;?php</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">echo</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token variable">$dict</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"name"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"lnj"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"age"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"33"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$dict</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token delimiter important">?></span></span></pre></td></tr></table></figure><h3 id="php中的分支循环语句"><a class="anchor" href="#php中的分支循环语句">#</a> php 中的分支循环语句</h3><figure class="highlight php"><figcaption data-lang="PHP"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token php language-php"><span class="token delimiter important">&lt;?php</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">// if</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token variable">$age</span> <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$age</span> <span class="token operator">>=</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"成年"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"未成年"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token punctuation">&#125;</span>  </pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token comment">// 三目</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$age</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string double-quoted-string">"成年人"</span> <span class="token punctuation">:</span> <span class="token string double-quoted-string">"未成年人"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">echo</span> <span class="token variable">$res</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token comment">// switch</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token keyword">case</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"非人类"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token keyword">case</span> <span class="token number">18</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"成年人"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>  <span class="token keyword">default</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"未成年人"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token comment">// for</span></pre></td></tr><tr><td data-num="28"></td><td><pre>  <span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token keyword">echo</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre> <span class="token comment">// while</span></pre></td></tr><tr><td data-num="35"></td><td><pre>  <span class="token variable">$index</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$index</span> <span class="token operator">&lt;</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token keyword">echo</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$index</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token variable">$index</span><span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token delimiter important">?></span></span></pre></td></tr></table></figure><p><code>b站视频教程</code> ：<span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMTdXNDExMzdqbg==">https://www.bilibili.com/video/BV17W41137jn</span></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基本概念&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#基本概念&quot;&gt;#&lt;/a&gt; 基本概念&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;什么是服务器？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;服务器也是电脑，只不过是一台 24 小时不断电，不关机的电脑&lt;/p&gt;
&lt;/li&gt;
</summary>
      
    
    
    
    
    <category term="Ajax" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 实现数组扁平化</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2022/01/29/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/arrayFlat/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2022/01/29/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/arrayFlat/</id>
    <published>2022-01-29T09:25:20.000Z</published>
    <updated>2022-03-05T12:28:57.825Z</updated>
    
    <content type="html"><![CDATA[<h2 id="flat-实现"><a class="anchor" href="#flat-实现">#</a> flat 实现</h2><ul><li><code>flat()</code>  方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'abc'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>arr1<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></pre></td></tr><tr><td data-num="5"></td><td><pre>arr2<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span> <span class="token comment">// [1,  2, &#123;&#125;, 3, 4, 5, &#123;&#125;, 'abc']</span></pre></td></tr></table></figure><h2 id="tostring-实现"><a class="anchor" href="#tostring-实现">#</a> toString 实现</h2><ul><li><code>toString()</code>  方法返回一个表示该对象的字符串。</li><li>也可以用来扁平化，但是只针对基本数据类型</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'abc'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>arr1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span> <span class="token comment">// ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// 1. 无法针对非基本数据类型，如果有其他类型则会很麻烦</span></pre></td></tr><tr><td data-num="7"></td><td><pre>arr2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span> <span class="token comment">// ['1', '2', '[object Object]', '3', '4', '5', '[object Object]', 'abc']</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// 2. 最后再恢复成数字类型</span></pre></td></tr><tr><td data-num="10"></td><td><pre>arr2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token operator">+</span>item<span class="token punctuation">)</span> <span class="token comment">// [1, 2, NaN, 3, 4, 5, NaN, NaN]</span></pre></td></tr></table></figure><h2 id="join-实现"><a class="anchor" href="#join-实现">#</a> join 实现</h2><ul><li><code>join</code>  实现也只针对基本类型</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'abc'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>arr1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?:,|\|)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token operator">+</span>item<span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// 1. 无法针对非基本数据类型</span></pre></td></tr><tr><td data-num="7"></td><td><pre>arr2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?:,|\|)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span> <span class="token comment">// ['1', '2', '[object Object]', '3', '4', '5', '[object Object]', 'abc']</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// 2. 最后再转成数字类型</span></pre></td></tr><tr><td data-num="10"></td><td><pre>arr2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?:,|\|)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token operator">+</span>item<span class="token punctuation">)</span> <span class="token comment">// [1, 2, NaN, 3, 4, 5, NaN, NaN]</span></pre></td></tr></table></figure><h2 id="jsonstringify-实现"><a class="anchor" href="#jsonstringify-实现">#</a> JSON.stringify 实现</h2><ul><li><code>JSON.stringify</code>  是可以实现扁平化的， 但是最后要转换成原来的类型是比较麻烦的</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'abc'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 1. 如果都是数字类型就比较简单，但如果有字符串类型或其他类型则需要以下判断 比较麻烦</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\[|\])</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token operator">+</span>item<span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 2. 这样扁平化之后，其他类型则是比较麻烦</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\[|\])</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span> <span class="token comment">// ['1', '2', '&#123;"age":16&#125;', '3', '4', '5', '&#123;&#125;', '"abc"']</span></pre></td></tr></table></figure><h2 id="for循环递归-实现"><a class="anchor" href="#for循环递归-实现">#</a> for 循环递归 实现</h2><h3 id="函数递归"><a class="anchor" href="#函数递归">#</a> 函数递归</h3><ul><li>使用递归来循环变量实现扁平化</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">flat</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> val</pre></td></tr><tr><td data-num="3"></td><td><pre>  </pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">else</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> val<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>      newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">flat</span><span class="token punctuation">(</span>val<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> newArr<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>  newArr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">return</span> newArr</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'abc'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">flat</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token function">flat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span> <span class="token comment">// [1, 2, &#123; age: 16 &#125;, 3, 4, 5, &#123;&#125;]</span></pre></td></tr></table></figure><h3 id="闭包递归"><a class="anchor" href="#闭包递归">#</a> 闭包递归</h3><ul><li>使用闭包形式递归实现扁平化</li><li>这里说几个函数前面符号的意思<ul><li><code>! </code> 对返回值的真假取反</li><li><code>+ 、-</code>  是对返回值进行数学运算</li><li><code>~</code>  按位非运算符，反转操作数的位，对返回值进行按位取反</li><li><code>;</code>  是为了防止代码压缩时，前面代码没写 <code>;</code>  造成报错。</li></ul></li><li>在函数前面加这些或者在括号中，那么此函数就变成了函数表达式，函数表达式就可以立即执行</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 立即执行函数，转为表达式</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">~</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">function</span> <span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>      <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>          _this <span class="token operator">=</span> <span class="token keyword">this</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>      <span class="token keyword">let</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>          <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>          result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>      </pre></td></tr><tr><td data-num="14"></td><td><pre>      <span class="token function">fn</span><span class="token punctuation">(</span>_this<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre>      <span class="token keyword">return</span> result</pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>flat <span class="token operator">=</span> flat</pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'abc'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>arr1<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></pre></td></tr><tr><td data-num="5"></td><td><pre>arr2<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// [1, 2, &#123; age: 16 &#125;, 3, 4, 5, &#123;&#125;]</span></pre></td></tr></table></figure><h2 id="while-some-实现"><a class="anchor" href="#while-some-实现">#</a> while &amp; some 实现</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">flat</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">while</span> <span class="token punctuation">(</span>val<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="3"></td><td><pre>    val <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token operator">...</span>val<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">return</span> val</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'abc'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">flat</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token function">flat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span> <span class="token comment">// [ 1, 2, &#123; age: 16 &#125;, 3, 4, 5, &#123;&#125;, 'abc' ]</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;flat-实现&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#flat-实现&quot;&gt;#&lt;/a&gt; flat 实现&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;flat()&lt;/code&gt;  方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>instanceof &amp; new 原理</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2022/01/27/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/instanceof-new/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2022/01/27/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/instanceof-new/</id>
    <published>2022-01-27T02:44:52.000Z</published>
    <updated>2022-03-06T01:43:45.771Z</updated>
    
    <content type="html"><![CDATA[<h2 id="instanceof-原理"><a class="anchor" href="#instanceof-原理">#</a> instanceof 原理</h2><ul><li><strong> <code>instanceof</code> </strong> <strong>运算符</strong>用于检测构造函数的  <code>prototype</code>  属性是否出现在某个实例对象的原型链上。</li><li>语法  <code>object instanceof constructor</code></li><li>参数  <code>object(某个实例对象)</code>  、 <code>constructor(某个构造函数)</code></li><li>本质上  <code>instanceof</code>  运算符用来检测  <code>constructor.prototype </code> 是否存在于参数  <code>object</code>  的原型链上。</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">_instanceof</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> origin</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">// 这里需要加层判断</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> target <span class="token operator">!==</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">// 循环 当 target 为 null 时 (代表已经达到顶层原型已经指向 null)，那么停止循环</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">while</span> <span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">===</span> origin<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="8"></td><td><pre>      </pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token comment">// 否则再取出 target 的隐式原型对象</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    target <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">return</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="instanceof-测试"><a class="anchor" href="#instanceof-测试">#</a> instanceof 测试</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span></pre></td></tr><tr><td data-num="3"></td><td><pre>            </pre></td></tr><tr><td data-num="4"></td><td><pre>f <span class="token keyword">instanceof</span> <span class="token class-name">Foo</span>    <span class="token comment">// true</span></pre></td></tr><tr><td data-num="5"></td><td><pre>f <span class="token keyword">instanceof</span> <span class="token class-name">Object</span>   <span class="token comment">// true</span></pre></td></tr><tr><td data-num="6"></td><td><pre>f <span class="token keyword">instanceof</span> <span class="token class-name">Function</span> <span class="token comment">// false</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            </pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token string">'abc'</span> <span class="token keyword">instanceof</span> <span class="token class-name">String</span>        <span class="token comment">// false</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token number">123</span> <span class="token keyword">instanceof</span> <span class="token class-name">Number</span>          <span class="token comment">// false</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span>            <span class="token comment">// true</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span>           <span class="token comment">// true</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span>   <span class="token comment">// true</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Function</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span>    <span class="token comment">// false</span></pre></td></tr></table></figure><h3 id="_instanceof-测试"><a class="anchor" href="#_instanceof-测试">#</a> _instanceof 测试</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">_instanceof</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> Foo<span class="token punctuation">)</span>      <span class="token comment">// true</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token function">_instanceof</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> Object<span class="token punctuation">)</span>   <span class="token comment">// true</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token function">_instanceof</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> Function<span class="token punctuation">)</span> <span class="token comment">// false</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token function">_instanceof</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">,</span> String<span class="token punctuation">)</span>      <span class="token comment">// false</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token function">_instanceof</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> Number<span class="token punctuation">)</span>        <span class="token comment">// false</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token function">_instanceof</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Array<span class="token punctuation">)</span>          <span class="token comment">// true</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token function">_instanceof</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> Object<span class="token punctuation">)</span>         <span class="token comment">// true</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token function">_instanceof</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> Object<span class="token punctuation">)</span>   <span class="token comment">// true</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token function">_instanceof</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> Function<span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token function">_instanceof</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> Array<span class="token punctuation">)</span>   <span class="token comment">// false</span></pre></td></tr></table></figure><h2 id="new-原理"><a class="anchor" href="#new-原理">#</a> new 原理</h2><ul><li><p><code>new</code>  实际做了什么？</p><ul><li><p>创建一个新的空对象</p></li><li><p>把新对象的原型绑定到构造函数的原型上</p></li><li><p>构造函数被执行，执行过程中的 <code>this</code>  被绑定在新的对象上</p></li><li><p>返回这个新对象 (构造函数中一般不会显示返回， 但有时也可以 return this)</p></li></ul></li></ul><h3 id="objectsetprototypeof-实现"><a class="anchor" href="#objectsetprototypeof-实现">#</a> Object.setPrototypeOf 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">_new</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">// 1. 创建新的空对象</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  </pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">// 2. 把新对象的原型绑定到构造函数的原型上</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> fn<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token comment">// 3. 构造函数被执行，绑定 `this` 与传入参数在新的对象上，并获取 obj 函数执行的结果</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token comment">// 4. 如果执行结果有返回值并且是一个对象，返回执行的结果，否则，返回新创建的对象 </span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Object]'</span> <span class="token operator">?</span> result <span class="token operator">:</span> obj</pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">_new</span><span class="token punctuation">(</span>Foo<span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Foo</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="5"></td><td><pre>foo <span class="token keyword">instanceof</span> <span class="token class-name">Foo</span> <span class="token comment">// true</span></pre></td></tr></table></figure><h3 id="object-create-实现"><a class="anchor" href="#object-create-实现">#</a> Object. create 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">_new</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">// 1. 基于 obj 的原型创建一个新的对象</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">const</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>fn<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">// 2. 添加属性到新创建的 newObj 上，并获取 obj 函数执行的结果</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token comment">// 3. 如果执行结果有返回值并且是一个对象，返回执行的结果，否则，返回新创建的对象</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Object]'</span> <span class="token operator">?</span> result <span class="token operator">:</span> obj</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">_new</span><span class="token punctuation">(</span>Foo<span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Foo</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="5"></td><td><pre>foo <span class="token keyword">instanceof</span> <span class="token class-name">Foo</span> <span class="token comment">// true</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;instanceof-原理&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#instanceof-原理&quot;&gt;#&lt;/a&gt; instanceof 原理&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;instanceof&lt;/code&gt; &lt;/strong&gt; </summary>
      
    
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>fill &amp; join &amp; includex 原理</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2022/01/25/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/fill-includex-join/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2022/01/25/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/fill-includex-join/</id>
    <published>2022-01-25T03:14:44.000Z</published>
    <updated>2022-03-07T05:32:04.789Z</updated>
    
    <content type="html"><![CDATA[<h2 id="fill-原理"><a class="anchor" href="#fill-原理">#</a> fill 原理</h2><h3 id="使用-for-实现"><a class="anchor" href="#使用-for-实现">#</a> 使用 for 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_fill</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">//start 大于数组长度 或 end 大于数组长度返回自身 不然下面的 this [i] 会改变自身长度</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">||</span> end <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">this</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">//start &lt; 0 或 end &lt; 0 则是按 length + start|end 来计算，MDN 有介绍 </span></pre></td></tr><tr><td data-num="6"></td><td><pre>  start <span class="token operator">=</span> start <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">+</span> start <span class="token operator">:</span> start</pre></td></tr><tr><td data-num="7"></td><td><pre>  end <span class="token operator">=</span> end <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">+</span> end <span class="token operator">:</span> end </pre></td></tr><tr><td data-num="8"></td><td><pre>  </pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token comment">// 边界判断 什么参数都不传则都为 undefined</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">undefined</span> </pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">else</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> value</pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token punctuation">&#125;</span> </pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token keyword">return</span> <span class="token keyword">this</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="测试"><a class="anchor" href="#测试">#</a> 测试</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// fill</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// [undefined, undefined, undefined]</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>               <span class="token comment">// [4, 4, 4]</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token comment">// [1, 4, 4]</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>         <span class="token comment">// [1, 4, 3]</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>         <span class="token comment">// [1, 2, 3]</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>         <span class="token comment">// [1, 2, 3]</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>       <span class="token comment">// [4, 2, 3]</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">)</span>     <span class="token comment">// [1, 2, 3]</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>         <span class="token comment">// [1, 2, 3]</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>                <span class="token comment">// [4, 4, 4]</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>  <span class="token comment">// &#123;0: 4, 1: 4, 2: 4, length: 3&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token comment">// _fill</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">_fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token comment">// [undefined, undefined, undefined]</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">_fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>              <span class="token comment">// [4, 4, 4]</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">_fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>           <span class="token comment">// [1, 4, 4]</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">_fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token comment">// [1, 4, 3]</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">_fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment">// [1, 2, 3]</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">_fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>        <span class="token comment">// [1, 2, 3]</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">_fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>      <span class="token comment">// [4, 2, 3]</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">_fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">)</span>    <span class="token comment">// [1, 2, 3]</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>         <span class="token comment">// [1, 2, 3]</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">_fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>               <span class="token comment">// [4, 4, 4]</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">_fill</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">// &#123;0: 4, 1: 4, 2: 4, length: 3&#125;</span></pre></td></tr></table></figure><h3 id="使用-for-in-实现"><a class="anchor" href="#使用-for-in-实现">#</a> 使用 for in 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_fill</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">//start 大于数组长度 或 end 大于数组长度返回自身 不然下面的 this [i] 会改变自身长度</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">||</span> end <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">this</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">//start &lt; 0 或 end &lt; 0 则是按 length + start|end 来计算，MDN 有介绍 </span></pre></td></tr><tr><td data-num="6"></td><td><pre>  start <span class="token operator">=</span> start <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">+</span> start <span class="token operator">:</span> start</pre></td></tr><tr><td data-num="7"></td><td><pre>  end <span class="token operator">=</span> end <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">+</span> end <span class="token operator">:</span> end </pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token comment">// 用于判断类似 Array (4)._fill (4) this+'' 这种情况时 此时会是三个逗号</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token keyword">const</span> commaLength <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token keyword">let</span> comma <span class="token operator">=</span> <span class="token string">''</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> commaLength<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> comma <span class="token operator">+=</span> <span class="token string">','</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  </pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token comment">// 进行的边界判断 </span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">+</span> <span class="token string">''</span> <span class="token operator">==</span> comma <span class="token operator">||</span> <span class="token keyword">this</span> <span class="token operator">+</span> <span class="token string">''</span> <span class="token operator">===</span> <span class="token string">'[object Object]'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> value</pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token keyword">return</span> <span class="token keyword">this</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>  <span class="token comment">// 进行遍历</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'_fill'</span> <span class="token operator">===</span> key<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">this</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token comment">// 从 start 开始 小于 start 就跳过</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&lt;</span> start<span class="token punctuation">)</span> <span class="token keyword">continue</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token comment">// 小于 end 就停止</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value</pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token comment">// 判断上面什么参数也没传则都为 undefined</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">undefined</span>  </pre></td></tr><tr><td data-num="33"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="测试-2"><a class="anchor" href="#测试-2">#</a> 测试</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// fill</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// [4, 4, 4]</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// [1, 4, 4]</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// [1, 4, 3]</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// [1, 2, 3]</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// [1, 2, 3]</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// [4, 2, 3]</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// [1, 2, 3]</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// [1, 2, 3]</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// [4, 4, 4]</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// &#123;0: 4, 1: 4, 2: 4, length: 3&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">// _fill</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">_fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>              <span class="token comment">// [4, 4, 4]</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">_fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>           <span class="token comment">// [1, 4, 4]</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">_fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token comment">// [1, 4, 3]</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">_fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment">// [1, 2, 3]</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">_fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>        <span class="token comment">// [1, 2, 3]</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">_fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>      <span class="token comment">// [4, 2, 3]</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">_fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">)</span>    <span class="token comment">// [1, 2, 3]</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>         <span class="token comment">// [1, 2, 3]</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">_fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>               <span class="token comment">// [4, 4, 4]</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">_fill</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">// &#123;0: 4, 1: 4, 2: 4, length: 3&#125;</span></pre></td></tr></table></figure><h2 id="join-原理"><a class="anchor" href="#join-原理">#</a> join 原理</h2><h3 id="使用-for-实现-2"><a class="anchor" href="#使用-for-实现-2">#</a> 使用 for 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_join</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>separator <span class="token operator">=</span> <span class="token string">','</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">''</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    str <span class="token operator">=</span> i <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>str<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>separator<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">return</span> str</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="测试-3"><a class="anchor" href="#测试-3">#</a> 测试</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// join</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Wind'</span><span class="token punctuation">,</span> <span class="token string">'Rain'</span><span class="token punctuation">,</span> <span class="token string">'Fire'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">// Wind,Rain,Fire</span></pre></td></tr><tr><td data-num="4"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">', '</span><span class="token punctuation">)</span>  <span class="token comment">// Wind, Rain, Fire</span></pre></td></tr><tr><td data-num="5"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">' + '</span><span class="token punctuation">)</span> <span class="token comment">// Wind + Rain + Fire</span></pre></td></tr><tr><td data-num="6"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token comment">// WindRainFire</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// _join</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Wind'</span><span class="token punctuation">,</span> <span class="token string">'Rain'</span><span class="token punctuation">,</span> <span class="token string">'Fire'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="10"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">_join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">// Wind,Rain,Fire</span></pre></td></tr><tr><td data-num="11"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">_join</span><span class="token punctuation">(</span><span class="token string">', '</span><span class="token punctuation">)</span>  <span class="token comment">// Wind, Rain, Fire</span></pre></td></tr><tr><td data-num="12"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">_join</span><span class="token punctuation">(</span><span class="token string">' + '</span><span class="token punctuation">)</span> <span class="token comment">// Wind + Rain + Fire</span></pre></td></tr><tr><td data-num="13"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">_join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token comment">// WindRainFire</span></pre></td></tr></table></figure><h3 id="使用-for-in-实现-2"><a class="anchor" href="#使用-for-in-实现-2">#</a> 使用 for in 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_join</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">','</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">''</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">'_join'</span> <span class="token operator">===</span> key<span class="token punctuation">)</span> <span class="token keyword">return</span> str</pre></td></tr><tr><td data-num="5"></td><td><pre>    str <span class="token operator">=</span> key <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>str<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>str<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="测试-4"><a class="anchor" href="#测试-4">#</a> 测试</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// join</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Wind'</span><span class="token punctuation">,</span> <span class="token string">'Rain'</span><span class="token punctuation">,</span> <span class="token string">'Fire'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">// Wind,Rain,Fire</span></pre></td></tr><tr><td data-num="4"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">', '</span><span class="token punctuation">)</span>  <span class="token comment">// Wind, Rain, Fire</span></pre></td></tr><tr><td data-num="5"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">' + '</span><span class="token punctuation">)</span> <span class="token comment">// Wind + Rain + Fire</span></pre></td></tr><tr><td data-num="6"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token comment">// WindRainFire</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// _join</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Wind'</span><span class="token punctuation">,</span> <span class="token string">'Rain'</span><span class="token punctuation">,</span> <span class="token string">'Fire'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="10"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">_join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">// Wind,Rain,Fire</span></pre></td></tr><tr><td data-num="11"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">_join</span><span class="token punctuation">(</span><span class="token string">', '</span><span class="token punctuation">)</span>  <span class="token comment">// Wind, Rain, Fire</span></pre></td></tr><tr><td data-num="12"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">_join</span><span class="token punctuation">(</span><span class="token string">' + '</span><span class="token punctuation">)</span> <span class="token comment">// Wind + Rain + Fire</span></pre></td></tr><tr><td data-num="13"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">_join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token comment">// WindRainFire</span></pre></td></tr></table></figure><h2 id="string-includex-原理"><a class="anchor" href="#string-includex-原理">#</a> String includex 原理</h2><h3 id="使用-for-实现-3"><a class="anchor" href="#使用-for-实现-3">#</a> 使用 for 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">String</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_includes</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">searchString<span class="token punctuation">,</span> position <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">// 1. 如果值一样直接 return true 节约性能</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>searchString <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">// 2. 当 position 索引大于自身长度时则直接返回 false</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  </pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token comment">// 3. 字符串的长度</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">const</span> searchStringLength <span class="token operator">=</span> searchString<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length</pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token comment">// 4. 如果为负数从 0 开始查找</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  position <span class="token operator">=</span> position <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> position</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token comment">// 5. 定义用来接收每次遍历完的字符串 来和 searchString 比较</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token keyword">let</span> resultStr <span class="token operator">=</span> <span class="token string">''</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  </pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token comment">// 6. 需要遍历的次数 例如：abcde 查找 de -> ab bc cd de 需要遍历 4 次</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token keyword">let</span> cycleIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> searchStringLength <span class="token operator">+</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  </pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token comment">// 7.getStr 函数用于获取每次递进的字符串</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  <span class="token comment">// 8. 举栗:'abcde' -> 会以这种形式依次进行遍历 ab -> bc -> cd -> de</span></pre></td></tr><tr><td data-num="22"></td><td><pre>  <span class="token keyword">const</span> <span class="token function-variable function">getStr</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> searchStringLength<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre>      resultStr <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token keyword">return</span> resultStr</pre></td></tr><tr><td data-num="26"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> position<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cycleIndex<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token comment">// 如果没查到就置空</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>searchString <span class="token operator">!=</span> <span class="token function">getStr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> resultStr <span class="token operator">=</span> <span class="token string">''</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="32"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre>  <span class="token keyword">return</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="测试-5"><a class="anchor" href="#测试-5">#</a> 测试</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'To be, or not to be, that is the question.'</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// includes</span></pre></td></tr><tr><td data-num="3"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'To be'</span><span class="token punctuation">)</span>       <span class="token comment">// true</span></pre></td></tr><tr><td data-num="4"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'question'</span><span class="token punctuation">)</span>    <span class="token comment">// true</span></pre></td></tr><tr><td data-num="5"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'nonexistent'</span><span class="token punctuation">)</span> <span class="token comment">// false</span></pre></td></tr><tr><td data-num="6"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'To be'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">// false</span></pre></td></tr><tr><td data-num="7"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'TO BE'</span><span class="token punctuation">)</span>       <span class="token comment">// false</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// _includes</span></pre></td></tr><tr><td data-num="10"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">_includes</span><span class="token punctuation">(</span><span class="token string">'To be'</span><span class="token punctuation">)</span>       <span class="token comment">// true</span></pre></td></tr><tr><td data-num="11"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">_includes</span><span class="token punctuation">(</span><span class="token string">'question'</span><span class="token punctuation">)</span>    <span class="token comment">// true</span></pre></td></tr><tr><td data-num="12"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">_includes</span><span class="token punctuation">(</span><span class="token string">'nonexistent'</span><span class="token punctuation">)</span> <span class="token comment">// false</span></pre></td></tr><tr><td data-num="13"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">_includes</span><span class="token punctuation">(</span><span class="token string">'To be'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">// false</span></pre></td></tr><tr><td data-num="14"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">_includes</span><span class="token punctuation">(</span><span class="token string">'TO BE'</span><span class="token punctuation">)</span>       <span class="token comment">// false</span></pre></td></tr></table></figure><h3 id="使用-while-实现"><a class="anchor" href="#使用-while-实现">#</a> 使用 while  实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">String</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_includes</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> startIndex <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> value<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token comment">// 字符串长度</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">const</span> length <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length</pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token comment">// 参数字符串长度</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token keyword">const</span> valueLength <span class="token operator">=</span> value<span class="token punctuation">.</span>length</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token comment">//startIndex &lt; 0 就从 0 开始搜索</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  startIndex <span class="token operator">=</span> startIndex <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> startIndex</pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token keyword">let</span> i <span class="token operator">=</span> startIndex</pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token comment">// 循环次数</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> valueLength <span class="token operator">&lt;=</span> length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> str <span class="token operator">=</span> <span class="token string">''</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    </pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token comment">// 判断需要遍历次数 例如 abcde 查找 de -> ab bc cd de 4 次</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> valueLength<span class="token punctuation">)</span> str <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i <span class="token operator">+</span> num<span class="token operator">++</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    i<span class="token operator">++</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token comment">// 如果查找到返回 true</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">===</span> value<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>  <span class="token keyword">return</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="测试-6"><a class="anchor" href="#测试-6">#</a> 测试</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'To be, or not to be, that is the question.'</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// includes</span></pre></td></tr><tr><td data-num="3"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'To be'</span><span class="token punctuation">)</span>       <span class="token comment">// true</span></pre></td></tr><tr><td data-num="4"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'question'</span><span class="token punctuation">)</span>    <span class="token comment">// true</span></pre></td></tr><tr><td data-num="5"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'nonexistent'</span><span class="token punctuation">)</span> <span class="token comment">// false</span></pre></td></tr><tr><td data-num="6"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'To be'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">// false</span></pre></td></tr><tr><td data-num="7"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'TO BE'</span><span class="token punctuation">)</span>       <span class="token comment">// false</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// _includes</span></pre></td></tr><tr><td data-num="10"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">_includes</span><span class="token punctuation">(</span><span class="token string">'To be'</span><span class="token punctuation">)</span>       <span class="token comment">// true</span></pre></td></tr><tr><td data-num="11"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">_includes</span><span class="token punctuation">(</span><span class="token string">'question'</span><span class="token punctuation">)</span>    <span class="token comment">// true</span></pre></td></tr><tr><td data-num="12"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">_includes</span><span class="token punctuation">(</span><span class="token string">'nonexistent'</span><span class="token punctuation">)</span> <span class="token comment">// false</span></pre></td></tr><tr><td data-num="13"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">_includes</span><span class="token punctuation">(</span><span class="token string">'To be'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">// false</span></pre></td></tr><tr><td data-num="14"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">_includes</span><span class="token punctuation">(</span><span class="token string">'TO BE'</span><span class="token punctuation">)</span>       <span class="token comment">// false</span></pre></td></tr></table></figure><h2 id="array-includex-原理"><a class="anchor" href="#array-includex-原理">#</a> Array includex 原理</h2><h3 id="使用-for-实现-4"><a class="anchor" href="#使用-for-实现-4">#</a> 使用 for 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_includes</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> start <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  start <span class="token operator">=</span> start <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">+</span> start <span class="token operator">:</span> start</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> value <span class="token operator">||</span> Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token keyword">return</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="测试-7"><a class="anchor" href="#测试-7">#</a> 测试</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// includes</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>     <span class="token comment">// false </span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>     <span class="token comment">// false</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment">// true</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// _includes</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>     <span class="token comment">// true</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>     <span class="token comment">// false </span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment">// false</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr></table></figure><h3 id="使用-for-in-实现-3"><a class="anchor" href="#使用-for-in-实现-3">#</a> 使用 for in 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_includes</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> start <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  start <span class="token operator">=</span> start <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">+</span> start <span class="token operator">:</span> start</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">&lt;</span> start<span class="token punctuation">)</span> <span class="token keyword">continue</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">||</span> Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token operator">===</span> Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">return</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="测试-8"><a class="anchor" href="#测试-8">#</a> 测试</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// includes</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>     <span class="token comment">// false </span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>     <span class="token comment">// false</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment">// true</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// _includes</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>     <span class="token comment">// true</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>     <span class="token comment">// false </span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment">// false</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;fill-原理&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fill-原理&quot;&gt;#&lt;/a&gt; fill 原理&lt;/h2&gt;
&lt;h3 id=&quot;使用-for-实现&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#使用-for-实现&quot;&gt;#&lt;/a&gt; 使用 for 实现</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>every &amp; some &amp; find &amp; findIndex 原理</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2022/01/23/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/every-some-find-findIndex/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2022/01/23/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/every-some-find-findIndex/</id>
    <published>2022-01-23T08:29:59.000Z</published>
    <updated>2022-03-07T03:45:56.547Z</updated>
    
    <content type="html"><![CDATA[<h2 id="every-原理"><a class="anchor" href="#every-原理">#</a> every 原理</h2><h3 id="使用-for-实现"><a class="anchor" href="#使用-for-实现">#</a> 使用 for 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_every</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">return</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'稚名真白'</span><span class="token punctuation">,</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'蝶祈'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">const</span> flag <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">_every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token keyword">return</span> value <span class="token operator">!==</span> <span class="token string">'入间同学'</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token comment">//return value !== ' 蝶祈 ' //false</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr></table></figure><h3 id="使用-for-in-实现"><a class="anchor" href="#使用-for-in-实现">#</a> 使用 for in 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_every</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">'NaN'</span> <span class="token operator">===</span> <span class="token punctuation">(</span><span class="token operator">+</span>key <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">return</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'稚名真白'</span><span class="token punctuation">,</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'蝶祈'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">const</span> flag <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">_every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token comment">//return value !== ' 入间同学 ' //true</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">return</span> value <span class="token operator">!==</span> <span class="token string">'蝶祈'</span> <span class="token comment">// false</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token comment">// false</span></pre></td></tr></table></figure><h2 id="some-原理"><a class="anchor" href="#some-原理">#</a> some 原理</h2><h3 id="使用-for-实现-2"><a class="anchor" href="#使用-for-实现-2">#</a> 使用 for 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_some</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">return</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'稚名真白'</span><span class="token punctuation">,</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'蝶祈'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">const</span> flag <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">_some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token keyword">return</span> value <span class="token operator">===</span> <span class="token string">'入间同学'</span> <span class="token comment">// false</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token comment">//return value === ' 蝶祈 ' //true</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token comment">// false</span></pre></td></tr></table></figure><h3 id="使用-for-in-实现-2"><a class="anchor" href="#使用-for-in-实现-2">#</a> 使用 for in 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_some</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">'NaN'</span> <span class="token operator">===</span> <span class="token punctuation">(</span><span class="token operator">+</span>key <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">return</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'稚名真白'</span><span class="token punctuation">,</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'蝶祈'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">const</span> flag <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">_some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token keyword">return</span> value <span class="token operator">===</span> <span class="token string">'入间同学'</span> <span class="token comment">// false</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token comment">//return value === ' 蝶祈 ' //true</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token comment">// false</span></pre></td></tr></table></figure><h2 id="find-原理"><a class="anchor" href="#find-原理">#</a> find 原理</h2><h3 id="使用-for-实现-3"><a class="anchor" href="#使用-for-实现-3">#</a> 使用 for 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_find</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">undefined</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">return</span> <span class="token keyword">undefined</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'稚名真白'</span><span class="token punctuation">,</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'蝶祈'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">const</span> res <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">_find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token keyword">return</span> value <span class="token operator">===</span> <span class="token string">'入间同学'</span> <span class="token comment">// undefined</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token comment">//return value === ' 蝶祈 ' // 蝶祈</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment">// undefined</span></pre></td></tr></table></figure><h3 id="使用-for-in-实现-3"><a class="anchor" href="#使用-for-in-实现-3">#</a> 使用 for in 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_find</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">undefined</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">'NaN'</span> <span class="token operator">===</span> <span class="token punctuation">(</span><span class="token operator">+</span>key <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">undefined</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token keyword">return</span> <span class="token keyword">undefined</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'稚名真白'</span><span class="token punctuation">,</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'蝶祈'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">const</span> res <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">_find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token keyword">return</span> value <span class="token operator">===</span> <span class="token string">'入间同学'</span> <span class="token comment">// undefined</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token comment">//return value === ' 蝶祈 ' // 蝶祈</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment">// 蝶祈</span></pre></td></tr></table></figure><h2 id="findindex-原理"><a class="anchor" href="#findindex-原理">#</a> findIndex 原理</h2><h3 id="使用-for-实现-4"><a class="anchor" href="#使用-for-实现-4">#</a> 使用 for 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_findIndex</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> i</pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'稚名真白'</span><span class="token punctuation">,</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'蝶祈'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">const</span> res <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">_findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token comment">//return value === ' 入间同学 ' //-1</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">return</span> value <span class="token operator">===</span> <span class="token string">'蝶祈'</span> <span class="token comment">// 2</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment">// -1</span></pre></td></tr></table></figure><h3 id="使用-for-in-实现-4"><a class="anchor" href="#使用-for-in-实现-4">#</a> 使用 for in 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_findIndex</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">'NaN'</span> <span class="token operator">===</span> <span class="token operator">+</span>key <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">+</span>key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">+</span>key</pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'稚名真白'</span><span class="token punctuation">,</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'蝶祈'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">const</span> res <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">_findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token comment">//return value === ' 入间同学 ' //-1</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">return</span> value <span class="token operator">===</span> <span class="token string">'蝶祈'</span> <span class="token comment">// 2</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment">// 2</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;every-原理&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#every-原理&quot;&gt;#&lt;/a&gt; every 原理&lt;/h2&gt;
&lt;h3 id=&quot;使用-for-实现&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#使用-for-实现&quot;&gt;#&lt;/a&gt; 使用 for</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>forEach &amp; filter &amp; map &amp; reduce 原理</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2022/01/21/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/forEach-filter-map-reduce/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2022/01/21/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/forEach-filter-map-reduce/</id>
    <published>2022-01-21T07:26:10.000Z</published>
    <updated>2022-02-08T16:40:30.027Z</updated>
    
    <content type="html"><![CDATA[<h2 id="foreach-原理"><a class="anchor" href="#foreach-原理">#</a> forEach 原理</h2><h3 id="使用-for-实现"><a class="anchor" href="#使用-for-实现">#</a> 使用 for 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'稚名真白'</span><span class="token punctuation">,</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'蝶祈'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_forEach</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>array<span class="token punctuation">.</span><span class="token function">_forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment">/*</pre></td></tr><tr><td data-num="13"></td><td><pre> 稚名真白 0 [' 稚名真白 ', ' 樱岛麻衣 ', ' 蝶祈 ']</pre></td></tr><tr><td data-num="14"></td><td><pre> 樱岛麻衣 1 [ ' 稚名真白 ', ' 樱岛麻衣 ', ' 蝶祈 ' ]</pre></td></tr><tr><td data-num="15"></td><td><pre> 蝶祈 2 [ ' 稚名真白 ', ' 樱岛麻衣 ', ' 蝶祈 ' ]</pre></td></tr><tr><td data-num="16"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id="使用-for-in-实现"><a class="anchor" href="#使用-for-in-实现">#</a> 使用 for in 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'稚名真白'</span><span class="token punctuation">,</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'蝶祈'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_forEach</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'NaN'</span> <span class="token operator">===</span> <span class="token punctuation">(</span><span class="token operator">+</span>key <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>array<span class="token punctuation">.</span><span class="token function">_forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">/*</pre></td></tr><tr><td data-num="14"></td><td><pre> 稚名真白 0 [' 稚名真白 ', ' 樱岛麻衣 ', ' 蝶祈 ']</pre></td></tr><tr><td data-num="15"></td><td><pre> 樱岛麻衣 1 [ ' 稚名真白 ', ' 樱岛麻衣 ', ' 蝶祈 ' ]</pre></td></tr><tr><td data-num="16"></td><td><pre> 蝶祈 2 [ ' 稚名真白 ', ' 樱岛麻衣 ', ' 蝶祈 ' ]</pre></td></tr><tr><td data-num="17"></td><td><pre>*/</span></pre></td></tr></table></figure><h2 id="filter-原理"><a class="anchor" href="#filter-原理">#</a> filter 原理</h2><h3 id="使用-for-实现-2"><a class="anchor" href="#使用-for-实现-2">#</a> 使用 for 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'稚名真白'</span><span class="token punctuation">,</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'蝶祈'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_filter</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token keyword">return</span> res</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">const</span> ゆずりはいのり <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">_filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">return</span> value <span class="token operator">===</span> <span class="token string">'蝶祈'</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ゆずりはいのり<span class="token punctuation">)</span> <span class="token comment">// [' 蝶祈 ']</span></pre></td></tr></table></figure><h3 id="使用-for-in-实现-2"><a class="anchor" href="#使用-for-in-实现-2">#</a> 使用 for in 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'稚名真白'</span><span class="token punctuation">,</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'蝶祈'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_filter</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'NaN'</span> <span class="token operator">===</span> <span class="token punctuation">(</span><span class="token operator">+</span>key <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res</pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">const</span> ゆずりはいのり <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">_filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">return</span> value <span class="token operator">===</span> <span class="token string">'蝶祈'</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ゆずりはいのり<span class="token punctuation">)</span> <span class="token comment">// [' 蝶祈 ']</span></pre></td></tr></table></figure><h2 id="map-原理"><a class="anchor" href="#map-原理">#</a> map 原理</h2><h3 id="使用-for-实现-3"><a class="anchor" href="#使用-for-实现-3">#</a> 使用 for 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'稚名真白'</span><span class="token punctuation">,</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'蝶祈'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_map</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token keyword">return</span> res</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">const</span> newArray <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">_map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">return</span> index <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> value</pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArray<span class="token punctuation">)</span> <span class="token comment">// ['0 - 稚名真白 ', '1 - 樱岛麻衣 ', '2 - 蝶祈 ']</span></pre></td></tr></table></figure><h3 id="使用-for-in-实现-3"><a class="anchor" href="#使用-for-in-实现-3">#</a> 使用 for in 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'稚名真白'</span><span class="token punctuation">,</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'蝶祈'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_map</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'NaN'</span> <span class="token operator">===</span> <span class="token punctuation">(</span><span class="token operator">+</span>key <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res</pre></td></tr><tr><td data-num="7"></td><td><pre>    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">const</span> newArray <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">_map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">return</span> index <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> value</pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArray<span class="token punctuation">)</span> <span class="token comment">// ['0 - 稚名真白 ', '1 - 樱岛麻衣 ', '2 - 蝶祈 ']</span></pre></td></tr></table></figure><h2 id="reduce"><a class="anchor" href="#reduce">#</a> reduce</h2><h3 id="使用-for-实现-4"><a class="anchor" href="#使用-for-实现-4">#</a> 使用 for 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_reduce</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback<span class="token punctuation">,</span> initValue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">'[object Function]'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'callback must be function'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token comment">// 判断是否传了初始值，没有传就从下标 1 开始遍历，否则从下标 0 开始遍历</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">let</span> initIndex <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token comment">// 判断初始值，如果没传就默认取下标 0 的元素，否则取传过来的初始值为默认值</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">let</span> accumulator <span class="token operator">=</span> initIndex <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">:</span> initValue</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> initIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> accumulator <span class="token operator">=</span> <span class="token function">callback</span><span class="token punctuation">(</span>accumulator<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token keyword">return</span> accumulator  </pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">const</span> res <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">_reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> currentIndex<span class="token punctuation">,</span>  array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>accumulator<span class="token punctuation">)</span> <span class="token comment">// 10 14 30 66 115</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token keyword">return</span> accumulator <span class="token operator">+=</span> currentValue <span class="token operator">**</span> <span class="token number">2</span> <span class="token comment">// (10 + 2**2) (14 + 4**4) (30 + 6**6) (66 + 7**7) (115 + 8**8)</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment">// 179</span></pre></td></tr></table></figure><h3 id="使用-for-in-实现-4"><a class="anchor" href="#使用-for-in-实现-4">#</a> 使用 for in 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_reduce</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback<span class="token punctuation">,</span> initValue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">'[object Function]'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'callback must be function'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token comment">// 判断是否传了初始值，没有传就从下标 1 开始遍历，否则从下标 0 开始遍历</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">let</span> initIndex <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token comment">// 判断初始值，如果没传就默认取下标 0 的元素，否则取传过来的初始值为默认值</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">let</span> accumulator <span class="token operator">=</span> initIndex <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">:</span> initValue</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">'NaN'</span> <span class="token operator">===</span> <span class="token operator">+</span>key <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token keyword">return</span> accumulator</pre></td></tr><tr><td data-num="16"></td><td><pre>    accumulator <span class="token operator">=</span> <span class="token function">callback</span><span class="token punctuation">(</span>accumulator<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">const</span> res <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">_reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> currentIndex<span class="token punctuation">,</span>  array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>accumulator<span class="token punctuation">)</span> <span class="token comment">// 10 14 30 66 115</span></pre></td></tr><tr><td data-num="22"></td><td><pre>  <span class="token keyword">return</span> accumulator <span class="token operator">+=</span> currentValue <span class="token operator">**</span> <span class="token number">2</span> <span class="token comment">// 执行流程 -> (10 + 2**2) (14 + 4**4) (30 + 6**6) (66 + 7**7) (115 + 8**8)</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment">// 179</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;foreach-原理&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#foreach-原理&quot;&gt;#&lt;/a&gt; forEach 原理&lt;/h2&gt;
&lt;h3 id=&quot;使用-for-实现&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#使用-for-实现&quot;&gt;#&lt;/a&gt; </summary>
      
    
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>优先级队列实现 (PriorityQueue)</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2022/01/19/data-structures-and-algorithms/data-structure/priority-queue/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2022/01/19/data-structures-and-algorithms/data-structure/priority-queue/</id>
    <published>2022-01-19T15:01:23.000Z</published>
    <updated>2022-02-12T12:52:45.947Z</updated>
    
    <content type="html"><![CDATA[<h2 id="优先级队列结构"><a class="anchor" href="#优先级队列结构">#</a> 优先级队列结构</h2><ul><li><p>优先级队列的特点</p><ul><li>我们知道，普通的队列插入一个元素，数据会被放在后端。并且需要前面所有的元素都处理完后才会处理前面的数据。</li><li>但是优先级队列，再插入一个元素的时候会考虑该数据的优先级。和其他数据优先级 <code>进行比较</code></li><li>比较完成后，可以得出这个元素在队列中正确的位置</li><li>其他处理方式，和基本队列的处理方式一样。</li></ul></li><li><p>优先级队列主要考虑的问题：</p><ul><li>每个元素不再只是一个数据，而且包含数据的优先级</li></ul></li></ul><h2 id="example"><a class="anchor" href="#example">#</a> Example</h2><ul><li>生活中的优先级队列例子<ul><li>比如某些家庭在吃饭时，老人优先级更高，先动筷子，其次是父母，最后才是小孩。</li><li>你正在吃饭，突然非常想去五谷轮回之所，于是你就去了。</li></ul></li></ul><p><strong>Example 1:</strong></p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>每次插入几组数据：</pre></td></tr><tr><td data-num="2"></td><td><pre>'Saber'<span class="token punctuation">,</span> <span class="token number">100</span></pre></td></tr><tr><td data-num="3"></td><td><pre>'Nekoaimer'<span class="token punctuation">,</span> <span class="token number">1000</span></pre></td></tr><tr><td data-num="4"></td><td><pre>'Lain'<span class="token punctuation">,</span> <span class="token number">10</span></pre></td></tr><tr><td data-num="5"></td><td><pre>输出：'Lain'<span class="token punctuation">,</span> 10  'Saber'<span class="token punctuation">,</span> 100  'Nekoaimer'<span class="token punctuation">,</span> <span class="token number">1000</span></pre></td></tr></table></figure><ul><li>解释：第一个是为元素，第二个是为优先级。<strong> <code>那么这个例子我们就以认为数字越低 优先级越高来实现优先级队列</code> </strong> 那么每次插入数据都会进行比较 排列，所以会得出这个结果。</li></ul><p><strong>Example 2:</strong></p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>每次插入几组数据：</pre></td></tr><tr><td data-num="2"></td><td><pre>'Saber'<span class="token punctuation">,</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="3"></td><td><pre>'Nekoaimer'<span class="token punctuation">,</span> <span class="token number">3</span></pre></td></tr><tr><td data-num="4"></td><td><pre>'Lain'<span class="token punctuation">,</span> <span class="token number">2</span></pre></td></tr><tr><td data-num="5"></td><td><pre>输出：Saber 1  Lain 2  Nekoaimer 3</pre></td></tr></table></figure><h2 id="solving-ideas"><a class="anchor" href="#solving-ideas">#</a> Solving Ideas</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 封装优先级队列</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">function</span> <span class="token function">PriorityQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token comment">// 1. 内部类</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">function</span> <span class="token function">QueueElement</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> priority</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>el <span class="token operator">=</span> el</pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>priority <span class="token operator">=</span> priority</pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token comment">// 封装属性</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token keyword">this</span><span class="token punctuation">.</span>items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token comment">// 封装方法</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token comment">// 实现插入方法</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token class-name">PriorityQueue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">enqueue</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> priority</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token comment">// 1. 创建 QueueElement 对象</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">const</span> queueElement <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueueElement</span><span class="token punctuation">(</span>el <span class="token punctuation">,</span>priority<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>queueElement<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token comment">// 3. 判断队列是否为空</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>queueElement<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>      <span class="token keyword">let</span> added <span class="token operator">=</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="23"></td><td><pre>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>queueElement<span class="token punctuation">.</span>priority <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>priority<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>          <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> queueElement<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre>          added <span class="token operator">=</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="27"></td><td><pre>          <span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>queueElement<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre>   <span class="token comment">// 4. 从队列中删除前端元素</span></pre></td></tr><tr><td data-num="35"></td><td><pre>   <span class="token class-name">PriorityQueue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">dequeue</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="37"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre>  <span class="token comment">// 5. 查看前端的元素</span></pre></td></tr><tr><td data-num="40"></td><td><pre>  <span class="token class-name">PriorityQueue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">front</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="42"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre>  <span class="token comment">// 6. 查看队列是否为空</span></pre></td></tr><tr><td data-num="45"></td><td><pre>  <span class="token class-name">PriorityQueue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">isEmpty</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="47"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="48"></td><td><pre></pre></td></tr><tr><td data-num="49"></td><td><pre>  <span class="token comment">// 7. 查看队列中元素个数</span></pre></td></tr><tr><td data-num="50"></td><td><pre>  <span class="token class-name">PriorityQueue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">size</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length</pre></td></tr><tr><td data-num="52"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="53"></td><td><pre></pre></td></tr><tr><td data-num="54"></td><td><pre>  <span class="token comment">// 8.toString 方法</span></pre></td></tr><tr><td data-num="55"></td><td><pre>  <span class="token class-name">PriorityQueue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">toString</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>    <span class="token keyword">let</span> resStr <span class="token operator">=</span> <span class="token string">''</span></pre></td></tr><tr><td data-num="57"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span>key <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>      resStr <span class="token operator">+=</span> key<span class="token punctuation">.</span>el <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> key<span class="token punctuation">.</span>priority <span class="token operator">+</span> <span class="token string">'  '</span></pre></td></tr><tr><td data-num="59"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>    <span class="token keyword">return</span> resStr</pre></td></tr><tr><td data-num="61"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="63"></td><td><pre></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token comment">// 测试代码</span></pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token keyword">const</span> pq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="66"></td><td><pre>pq<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token string">'Lain'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="67"></td><td><pre>pq<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token string">'Saber'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="68"></td><td><pre>pq<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token string">'Nekoaimer'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="69"></td><td><pre></pre></td></tr><tr><td data-num="70"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pq<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="71"></td><td><pre><span class="token comment">/*</pre></td></tr><tr><td data-num="72"></td><td><pre>PriorityQueue &#123;</pre></td></tr><tr><td data-num="73"></td><td><pre>  items: [</pre></td></tr><tr><td data-num="74"></td><td><pre>    QueueElement &#123; el: 'Lain', priority: 10 &#125;,      </pre></td></tr><tr><td data-num="75"></td><td><pre>    QueueElement &#123; el: 'Saber', priority: 100 &#125;,    </pre></td></tr><tr><td data-num="76"></td><td><pre>    QueueElement &#123; el: 'Nekoaimer', priority: 1000 &#125;</pre></td></tr><tr><td data-num="77"></td><td><pre>  ]</pre></td></tr><tr><td data-num="78"></td><td><pre>&#125;</pre></td></tr><tr><td data-num="79"></td><td><pre>*/</span></pre></td></tr><tr><td data-num="80"></td><td><pre></pre></td></tr><tr><td data-num="81"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pq<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Lain 10  Saber 100  Nekoaimer 1000</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;优先级队列结构&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#优先级队列结构&quot;&gt;#&lt;/a&gt; 优先级队列结构&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;优先级队列的特点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们知道，普通的队列插入一个元素，数据会被放在后端。并且需要前面所有的</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/data-structures-and-algorithms/"/>
    
    <category term="data structure" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/data-structures-and-algorithms/data-structure/"/>
    
    
    <category term="数据结构与算法" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>队列实现击鼓传花 (Queue)</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2022/01/19/data-structures-and-algorithms/data-structure/pass-the-parcel/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2022/01/19/data-structures-and-algorithms/data-structure/pass-the-parcel/</id>
    <published>2022-01-19T01:58:35.000Z</published>
    <updated>2022-02-12T12:52:58.136Z</updated>
    
    <content type="html"><![CDATA[<h2 id="队列结构queue"><a class="anchor" href="#队列结构queue">#</a> 队列结构（Queue）</h2><ul><li><p>队列是一个简单的数据结构，它是一个 <code>允许在一端进行插入操作，而在另一端进行删除操作的线性表</code> 。队列遵循先进先出（FIFO, First-In-First-Out）的特征，和栈（LIFO, Last In First Out）刚好相反。</p></li><li><p>队列，它是一种受限的线性表</p><ul><li>受限之处在于它只允许在表的前端 (front) 进行删除操作</li><li>而在表的后端 (rear) 进行插入操作</li></ul></li><li><p>生活中类似的队列结构</p><ul><li>比如电影院、商城、奶茶店排队</li><li>优先排队的人，优先处理</li></ul></li></ul><h2 id="实现队列"><a class="anchor" href="#实现队列">#</a> 实现队列</h2><ul><li><code>封装一个队列实现下面的击鼓传花</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 封装队列类</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">function</span> <span class="token function">Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token comment">// 属性</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">this</span><span class="token punctuation">.</span>items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token comment">// 方法</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token comment">// 1. 将元素加入到队列中</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token class-name">Queue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">enqueue</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token comment">// 2. 从队列中删除前端元素</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token class-name">Queue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">dequeue</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token comment">// 3. 查看前端的元素</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token class-name">Queue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">front</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>  <span class="token comment">// 4. 查看队列是否为空</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token class-name">Queue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">isEmpty</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token comment">// 5. 查看队列中元素个数</span></pre></td></tr><tr><td data-num="28"></td><td><pre>  <span class="token class-name">Queue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">size</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length</pre></td></tr><tr><td data-num="30"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre>  <span class="token comment">// 6.toString 方法</span></pre></td></tr><tr><td data-num="33"></td><td><pre>  <span class="token class-name">Queue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">toString</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token keyword">let</span> resStr <span class="token operator">=</span> <span class="token string">''</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span>key <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>      resStr<span class="token operator">+=</span> key</pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token keyword">return</span> resStr</pre></td></tr><tr><td data-num="39"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="example"><a class="anchor" href="#example">#</a> Example</h2><ul><li>原游戏击鼓传花规则是，例如班级的学生围城一圈，从某位学生手里向旁边的同学传一束花。这个时候某个人在击鼓， 鼓声停下的一刻，花落在谁手里，谁就出来表演节目</li><li>修改游戏规则<ul><li>学生们围成一圈， 开始数数， 数到某个数的人自动淘汰，最后剩下的人获得游戏胜利，并获得胜利者的位置。</li></ul></li></ul><p><strong>Example 1:</strong></p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>输入：<span class="token punctuation">[</span><span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'小鸟游六花'</span><span class="token punctuation">,</span> <span class="token string">'入间同学'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">6</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token key atrule">输出：el</span><span class="token punctuation">:</span> <span class="token key atrule">入间同学  index</span><span class="token punctuation">:</span> <span class="token number">2</span></pre></td></tr></table></figure><ul><li>解释：从 0 开始数到 6 是樱岛麻衣，那么樱岛麻衣被淘汰此时数组剩下两个元素 [' 小鸟游六花 ', ' 入间同学 '],</li><li>接着被淘汰的元素往下从 0 数到 6，是小鸟游六花，那么小鸟游六花被淘汰</li><li>此时数组只剩下入间同学，并获取原来的下标值，那么就是 2</li></ul><p><strong>Example 2:</strong></p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>输入：<span class="token punctuation">[</span><span class="token string">'Saber'</span><span class="token punctuation">,</span> <span class="token string">'Lain'</span><span class="token punctuation">,</span> <span class="token string">'Nico'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">8</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token key atrule">输出：el</span><span class="token punctuation">:</span> <span class="token key atrule">Lain  index</span><span class="token punctuation">:</span> <span class="token number">1</span></pre></td></tr></table></figure><h2 id="solving-ideas"><a class="anchor" href="#solving-ideas">#</a> Solving Ideas</h2><ul><li><code>我们使用上面封装的队列方法实现击鼓传花</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">passGame</span><span class="token punctuation">(</span><span class="token parameter">nameList<span class="token punctuation">,</span> num</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">// 1. 创建一个队列</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">// 2. 将所有人依次加入到队列中</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nameList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    queue<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>nameList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token comment">// 3. 开始数数字</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>      queue<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    queue<span class="token punctuation">.</span><span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">index: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>nameList<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> : el: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>queue<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">passGame</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Saber'</span><span class="token punctuation">,</span> <span class="token string">'Lain'</span><span class="token punctuation">,</span> <span class="token string">'Nico'</span><span class="token punctuation">,</span> <span class="token string">'Nekoaimer'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment">// el: Nekoaimer  index: 3</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;队列结构queue&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#队列结构queue&quot;&gt;#&lt;/a&gt; 队列结构（Queue）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;队列是一个简单的数据结构，它是一个 &lt;code&gt;允许在一端进行插入操作，而在另一端进行删除操作的线</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/data-structures-and-algorithms/"/>
    
    <category term="data structure" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/data-structures-and-algorithms/data-structure/"/>
    
    
    <category term="数据结构与算法" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>进制转换</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2022/01/16/data-structures-and-algorithms/algorithm/problems/easy/HexBinDecOct/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2022/01/16/data-structures-and-algorithms/algorithm/problems/easy/HexBinDecOct/</id>
    <published>2022-01-16T06:49:39.000Z</published>
    <updated>2022-01-19T05:59:34.721Z</updated>
    
    <content type="html"><![CDATA[<h2 id="dec2bin-example"><a class="anchor" href="#dec2bin-example">#</a> Dec2Bin Example</h2><p><strong>Example 1:</strong></p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>输入：n = 10</pre></td></tr><tr><td data-num="2"></td><td><pre>输出：1010</pre></td></tr><tr><td data-num="3"></td><td><pre>解释：将十进制转换为二进制</pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>输入：n = 15</pre></td></tr><tr><td data-num="2"></td><td><pre>输出：1111</pre></td></tr><tr><td data-num="3"></td><td><pre>解释：将十进制转换为二进制</pre></td></tr></table></figure><h2 id="solving-ideas"><a class="anchor" href="#solving-ideas">#</a> Solving Ideas</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">dec2bin</span><span class="token punctuation">(</span><span class="token parameter">decNumber</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token comment">//decNumber > 0 停止循环</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">while</span> <span class="token punctuation">(</span>decNumber <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token comment">// 将每次取模的数存入栈中</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>decNumber <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token comment">// 同时向下取 / 2 的值 </span></pre></td></tr><tr><td data-num="11"></td><td><pre>    decNumber <span class="token operator">=</span> <span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span>decNumber <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token comment">// 将数组颠倒转换成字符串再强制转换为数字</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token keyword">return</span> <span class="token operator">+</span>stack<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">dec2bin</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="bin2dec-example"><a class="anchor" href="#bin2dec-example">#</a> Bin2Dec Example</h2><p><strong>Example 1:</strong></p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>输入：n = 1010</pre></td></tr><tr><td data-num="2"></td><td><pre>输出：10</pre></td></tr><tr><td data-num="3"></td><td><pre>解释：将二进制转换为十进制</pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>输入：n = 1111</pre></td></tr><tr><td data-num="2"></td><td><pre>输出：15</pre></td></tr><tr><td data-num="3"></td><td><pre>解释：将二进制转换为十进制</pre></td></tr></table></figure><h2 id="solving-ideas-2"><a class="anchor" href="#solving-ideas-2">#</a> Solving Ideas</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">bin2dec</span><span class="token punctuation">(</span><span class="token parameter">binNumber</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">// 将其切割成数组</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">(</span>binNumber <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">// edge case</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  stack<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">+</span>item <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Please enter the correct binary number'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token comment">// 用于记录数字位置的次方 从最后一位开始</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token keyword">let</span> pow <span class="token operator">=</span> stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> stack<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>      </pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token comment">// 如果数组中是 0, 就不必算</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>      stack<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">**</span> pow</pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    </pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token comment">// 递减</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    pow<span class="token operator">--</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>  </pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token comment">// 将数组元素依次相加</span></pre></td></tr><tr><td data-num="26"></td><td><pre>  stack<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> res <span class="token operator">+=</span> <span class="token operator">+</span>item<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre>  <span class="token keyword">return</span> res</pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;dec2bin-example&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#dec2bin-example&quot;&gt;#&lt;/a&gt; Dec2Bin Example&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;figure cla</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/data-structures-and-algorithms/"/>
    
    <category term="Easy" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/data-structures-and-algorithms/Easy/"/>
    
    
    <category term="数据结构与算法" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    <category term="Easy" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/Easy/"/>
    
  </entry>
  
  <entry>
    <title>计算力扣银行的钱</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2022/01/15/data-structures-and-algorithms/algorithm/problems/easy/calculate-money-in-leetcode-bank/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2022/01/15/data-structures-and-algorithms/algorithm/problems/easy/calculate-money-in-leetcode-bank/</id>
    <published>2022-01-15T10:27:49.000Z</published>
    <updated>2022-01-19T05:59:30.007Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言声明"><a class="anchor" href="#前言声明">#</a> 前言声明</h2><p>来源：力扣（LeetCode）<br />链接：<span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvY2FsY3VsYXRlLW1vbmV5LWluLWxlZXRjb2RlLWJhbms=">https://leetcode-cn.com/problems/calculate-money-in-leetcode-bank</span></p><h2 id="计算力扣银行的钱"><a class="anchor" href="#计算力扣银行的钱">#</a> 计算力扣银行的钱</h2><ul><li>Hercy 想要为购买第一辆车存钱。他 每天 都往力扣银行里存钱。</li><li>最开始，他在周一的时候存入 1 块钱。从周二到周日，他每天都比前一天多存入 1 块钱。在接下来每一个周一，他都会比 前一个周一 多存入 1 块钱。</li><li>给你 n 天，请你返回在第 n 天结束的时候他在力扣银行总共存了多少块钱。</li></ul><h2 id="example"><a class="anchor" href="#example">#</a> Example</h2><p><strong>Example 1:</strong></p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>输入：n = 4</pre></td></tr><tr><td data-num="2"></td><td><pre>输出：10</pre></td></tr><tr><td data-num="3"></td><td><pre>解释：第 4 天后，总额为 1 + 2 + 3 + 4 = 10 。</pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>输入：n = 10</pre></td></tr><tr><td data-num="2"></td><td><pre>输出：37</pre></td></tr><tr><td data-num="3"></td><td><pre>解释：第 10 天后，总额为 (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4) = 37 。注意到第二个星期一，Hercy 存入 2 块钱。</pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>输入：n = 20</pre></td></tr><tr><td data-num="2"></td><td><pre>输出：96</pre></td></tr><tr><td data-num="3"></td><td><pre>解释：第 20 天后，总额为 (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4 + 5 + 6 + 7 + 8) + (3 + 4 + 5 + 6 + 7 + 8) = 96 。</pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 1000</code></li></ul><h2 id="solving-ideas"><a class="anchor" href="#solving-ideas">#</a> Solving Ideas</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> <span class="token function-variable function">totalMoney</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">// 每周一的钱</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">let</span> WeekStartMoney <span class="token operator">=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">// 一周 0-6 表示 配合 WeekStartMoney 实现每天递增一元和每周一起始钱加 1</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">let</span> dayMoney <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token comment">// 保存结果</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  </pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    res <span class="token operator">+=</span> WeekStartMoney <span class="token operator">+</span> dayMoney</pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token operator">++</span>dayMoney</pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token comment">// 如果等于 7 代表是第二个星期 </span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dayMoney <span class="token operator">===</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>      <span class="token comment">// 起始钱 + 1</span></pre></td></tr><tr><td data-num="18"></td><td><pre>      WeekStartMoney<span class="token operator">++</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>      <span class="token comment">// 初始为周一</span></pre></td></tr><tr><td data-num="21"></td><td><pre>      dayMoney <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>      </pre></td></tr><tr><td data-num="24"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token keyword">return</span> res</pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token function">totalMoney</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span> <span class="token comment">// 63</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token function">totalMoney</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment">// 96</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言声明&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#前言声明&quot;&gt;#&lt;/a&gt; 前言声明&lt;/h2&gt;
&lt;p&gt;来源：力扣（LeetCode）&lt;br /&gt;
链接：&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9sZWV0Y29k</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/data-structures-and-algorithms/"/>
    
    <category term="Easy" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/data-structures-and-algorithms/Easy/"/>
    
    
    <category term="数据结构与算法" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    <category term="Easy" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/Easy/"/>
    
  </entry>
  
  <entry>
    <title>两数之和</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2022/01/15/data-structures-and-algorithms/algorithm/problems/easy/two-sum/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2022/01/15/data-structures-and-algorithms/algorithm/problems/easy/two-sum/</id>
    <published>2022-01-15T09:22:25.000Z</published>
    <updated>2022-01-19T05:59:37.871Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言声明"><a class="anchor" href="#前言声明">#</a> 前言声明</h2><ul><li>来源：力扣（LeetCode）</li><li>链接：<span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdHdvLXN1bQ==">https://leetcode-cn.com/problems/two-sum</span></li></ul><h2 id="两数之和"><a class="anchor" href="#两数之和">#</a> 两数之和</h2><ul><li><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。</p></li><li><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p></li><li><p>你可以按任意顺序返回答案。</p></li></ul><p>Example 1:</p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>输入：nums = <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target = 10</pre></td></tr><tr><td data-num="2"></td><td><pre>输出：<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre>解释：因为 nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> + nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> == 10 ，返回 <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span></pre></td></tr></table></figure><p>Example 2:</p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>输入：nums = <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target = 7</pre></td></tr><tr><td data-num="2"></td><td><pre>输出：<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre>解释：因为 nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> + nums<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> == 7 ，返回 <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span></pre></td></tr></table></figure><p>提示：</p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>2 &lt;= nums.length &lt;= 104</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">-</span>109 &lt;= nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> &lt;= 109</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">-</span>109 &lt;= target &lt;= 109</pre></td></tr><tr><td data-num="4"></td><td><pre>只会存在一个有效答案</pre></td></tr></table></figure><ul><li>进阶：你可以想出一个时间复杂度小于 O (n2) 的算法吗？</li></ul><h2 id="solving-ideas"><a class="anchor" href="#solving-ideas">#</a> Solving Ideas</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> <span class="token function-variable function">twoSum</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">// 用于保存遍历过的数据</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">const</span> hash <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">// 遍历数组</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token comment">// 判断 hash 中第二个值是否存在数组中  </span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>hash<span class="token punctuation">[</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>      <span class="token comment">// 一旦存在就返回最近符合的数组下标</span></pre></td></tr><tr><td data-num="12"></td><td><pre>     <span class="token keyword">return</span> <span class="token punctuation">[</span>hash<span class="token punctuation">[</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token comment">// 将遍历过的元素以 key:value 保存在 hash 中</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    hash<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i</pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    </pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token comment">// 没有找到就返回空数组</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment">// [2, 3]</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span> <span class="token comment">// []</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言声明&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#前言声明&quot;&gt;#&lt;/a&gt; 前言声明&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;来源：力扣（LeetCode）&lt;/li&gt;
&lt;li&gt;链接：&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/data-structures-and-algorithms/"/>
    
    <category term="Easy" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/data-structures-and-algorithms/Easy/"/>
    
    
    <category term="数据结构与算法" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    <category term="Easy" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/Easy/"/>
    
  </entry>
  
  <entry>
    <title>CSS 边框滑块</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2022/01/13/css/CSS%20Demo/%E8%BE%B9%E6%A1%86%E6%BB%91%E5%9D%97/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2022/01/13/css/CSS%20Demo/%E8%BE%B9%E6%A1%86%E6%BB%91%E5%9D%97/</id>
    <published>2022-01-13T13:07:49.000Z</published>
    <updated>2022-01-19T06:49:45.879Z</updated>
    
    <content type="html"><![CDATA[<h2 id="预览效果"><a class="anchor" href="#预览效果">#</a> 预览效果</h2><p> <style>  body {  --bgc: #353b48;  background-color: var(--bgc);}.container {      display: flex;      flex-direction: row;      flex-wrap: wrap;      justify-content: space-around;      width: 100%;    }.container .btn {  width: 35vw;  height: 60px;  border: 3px solid;  background: none;  color: var(--c);  cursor: pointer;  font-size: 16px;  font-width: 700;  margin: 20px;  position: relative;}.container .btn::before,.container .btn::after {  content: '';  position: absolute;  width: 14px;  height: 4px;  background-color: var(--bgc);  transform: skewX(30deg);  transition: .4s ease;}.container .btn::before {  top: -4px;  left: 10%;}.container .btn::after {  bottom: -4px;  right: 10%;}.container .btn:hover::before {  left: 80%}.container .btn:hover::after {  right: 80%;  /* animation: after 2s timing-function delay iteration-count direction fill-mode; */  animation: after 2s;}.container .btn:nth-child(1) {  --c: #4ad3e2}.container .btn:nth-child(2) {  --c: #93edd4}.container .btn:nth-child(3) {  --c: #f9cb8f}.container .btn:nth-child(4) {  --c: #ffb1a3}</style>    <div class="container">      <button class="btn">点赞</button>      <button class="btn">投币</button></button>      <button class="btn">收藏</button>      <button class="btn">分享</button></button>    </div></p><h2 id="边框滑块代码"><a class="anchor" href="#边框滑块代码">#</a> 边框滑块代码</h2><figure class="highlight css"><figcaption data-lang="CSS"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">body</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token property">--bgc</span><span class="token punctuation">:</span> #353b48<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--bgc<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token selector">.container</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>      <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>      <span class="token property">flex-direction</span><span class="token punctuation">:</span> row<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>      <span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>      <span class="token property">justify-content</span><span class="token punctuation">:</span> space-around<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>      <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token selector">.container .btn</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token property">height</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token property">border</span><span class="token punctuation">:</span> 3px solid<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token property">background</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--c<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token property">font-size</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token property">font-width</span><span class="token punctuation">:</span> 700<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  <span class="token property">margin</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token selector">.container .btn::before,</pre></td></tr><tr><td data-num="25"></td><td><pre>.container .btn::after</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>  <span class="token property">width</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>  <span class="token property">height</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--bgc<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">skewX</span><span class="token punctuation">(</span>30deg<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>  <span class="token property">transition</span><span class="token punctuation">:</span> .4s ease<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token selector">.container .btn::before</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>  <span class="token property">top</span><span class="token punctuation">:</span> -4px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>  <span class="token property">left</span><span class="token punctuation">:</span> 10%<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token selector">.container .btn::after</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>  <span class="token property">bottom</span><span class="token punctuation">:</span> -4px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>  <span class="token property">right</span><span class="token punctuation">:</span> 10%<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token selector">.container .btn:hover::before</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>  <span class="token property">left</span><span class="token punctuation">:</span> 80%</pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token selector">.container .btn:hover::after</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>  <span class="token property">right</span><span class="token punctuation">:</span> 80%<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>  <span class="token comment">/* animation: after 2s timing-function delay iteration-count direction fill-mode; */</span></pre></td></tr><tr><td data-num="48"></td><td><pre>  <span class="token property">animation</span><span class="token punctuation">:</span> after 2s<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token selector">.container .btn:nth-child(1)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>  <span class="token property">--c</span><span class="token punctuation">:</span> #4ad3e2</pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token selector">.container .btn:nth-child(2)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>  <span class="token property">--c</span><span class="token punctuation">:</span> #93edd4</pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token selector">.container .btn:nth-child(3)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>  <span class="token property">--c</span><span class="token punctuation">:</span> #f9cb8f</pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token selector">.container .btn:nth-child(4)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>  <span class="token property">--c</span><span class="token punctuation">:</span> #ffb1a3</pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点赞<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>投币<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>收藏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>分享<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;预览效果&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#预览效果&quot;&gt;#&lt;/a&gt; 预览效果&lt;/h2&gt;
&lt;p&gt; 
&lt;style&gt;
  body {
  --bgc: #353b48;
  background-color: var(--bgc);
}
.cont</summary>
      
    
    
    
    <category term="CSS" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/css/"/>
    
    <category term="CSS Demo" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/css/CSS-Demo/"/>
    
    
    <category term="CSS" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/CSS/"/>
    
    <category term="CSS Demo" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/CSS-Demo/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 实现 Snabbdom 库</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2022/01/01/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/vue-source-code-analysis/snabbdom/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2022/01/01/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/vue-source-code-analysis/snabbdom/</id>
    <published>2022-01-01T04:33:52.000Z</published>
    <updated>2022-02-23T09:52:39.252Z</updated>
    
    <content type="html"><![CDATA[<h2 id="diff-算法"><a class="anchor" href="#diff-算法">#</a> diff 算法</h2><ul><li><p>diff 算法可以进行精细化对比，实现最小量更新</p></li><li><p><strong>虚拟节点变成 DOM 节点</strong>在 diff 中可以做到</p></li><li><p>新虚拟 DOM 和旧虚拟 DOM 进行 diff (精细化比较)，算出应该如何最小量更新，最后反映到真正的 DOM 上</p></li></ul><h2 id="snabbdom"><a class="anchor" href="#snabbdom">#</a> snabbdom</h2><ul><li><code>snabbdom</code>  (瑞典语，“速度”) 是著名的虚拟 DOM 库，是 diff 算法的鼻祖</li><li><span class="exturl" data-url="aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT1WdWUmYW1wO3NwbT0xMDAxLjIxMDEuMzAwMS43MDIw">Vue</span> 源码借鉴了 <code>snabbdom</code></li><li>源码使用 TypeScript 写的 https://github.com/snabbdom/snabbdom</li><li>从 npm 下载的是 build 出来的 JavaScript 版本</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"><span>npm</span></figcaption><table><tr><td data-num="1"></td><td><pre>npm install <span class="token operator">-</span><span class="token constant">D</span> snabbdom</pre></td></tr></table></figure><h2 id="环境配置"><a class="anchor" href="#环境配置">#</a> 环境配置</h2><ul><li><code>安装snabbdom</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"><span>npm</span></figcaption><table><tr><td data-num="1"></td><td><pre>npm install <span class="token operator">-</span><span class="token constant">S</span> snabbdom</pre></td></tr></table></figure><ul><li>安装并配置，安装不了或慢用 <code>cnpm</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>npm i <span class="token operator">-</span><span class="token constant">D</span> webpack@<span class="token number">5</span> webpack<span class="token operator">-</span>cli@<span class="token number">3</span> webpack<span class="token operator">-</span>dev<span class="token operator">-</span>server@<span class="token number">3</span></pre></td></tr></table></figure><ul><li>​ <code>package.json</code></li></ul><figure class="highlight json"><figcaption data-lang="JSON"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"snabbdom"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"vue.js"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"webpack-dev-server"</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"ISC"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token property">"snabbdom"</span><span class="token operator">:</span> <span class="token string">"^3.3.1"</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token property">"webpack"</span><span class="token operator">:</span> <span class="token string">"^5.11.0"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token property">"webpack-cli"</span><span class="token operator">:</span> <span class="token string">"^3.3.12"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token property">"webpack-dev-server"</span><span class="token operator">:</span> <span class="token string">"^3.11.3"</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li><code>webpack.config.js</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">//webpack5 不用配置 mode</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token comment">// 入口</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">"./src/index.js"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">// 出口</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token comment">// 虚拟打包路径，文件夹不会真正生成，而是在 8080 端口虚拟生成</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token literal-property property">publicPath</span><span class="token operator">:</span> <span class="token string">"/dist/"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token comment">// 打包出来的文件名</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'bundle.js'</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token comment">// 配置 webpack-dev-server</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token comment">// 静态根目录</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token literal-property property">contentBase</span><span class="token operator">:</span> <span class="token string">'dist'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token comment">// 端口号</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">8080</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="example"><a class="anchor" href="#example">#</a> Example</h2><ul><li>这是官方的例子， 我已经克隆过来了</li><li>注意在 <code>index.html</code>  里面加一个 <code>id='container'</code>  的标签并引入 <code>dist/bundle.js</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  init<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  classModule<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  propsModule<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  styleModule<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  eventListenersModule<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  h<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"snabbdom"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">const</span> patch <span class="token operator">=</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">[</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token comment">// Init patch function with chosen modules</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  classModule<span class="token punctuation">,</span> <span class="token comment">// makes it easy to toggle classes</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  propsModule<span class="token punctuation">,</span> <span class="token comment">// for setting properties on DOM elements</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  styleModule<span class="token punctuation">,</span> <span class="token comment">// handles styling on elements with support for animations</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  eventListenersModule<span class="token punctuation">,</span> <span class="token comment">// attaches event listeners</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">const</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"container"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">"div#container.two.classes"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">on</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token function-variable function">click</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">style</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">fontWeight</span><span class="token operator">:</span> <span class="token string">"bold"</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"This is bold"</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="22"></td><td><pre>  <span class="token string">" and this is just normal text"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">href</span><span class="token operator">:</span> <span class="token string">"/foo"</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"I'll take you places!"</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token comment">// Patch into empty DOM element – this modifies the DOM as a side effect</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token function">patch</span><span class="token punctuation">(</span>container<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">const</span> newVnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="29"></td><td><pre>  <span class="token string">"div#container.two.classes"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="30"></td><td><pre>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">on</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token function-variable function">click</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="31"></td><td><pre>  <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token function">h</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="33"></td><td><pre>      <span class="token string">"span"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="34"></td><td><pre>      <span class="token punctuation">&#123;</span> <span class="token literal-property property">style</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">fontWeight</span><span class="token operator">:</span> <span class="token string">"normal"</span><span class="token punctuation">,</span> <span class="token literal-property property">fontStyle</span><span class="token operator">:</span> <span class="token string">"italic"</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="35"></td><td><pre>      <span class="token string">"This is now italic type"</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token string">" and this is still just normal text"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">href</span><span class="token operator">:</span> <span class="token string">"/bar"</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"I'll take you places!"</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="39"></td><td><pre>  <span class="token punctuation">]</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token comment">// Second `patch` invocation</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token function">patch</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> newVnode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Snabbdom efficiently updates the old view to the new state</span></pre></td></tr></table></figure><ul><li>出现这句给代表成功了： <code>This is now italic type* and this is still just normal text[I'll take you places!](http://127.0.0.1:8080/bar)</code></li></ul><h2 id="snabbdom-h-函数使用"><a class="anchor" href="#snabbdom-h-函数使用">#</a> snabbdom h 函数使用</h2><ul><li>h 函数用来产生 <code>虚拟节点(vnode)</code></li><li>比如这样调用 h 函数</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 1. 创建 patch 函数</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> patch <span class="token operator">=</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">[</span>init<span class="token punctuation">,</span> classModule<span class="token punctuation">,</span> propsModule<span class="token punctuation">,</span> styleModule<span class="token punctuation">,</span> </pre></td></tr><tr><td data-num="3"></td><td><pre>eventListenersModule<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 2. 创建 h 虚拟节点 函数 写法 1</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token literal-property property">href</span><span class="token operator">:</span> <span class="token string">'https:nekoaimer.com'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">'_blank'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token punctuation">&#125;</span> </pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'Hello World'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">// 3. 让虚拟节点上树</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">const</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#container'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token function">patch</span><span class="token punctuation">(</span>container<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token comment">// 当然还有很多写法， 不过注意 h 函数在有两个参数时才可以直接写 h 函数或文本</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment">// 写法 2</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">// const vnode = h('a', h('span', '233'))</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token comment">// 写法 3</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token comment">// const vnode = h('a', [h('span', '111'), h('span', '222'), h('span', '333')])</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token comment">// 写法 4</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token comment">// const vnode = h('a', [h('span', '111'), h('span',  [h('span', '222')])])</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token comment">/* 写法 5</pre></td></tr><tr><td data-num="29"></td><td><pre>const vnode1 = h ('head', ' 我是 head')</pre></td></tr><tr><td data-num="30"></td><td><pre>const vnode2 = h ('div', ' 我是 div')</pre></td></tr><tr><td data-num="31"></td><td><pre>const vnode3 = h ('span', h ('a', ' 我是 span 中的 a'))</pre></td></tr><tr><td data-num="32"></td><td><pre>const vnode4 = h ('main', [vnode1,vnode2,vnode3])</pre></td></tr><tr><td data-num="33"></td><td><pre>*/</span></pre></td></tr></table></figure><ul><li>只有真正了解实现原理，才能灵活应用它！所以我们接下来实现一个 h 函数！</li></ul><h2 id="实现-snabbdom-思路图流程"><a class="anchor" href="#实现-snabbdom-思路图流程">#</a> 实现 snabbdom 思路图流程</h2><ul><li>这里我分享下我实现 <code>mini-snabbdom</code>  的思路流程图</li></ul><p><img data-src="snabbdom-Flow-chart.png" alt="snabbdom-Flow-chart" /></p><h2 id="实现-h-函数"><a class="anchor" href="#实现-h-函数">#</a> 实现 h 函数</h2><ul><li>这里我又写封装了两个功能函数<ul><li><code>is</code>  函数</li><li><code>objectFlat</code>  函数</li></ul></li><li>另外引用的 <code>vnode</code>  函数用于将参数以对象形式返回</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> vnode <span class="token keyword">from</span> <span class="token string">"./vnode.js"</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> is <span class="token keyword">from</span> <span class="token string">'./utils/is.js'</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> objectFlat <span class="token keyword">from</span> <span class="token string">'./utils/objectFlat.js'</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token parameter">sel<span class="token punctuation">,</span> data<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">let</span> text</pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token keyword">let</span> children <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token comment">// 1. 判断只有一个参数时 data 返回空对象 c 返回空数组</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>      data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token comment">// 2. 参数只有两个时的情况</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token comment">// 2.1 如果第二个参数为 String 或 Number 类型</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">||</span> is<span class="token punctuation">.</span><span class="token function">Number</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>      text <span class="token operator">=</span> data</pre></td></tr><tr><td data-num="19"></td><td><pre>      data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token comment">// 2.2 如果参数为数组时</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">Array</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>      <span class="token comment">// 2.2.1 遍历数组中元素</span></pre></td></tr><tr><td data-num="25"></td><td><pre>      <span class="token keyword">let</span> cSel <span class="token operator">=</span> sel</pre></td></tr><tr><td data-num="26"></td><td><pre>      <span class="token comment">// 2.2.2 如果数组最后一项以 $ 开头则默认为子元素标签</span></pre></td></tr><tr><td data-num="27"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>data<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        cSel <span class="token operator">=</span> data<span class="token punctuation">[</span>data<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        data<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>      </pre></td></tr><tr><td data-num="32"></td><td><pre>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token comment">// 2.2.3 如果数组中元素为文本时</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> is<span class="token punctuation">.</span><span class="token function">Number</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>          children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">sel</span><span class="token operator">:</span> cSel<span class="token punctuation">,</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token literal-property property">text</span><span class="token operator">:</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token literal-property property">elm</span><span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre>        <span class="token comment">// 2.2.4 如果参数为对象时 且 有 props 属性时 </span></pre></td></tr><tr><td data-num="39"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">Object</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>props<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>          <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>$isObjFlat<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="41"></td><td><pre>            data <span class="token operator">=</span> <span class="token function">objectFlat</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="42"></td><td><pre>          </pre></td></tr><tr><td data-num="43"></td><td><pre>          children <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="44"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>        </pre></td></tr><tr><td data-num="46"></td><td><pre>        <span class="token comment">// 2.2.5 没有 props 属性时 代表 data 中是子元素数组而不是 data 对象</span></pre></td></tr><tr><td data-num="47"></td><td><pre>        <span class="token keyword">else</span> </pre></td></tr><tr><td data-num="48"></td><td><pre>          children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="49"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="50"></td><td><pre></pre></td></tr><tr><td data-num="51"></td><td><pre>      <span class="token comment">// 2.3 如果 children 有长度代表是子元素那么 data 中就应该是空对象 因为这是两个参数的判断</span></pre></td></tr><tr><td data-num="52"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span>children<span class="token punctuation">.</span>length<span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="53"></td><td><pre>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="56"></td><td><pre></pre></td></tr><tr><td data-num="57"></td><td><pre>  <span class="token comment">// 3. 三个参数都有时的情况下</span></pre></td></tr><tr><td data-num="58"></td><td><pre>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>    <span class="token comment">// 3.1 且第二个参数为对象的情况 是否需要 flat 对象 添加属性 $isObjFlat: true</span></pre></td></tr><tr><td data-num="60"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">Object</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">.</span>$isObjFlat<span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="61"></td><td><pre>      data <span class="token operator">=</span> <span class="token function">objectFlat</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="62"></td><td><pre>      </pre></td></tr><tr><td data-num="63"></td><td><pre>    <span class="token comment">// 3.2 如果第三个参数为 String 或 Number 类型</span></pre></td></tr><tr><td data-num="64"></td><td><pre>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">||</span> is<span class="token punctuation">.</span><span class="token function">Number</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="65"></td><td><pre>      text <span class="token operator">=</span> c</pre></td></tr><tr><td data-num="66"></td><td><pre></pre></td></tr><tr><td data-num="67"></td><td><pre>    <span class="token comment">// 3.3 如果第三个参数为数组 则代表里面应该都是 h 函数 进行遍历数组</span></pre></td></tr><tr><td data-num="68"></td><td><pre>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">Array</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>      <span class="token comment">// 3.3.1 如果数组最 h 后一项以 $ 开头则默认成为所有的子元素标签 否则依据父元素标签 但需满足 3.2.2 的情况</span></pre></td></tr><tr><td data-num="70"></td><td><pre>      <span class="token keyword">let</span> cSel <span class="token operator">=</span> sel</pre></td></tr><tr><td data-num="71"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>c<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="72"></td><td><pre>        cSel <span class="token operator">=</span> c<span class="token punctuation">[</span>c<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="73"></td><td><pre>        c<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="74"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="75"></td><td><pre></pre></td></tr><tr><td data-num="76"></td><td><pre>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> c<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="77"></td><td><pre>        <span class="token comment">// 3.3.2 继上面如果第三参数数组中元素为 String 或 Number 类型</span></pre></td></tr><tr><td data-num="78"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> is<span class="token punctuation">.</span><span class="token function">Number</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="79"></td><td><pre>          children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">sel</span><span class="token operator">:</span> cSel<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token literal-property property">text</span><span class="token operator">:</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token literal-property property">elm</span><span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="80"></td><td><pre></pre></td></tr><tr><td data-num="81"></td><td><pre>        <span class="token comment">// 3.3.3 如果第三参数数组中也存在数组</span></pre></td></tr><tr><td data-num="82"></td><td><pre>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">Array</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="83"></td><td><pre>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">数组中不可嵌套数组</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="84"></td><td><pre>        </pre></td></tr><tr><td data-num="85"></td><td><pre>        <span class="token comment">// 3.3.4 如果第三参数数组中为对象类型 则必然应该是 h 函数</span></pre></td></tr><tr><td data-num="86"></td><td><pre>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">Object</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">?.</span>sel<span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="87"></td><td><pre>          children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="88"></td><td><pre>        </pre></td></tr><tr><td data-num="89"></td><td><pre>        <span class="token keyword">else</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'children参数里面只能全部为字符串数字或全部是h函数'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="90"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="91"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="92"></td><td><pre></pre></td></tr><tr><td data-num="93"></td><td><pre>    <span class="token comment">// 3.4 如果第三个参数为对象 则代表里面都是 h 函数 进行遍历数组</span></pre></td></tr><tr><td data-num="94"></td><td><pre>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">Object</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </pre></td></tr><tr><td data-num="95"></td><td><pre>      <span class="token comment">// 3.5 如果存在 sel 属性代表是 h 函数 追加到 children 中当子元素</span></pre></td></tr><tr><td data-num="96"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">?.</span>sel<span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="97"></td><td><pre>        children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="98"></td><td><pre></pre></td></tr><tr><td data-num="99"></td><td><pre>      <span class="token comment">// 3.6 如果是普通对象则当成属性与 data 结合 data 中存在相同属性名会被后者覆盖</span></pre></td></tr><tr><td data-num="100"></td><td><pre>      <span class="token keyword">else</span> </pre></td></tr><tr><td data-num="101"></td><td><pre>        data <span class="token operator">=</span> <span class="token function">objectFlat</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> data<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="102"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="103"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="104"></td><td><pre></pre></td></tr><tr><td data-num="105"></td><td><pre>  <span class="token comment">// 4. 返回 vnode</span></pre></td></tr><tr><td data-num="106"></td><td><pre>  <span class="token keyword">return</span> <span class="token function">vnode</span><span class="token punctuation">(</span>sel<span class="token punctuation">,</span> data<span class="token punctuation">,</span> children<span class="token punctuation">,</span> text<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="107"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li><p>下面说明下我实现的 <code>h</code>  函数它的功能</p></li><li><p>如果只传了一个参数时它的结构</p></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">&#123;</span><span class="token literal-property property">sel</span><span class="token operator">:</span> <span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token literal-property property">elm</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>如果传如了两个参数时它的结构<ul><li>当第二个参数是普通文本，则会将文本类容放入 <code>text</code>  中</li><li>当第二个参数是数组是</li></ul></li></ul><h2 id="vnode-函数"><a class="anchor" href="#vnode-函数">#</a> vnode 函数</h2><ul><li>函数的功能主要是把传入的 5 个参数组合成对象返回</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">vnode</span><span class="token punctuation">(</span><span class="token parameter">sel<span class="token punctuation">,</span> data<span class="token punctuation">,</span> children<span class="token punctuation">,</span> text<span class="token punctuation">,</span> elm</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">const</span> key <span class="token operator">=</span> data<span class="token operator">?.</span>key</pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    sel<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    data<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    children<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    text<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    elm<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    key</pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="is-函数"><a class="anchor" href="#is-函数">#</a> is 函数</h2><ul><li>主要是用来判断类型的</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token literal-property property">Array</span><span class="token operator">:</span> Array<span class="token punctuation">.</span>isArray<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token function-variable function">String</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'[object String]'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token function-variable function">Number</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'[object Number]'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token function-variable function">Function</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'[object Function]'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token function-variable function">Object</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'[object Object]'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token function-variable function">toString</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="objectflat-函数"><a class="anchor" href="#objectflat-函数">#</a> objectFlat 函数</h2><ul><li>这个函数作用于将多维对象转为一维对象</li><li>如果不是 <code>attributiveJudgment</code>  中属性，其余名字的属性都会被降至一维保存到 <code>data.chaoticProps</code>  中</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> is <span class="token keyword">from</span> <span class="token string">'./is.js'</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 类型判断</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">function</span> <span class="token function">typeJudge</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">return</span> is<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[object </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>type<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">]</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// 判断指定属性名无需降维</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">function</span> <span class="token function">attributiveJudgment</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token keyword">return</span> <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    key <span class="token operator">==</span> <span class="token string">'attributes'</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token operator">||</span> key <span class="token operator">==</span> <span class="token string">'props'</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token operator">||</span> key <span class="token operator">==</span> <span class="token string">'class'</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token operator">||</span> key <span class="token operator">==</span> <span class="token string">'dataset'</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token operator">||</span> key <span class="token operator">==</span> <span class="token string">'on'</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token operator">||</span> key <span class="token operator">==</span> <span class="token string">'style'</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token operator">||</span> key <span class="token operator">==</span> <span class="token string">'key'</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token comment">// 将对象降至一维</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">objectFlat</span><span class="token punctuation">(</span><span class="token parameter">oldObj<span class="token punctuation">,</span> chaoticProps <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>  <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>chaoticProps<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'&#123;&#125;'</span> <span class="token operator">?</span> data<span class="token punctuation">.</span>chaoticProps <span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token comment">// 如果为数组进行遍历递归</span></pre></td></tr><tr><td data-num="26"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">typeJudge</span><span class="token punctuation">(</span>oldObj<span class="token punctuation">,</span> <span class="token string">'Array'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="27"></td><td><pre>    oldObj<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">obj</span> <span class="token operator">=></span> <span class="token function">objectFlat</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> data<span class="token punctuation">.</span>chaoticProps<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre>  </pre></td></tr><tr><td data-num="29"></td><td><pre>  <span class="token comment">// 如果为对象进行取值</span></pre></td></tr><tr><td data-num="30"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">typeJudge</span><span class="token punctuation">(</span>oldObj<span class="token punctuation">,</span> <span class="token string">'Object'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token comment">// 遍历对象</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> oldObj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">attributiveJudgment</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="35"></td><td><pre>        data<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> oldObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre>      <span class="token comment">// 如果对象存在 key</span></pre></td></tr><tr><td data-num="38"></td><td><pre>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldObj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>        <span class="token comment">// 取出 key 的值</span></pre></td></tr><tr><td data-num="40"></td><td><pre>        <span class="token keyword">let</span> val <span class="token operator">=</span> oldObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="41"></td><td><pre></pre></td></tr><tr><td data-num="42"></td><td><pre>        <span class="token comment">// 如果 key 的值不为数组或对象直接往新对象添加数组与值</span></pre></td></tr><tr><td data-num="43"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">typeJudge</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> <span class="token string">'Array'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">typeJudge</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> <span class="token string">'Object'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="44"></td><td><pre>        chaoticProps<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val</pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre>        <span class="token comment">// 否则继续递归</span></pre></td></tr><tr><td data-num="47"></td><td><pre>        <span class="token keyword">else</span> </pre></td></tr><tr><td data-num="48"></td><td><pre>          <span class="token function">objectFlat</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> data<span class="token punctuation">.</span>chaoticProps<span class="token punctuation">,</span> data<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="49"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>  <span class="token comment">// 将降维的对象都放在 data.chaoticProps 中</span></pre></td></tr><tr><td data-num="53"></td><td><pre>  data<span class="token punctuation">.</span>chaoticProps <span class="token operator">=</span> chaoticProps</pre></td></tr><tr><td data-num="54"></td><td><pre>  <span class="token keyword">return</span> data</pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="createelement-函数"><a class="anchor" href="#createelement-函数">#</a> createElement 函数</h2><ul><li>主要作用将 vnode 虚拟节点创建为 DOM 节点 <code>并可以添加对应的属性、事件和样式等</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> is <span class="token keyword">from</span> <span class="token string">"./utils/is"</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> objectFlat <span class="token keyword">from</span> <span class="token string">"./utils/objectFlat"</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token parameter">vnode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">// 1. 根据 vnode.sel 创建对应的 DOM 标签节点</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">const</span> domNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>sel<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token comment">// 2. 获得 data 进行属性操作</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">objectFlat</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>data<span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token comment">// 2.1 设置 dom 元素的属性，使用 setAttribute ()</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>attributes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">const</span> attributes <span class="token operator">=</span> data<span class="token punctuation">.</span>attributes</pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> attributes<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>      domNode<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> attributes<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token comment">// 2.2 和 attributes 模块类似，设置 dom 的属性，但是是以 element [attr] = value 的形式设置的</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>props<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">const</span> props <span class="token operator">=</span> data<span class="token punctuation">.</span>props</pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> props<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>      domNode<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> props<span class="token punctuation">[</span>key<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="23"></td><td><pre>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>domNode<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token comment">// 2.3 类样式</span></pre></td></tr><tr><td data-num="28"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>class<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token keyword">const</span> klass <span class="token operator">=</span> data<span class="token punctuation">.</span>class</pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token class-name">let</span> classMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> klass<span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="32"></td><td><pre>      classMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> klass<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    </pre></td></tr><tr><td data-num="34"></td><td><pre>    classMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> val<span class="token punctuation">,</span> map</span><span class="token punctuation">)</span> <span class="token operator">=></span> domNode<span class="token punctuation">.</span>className <span class="token operator">+=</span> <span class="token string">' '</span> <span class="token operator">+</span> val<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre>  <span class="token comment">// 2.4 设置 data-* 的自定义属性</span></pre></td></tr><tr><td data-num="38"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token keyword">const</span> dataset <span class="token operator">=</span> data<span class="token punctuation">.</span>dataset</pre></td></tr><tr><td data-num="40"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> dataset<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="41"></td><td><pre>      domNode<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> dataset<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="42"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre>  <span class="token comment">// 2.5 注册事件</span></pre></td></tr><tr><td data-num="45"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>on<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token keyword">const</span> ons <span class="token operator">=</span> data<span class="token punctuation">.</span>on</pre></td></tr><tr><td data-num="47"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> ons<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>      <span class="token keyword">let</span> skey</pre></td></tr><tr><td data-num="49"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^on|ON|oN|On</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="50"></td><td><pre>        skey <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="51"></td><td><pre>      </pre></td></tr><tr><td data-num="52"></td><td><pre>      domNode<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>skey<span class="token punctuation">,</span> ons<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="53"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="55"></td><td><pre></pre></td></tr><tr><td data-num="56"></td><td><pre>  <span class="token comment">// 2.6 设置行内样式</span></pre></td></tr><tr><td data-num="57"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>style<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>    <span class="token keyword">let</span> styles <span class="token operator">=</span> data<span class="token punctuation">.</span>style</pre></td></tr><tr><td data-num="59"></td><td><pre>    <span class="token keyword">let</span> styleMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="60"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> styles<span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="61"></td><td><pre>      styleMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>styles<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="62"></td><td><pre>      </pre></td></tr><tr><td data-num="63"></td><td><pre>    styleMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> val<span class="token punctuation">,</span> map</span><span class="token punctuation">)</span> <span class="token operator">=></span> domNode<span class="token punctuation">.</span>style<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="64"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="65"></td><td><pre>  </pre></td></tr><tr><td data-num="66"></td><td><pre>  <span class="token comment">// 3. 判断 children 必须为空数组时代表没有子节点 将内部文字赋给创建的 domNode 即可</span></pre></td></tr><tr><td data-num="67"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">Array</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>vnode<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>    <span class="token comment">// 使用 textContent 可以防止 XSS 攻击 下面用到 textContent 也是如此</span></pre></td></tr><tr><td data-num="69"></td><td><pre>    domNode<span class="token punctuation">.</span>textContent <span class="token operator">=</span> vnode<span class="token punctuation">.</span>text</pre></td></tr><tr><td data-num="70"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="71"></td><td><pre></pre></td></tr><tr><td data-num="72"></td><td><pre>  <span class="token comment">// 4. 如果 children 是个数组并不为空 代表里面有子节点 需要递归创建子节点</span></pre></td></tr><tr><td data-num="73"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">Array</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> vnode<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="74"></td><td><pre>    <span class="token comment">// 4.1 优化：将数组长度提出再进行遍历 效率略高 同时 for 比 forOf 与 forIn 效率高</span></pre></td></tr><tr><td data-num="75"></td><td><pre>    <span class="token keyword">const</span> childrenLength <span class="token operator">=</span> vnode<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length</pre></td></tr><tr><td data-num="76"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> childrenLength<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="77"></td><td><pre>      <span class="token comment">// 4.2 递归创建 因为此函数返回的即是创建出来的节点</span></pre></td></tr><tr><td data-num="78"></td><td><pre>      <span class="token keyword">let</span> ch <span class="token operator">=</span> <span class="token function">createElement</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="79"></td><td><pre>      </pre></td></tr><tr><td data-num="80"></td><td><pre>      <span class="token comment">// 4.3 这句可加可不加 因为上面递归判断空数组时也会创建文本</span></pre></td></tr><tr><td data-num="81"></td><td><pre>      <span class="token comment">// ch.textContent = vnode.children[i].text</span></pre></td></tr><tr><td data-num="82"></td><td><pre>      </pre></td></tr><tr><td data-num="83"></td><td><pre>      <span class="token comment">// 4.3 将子节点追加进一开始的 vnode.sel 父节点中</span></pre></td></tr><tr><td data-num="84"></td><td><pre>      domNode<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="85"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="86"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="87"></td><td><pre></pre></td></tr><tr><td data-num="88"></td><td><pre>  <span class="token comment">// 5. 补充 elm 节点 代表该已节点上树</span></pre></td></tr><tr><td data-num="89"></td><td><pre>  vnode<span class="token punctuation">.</span>elm <span class="token operator">=</span> domNode</pre></td></tr><tr><td data-num="90"></td><td><pre></pre></td></tr><tr><td data-num="91"></td><td><pre>  <span class="token comment">// 6. 返回 elm 对象 当作递归的返回值</span></pre></td></tr><tr><td data-num="92"></td><td><pre>  <span class="token keyword">return</span> vnode<span class="token punctuation">.</span>elm</pre></td></tr><tr><td data-num="93"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="patch-函数"><a class="anchor" href="#patch-函数">#</a> patch 函数</h2><ul><li>首先判断旧节点是否上树，如果是 <code>DOM节点则转化为vnode对象</code></li><li>其次如果不是同一节点则进行暴力删除再插入新的节点</li><li>最好判断是同一节点进行精细化比较，由于代码量多放在 <code>patchVnode</code>  函数中</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> vnode <span class="token keyword">from</span> <span class="token string">'./vnode.js'</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> createElement <span class="token keyword">from</span> <span class="token string">'./createElement'</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> patchVnode <span class="token keyword">from</span> <span class="token string">'./patchVnode'</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">patch</span><span class="token punctuation">(</span><span class="token parameter">oldVnode<span class="token punctuation">,</span> newVnode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token comment">// 1. 如果 oldVnode 没有 sel 属性代表还未上树 将其转化为虚拟节点</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>oldVnode<span class="token punctuation">.</span>sel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token comment">// 获取 DOM 标签 </span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">let</span> sel <span class="token operator">=</span> oldVnode<span class="token punctuation">.</span>tagName<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">let</span> attrs <span class="token operator">=</span> oldVnode<span class="token punctuation">.</span>attributes</pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token comment">// 与它的属性并存放在 data 中</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">function</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token parameter">attrs<span class="token punctuation">,</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> attrs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        data<span class="token punctuation">[</span>attrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> attrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value</pre></td></tr><tr><td data-num="15"></td><td><pre>      <span class="token keyword">return</span> data</pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    oldVnode <span class="token operator">=</span> <span class="token function">vnode</span><span class="token punctuation">(</span>sel<span class="token punctuation">,</span> <span class="token function">getData</span><span class="token punctuation">(</span>attrs<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> oldVnode<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token comment">// 2. 判断 oldVnode 与 newVnode 是否是同一节点 先判断 key 效率略高</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>key <span class="token operator">===</span> newVnode<span class="token punctuation">.</span>key <span class="token operator">&amp;&amp;</span> oldVnode<span class="token punctuation">.</span>sel <span class="token operator">===</span> newVnode<span class="token punctuation">.</span>sel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token function">patchVnode</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> newVnode<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token comment">// 3. 如果不是同一节点暴力插入</span></pre></td></tr><tr><td data-num="26"></td><td><pre>  <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token keyword">let</span> dom <span class="token operator">=</span> <span class="token function">createElement</span><span class="token punctuation">(</span>newVnode<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    oldVnode<span class="token punctuation">.</span>elm<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>dom<span class="token punctuation">,</span> oldVnode<span class="token punctuation">.</span>elm<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    oldVnode<span class="token punctuation">.</span>elm<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>elm<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="patchvnode"><a class="anchor" href="#patchvnode">#</a> patchVnode</h2><ul><li>这个函数中都是同一节点不同条件所进行的精细化比较</li><li>如果是同一个对象 (代表地址一样) 则直接终止比较即可</li><li>如果新节点有文本且没有子元素时代表只需要将文本渲染到页面上即可，这里用到了 <code>textContent</code>  是因为可以防止一些 <code>xss</code>  攻击，且性能上会高于 <code>innerHTML与innerText</code></li><li>如果新节点有子节点但旧节点没有，则只需将旧节点文件情况将新节点中的所有子节点创建出来再渲染到页面上即可</li><li>如果旧节点与新节点都有子元素则进行更加精细的比较，也是 diff 算法的核心，就是经典的 <code>旧前新前 旧后新后 旧前新后 旧后新前 </code> 以及 <code>缓存策略</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> createElement <span class="token keyword">from</span> <span class="token string">"./createElement"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> is <span class="token keyword">from</span> <span class="token string">"./utils/is"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> updateChildren <span class="token keyword">from</span> <span class="token string">'./updateChildren'</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 4. 判断新旧节点 children 都是数组且有子元素</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">function</span> <span class="token function">isUpdate</span><span class="token punctuation">(</span><span class="token parameter">oldVnode<span class="token punctuation">,</span> newVnode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token keyword">return</span> <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    is<span class="token punctuation">.</span><span class="token function">Array</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    is<span class="token punctuation">.</span><span class="token function">Array</span><span class="token punctuation">(</span>newVnode<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    oldVnode<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    newVnode<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length</pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">patchVnode</span><span class="token punctuation">(</span><span class="token parameter">oldVnode<span class="token punctuation">,</span> newVnode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token comment">// 1. 判断是否是同一个对象</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVnode <span class="token operator">==</span> newVnode<span class="token punctuation">)</span> <span class="token keyword">return</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  </pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token comment">// 2. 判断新节点是否有 text 属性 &amp;&amp; children 为数组且是空数组 (代表没有子元素)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>newVnode<span class="token punctuation">.</span>text <span class="token operator">&amp;&amp;</span> is<span class="token punctuation">.</span><span class="token function">Array</span><span class="token punctuation">(</span>newVnode<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>newVnode<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token comment">// 2.1 并且文本不相等时 将新节点的 text 文本重新渲染到老节点的 elm 上 (elm 就是标签)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newVnode<span class="token punctuation">.</span>text <span class="token operator">!=</span> oldVnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>      oldVnode<span class="token punctuation">.</span>elm<span class="token punctuation">.</span>textContent <span class="token operator">=</span> newVnode<span class="token punctuation">.</span>text </pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token comment">// 2. 判断新节点是否 children 为数组且有子元素 判断 children 是否为数组建议不省</span></pre></td></tr><tr><td data-num="28"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">Array</span><span class="token punctuation">(</span>newVnode<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> newVnode<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token comment">// 3. 如果旧节点 children 为空数组直接超度文本即可</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">Array</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>oldVnode<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>      <span class="token comment">// 3.1 首先将就节点文本超度 </span></pre></td></tr><tr><td data-num="32"></td><td><pre>      oldVnode<span class="token punctuation">.</span>elm<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">''</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre>      <span class="token comment">// 3.2 保存新节点 childern 长度 效率略高</span></pre></td></tr><tr><td data-num="35"></td><td><pre>      <span class="token keyword">const</span> newChLength <span class="token operator">=</span> newVnode<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length</pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre>      <span class="token comment">// 3.3 这里之所以要遍历创建是因为如果你直接 createElement (newVnode) 插入的话 会删除掉原先的父节点 再重新创建父节点</span></pre></td></tr><tr><td data-num="38"></td><td><pre>      <span class="token comment">// 3.4 相当于是暴力删除就节点再插入，而遍历的话是创建一个个标签由父级 appendChild 将子节点追加进去</span></pre></td></tr><tr><td data-num="39"></td><td><pre>      <span class="token comment">/* 3.5 你们可下去自行测试 就不需要 for 循环了，或者我把代码放下面</pre></td></tr><tr><td data-num="40"></td><td><pre>         const chDOM = createElement (newVnode)</pre></td></tr><tr><td data-num="41"></td><td><pre>         oldVnode.elm.parentNode.appendChild (chDOM)</pre></td></tr><tr><td data-num="42"></td><td><pre>         oldVnode.elm.parentNode.removeChild (oldVnode.elm)</pre></td></tr><tr><td data-num="43"></td><td><pre>      */</span></pre></td></tr><tr><td data-num="44"></td><td><pre>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> newChLength<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>        <span class="token comment">// 3.6 这种循环追加才是最佳方式</span></pre></td></tr><tr><td data-num="46"></td><td><pre>        <span class="token keyword">const</span> chDOM <span class="token operator">=</span> <span class="token function">createElement</span><span class="token punctuation">(</span>newVnode<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="47"></td><td><pre>        oldVnode<span class="token punctuation">.</span>elm<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>chDOM<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="48"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="50"></td><td><pre></pre></td></tr><tr><td data-num="51"></td><td><pre>    <span class="token comment">// 4. 调用 isUpdate 方法进行判断 </span></pre></td></tr><tr><td data-num="52"></td><td><pre>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUpdate</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> newVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>      <span class="token function">updateChildren</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> oldVnode<span class="token punctuation">.</span>children<span class="token punctuation">,</span> newVnode<span class="token punctuation">.</span>children<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="54"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="updatechildren"><a class="anchor" href="#updatechildren">#</a> updateChildren</h2><ul><li>这里就是本篇的核心所在，首先创建 <code>旧前 新前 旧后 新后 旧前节点 旧后节点 新前节点 新后节点 </code> 这几个 <code>核心变量</code></li><li>然后进行命中判断，并无论如何都是以 <code>(①②③④)</code>  的顺序判断<ul><li>命中一：旧前新前</li><li>命中二：旧后新后</li><li>命中三：旧前新后</li><li>命中四：旧后新前</li></ul></li><li>如果上面四种都没有命中则进行循环，但是 <code>diff算法</code> 这里又用到了非常精妙的缓存策略</li><li>就是先将旧节点所有的 <code>key</code>  与对应所在的 <code>索引位置</code> 保存起来，如果上面四种都未命中就会将缓存的旧节点 <code>key</code>  与新节点的 key 进行比较</li><li>如果匹配到该 <code>key</code>  则获取它的 <code>索引</code> ，再通过 <code>索引</code> 获取 <code>oldCh(即旧节点)</code>  中配匹到的 <code>vnode</code> ，那么该虚拟节点则就是应该被插入的节点了 (当然要先判断通过索引是否获取到并存在的节点)</li><li>接着因为该节点还是 <code>vnode</code> ，所以需要通过 <code>createElement</code>  创建节点为元素，然后进行插入到旧前即可</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> patchVnode <span class="token keyword">from</span> <span class="token string">"./patchVnode"</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> createElement <span class="token keyword">from</span> <span class="token string">"./createElement"</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">function</span> <span class="token function">checkSameVnode</span><span class="token punctuation">(</span><span class="token parameter">oldVnod<span class="token punctuation">,</span> newVnode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">return</span> oldVnod<span class="token punctuation">.</span>key <span class="token operator">===</span> newVnode<span class="token punctuation">.</span>key <span class="token operator">&amp;&amp;</span> oldVnod<span class="token punctuation">.</span>sel <span class="token operator">===</span> newVnode<span class="token punctuation">.</span>sel </pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// 提升最大的寻找效率 进行缓存 key, 用于寻找 keyMap 映射对象，这样不用每次都遍历 oldCh 对象了</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">function</span> <span class="token function">createKeyToOldIdx</span><span class="token punctuation">(</span><span class="token parameter">oldCh<span class="token punctuation">,</span> beginIdx<span class="token punctuation">,</span> endIdx</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token comment">// 当 beginIdx &lt;= endIdx 代表中间 vnode 都未匹配到 会删除，在之前先保存映射</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> beginIdx<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> endIdx<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">const</span> key <span class="token operator">=</span> oldCh<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">?.</span>key</pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="15"></td><td><pre>      map<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> i</pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token keyword">return</span> map</pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">updataChild</span><span class="token punctuation">(</span><span class="token parameter">parentElm<span class="token punctuation">,</span> oldCh<span class="token punctuation">,</span> newCh</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  <span class="token comment">// 1. 定义四个指针</span></pre></td></tr><tr><td data-num="22"></td><td><pre>  <span class="token comment">// 旧前</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token keyword">let</span> oldStartIdx <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="24"></td><td><pre>  <span class="token comment">// 新前</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token keyword">let</span> newStartIdx <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="26"></td><td><pre>  <span class="token comment">// 旧后</span></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token keyword">let</span> oldEndIdx <span class="token operator">=</span> oldCh<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="28"></td><td><pre>  <span class="token comment">// 新后</span></pre></td></tr><tr><td data-num="29"></td><td><pre>  <span class="token keyword">let</span> newEndIdx <span class="token operator">=</span> newCh<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre>  <span class="token comment">// 2. 指针指向的四个节点</span></pre></td></tr><tr><td data-num="32"></td><td><pre>  <span class="token comment">// 旧前节点</span></pre></td></tr><tr><td data-num="33"></td><td><pre>  <span class="token keyword">let</span> oldStartVnode <span class="token operator">=</span> oldCh<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="34"></td><td><pre>  <span class="token comment">// 新前节点</span></pre></td></tr><tr><td data-num="35"></td><td><pre>  <span class="token keyword">let</span> newStartVnode <span class="token operator">=</span> newCh<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="36"></td><td><pre>  <span class="token comment">// 旧后节点</span></pre></td></tr><tr><td data-num="37"></td><td><pre>  <span class="token keyword">let</span> oldEndVnode <span class="token operator">=</span> oldCh<span class="token punctuation">[</span>oldEndIdx<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="38"></td><td><pre>  <span class="token comment">// 新后节点</span></pre></td></tr><tr><td data-num="39"></td><td><pre>  <span class="token keyword">let</span> newEndVnode <span class="token operator">=</span> newCh<span class="token punctuation">[</span>newEndIdx<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="40"></td><td><pre>  <span class="token comment">// </span></pre></td></tr><tr><td data-num="41"></td><td><pre>  <span class="token keyword">let</span> oldKeyToIdx</pre></td></tr><tr><td data-num="42"></td><td><pre></pre></td></tr><tr><td data-num="43"></td><td><pre>  <span class="token keyword">let</span> idxInOld</pre></td></tr><tr><td data-num="44"></td><td><pre>  <span class="token comment">// 需要移动的 vndoe</span></pre></td></tr><tr><td data-num="45"></td><td><pre>  <span class="token keyword">let</span> elmToMove </pre></td></tr><tr><td data-num="46"></td><td><pre></pre></td></tr><tr><td data-num="47"></td><td><pre>  <span class="token comment">// 2. 加上终止循环条件</span></pre></td></tr><tr><td data-num="48"></td><td><pre>  <span class="token keyword">while</span> <span class="token punctuation">(</span>oldStartIdx <span class="token operator">&lt;=</span> oldEndIdx <span class="token operator">&amp;&amp;</span> newStartIdx <span class="token operator">&lt;=</span> newEndIdx<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>    <span class="token comment">// 代表被标记为 undefined 进行略过</span></pre></td></tr><tr><td data-num="50"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartVnode <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="51"></td><td><pre>      oldStartVnode <span class="token operator">=</span> oldCh<span class="token punctuation">[</span><span class="token operator">++</span>oldStartIdx<span class="token punctuation">]</span> </pre></td></tr><tr><td data-num="52"></td><td><pre>  </pre></td></tr><tr><td data-num="53"></td><td><pre>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndVnode <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="54"></td><td><pre>      oldEndVnode <span class="token operator">=</span> oldCh<span class="token punctuation">[</span><span class="token operator">--</span>oldEndIdx<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="55"></td><td><pre>  </pre></td></tr><tr><td data-num="56"></td><td><pre>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>newStartVnode <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="57"></td><td><pre>      newStartVnode <span class="token operator">=</span> newCh<span class="token punctuation">[</span><span class="token operator">++</span>newStartIdx<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="58"></td><td><pre>  </pre></td></tr><tr><td data-num="59"></td><td><pre>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>newEndVnode <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="60"></td><td><pre>      newEndVnode <span class="token operator">=</span> newCh<span class="token punctuation">[</span><span class="token operator">--</span>newEndIdx<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="61"></td><td><pre>  </pre></td></tr><tr><td data-num="62"></td><td><pre>    <span class="token comment">// 3. 命中① 旧前与新前</span></pre></td></tr><tr><td data-num="63"></td><td><pre>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkSameVnode</span><span class="token punctuation">(</span>oldStartVnode<span class="token punctuation">,</span> newStartVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>      <span class="token function">patchVnode</span><span class="token punctuation">(</span>oldStartVnode<span class="token punctuation">,</span> newStartVnode<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="65"></td><td><pre>      oldStartVnode <span class="token operator">=</span> oldCh<span class="token punctuation">[</span><span class="token operator">++</span>oldStartIdx<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="66"></td><td><pre>      newStartVnode <span class="token operator">=</span> newCh<span class="token punctuation">[</span><span class="token operator">++</span>newStartIdx<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="67"></td><td><pre>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">命中①旧前与新前</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="69"></td><td><pre></pre></td></tr><tr><td data-num="70"></td><td><pre>    <span class="token comment">// 4. 命中② 旧后与新后</span></pre></td></tr><tr><td data-num="71"></td><td><pre>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkSameVnode</span><span class="token punctuation">(</span>oldEndVnode<span class="token punctuation">,</span> newEndVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="72"></td><td><pre>      <span class="token function">patchVnode</span><span class="token punctuation">(</span>oldEndVnode<span class="token punctuation">,</span> newEndVnode<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="73"></td><td><pre>      oldEndVnode <span class="token operator">=</span> oldCh<span class="token punctuation">[</span><span class="token operator">--</span>oldEndIdx<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="74"></td><td><pre>      newEndVnode <span class="token operator">=</span> newCh<span class="token punctuation">[</span><span class="token operator">--</span>newEndIdx<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="75"></td><td><pre>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">命中①旧后与新后</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="76"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="77"></td><td><pre></pre></td></tr><tr><td data-num="78"></td><td><pre>    <span class="token comment">// 5. 命中③ 旧前与新后</span></pre></td></tr><tr><td data-num="79"></td><td><pre>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkSameVnode</span><span class="token punctuation">(</span>oldStartVnode<span class="token punctuation">,</span> newEndVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="80"></td><td><pre>      <span class="token function">patchVnode</span><span class="token punctuation">(</span>oldStartVnode<span class="token punctuation">,</span> newEndVnode<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="81"></td><td><pre>      <span class="token comment">// 0.oldEndVnode 是最后一个节点 所以将 oldStartVnode.elm 每次追加到它的后面，类似栈结构 举个栗子：比如 旧节点 ABCDE --> 新节点 EDCBA</span></pre></td></tr><tr><td data-num="82"></td><td><pre></pre></td></tr><tr><td data-num="83"></td><td><pre>      <span class="token comment">// 1. 命中①未找到 命中②也未找到，E 执行命中③(找到了)  此时旧节点 ABCDE ->  A 会到 E 的后面 -> BCDEA</span></pre></td></tr><tr><td data-num="84"></td><td><pre></pre></td></tr><tr><td data-num="85"></td><td><pre>      <span class="token comment">// 2. 继续命中会按照 (①②③④) 顺序，后面不在解释，所以 D 又命中③ 此时旧节点是 BCDEA -> D 会移动到 E 后面 -> CDEBA</span></pre></td></tr><tr><td data-num="86"></td><td><pre></pre></td></tr><tr><td data-num="87"></td><td><pre>      <span class="token comment">// 3.C 又会命中③ 此时旧节点是 CDEBA -> C 会移动到 E 后面 -> DECBA</span></pre></td></tr><tr><td data-num="88"></td><td><pre></pre></td></tr><tr><td data-num="89"></td><td><pre>      <span class="token comment">// 4.B 又会命中③ 此时旧节点是 DECBA -> B 会移动到 E 后面 -> EDCBA</span></pre></td></tr><tr><td data-num="90"></td><td><pre></pre></td></tr><tr><td data-num="91"></td><td><pre>      <span class="token comment">// 5. 最后 A 命中①  此时旧节点是 DECBA -> 保持不变 -> EDCBA</span></pre></td></tr><tr><td data-num="92"></td><td><pre>      </pre></td></tr><tr><td data-num="93"></td><td><pre>      parentElm<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>oldStartVnode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> oldEndVnode<span class="token punctuation">.</span>elm<span class="token punctuation">.</span>nextSibling<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="94"></td><td><pre>      oldStartVnode <span class="token operator">=</span> oldCh<span class="token punctuation">[</span><span class="token operator">++</span>oldStartIdx<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="95"></td><td><pre>      newEndVnode <span class="token operator">=</span> newCh<span class="token punctuation">[</span><span class="token operator">--</span>newEndIdx<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="96"></td><td><pre>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>oldStartVnode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">命中③旧前与新后</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="97"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="98"></td><td><pre></pre></td></tr><tr><td data-num="99"></td><td><pre>    <span class="token comment">// 6. 命中④ 旧后与新前</span></pre></td></tr><tr><td data-num="100"></td><td><pre>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkSameVnode</span><span class="token punctuation">(</span>oldEndVnode<span class="token punctuation">,</span> newStartVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="101"></td><td><pre>      <span class="token function">patchVnode</span><span class="token punctuation">(</span>oldEndVnode<span class="token punctuation">,</span> newStartVnode<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="102"></td><td><pre>      <span class="token comment">// 0.oldStartVnode 开始节点 所以将 oldEndVnode.elm 每次追加到它的前面，也类似栈结构 举个栗子：比如 旧节点 BCDXS --> 新节点 SDCBX</span></pre></td></tr><tr><td data-num="103"></td><td><pre></pre></td></tr><tr><td data-num="104"></td><td><pre>      <span class="token comment">// 1.（①②③都未命中），此时执行命中④(找到了) S  此时旧节点 BCDXS ->  S 会到 B 的前面 -> SBCDX</span></pre></td></tr><tr><td data-num="105"></td><td><pre>      </pre></td></tr><tr><td data-num="106"></td><td><pre>      <span class="token comment">// 2. 继续命中会按照 (①②③④) 顺序，后面不在解释。执行 X 命中② 此时旧节点是 SBCDX -> X 会保持不变 -> SBCDX</span></pre></td></tr><tr><td data-num="107"></td><td><pre></pre></td></tr><tr><td data-num="108"></td><td><pre>      <span class="token comment">// 3. 继续执行 (注意旧节点与新节点 SX 已处理) B 执行命中③ 此时旧节点是 SBCDX -> B 移动到 B 的前面 (相当于保持不变) -> SBCDX</span></pre></td></tr><tr><td data-num="109"></td><td><pre></pre></td></tr><tr><td data-num="110"></td><td><pre>      <span class="token comment">// 4. 继续执行 C 命中③ 此时旧节点 SBCDX -> 将 C 移动到 B 前面 -> SDCBX</span></pre></td></tr><tr><td data-num="111"></td><td><pre></pre></td></tr><tr><td data-num="112"></td><td><pre>      <span class="token comment">// 5. 最后都剩下 D 命中① 旧节点 SDCBX -> D 保持不变 -> SDCBX</span></pre></td></tr><tr><td data-num="113"></td><td><pre>      <span class="token comment">// 最后注意测试的时候指针都要变化，并且处理过的节点打上 undefined，就会略过，最好通过画图方式测试</span></pre></td></tr><tr><td data-num="114"></td><td><pre>      parentElm<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>oldEndVnode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> oldStartVnode<span class="token punctuation">.</span>elm<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="115"></td><td><pre>      oldEndVnode <span class="token operator">=</span> oldCh<span class="token punctuation">[</span><span class="token operator">--</span>oldEndIdx<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="116"></td><td><pre>      newStartVnode <span class="token operator">=</span> newCh<span class="token punctuation">[</span><span class="token operator">++</span>newStartIdx<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="117"></td><td><pre>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">命中④旧后与新前</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="118"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="119"></td><td><pre>      </pre></td></tr><tr><td data-num="120"></td><td><pre>    <span class="token comment">// 7. 上面四种都未命中时</span></pre></td></tr><tr><td data-num="121"></td><td><pre>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="122"></td><td><pre>      <span class="token comment">//console.log (' 上面四种都未命中 ')</span></pre></td></tr><tr><td data-num="123"></td><td><pre>      <span class="token comment">// 缓存 oldCh 里面的所有 key 与对应的位置 方便查找不用再循环查找</span></pre></td></tr><tr><td data-num="124"></td><td><pre>      oldKeyToIdx <span class="token operator">=</span> <span class="token function">createKeyToOldIdx</span><span class="token punctuation">(</span>oldCh<span class="token punctuation">,</span> oldStartIdx<span class="token punctuation">,</span> oldEndIdx<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="125"></td><td><pre>      <span class="token comment">// 匹配新属性是否有该 key 返回它的位置索引</span></pre></td></tr><tr><td data-num="126"></td><td><pre>      idxInOld <span class="token operator">=</span> oldKeyToIdx<span class="token punctuation">[</span>newStartVnode<span class="token punctuation">.</span>key<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="127"></td><td><pre></pre></td></tr><tr><td data-num="128"></td><td><pre>      <span class="token comment">// 根据位置索引取出对应的 old 的节点 作为移动的节点</span></pre></td></tr><tr><td data-num="129"></td><td><pre>      elmToMove <span class="token operator">=</span> oldCh<span class="token punctuation">[</span>idxInOld<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="130"></td><td><pre></pre></td></tr><tr><td data-num="131"></td><td><pre>      <span class="token comment">// 如果 idxInOld 为 undefined 或 null 代表是新的节点 需要创建并插入</span></pre></td></tr><tr><td data-num="132"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>idxInOld<span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="133"></td><td><pre>        parentElm<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span><span class="token function">createElement</span><span class="token punctuation">(</span>newStartVnode<span class="token punctuation">)</span><span class="token punctuation">,</span> oldStartVnode<span class="token punctuation">.</span>elm<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="134"></td><td><pre>      </pre></td></tr><tr><td data-num="135"></td><td><pre>      <span class="token comment">// 10. 否则不是新的 vnode 则需要进行移动节点</span></pre></td></tr><tr><td data-num="136"></td><td><pre>      <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="137"></td><td><pre>        <span class="token comment">// 说明不是全新的项，要移动</span></pre></td></tr><tr><td data-num="138"></td><td><pre>        </pre></td></tr><tr><td data-num="139"></td><td><pre>        <span class="token comment">// 进行 patchVnode 对比</span></pre></td></tr><tr><td data-num="140"></td><td><pre>        <span class="token function">patchVnode</span><span class="token punctuation">(</span>elmToMove<span class="token punctuation">,</span> newStartVnode<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="141"></td><td><pre>        </pre></td></tr><tr><td data-num="142"></td><td><pre>        <span class="token comment">// 把 vnode 设置为 undefined，代表已经处理完此 vnode</span></pre></td></tr><tr><td data-num="143"></td><td><pre>        oldCh<span class="token punctuation">[</span>idxInOld<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">undefined</span></pre></td></tr><tr><td data-num="144"></td><td><pre>      </pre></td></tr><tr><td data-num="145"></td><td><pre>        <span class="token comment">// 移动，调用 insertBefore 也可以实现移动。</span></pre></td></tr><tr><td data-num="146"></td><td><pre>        parentElm<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>elmToMove<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> oldStartVnode<span class="token punctuation">.</span>elm<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="147"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="148"></td><td><pre>        </pre></td></tr><tr><td data-num="149"></td><td><pre>      <span class="token comment">//newStartVndoe 也需要不断获取新节点 </span></pre></td></tr><tr><td data-num="150"></td><td><pre>      newStartVnode <span class="token operator">=</span> newCh<span class="token punctuation">[</span><span class="token operator">++</span>newStartIdx<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="151"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="152"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="153"></td><td><pre>  </pre></td></tr><tr><td data-num="154"></td><td><pre>  <span class="token comment">// 8. 说明 newCh，newStartIdx 与 newEndIdx 中间还有剩余节点没有处理，需要进行要追加这些节点</span></pre></td></tr><tr><td data-num="155"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>newStartIdx <span class="token operator">&lt;=</span> newEndIdx<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="156"></td><td><pre>    <span class="token comment">// 判断 before 是否有值，没有则返回 null 返回 null 的话 insertBefore 会默认插入到最后一行</span></pre></td></tr><tr><td data-num="157"></td><td><pre>    <span class="token keyword">const</span> before <span class="token operator">=</span> newCh<span class="token punctuation">[</span>newEndIdx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">?</span> newCh<span class="token punctuation">[</span>newEndIdx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>elm <span class="token operator">:</span> <span class="token keyword">null</span></pre></td></tr><tr><td data-num="158"></td><td><pre></pre></td></tr><tr><td data-num="159"></td><td><pre>    <span class="token comment">// 进行遍历插入 但插入的是虚拟节点 所以需要用 createElement 函数创建出元素再进行插入</span></pre></td></tr><tr><td data-num="160"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> newStartIdx<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> newEndIdx<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="161"></td><td><pre>      parentElm<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span><span class="token function">createElement</span><span class="token punctuation">(</span>newCh<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> before<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="162"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="163"></td><td><pre>  </pre></td></tr><tr><td data-num="164"></td><td><pre>  <span class="token comment">// 9. 说明 oldCh，oldStartIdx 与 oldEndIdx 中间还有剩余节点没有处理，需要进行删除这些节点</span></pre></td></tr><tr><td data-num="165"></td><td><pre>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartIdx <span class="token operator">&lt;=</span> oldEndIdx<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="166"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> oldStartIdx<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> oldEndIdx<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="167"></td><td><pre>      <span class="token comment">// 删除节点用父元素移除即可 </span></pre></td></tr><tr><td data-num="168"></td><td><pre>      <span class="token keyword">if</span><span class="token punctuation">(</span>oldCh<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="169"></td><td><pre>        parentElm<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>oldCh<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>elm<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="170"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="171"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>下面我还对 <code>旧前新前、旧后新后、旧前新后、旧后新前</code>  四种顺序做了画图演示</li></ul><h2 id="旧前新前执行顺序"><a class="anchor" href="#旧前新前执行顺序">#</a> 旧前新前执行顺序</h2><ul><li>简单介绍下旧前新前执行顺序，想要了解 diff 算法一定要谨记四大命中的执行顺序</li></ul><p><img data-src="oldStart-newStart.png" alt="oldStart-newStart" /></p><h2 id="旧后新后执行顺序"><a class="anchor" href="#旧后新后执行顺序">#</a> 旧后新后执行顺序</h2><ul><li>旧后与新后执行顺序，涉及到了四种都未命中的处理流程即对应的缓存策略，问题不大～</li></ul><p><img data-src="oldEnd-newEnd.png" alt="oldEnd-newEnd" /></p><ul><li>这里结合代码并且自己画图分析会更好理解～</li></ul><h2 id="旧前新后执行顺序"><a class="anchor" href="#旧前新后执行顺序">#</a> 旧前新后执行顺序</h2><ul><li>这里是旧前与新后的执行顺序</li></ul><p><img data-src="oldStart-newEnd.png" alt="oldStart-newEnd" /></p><h2 id="旧后新前执行顺序"><a class="anchor" href="#旧后新前执行顺序">#</a> 旧后新前执行顺序</h2><ul><li>这里是旧后与新前的执行顺序</li></ul><p><img data-src="oldEnd-newStart.png" alt="oldEnd-newStart" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;diff-算法&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#diff-算法&quot;&gt;#&lt;/a&gt; diff 算法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;diff 算法可以进行精细化对比，实现最小量更新&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;虚拟节点变成</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 实现 Mustache 模板引擎</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2021/12/29/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/vue-source-code-analysis/mustache/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2021/12/29/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/vue-source-code-analysis/mustache/</id>
    <published>2021-12-29T04:33:52.000Z</published>
    <updated>2022-02-21T13:54:04.160Z</updated>
    
    <content type="html"><![CDATA[<h2 id="正则表达式简单实现"><a class="anchor" href="#正则表达式简单实现">#</a> 正则表达式简单实现</h2><ul><li><p>最简单的实现则是利用 <code>replace</code>  方法，进行正则匹配</p></li><li><p><code>/\&#123;\&#123;\s*(\w+)\s*\&#125;\&#125;/g</code>  我是利用这个正则来匹配符合，括号里面允许有多余空格</p></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 1. 定义模板</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> templateStr <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;h2>我喜欢吃&#123;&#123;peach&#125;&#125;, &#123;&#123; lain &#125;&#125;也喜欢吃 &#123;&#123;peach&#125;&#125;吗?&lt;/h2></span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 2. 定义数据</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token literal-property property">lain</span><span class="token operator">:</span> <span class="token string">'lain'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token literal-property property">peach</span><span class="token operator">:</span> <span class="token string">'桃子'</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">// 3. 封装匹配符合 &#123;&#123;&#125;&#125; 语法的字符串</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">templateStr<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">return</span> templateStr<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\&#123;\&#123;\s*(\w+)\s*\&#125;\&#125;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">findStr<span class="token punctuation">,</span> $1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>$1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">return</span> data<span class="token punctuation">[</span>$1<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token comment">// 4. 返回新的字符串</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">const</span> newStr <span class="token operator">=</span> <span class="token function">render</span><span class="token punctuation">(</span>templateStr<span class="token punctuation">,</span> data<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newStr<span class="token punctuation">)</span> <span class="token comment">// &lt;h2 > 我喜欢吃桃子，lain 也喜欢吃 桃子吗？&lt;/h2></span></pre></td></tr></table></figure><h2 id="什么是-tokens"><a class="anchor" href="#什么是-tokens">#</a> 什么是 tokens</h2><ul><li><p>tokens 是一个 <code>JS的嵌套数组</code> ，也就是 <code>模板字符串JS表示</code></p></li><li><p><code>它是抽象语法树、&quot;虚拟节点&quot; 等等的开山鼻祖</code></p></li><li><p>例如普通模板字符串： <code>&lt;h2&gt;我喜欢吃&#123;&#123;peach&#125;&#125;, &#123;&#123;lain&#125;&#125;也喜欢吃&#123;&#123;peach&#125;&#125;吗?&lt;/h2&gt;</code></p></li><li><p><code>tokens:</code>  由一个个 <code>token</code>  组成</p></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token punctuation">[</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"&lt;h2>我喜欢吃"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// token</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"peach"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token comment">// token</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token punctuation">[</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">", "</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token comment">// token</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"lain"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token comment">// token</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token punctuation">[</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"也喜欢吃"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token comment">// token</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"peach"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token comment">// token</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token punctuation">[</span><span class="token string">"test "</span><span class="token punctuation">,</span> <span class="token string">"吗?&lt;/h2>"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token comment">// token</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">]</span></pre></td></tr></table></figure><ul><li>循环嵌套模板字符串</li></ul><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre>  &#123;&#123;#arr&#125;&#125;</pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>&#123;&#123;.&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre>  &#123;&#123;/arr&#125;&#125;</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><ul><li>由下面一个个 <code>token</code>  组成 <code>tokens:</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">,</span> <span class="token string">'&lt;ul>'</span><span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token punctuation">[</span> <span class="token string">'#'</span><span class="token punctuation">,</span> <span class="token string">'arr'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">,</span> <span class="token string">'&lt;li>&lt;span>'</span><span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">,</span> <span class="token string">'&lt;/span>&lt;/li>'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">,</span> <span class="token string">'&lt;/ul>'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">]</span></pre></td></tr></table></figure><ul><li><code>mustache</code>  库底层重点要做两个事情：<ul><li><code>将模板字符串编译为token形式</code></li><li><code>将tokens结合数据，解析为dom字符串</code></li></ul></li></ul><h2 id="使用webpack和webpack-dev-server构建"><a class="anchor" href="#使用webpack和webpack-dev-server构建">#</a> 使用 webpack 和 webpack-dev-server 构建</h2><ul><li>​模块化打包工具有 webpack (webpack-dev-server)、rollup、Parcel 等</li><li>mustache  <code>官方库使用rollup进行模块化打包</code> ，而我们使用今天使用 <code>webpack (webpack-dev-server)进行模块化打包</code> ，这是因为 webpack (webpack-dev-server) 能让我们更方便地在 <code>浏览器中 （而不是node.js环境中）</code>  实时调式程序，相比 node.js 控制后台， <code>览器控制台更好用</code> ，比如能够点击展开数组地每项</li><li>生成库是 <code>UMD</code>  的，这意味着它可以同时在 node.js 环境中使用，也可以在浏览器环境中使用。实现 UMD 不难，只需要一个 <code>通用头</code> 即可</li></ul><h2 id="webpack-所需配置文件"><a class="anchor" href="#webpack-所需配置文件">#</a> webpack 所需配置文件</h2><ul><li><code>package.json</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"mustache"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token string-property property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token string-property property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token string-property property">"main"</span><span class="token operator">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token string-property property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token string-property property">"dev"</span><span class="token operator">:</span> <span class="token string">"webpack-dev-server"</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token string-property property">"keywords"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token string-property property">"author"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token string-property property">"license"</span><span class="token operator">:</span> <span class="token string">"ISC"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token string-property property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token string-property property">"webpack"</span><span class="token operator">:</span> <span class="token string">"^4.44.2"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token string-property property">"webpack-cli"</span><span class="token operator">:</span> <span class="token string">"^3.3.12"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token string-property property">"webpack-dev-server"</span><span class="token operator">:</span> <span class="token string">"^3.11.0"</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li><code>webpack.config.js</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token comment">// 模式，开发</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token comment">// 入口</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token comment">// 打包到什么文件</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'bundle.js'</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token comment">// 配置 webpack-dev-server</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token literal-property property">hot</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token comment">// 静态文件根目录</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token literal-property property">contentBase</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token comment">// 不压缩</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token literal-property property">compress</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token comment">// 端口号</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">8080</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token comment">// 虚拟打包路径</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token literal-property property">publicPath</span><span class="token operator">:</span> <span class="token string">'/dist/'</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li><code>HTML</code>  引入</li></ul><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/dist/bundle.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><h2 id="scanner"><a class="anchor" href="#scanner">#</a> Scanner</h2><ul><li><code>扫描器类</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Scanner</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">template</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment">// 1. 定义 指针 尾巴 与 模板 变量</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>pos <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// 指针</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> template <span class="token comment">// 尾巴</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>template <span class="token operator">=</span> template <span class="token comment">// 模板</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token comment">// 2. 作用与越过指定 tag </span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token function">scan</span><span class="token punctuation">(</span><span class="token parameter">tag</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token comment">// 2.1 所以需要将 pos 与 tag 长度进行相加</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>pos <span class="token operator">+=</span> tag<span class="token punctuation">.</span>length</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token comment">// 2.2 所以需要将 并取 pos 之后的字符串</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>template<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>pos<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token comment">// 3. 让指针进行扫描，遇到指定 stopTag 结束，并返回之间路过的文字</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token function">scanUntil</span><span class="token punctuation">(</span><span class="token parameter">stopTag</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token comment">// 3.1 保存上次 this.pos 位置</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">let</span> pos_backup <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pos</pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token comment">// 3.2 当 pos 小于 template 长度 并且尾巴不是 stopTag, 说没没有扫描到 stopTag 才会继续循环  </span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tail<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>stopTag<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>      <span class="token comment">// 3.3 每循环依次让指针 ++</span></pre></td></tr><tr><td data-num="27"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>pos<span class="token operator">++</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre>      <span class="token comment">// 3.4 获取 this.template 下标 this.pos 的字符串</span></pre></td></tr><tr><td data-num="30"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>template<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>pos<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token comment">// 4. 返回开始到当前指针之前的字符串</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>template<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>pos_backup<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pos<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre>  <span class="token comment">// 5. 判断 pos 是否到 template 最后了</span></pre></td></tr><tr><td data-num="38"></td><td><pre>  <span class="token function">eos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pos <span class="token operator">>=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>template<span class="token punctuation">.</span>length </pre></td></tr><tr><td data-num="40"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="parsetemplatetotokens"><a class="anchor" href="#parsetemplatetotokens">#</a> parseTemplateToTokens</h2><ul><li><code>将模板字符串转为tokens数组</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> Scanner <span class="token keyword">from</span> <span class="token string">"./Scanner"</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> nestTokens <span class="token keyword">from</span> <span class="token string">"./nestTokens"</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">parseTemplateToTokens</span><span class="token punctuation">(</span><span class="token parameter">template</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">// 1. 定义数组 将模板字符串转为 tokens</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">const</span> tokens <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token comment">// 2. 创建 Scanner 实例</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">const</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token comment">// 3. 接收每次返回的字符串</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">let</span> words <span class="token operator">=</span> <span class="token string">''</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token comment">// 4. 匹配去掉空格</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token keyword">function</span> <span class="token function">trimWords</span><span class="token punctuation">(</span><span class="token parameter">words</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">return</span> words<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\s+(&lt;)|(>)\s+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'$1$2'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token comment">// 3. 判断 this.tail 与 this.template 长度是否一致 否则一直循环</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>scanner<span class="token punctuation">.</span><span class="token function">eos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token comment">// 3.1 扫描 &#123;&#123;  返回之前的字符串 text 类型</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    words <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">scanUntil</span><span class="token punctuation">(</span><span class="token string">'&#123;&#123;'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token comment">// 3.2 追入 tokens</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span> tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">,</span> <span class="token function">trimWords</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token comment">// 3.3 越过 &#123;&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    scanner<span class="token punctuation">.</span><span class="token function">scan</span><span class="token punctuation">(</span><span class="token string">'&#123;&#123;'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token comment">// 3.4 扫描 &#125;&#125;  返回之前的字符串 非 text 类型</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    words <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">scanUntil</span><span class="token punctuation">(</span><span class="token string">'&#125;&#125;'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token comment">// 4. 追入 tokens</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>words<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>      <span class="token comment">// 4.1 判断为 '#' 类型 </span></pre></td></tr><tr><td data-num="36"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span>words<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'#'</span><span class="token punctuation">)</span> tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'#'</span><span class="token punctuation">,</span> <span class="token function">trimWords</span><span class="token punctuation">(</span>words<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="37"></td><td><pre>        </pre></td></tr><tr><td data-num="38"></td><td><pre>      <span class="token comment">// 4.2 判断为 '/' 类型</span></pre></td></tr><tr><td data-num="39"></td><td><pre>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>words<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'/'</span><span class="token punctuation">)</span> tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token function">trimWords</span><span class="token punctuation">(</span>words<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="40"></td><td><pre>        </pre></td></tr><tr><td data-num="41"></td><td><pre>      <span class="token comment">// 4.3 判断为 'name' 类型 </span></pre></td></tr><tr><td data-num="42"></td><td><pre>      <span class="token keyword">else</span> tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span> words<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>    </pre></td></tr><tr><td data-num="45"></td><td><pre>    <span class="token comment">// 4.4 越过 &#125;&#125;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>    scanner<span class="token punctuation">.</span><span class="token function">scan</span><span class="token punctuation">(</span><span class="token string">'&#125;&#125;'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="47"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="48"></td><td><pre></pre></td></tr><tr><td data-num="49"></td><td><pre>  <span class="token comment">// 5. 返回 tokens</span></pre></td></tr><tr><td data-num="50"></td><td><pre>  <span class="token keyword">return</span> <span class="token function">nestTokens</span><span class="token punctuation">(</span>tokens<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="nesttokens"><a class="anchor" href="#nesttokens">#</a> nestTokens</h2><ul><li><code>折叠tokens，将#与/之间的tokens整合起来，作为下标为2的项</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">nestTokens</span><span class="token punctuation">(</span><span class="token parameter">tokens</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">// 1. 定义最终 tokens 数组 </span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">const</span> nestTokens <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">// 2. 定义栈结构，存放小 tokens</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">let</span> sections <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token comment">// 3. 收藏器 主要作用是需要巧妙地引用地址</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">let</span> collector <span class="token operator">=</span> nestTokens</pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token comment">// 4. 遍历原 tokens</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tokens<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token comment">// 4.1 取出一个个小 token</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">let</span> token <span class="token operator">=</span> tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token comment">// 5. 进行判断类型</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>token<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>      <span class="token comment">// 5.1 如果为 '#' 类型代表也是 tokens 需要黄 `# 与 /` 之间地数据放入 token [2]</span></pre></td></tr><tr><td data-num="19"></td><td><pre>      <span class="token keyword">case</span> <span class="token string">'#'</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token comment">// 5.2 先同时将 token 追加入 数组中</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        collector<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        sections<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token comment">// 5.3 这里是非常巧妙地利用了引用地址类型 token [2] 地址 给到了 collector</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token comment">// 代表接下来 collector 进行 push 数据时 都是往 token [2] 追加的</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        collector <span class="token operator">=</span> token<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>      </pre></td></tr><tr><td data-num="29"></td><td><pre>      <span class="token keyword">case</span> <span class="token string">'/'</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token comment">// 6. 遇到 `/` 代表需要进行弹栈 </span></pre></td></tr><tr><td data-num="31"></td><td><pre>        sections<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token comment">// 7. 判断 sections 中是否还有数组 有的话将数组地址给 collector</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        <span class="token comment">// 例如 [[1,2], [3,4]] 上面 pop 操作将 [3, 4] 弹出后剩下 [[1,2]], 那么此时 collector 地址 === [1,2] 地址 </span></pre></td></tr><tr><td data-num="35"></td><td><pre>        <span class="token comment">// 而 [1, 2] 地址也就是栈结构形式的一个个数组 </span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre>        <span class="token comment">// 8. 否则返回 nestTokens 而 nestTokens 被 collector 引用，所以返回的也是 collector</span></pre></td></tr><tr><td data-num="38"></td><td><pre>        collector <span class="token operator">=</span> sections<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> sections<span class="token punctuation">[</span>sections<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">:</span> nestTokens</pre></td></tr><tr><td data-num="39"></td><td><pre>        <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>      <span class="token keyword">default</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="41"></td><td><pre>        <span class="token comment">// 9. `text` 类型为普通文本 之间追加进入就可以了</span></pre></td></tr><tr><td data-num="42"></td><td><pre>        collector<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre></pre></td></tr><tr><td data-num="45"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="46"></td><td><pre></pre></td></tr><tr><td data-num="47"></td><td><pre>  <span class="token comment">// 10. 结果返回</span></pre></td></tr><tr><td data-num="48"></td><td><pre>  <span class="token keyword">return</span> nestTokens</pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>下面我补上分析数组引用的思路图</li></ul><p><img data-src="nestTokens.png" alt="nestTokens" /></p><ul><li>与代码对照图</li></ul><p><img data-src="nestTokens-code.png" alt="nestTokens-code" /></p><h2 id="rendertemplate"><a class="anchor" href="#rendertemplate">#</a> renderTemplate</h2><ul><li><code>将tokens数组变为DOM字符串</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> lookup <span class="token keyword">from</span> <span class="token string">"./lookup"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> parseToken <span class="token keyword">from</span> <span class="token string">"./parseToken"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">renderTemplate</span><span class="token punctuation">(</span><span class="token parameter">tokens<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">// 1. 定义结果字符串</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">let</span> resultStr <span class="token operator">=</span> <span class="token string">''</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token comment">// 2. 遍历 tokens</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tokens<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token comment">// 3. 循环获取 token</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">let</span> token <span class="token operator">=</span> tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token comment">// 4. 从 token [0] 第一项判断是什么类型 </span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>token<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    </pre></td></tr><tr><td data-num="15"></td><td><pre>      <span class="token comment">// 4.1 'text' 类型就行普通文本 直接相加即可</span></pre></td></tr><tr><td data-num="16"></td><td><pre>      <span class="token keyword">case</span> <span class="token string">'text'</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        resultStr <span class="token operator">+=</span> token<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>      </pre></td></tr><tr><td data-num="20"></td><td><pre>      <span class="token comment">// 4.2 'name' 则是 &#123;&#123;&#125;&#125; 里面的，代表是变量 通过 lookup 函数获取变量对应的值</span></pre></td></tr><tr><td data-num="21"></td><td><pre>      <span class="token keyword">case</span> <span class="token string">'name'</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        resultStr <span class="token operator">+=</span> <span class="token function">lookup</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> token<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>      </pre></td></tr><tr><td data-num="25"></td><td><pre>      <span class="token comment">// 4.3 '#' 代表也是 tokens, 需要将 tokens 再转为 token 进行链接 </span></pre></td></tr><tr><td data-num="26"></td><td><pre>      <span class="token keyword">case</span> <span class="token string">'#'</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token comment">// 5. 所以创建一个递归函数 parseToken</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        resultStr <span class="token operator">+=</span> <span class="token function">parseToken</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> data<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>  </pre></td></tr><tr><td data-num="33"></td><td><pre>  <span class="token comment">// 6. 返回字符串</span></pre></td></tr><tr><td data-num="34"></td><td><pre>  <span class="token keyword">return</span> resultStr</pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="lookup"><a class="anchor" href="#lookup">#</a> lookup</h2><ul><li><p><code>在对象中寻找连续点符号的keyName属性</code></p></li><li><p>举个栗子：</p></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> dataObj <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>      <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">100</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token function">lookup</span><span class="token punctuation">(</span>dataObj<span class="token punctuation">,</span> <span class="token string">'a.b.c'</span><span class="token punctuation">)</span> <span class="token comment">// 100</span></pre></td></tr></table></figure><ul><li><code>lookup</code>  函数</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">lookup</span><span class="token punctuation">(</span><span class="token parameter">dataObj<span class="token punctuation">,</span> keyName</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">// 1. 判断 keyName 本身不是。并且 keyName 中没有以。连接地属性名 </span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token comment">// 栗子：a.b.c</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>keyName <span class="token operator">!=</span> <span class="token string">'.'</span> <span class="token operator">&amp;&amp;</span> keyName<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token comment">// 2. 将上面 a.b.c 变成 ['a', 'b', 'c']</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">let</span> keys <span class="token operator">=</span> keyName<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token comment">// 3. 定义一个临时对象保存每次属性拿到的值 </span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">let</span> tempObj <span class="token operator">=</span> dataObj</pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token comment">// 4. 循环拿到值 举个栗子 tempObj = &#123;a: &#123;b: &#123;c: 100&#125; &#125; &#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token comment">// tempObj = dataObj[a] -> tempObj2 = tempObj[b] -> tempObj3 = tempObj2[c]</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> keys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> tempObj <span class="token operator">=</span> tempObj<span class="token punctuation">[</span>keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="14"></td><td><pre>      </pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token comment">// 5. 返回结果</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">return</span> tempObj</pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token comment">// 6. 如果本身就是。属性或者没有。连接的属性的话 就直接取值返回</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token keyword">return</span> dataObj<span class="token punctuation">[</span>keyName<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="parsetoken"><a class="anchor" href="#parsetoken">#</a> parseToken</h2><ul><li>处理 <code>tokens</code>  数组， 结合 <code>parseTemplateToTokens</code>  实现递归</li><li>注意函数参数时 token！不是  <code>tokens</code></li><li><code>token</code>  是一个简单的  <code>['#',  'friends', []]</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> lookup <span class="token keyword">from</span> <span class="token string">"./lookup"</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> renderTemplate <span class="token keyword">from</span> <span class="token string">"./renderTemplate"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">parseToken</span><span class="token punctuation">(</span><span class="token parameter">token<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token comment">// 1. 定义变量接收数据对象</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token keyword">const</span> v <span class="token operator">=</span> <span class="token function">lookup</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> token<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  </pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token comment">// 2. 作为结果字符串</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token keyword">let</span> resultStr <span class="token operator">=</span> <span class="token string">''</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token comment">// 3. 遍历数据的长度 递归次数与数据的长度一致</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    resultStr <span class="token operator">+=</span> <span class="token function">renderTemplate</span><span class="token punctuation">(</span>token<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>      <span class="token operator">...</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="16"></td><td><pre>      <span class="token string-property property">'.'</span><span class="token operator">:</span> v</pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token comment">// 4. 返回结果字符串</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  <span class="token keyword">return</span> resultStr</pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="index"><a class="anchor" href="#index">#</a> index</h2><ul><li>将模板转字符串转化为 tokens</li><li>将 tokens 渲染为 DOMString 结构</li><li>将 DOMString 返回</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> Scanner <span class="token keyword">from</span> <span class="token string">'./Scanner.js'</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> parseTemplateToTokens <span class="token keyword">from</span> <span class="token string">'./parseTemplateToTokens.js'</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> renderTemplate <span class="token keyword">from</span> <span class="token string">'./renderTemplate.js'</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>global<span class="token punctuation">.</span>TemplateEngine <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">template<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token comment">// 1. 将模板转字符串转化为 tokens</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">const</span> tokens <span class="token operator">=</span> <span class="token function">parseTemplateToTokens</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    </pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token comment">// 2. 将 tokens 渲染为 DOMString 结构</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">const</span> domStr <span class="token operator">=</span> <span class="token function">renderTemplate</span><span class="token punctuation">(</span>tokens<span class="token punctuation">,</span> data<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token comment">// 3. 将 DOMString 返回</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">return</span> domStr</pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>总结一下：这里尽量使用了 <code>switch</code> , 而没有使用 <code>if else if</code> ，是因为我认为 <code>switch</code>  效率会比  <code>if else if</code>  高</li></ul><h2 id="测试代码"><a class="anchor" href="#测试代码">#</a> 测试代码</h2><ul><li><p>我简单实现了 <code>mustache </code> ，的基本功能，下面进行测试，您也可以自行测试</p></li><li><p>如果您不了解用法，可以搜索我之前写的 <code>JavaScript Mustache 模板引擎用法</code></p></li><li><p>下面进行 <code>.</code>  测试</p></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> templateStr <span class="token operator">=</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;ul></pre></td></tr><tr><td data-num="3"></td><td><pre>    &#123;%#123;#arr&#125;%#125;</pre></td></tr><tr><td data-num="4"></td><td><pre>      &lt;li></pre></td></tr><tr><td data-num="5"></td><td><pre>        &#123;%#123;.&#125;%#125;</pre></td></tr><tr><td data-num="6"></td><td><pre>      &lt;/li></pre></td></tr><tr><td data-num="7"></td><td><pre>    &#123;%#123;/arr&#125;%#125;</pre></td></tr><tr><td data-num="8"></td><td><pre>  &lt;ul></pre></td></tr><tr><td data-num="9"></td><td><pre></span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token literal-property property">arr</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'苹果'</span><span class="token punctuation">,</span> <span class="token string">'西瓜'</span><span class="token punctuation">,</span> <span class="token string">'樱桃'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">const</span> domStr <span class="token operator">=</span> TemplateEngine<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>templateStr<span class="token punctuation">,</span> data<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>domStr<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>container<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> domStr</pre></td></tr></table></figure><ul><li>循环嵌套数组测试</li></ul><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./dist/bundle.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token comment">// 1. 定义模板字符串</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">const</span> templateStr <span class="token operator">=</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;ul></pre></td></tr><tr><td data-num="7"></td><td><pre>      &#123;&#123;#arr&#125;&#125;</pre></td></tr><tr><td data-num="8"></td><td><pre>        &lt;li class="a"></pre></td></tr><tr><td data-num="9"></td><td><pre>          &lt;span>姓名：&#123;&#123;name&#125;&#125;&lt;/span></pre></td></tr><tr><td data-num="10"></td><td><pre>          &lt;span>年龄：&#123;&#123;age&#125;&#125;&lt;/span></pre></td></tr><tr><td data-num="11"></td><td><pre>          &lt;ol></pre></td></tr><tr><td data-num="12"></td><td><pre>            &#123;&#123;#freiends&#125;&#125;</pre></td></tr><tr><td data-num="13"></td><td><pre>              &lt;li>freiends: &#123;&#123;.&#125;&#125;&lt;/li></pre></td></tr><tr><td data-num="14"></td><td><pre>            &#123;&#123;/freiends&#125;&#125;</pre></td></tr><tr><td data-num="15"></td><td><pre>          &lt;/ol></pre></td></tr><tr><td data-num="16"></td><td><pre>        &lt;/li></pre></td></tr><tr><td data-num="17"></td><td><pre>      &#123;&#123;/arr&#125;&#125;</pre></td></tr><tr><td data-num="18"></td><td><pre>    &lt;ul></pre></td></tr><tr><td data-num="19"></td><td><pre>  </span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token comment">// 2. 定义数据</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'lain'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token literal-property property">arr</span><span class="token operator">:</span> <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="25"></td><td><pre>      <span class="token punctuation">&#123;</span> <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'lain'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token literal-property property">freiends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'saber'</span><span class="token punctuation">,</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="26"></td><td><pre>      <span class="token punctuation">&#123;</span> <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'saber'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token literal-property property">freiends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'稚名真白'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="27"></td><td><pre>      <span class="token punctuation">&#123;</span> <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token literal-property property">freiends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'稚名真白'</span><span class="token punctuation">,</span> <span class="token string">'lain'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="28"></td><td><pre>      <span class="token punctuation">&#123;</span> <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'稚名真白'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token literal-property property">freiends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'lain'</span><span class="token punctuation">,</span> <span class="token string">'saber'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token punctuation">]</span></pre></td></tr><tr><td data-num="30"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre>  <span class="token comment">// 3. 返回遍历渲染完的新字符串</span></pre></td></tr><tr><td data-num="33"></td><td><pre>  <span class="token keyword">const</span> domStr <span class="token operator">=</span> TemplateEngine<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>templateStr<span class="token punctuation">,</span> data<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>domStr<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    </pre></td></tr><tr><td data-num="36"></td><td><pre>  <span class="token comment">// 4. 进行挂载 id 属性可以不用进行获取  </span></pre></td></tr><tr><td data-num="37"></td><td><pre>  container<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> domStr</pre></td></tr><tr><td data-num="38"></td><td><pre></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><h2 id="mustache-源码"><a class="anchor" href="#mustache-源码">#</a> Mustache 源码</h2><ul><li>这里放个官网地址以供参考</li></ul><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.bootcdn.net/ajax/libs/mustache.js/4.1.0/mustache.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;正则表达式简单实现&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#正则表达式简单实现&quot;&gt;#&lt;/a&gt; 正则表达式简单实现&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;最简单的实现则是利用 &lt;code&gt;replace&lt;/code&gt;  方法，进行正则匹配&lt;/p&gt;
&lt;/li</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript Mustache 模板引擎用法</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2021/12/28/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/vue-source-code-analysis/use-Mustache/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2021/12/28/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/vue-source-code-analysis/use-Mustache/</id>
    <published>2021-12-28T10:33:52.000Z</published>
    <updated>2022-02-13T13:52:03.943Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据变为视图方法"><a class="anchor" href="#数据变为视图方法">#</a> 数据变为视图方法</h2><ul><li><p>介绍下面 4 中方法</p><ul><li>纯 DOM 法</li><li>数组 Join 法</li><li>ES6 反引导法</li><li>模板引擎 Mustache</li></ul></li><li><p>前三种方法用这个数据进行举栗</p></li><li><p>此时有个 <code>ul</code>  标签，我们需要在里面添加标签并将 <code>data</code>  中数据以 <code>li</code>  标签渲染到页面上的几种方法</p></li><li><p><code>HTML</code></p></li></ul><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><ul><li><code>data</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'lain'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'saber'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">17</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'稚名真白'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">17</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">]</span></pre></td></tr></table></figure><h2 id="纯dom法"><a class="anchor" href="#纯dom法">#</a> 纯 DOM 法</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">of</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">// 1. 获取父元素</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">const</span> list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#list"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  </pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">// 2. 创建标签</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">const</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span>tag<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  </pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token comment">// 3. 添加内容</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  li<span class="token punctuation">.</span>textContent <span class="token operator">=</span> key<span class="token punctuation">.</span>name <span class="token operator">+</span> key<span class="token punctuation">.</span>age</pre></td></tr><tr><td data-num="10"></td><td><pre>  </pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token comment">// 4. 追加子节点</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  list<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="数组join法"><a class="anchor" href="#数组join法">#</a> 数组 Join 法</h2><ul><li>这是曾经非常流行的方法，是曾经前端必会的知识</li><li><code>join</code>  方法合并数组的元素并返回一个字符串</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  list<span class="token punctuation">.</span>innerHTML <span class="token operator">+=</span> <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token string">'&lt;li>姓名：'</span> <span class="token operator">+</span> item<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">' 年龄： '</span> <span class="token operator">+</span> item<span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token string">'&lt;/li>'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="es6反引导法"><a class="anchor" href="#es6反引导法">#</a> ES6 反引导法</h2><ul><li>这是 ES6 的模板字符串，可以直接换行并可以将遍历用 <code>$&#123;&#125;</code>  形式放入</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  list<span class="token punctuation">.</span>innerHTML <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"></pre></td></tr><tr><td data-num="3"></td><td><pre>  &lt;li></pre></td></tr><tr><td data-num="4"></td><td><pre>    &lt;span>姓名：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>item<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/span></pre></td></tr><tr><td data-num="5"></td><td><pre>    &lt;span>年龄：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>item<span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/span></pre></td></tr><tr><td data-num="6"></td><td><pre>  &lt;/li></pre></td></tr><tr><td data-num="7"></td><td><pre>  </span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="模板引擎-mustache"><a class="anchor" href="#模板引擎-mustache">#</a> 模板引擎 Mustache</h2><ul><li>先引入 <code>js</code>  文件</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.bootcdn.net/ajax/libs/mustache.js/4.1.0/mustache.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></pre></td></tr></table></figure><h3 id="基本用法-不循环直接进行使用"><a class="anchor" href="#基本用法-不循环直接进行使用">#</a> 基本用法， 不循环直接进行使用</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 1. 定义补办字符串</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> templateStr <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;h1>我喜欢吃&#123;&#123; peach &#125;&#125;&lt;/h1></span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 2. 定义数据</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">const</span> fruit <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">peach</span><span class="token operator">:</span> <span class="token string">'桃子'</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 3. 传入参数 返回新字符串</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">const</span> domStr <span class="token operator">=</span> Mustache<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>templateStr<span class="token punctuation">,</span> fruit<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>domStr<span class="token punctuation">)</span> <span class="token comment">/* &lt;h1 > 我喜欢吃桃子 &lt; /h1> */</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>container<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> domStr</pre></td></tr></table></figure><h3 id="循环对象"><a class="anchor" href="#循环对象">#</a> 循环对象</h3><ul><li>先定义变量接收对象类型数据 对象中定义一个数组类型，它的名字决定了 <code>&#123;&#123;#arr&#125;&#125;</code>  这里面要写的名字</li><li>定义变量接收模板字符串 里面与 <code>反引导法</code> 写法一样，写标签</li><li>调用 <code>Mustache.render</code>  方法，参数一：模板字符串变量，参数二：数据类型变量，渲染返回一组新的字符串</li><li>最后进行挂载，下面来进行演示</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 1. 定义数据 对象类型 对象里面定义要循环的数组</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token literal-property property">arr</span><span class="token operator">:</span> <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token punctuation">&#123;</span> <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'lain'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#123;</span> <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'saber'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">17</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#123;</span> <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#123;</span> <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'稚名真白'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">17</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token punctuation">]</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">// 2. 定义模板字符串 &#123;&#123;#arr&#125;&#125; 代表循环的数组 接着写法如下</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">const</span> templateStr <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"></pre></td></tr><tr><td data-num="12"></td><td><pre>  &lt;ul></pre></td></tr><tr><td data-num="13"></td><td><pre>    &#123;&#123;#arr&#125;&#125;</pre></td></tr><tr><td data-num="14"></td><td><pre>      &lt;li></pre></td></tr><tr><td data-num="15"></td><td><pre>        &lt;span>姓名：&#123;&#123; name &#125;&#125;&lt;/span></pre></td></tr><tr><td data-num="16"></td><td><pre>        &lt;span>年龄：&#123;&#123; age &#125;&#125;&lt;/span></pre></td></tr><tr><td data-num="17"></td><td><pre>      &lt;/li></pre></td></tr><tr><td data-num="18"></td><td><pre>    &#123;&#123;/arr&#125;&#125; </pre></td></tr><tr><td data-num="19"></td><td><pre>  &lt;/ul></pre></td></tr><tr><td data-num="20"></td><td><pre></span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token comment">// 3. 返回遍历渲染完的新字符串</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">const</span> domStr <span class="token operator">=</span> Mustache<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>templateStr<span class="token punctuation">,</span> data<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token comment">// 4. 进行挂载 id 属性可以不用进行获取</span></pre></td></tr><tr><td data-num="25"></td><td><pre>container<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> domStr</pre></td></tr></table></figure><ul><li>我们这里打印下 <code>domStr</code> , 输出下面字符串</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/*</pre></td></tr><tr><td data-num="2"></td><td><pre>&lt;ul></pre></td></tr><tr><td data-num="3"></td><td><pre>    &lt;li></pre></td></tr><tr><td data-num="4"></td><td><pre>      &lt;span > 姓名：lain&lt;/span></pre></td></tr><tr><td data-num="5"></td><td><pre>      &lt;span > 年龄：16&lt;/span></pre></td></tr><tr><td data-num="6"></td><td><pre>    &lt;/li></pre></td></tr><tr><td data-num="7"></td><td><pre>    &lt;li></pre></td></tr><tr><td data-num="8"></td><td><pre>      &lt;span > 姓名：saber&lt;/span></pre></td></tr><tr><td data-num="9"></td><td><pre>      &lt;span > 年龄：17&lt;/span></pre></td></tr><tr><td data-num="10"></td><td><pre>    &lt;/li></pre></td></tr><tr><td data-num="11"></td><td><pre>    &lt;li></pre></td></tr><tr><td data-num="12"></td><td><pre>      &lt;span > 姓名：樱岛麻衣 & lt;/span></pre></td></tr><tr><td data-num="13"></td><td><pre>      &lt;span > 年龄：16&lt;/span></pre></td></tr><tr><td data-num="14"></td><td><pre>    &lt;/li></pre></td></tr><tr><td data-num="15"></td><td><pre>    &lt;li></pre></td></tr><tr><td data-num="16"></td><td><pre>      &lt;span > 姓名：稚名真白 & lt;/span></pre></td></tr><tr><td data-num="17"></td><td><pre>      &lt;span > 年龄：17&lt;/span></pre></td></tr><tr><td data-num="18"></td><td><pre>    &lt;/li></pre></td></tr><tr><td data-num="19"></td><td><pre>&lt;/ul></pre></td></tr><tr><td data-num="20"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id="循环简单数组"><a class="anchor" href="#循环简单数组">#</a> 循环简单数组</h3><ul><li>循环简单数组可直接用 <code>.</code>  表示即可</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 1. 定义数据</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> fruits <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token literal-property property">fruits</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'peach'</span><span class="token punctuation">,</span> <span class="token string">'watermelon'</span><span class="token punctuation">,</span> <span class="token string">'cherry'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 2. 定义模板字符串</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">const</span> templateStr <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"></pre></td></tr><tr><td data-num="7"></td><td><pre>  &lt;ul></pre></td></tr><tr><td data-num="8"></td><td><pre>    &#123;&#123; #fruits &#125;&#125;</pre></td></tr><tr><td data-num="9"></td><td><pre>      &lt;li>&#123;&#123; . &#125;&#125;&lt;/li> // 因为这里是简单的数组 直接用 . 即可</pre></td></tr><tr><td data-num="10"></td><td><pre>    &#123;&#123; /fruits &#125;&#125;</pre></td></tr><tr><td data-num="11"></td><td><pre>  &lt;/ul></pre></td></tr><tr><td data-num="12"></td><td><pre></span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">// 3. 返回遍历渲染完的新字符串</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">const</span> domStr <span class="token operator">=</span> Mustache<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>templateStr<span class="token punctuation">,</span> fruits<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>domStr<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment">/*</pre></td></tr><tr><td data-num="17"></td><td><pre>  &lt;ul></pre></td></tr><tr><td data-num="18"></td><td><pre>      &lt;li>peach&lt;/li></pre></td></tr><tr><td data-num="19"></td><td><pre>      &lt;li>watermelon&lt;/li></pre></td></tr><tr><td data-num="20"></td><td><pre>      &lt;li>cherry&lt;/li></pre></td></tr><tr><td data-num="21"></td><td><pre>  &lt;/ul></pre></td></tr><tr><td data-num="22"></td><td><pre>*/</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token comment">// 4. 挂载</span></pre></td></tr><tr><td data-num="25"></td><td><pre>container<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> domStr</pre></td></tr></table></figure><h3 id="循环数组嵌套"><a class="anchor" href="#循环数组嵌套">#</a> 循环数组嵌套</h3><ul><li>复杂的数组写法</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 1. 定义数据 对象类型 对象里面定义要循环的数组</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token literal-property property">arr</span><span class="token operator">:</span> <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token punctuation">&#123;</span> <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'lain'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token literal-property property">freiends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'saber'</span><span class="token punctuation">,</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#123;</span> <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'saber'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token literal-property property">freiends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'稚名真白'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#123;</span> <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token literal-property property">freiends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'稚名真白'</span><span class="token punctuation">,</span> <span class="token string">'lain'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#123;</span> <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'稚名真白'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token literal-property property">freiends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'lain'</span><span class="token punctuation">,</span> <span class="token string">'saber'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token punctuation">]</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">// 2. 定义模板字符串 写法如下</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">const</span> templateStr <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"></pre></td></tr><tr><td data-num="13"></td><td><pre>  &lt;ul></pre></td></tr><tr><td data-num="14"></td><td><pre>    &#123;&#123; #arr &#125;&#125;</pre></td></tr><tr><td data-num="15"></td><td><pre>      &lt;li></pre></td></tr><tr><td data-num="16"></td><td><pre>        &lt;span>姓名：&#123;&#123; name &#125;&#125;&lt;/span></pre></td></tr><tr><td data-num="17"></td><td><pre>        &lt;span>年龄：&#123;&#123; age &#125;&#125;&lt;/span></pre></td></tr><tr><td data-num="18"></td><td><pre>        &lt;ol></pre></td></tr><tr><td data-num="19"></td><td><pre>          &#123;&#123; #freiends &#125;&#125;</pre></td></tr><tr><td data-num="20"></td><td><pre>            &lt;li>freiends: &#123;&#123; . &#125;&#125;&lt;/li></pre></td></tr><tr><td data-num="21"></td><td><pre>          &#123;&#123; /freiends &#125;&#125;</pre></td></tr><tr><td data-num="22"></td><td><pre>        &lt;/ol></pre></td></tr><tr><td data-num="23"></td><td><pre>      &lt;/li></pre></td></tr><tr><td data-num="24"></td><td><pre>    &#123;&#123; /arr &#125;&#125;</pre></td></tr><tr><td data-num="25"></td><td><pre>  &lt;/ul></pre></td></tr><tr><td data-num="26"></td><td><pre></span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token comment">// 3. 返回遍历渲染完的新字符串</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">const</span> domStr <span class="token operator">=</span> Mustache<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>templateStr<span class="token punctuation">,</span> data<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token comment">// 4. 进行挂载 id 属性可以不用进行获取</span></pre></td></tr><tr><td data-num="31"></td><td><pre>container<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> domStr</pre></td></tr></table></figure><ul><li>进行打印 <code>domStr</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/*</pre></td></tr><tr><td data-num="2"></td><td><pre>&lt;ul></pre></td></tr><tr><td data-num="3"></td><td><pre>    &lt;li></pre></td></tr><tr><td data-num="4"></td><td><pre>      &lt;span > 姓名：lain&lt;/span></pre></td></tr><tr><td data-num="5"></td><td><pre>      &lt;span > 年龄：16&lt;/span></pre></td></tr><tr><td data-num="6"></td><td><pre>      &lt;ol></pre></td></tr><tr><td data-num="7"></td><td><pre>          &lt;li>freiends: saber&lt;/li></pre></td></tr><tr><td data-num="8"></td><td><pre>          &lt;li>freiends: 樱岛麻衣 & lt;/li></pre></td></tr><tr><td data-num="9"></td><td><pre>      &lt;/ol></pre></td></tr><tr><td data-num="10"></td><td><pre>    &lt;/li></pre></td></tr><tr><td data-num="11"></td><td><pre>    &lt;li></pre></td></tr><tr><td data-num="12"></td><td><pre>      &lt;span > 姓名：saber&lt;/span></pre></td></tr><tr><td data-num="13"></td><td><pre>      &lt;span > 年龄：17&lt;/span></pre></td></tr><tr><td data-num="14"></td><td><pre>      &lt;ol></pre></td></tr><tr><td data-num="15"></td><td><pre>          &lt;li>freiends: 樱岛麻衣 & lt;/li></pre></td></tr><tr><td data-num="16"></td><td><pre>          &lt;li>freiends: 稚名真白 & lt;/li></pre></td></tr><tr><td data-num="17"></td><td><pre>      &lt;/ol></pre></td></tr><tr><td data-num="18"></td><td><pre>    &lt;/li></pre></td></tr><tr><td data-num="19"></td><td><pre>    &lt;li></pre></td></tr><tr><td data-num="20"></td><td><pre>      &lt;span > 姓名：樱岛麻衣 & lt;/span></pre></td></tr><tr><td data-num="21"></td><td><pre>      &lt;span > 年龄：16&lt;/span></pre></td></tr><tr><td data-num="22"></td><td><pre>      &lt;ol></pre></td></tr><tr><td data-num="23"></td><td><pre>          &lt;li>freiends: 稚名真白 & lt;/li></pre></td></tr><tr><td data-num="24"></td><td><pre>          &lt;li>freiends: lain&lt;/li></pre></td></tr><tr><td data-num="25"></td><td><pre>      &lt;/ol></pre></td></tr><tr><td data-num="26"></td><td><pre>    &lt;/li></pre></td></tr><tr><td data-num="27"></td><td><pre>    &lt;li></pre></td></tr><tr><td data-num="28"></td><td><pre>      &lt;span > 姓名：稚名真白 & lt;/span></pre></td></tr><tr><td data-num="29"></td><td><pre>      &lt;span > 年龄：17&lt;/span></pre></td></tr><tr><td data-num="30"></td><td><pre>      &lt;ol></pre></td></tr><tr><td data-num="31"></td><td><pre>          &lt;li>freiends: lain&lt;/li></pre></td></tr><tr><td data-num="32"></td><td><pre>          &lt;li>freiends: saber&lt;/li></pre></td></tr><tr><td data-num="33"></td><td><pre>      &lt;/ol></pre></td></tr><tr><td data-num="34"></td><td><pre>    &lt;/li></pre></td></tr><tr><td data-num="35"></td><td><pre>&lt;/ul></pre></td></tr><tr><td data-num="36"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id="布尔值-显示隐藏"><a class="anchor" href="#布尔值-显示隐藏">#</a> 布尔值 显示隐藏</h3><ul><li>其实与 <code>v-if</code>  一样，会删除元素</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 1. 定义模板</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> templateStr <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"></pre></td></tr><tr><td data-num="3"></td><td><pre>  &#123;&#123; #m &#125;&#125;</pre></td></tr><tr><td data-num="4"></td><td><pre>    &lt;h2>Hello World~&lt;/h2></pre></td></tr><tr><td data-num="5"></td><td><pre>  &#123;&#123; /m &#125;&#125;</pre></td></tr><tr><td data-num="6"></td><td><pre></span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 2. 定义数据</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">const</span> flag <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token literal-property property">m</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 显示</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token comment">//m: false // 隐藏</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    </pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">// 3. 返回遍历渲染完的新字符串</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">const</span> domStr <span class="token operator">=</span> Mustache<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>templateStr<span class="token punctuation">,</span> flag<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment">// 4. 进行挂载 id 属性可以不用进行获取</span></pre></td></tr><tr><td data-num="17"></td><td><pre>container<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> domStr</pre></td></tr></table></figure><h3 id="template"><a class="anchor" href="#template">#</a> template</h3><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">&lt;!-- 1.0 直接使用 script test/template 属性定义模板 --></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test/template<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>template<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token operator">&lt;</span>ul<span class="token operator">></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> #arr <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>      <span class="token operator">&lt;</span>li<span class="token operator">></span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token operator">&lt;</span>span<span class="token operator">></span>姓名：<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> name <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token operator">&lt;</span>span<span class="token operator">></span>年龄：<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> age <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token operator">&lt;</span>ol<span class="token operator">></span></pre></td></tr><tr><td data-num="9"></td><td><pre>          <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> #freiends <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token operator">&lt;</span>li<span class="token operator">></span>freiends<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span></pre></td></tr><tr><td data-num="11"></td><td><pre>          <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token operator">/</span>freiends <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token operator">&lt;</span><span class="token operator">/</span>ol<span class="token operator">></span></pre></td></tr><tr><td data-num="13"></td><td><pre>      <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token operator">/</span>arr <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token operator">&lt;</span>ul<span class="token operator">></span></pre></td></tr><tr><td data-num="16"></td><td><pre></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token comment">// 1.1 获取模板</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token keyword">const</span> templateStr <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#template'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>textContent</pre></td></tr><tr><td data-num="21"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>templateStr<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>  <span class="token comment">// 2. 定义数据 对象类型 对象里面定义要循环的数组</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token literal-property property">arr</span><span class="token operator">:</span> <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="25"></td><td><pre>      <span class="token punctuation">&#123;</span> <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'lain'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token literal-property property">freiends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'saber'</span><span class="token punctuation">,</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="26"></td><td><pre>      <span class="token punctuation">&#123;</span> <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'saber'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token literal-property property">freiends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'稚名真白'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="27"></td><td><pre>      <span class="token punctuation">&#123;</span> <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token literal-property property">freiends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'稚名真白'</span><span class="token punctuation">,</span> <span class="token string">'lain'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="28"></td><td><pre>      <span class="token punctuation">&#123;</span> <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'稚名真白'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token literal-property property">freiends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'lain'</span><span class="token punctuation">,</span> <span class="token string">'saber'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token punctuation">]</span></pre></td></tr><tr><td data-num="30"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>  <span class="token comment">// 3. 返回遍历渲染完的新字符串</span></pre></td></tr><tr><td data-num="32"></td><td><pre>  <span class="token keyword">const</span> domStr <span class="token operator">=</span> Mustache<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>templateStr<span class="token punctuation">,</span> data<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="33"></td><td><pre>  </pre></td></tr><tr><td data-num="34"></td><td><pre>  <span class="token comment">// 4. 进行挂载 id 属性可以不用进行获取</span></pre></td></tr><tr><td data-num="35"></td><td><pre>  container<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> domStr</pre></td></tr><tr><td data-num="36"></td><td><pre></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数据变为视图方法&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#数据变为视图方法&quot;&gt;#&lt;/a&gt; 数据变为视图方法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;介绍下面 4 中方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;纯 DOM 法&lt;/li&gt;
&lt;li&gt;数组 Join 法&lt;/li</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 手写瀑布流 (waterFall)</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2021/12/26/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/waterFall/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2021/12/26/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/waterFall/</id>
    <published>2021-12-26T13:15:53.000Z</published>
    <updated>2022-03-06T01:26:34.913Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是瀑布流"><a class="anchor" href="#什么是瀑布流">#</a> 什么是瀑布流？</h2><ul><li>瀑布流，又称瀑布流式布局</li><li>是比较流行的一种网站页面布局，视觉表现为参差不齐的多栏布局，随着页面滚动条向下滚动，这种布局还会不断加载数据块并附加至当前尾部</li><li>最早采用此布局的网站是 Pinterest，逐渐在国内流行开来。国内大多数清新站基本为这类风格</li><li>即多行等宽元素排列，后面的元素依次添加到其后，等宽不等高，根据图片原比例缩放直至宽度达到我们的要求，依次按照规则放入指定位置。</li><li>就比如下面这种效果就属于瀑布流布局</li></ul><p><img data-src="waterFall.png" alt="waterFall" /></p><h2 id="实现思路"><a class="anchor" href="#实现思路">#</a> 实现思路</h2><ul><li><p>本人比较懒，不做图介绍，这里进行文字描述～还有不明白的可自行问度娘！</p></li><li><p>首先我们肯定是要先获取父元素与所有子元素</p></li><li><p>然后获取第一个子元素的宽度和屏幕的宽度，然后使用 <code>屏幕宽度 / 子元素宽度</code> 向下取整计算出列数</p></li><li><p>再声明一个数组存放元素的高度，数组长度应与列数一致</p></li><li><p>数组中的第一组元素高度值应该是小于列数的元素高度值</p></li><li><p>每次循环获取当前元素的高度值</p></li><li><p>然后每次循环求出 <code>最小高度与最小高度它的索引</code> ，以索引从小到大的顺序 <code>依次</code> 定位图片 <code>top</code>  值</p></li><li><p>并利用 <code>索引 * 图片宽度</code> 计算出应在的列数位置</p></li><li><p>同时利用最小索引求出应该相加的元素，将数组中的最小值进行累加</p></li><li><p>举个栗子</p></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 这是一个元素高度值数组 此时最小值为 10 它的索引为 0</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">let</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 进行循环 例如当前元素高度为 50 那么数组中的最小值会加上元素高度 即 list [0] += 50 </span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">let</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span> <span class="token operator">+</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span> <span class="token comment">// 此时最小值为 20 它的索引为 1</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// 接着循环第二个元素 假如高度值为 30 即应该 list [1] += 30</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">let</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token operator">+</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span>  <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span> <span class="token comment">// 此时最小值为 30  它的索引为 2</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">// 依次类推....</span></pre></td></tr></table></figure><ul><li>这就是实现瀑布流的思路，下面进行代码实现～</li></ul><h2 id="waterfall-实现"><a class="anchor" href="#waterfall-实现">#</a> waterFall 实现</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 1.0 定义一个函数 接收 父元素 与 子元素们 选择器</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">function</span> <span class="token function">waterFall</span><span class="token punctuation">(</span><span class="token parameter">parent<span class="token punctuation">,</span> childs</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token comment">// 1.1 获取标签父元素与其中的所有子元素</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">const</span> parentEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">const</span> childsEls <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span>childs<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token comment">// 1.2 获取一个子元素的宽度</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token keyword">const</span> childElWidth <span class="token operator">=</span> childsEls<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>offsetWidth</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token comment">// 1.3 获取屏幕的宽度 进行兼容判断</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token keyword">const</span> screenWidth <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientWidth</pre></td></tr><tr><td data-num="12"></td><td><pre>  </pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token comment">// 1.4 根据上面条件计算出应排版列数</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token keyword">const</span> cols <span class="token operator">=</span> <span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span>screenWidth <span class="token operator">/</span> childElWidth<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token comment">// 1.5 给父元素宽度并进行居中</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  parentEl<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> cols <span class="token operator">*</span> childElWidth <span class="token operator">+</span> <span class="token string">'px'</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  parentEl<span class="token punctuation">.</span>style<span class="token punctuation">.</span>margin <span class="token operator">=</span> <span class="token string">'0 auto'</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token comment">// 2.0 声明数组 存放每次应该定位的高度 数组长度与列数一致</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  <span class="token keyword">const</span> childsElHeightArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="22"></td><td><pre>  <span class="token comment">// 2.1 声明三个变量 分别用于保存 数组中最小高度、元素高度与最小索引值</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token keyword">let</span> minChildElHeight <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> childElHeight <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> minIndex <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token comment">// 3.0 对所有子元素进行遍历</span></pre></td></tr><tr><td data-num="26"></td><td><pre>  childsEls<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token comment">// 3.1 遍历获取元素的高度</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    childElHeight <span class="token operator">=</span> item<span class="token punctuation">.</span>offsetHeight</pre></td></tr><tr><td data-num="29"></td><td><pre>    </pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token comment">// 3.2 判断如果列数小于 index 则是第一排元素 添加进数组用于计算高度 </span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cols <span class="token operator">></span> index<span class="token punctuation">)</span>  <span class="token keyword">return</span> childsElHeightArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>childElHeight<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token comment">// 3.3 否则利用算法金星定位</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token comment">// 3.4 计算出数组中的最小高度</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    minChildElHeight <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token operator">...</span>childsElHeightArr<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    </pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token comment">// 3.5 计算数组最小高度所在的索引 这里我封装一个函数 calcMinIndex 即 -> 4.0 </span></pre></td></tr><tr><td data-num="38"></td><td><pre>    minIndex <span class="token operator">=</span> <span class="token function">calcMinIndex</span><span class="token punctuation">(</span>childsElHeightArr<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="39"></td><td><pre></pre></td></tr><tr><td data-num="40"></td><td><pre>    <span class="token comment">// 3.6 进行绝对定位</span></pre></td></tr><tr><td data-num="41"></td><td><pre>    item<span class="token punctuation">.</span>style<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token string">'absolute'</span></pre></td></tr><tr><td data-num="42"></td><td><pre></pre></td></tr><tr><td data-num="43"></td><td><pre>    <span class="token comment">// 3.7 利用最小索引 * 元素宽度 得出子元素据左的距离</span></pre></td></tr><tr><td data-num="44"></td><td><pre>    item<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> minIndex <span class="token operator">*</span> childElWidth <span class="token operator">+</span> <span class="token string">'px'</span></pre></td></tr><tr><td data-num="45"></td><td><pre>    </pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token comment">// 3.8 将每次最小高度赋值给元素的高度</span></pre></td></tr><tr><td data-num="47"></td><td><pre>    item<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> minChildElHeight <span class="token operator">+</span> <span class="token string">'px'</span></pre></td></tr><tr><td data-num="48"></td><td><pre></pre></td></tr><tr><td data-num="49"></td><td><pre>    <span class="token comment">// 3.9 将每次最小高度值与元素高度进行相加</span></pre></td></tr><tr><td data-num="50"></td><td><pre>    childsElHeightArr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">+=</span> childElHeight</pre></td></tr><tr><td data-num="51"></td><td><pre></pre></td></tr><tr><td data-num="52"></td><td><pre>    <span class="token comment">// 4.0 封装计算数组最小值的索引</span></pre></td></tr><tr><td data-num="53"></td><td><pre>    <span class="token keyword">function</span> <span class="token function">calcMinIndex</span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>      <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="55"></td><td><pre>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">></span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> index <span class="token operator">=</span> i</pre></td></tr><tr><td data-num="57"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>      <span class="token keyword">return</span> index</pre></td></tr><tr><td data-num="59"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="测试代码"><a class="anchor" href="#测试代码">#</a> 测试代码</h2><h3 id="css代码"><a class="anchor" href="#css代码">#</a>  <code>CSS</code>  代码</h3><figure class="highlight css"><figcaption data-lang="CSS"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">*</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token selector">img</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token property">max-width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token property">vertical-align</span><span class="token punctuation">:</span> top<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token selector">#main</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token selector">.box</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token property">padding</span><span class="token punctuation">:</span> 12px 0 0 12px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token selector">.pic</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #ccc<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="html代码"><a class="anchor" href="#html代码">#</a>  <code>HTML</code>  代码</h3><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./images/01.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./images/02.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./images/03.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./images/04.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./images/05.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./images/06.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./images/07.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="22"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./images/08.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="26"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./images/09.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="28"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="29"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./images/10.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="31"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="32"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./images/11.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="34"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="35"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./images/12.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="37"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="38"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./images/13.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="40"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="41"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="42"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./images/14.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="43"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><h3 id="javascript代码"><a class="anchor" href="#javascript代码">#</a>  <code>JavaScript</code>  代码</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">waterFall</span><span class="token punctuation">(</span><span class="token string">'#main'</span><span class="token punctuation">,</span><span class="token string">'.box'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><ul><li>实现效果图</li></ul><p><img data-src="waterFall.png" alt="waterFall" /></p><ul><li>至此，实现瀑布流篇章也告辞段落了，有时间还会分享一期结合瀑布流实现懒加载的 <code>JavaScript</code>  原生代码～</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是瀑布流&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#什么是瀑布流&quot;&gt;#&lt;/a&gt; 什么是瀑布流？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;瀑布流，又称瀑布流式布局&lt;/li&gt;
&lt;li&gt;是比较流行的一种网站页面布局，视觉表现为参差不齐的多栏布局，随着页面滚动条向下滚动</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 事件总线 (EventBus)</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2021/12/24/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/EventBus/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2021/12/24/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/EventBus/</id>
    <published>2021-12-24T09:32:35.000Z</published>
    <updated>2022-02-11T13:16:39.184Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自定义事件总线"><a class="anchor" href="#自定义事件总线">#</a> 自定义事件总线</h2><ul><li>自定义事件总线属于一种观察者模式，其中包括三个角色：<ul><li>发布者（Publisher）：发出事件（Event）</li><li>订阅者（Subscriber）：订阅事件（Event），并且会进行响应（Handler）</li><li>事件总线（EventBus）：无论是发布者还是订阅者都是通过事件总线作为中台的</li></ul></li><li>当然我们可以选择一些第三方的库：<ul><li>Vue2 默认是带有事件总线的功能</li><li>Vue3 中推荐一些第三方库，比如 mitt</li></ul></li><li>当然我们也可以实现自己的事件总线：<ul><li>事件的监听方法 on</li><li>事件的发射方法 emit</li><li>事件的取消监听 off</li></ul></li></ul><h2 id="_eventbus-实现"><a class="anchor" href="#_eventbus-实现">#</a> _EventBus 实现</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">_EventBus</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>eventBus <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token function">on</span><span class="token punctuation">(</span><span class="token parameter">eventName<span class="token punctuation">,</span> eventCallback<span class="token punctuation">,</span> thisArg</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token comment">// 根据 eventName 取 eventBus 里面的函数</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">let</span> handlers <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>eventBus<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>handlers<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>      handlers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="11"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>eventBus<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span> <span class="token operator">=</span> handlers</pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token comment">// 将函数与参数添加进数组</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    handlers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>      eventCallback<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="17"></td><td><pre>      thisArg</pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre>  <span class="token function">off</span><span class="token punctuation">(</span><span class="token parameter">eventName<span class="token punctuation">,</span> eventCallback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">const</span> handlers <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>eventBus<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>handlers<span class="token punctuation">)</span> <span class="token keyword">return</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">const</span> newHandlers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>handlers<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    </pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> newHandlers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>      <span class="token keyword">const</span> handler <span class="token operator">=</span> newHandlers<span class="token punctuation">[</span>i<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="28"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span>handler<span class="token punctuation">.</span>eventCallback <span class="token operator">===</span> eventCallback<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token keyword">const</span> index <span class="token operator">=</span> handlers<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        handlers<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre>  <span class="token function">emit</span><span class="token punctuation">(</span><span class="token parameter">eventName<span class="token punctuation">,</span> <span class="token operator">...</span>payload</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token keyword">const</span> handlers <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>eventBus<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>handlers<span class="token punctuation">)</span> <span class="token keyword">return</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    handlers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">handler</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>      handler<span class="token punctuation">.</span><span class="token function">eventCallback</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>handler<span class="token punctuation">.</span>thisArg<span class="token punctuation">,</span> payload<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="40"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="41"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="42"></td><td><pre></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;自定义事件总线&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#自定义事件总线&quot;&gt;#&lt;/a&gt; 自定义事件总线&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;自定义事件总线属于一种观察者模式，其中包括三个角色：
&lt;ul&gt;
&lt;li&gt;发布者（Publisher）：发出事件（Event</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 实现深拷贝(deepClone)</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2021/12/22/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/deepClone/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2021/12/22/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/deepClone/</id>
    <published>2021-12-22T03:28:25.000Z</published>
    <updated>2022-03-05T01:40:00.430Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自定义深拷贝函数"><a class="anchor" href="#自定义深拷贝函数">#</a> 自定义深拷贝函数</h2><ul><li>对象相互赋值的一些关系，分别包括：</li><li>引入的赋值：指向同一个对象，相互之间会影响；</li><li>对象的浅拷贝：只是浅层的拷贝，内部引入对象时，依然会相互影响；</li><li>对象的深拷贝：两个对象不再有任何关系，不会相互影响；</li><li>我们可以通过一种方法来实现深拷贝了：JSON.parse<ul><li>这种深拷贝的方式其实对于函数、Symbol 等是无法处理的；</li><li>并且如果存在对象的循环引用，也会报错的；</li></ul></li><li>自定义深拷贝函数：<ul><li>自定义深拷贝的基本功能</li><li>对 Symbol 的 key 进行处理</li><li>其他数据类型的值进程处理：数组、函数、Symbol、Set、Map</li><li>对循环引用的处理</li></ul></li></ul><h2 id="json-实现伪深拷贝"><a class="anchor" href="#json-实现伪深拷贝">#</a> JSON 实现伪深拷贝</h2><ul><li>拿 lain 对象举栗</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> symbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">const</span> lain <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"lain"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token literal-property property">friend</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"saber"</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"foo~"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token punctuation">[</span>symbol<span class="token punctuation">]</span><span class="token operator">:</span> symbol<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token literal-property property">symbol</span><span class="token operator">:</span> symbol</pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>使用 <code>JSON</code>  进行深拷贝</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> newLain <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>lain<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lain<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">/*</pre></td></tr><tr><td data-num="5"></td><td><pre>&#123;</pre></td></tr><tr><td data-num="6"></td><td><pre>  name: 'lain',</pre></td></tr><tr><td data-num="7"></td><td><pre>  friend: &#123; name: 'saber' &#125;,</pre></td></tr><tr><td data-num="8"></td><td><pre>  foo: [Function: foo],</pre></td></tr><tr><td data-num="9"></td><td><pre>  symbol: Symbol(),</pre></td></tr><tr><td data-num="10"></td><td><pre>  [Symbol()]: Symbol()</pre></td></tr><tr><td data-num="11"></td><td><pre>&#125;</pre></td></tr><tr><td data-num="12"></td><td><pre>*/</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newLain<span class="token punctuation">)</span> <span class="token comment">// &#123; name: 'lain', friend: &#123; name: 'saber' &#125; &#125;</span></pre></td></tr></table></figure><ul><li><p>从上面输出可以看出是有很多弊端的</p><ul><li>对函数是没办法处理的</li><li>对 Symbol 也是无法处理的</li><li>并且无法将 <code>lain</code>  指向自己</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>lain<span class="token punctuation">.</span>lain <span class="token operator">=</span> lain <span class="token comment">// 从逻辑上看是没有问题的，但实际上这样会报错</span></pre></td></tr></table></figure></li></ul><h2 id="deepclone-v1-基本实现"><a class="anchor" href="#deepclone-v1-基本实现">#</a> deepClone <sub>v1</sub> 基本实现</h2><ul><li><code>if (!(isObject(originValue))) return originValue</code>  这句代码最主要是用来终止 <code>deepClone</code>  函数的递归调用</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 用于判断是否是 对象类型或者函数类型</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">function</span> <span class="token function">isObject</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">const</span> valueType <span class="token operator">=</span> <span class="token keyword">typeof</span> value</pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">return</span> <span class="token punctuation">(</span>valueType <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token parameter">originValue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token comment">// 如果不是对象类型则直接将当前值返回</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>originValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> originValue</pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">const</span> newObject <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> originValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    newObject<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>originValue<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token keyword">return</span> newObject</pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>测试对象</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> lain <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"lain"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token literal-property property">friend</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"saber"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token literal-property property">fruits</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'cherry'</span><span class="token punctuation">,</span> <span class="token string">'peack'</span><span class="token punctuation">,</span> <span class="token string">'watermelon'</span><span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token literal-property property">friend</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>      <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">樱岛麻衣 foo~</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"saber foo~"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"lain foo~"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>测试代码</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> newLain <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>lain<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lain<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">/*</pre></td></tr><tr><td data-num="5"></td><td><pre>&#123;</pre></td></tr><tr><td data-num="6"></td><td><pre>  name: 'lain',</pre></td></tr><tr><td data-num="7"></td><td><pre>  friend: &#123;</pre></td></tr><tr><td data-num="8"></td><td><pre>    name: 'saber',</pre></td></tr><tr><td data-num="9"></td><td><pre>    fruits: ['cherry', 'peack', 'watermelon'],       </pre></td></tr><tr><td data-num="10"></td><td><pre>    friend: &#123; name: ' 樱岛麻衣 ', foo: [Function: foo] &#125;,</pre></td></tr><tr><td data-num="11"></td><td><pre>    foo: [Function: foo]</pre></td></tr><tr><td data-num="12"></td><td><pre>  &#125;,</pre></td></tr><tr><td data-num="13"></td><td><pre>  foo: [Function: foo]</pre></td></tr><tr><td data-num="14"></td><td><pre>&#125;</pre></td></tr><tr><td data-num="15"></td><td><pre>*/</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newLain<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token comment">/*</pre></td></tr><tr><td data-num="19"></td><td><pre>&#123;</pre></td></tr><tr><td data-num="20"></td><td><pre>  name: 'lain',</pre></td></tr><tr><td data-num="21"></td><td><pre>  friend: &#123;</pre></td></tr><tr><td data-num="22"></td><td><pre>    name: 'saber',</pre></td></tr><tr><td data-num="23"></td><td><pre>    fruits: &#123;'0': 'cherry', '1': 'peack', '2': 'watermelon'&#125;,</pre></td></tr><tr><td data-num="24"></td><td><pre>    friend: &#123; name: ' 樱岛麻衣 ', foo: &#123;&#125; &#125;,</pre></td></tr><tr><td data-num="25"></td><td><pre>    foo: &#123;&#125;</pre></td></tr><tr><td data-num="26"></td><td><pre>  &#125;,</pre></td></tr><tr><td data-num="27"></td><td><pre>  foo: &#123;&#125;</pre></td></tr><tr><td data-num="28"></td><td><pre>&#125;</pre></td></tr><tr><td data-num="29"></td><td><pre>*/</span></pre></td></tr></table></figure><ul><li>从上面来看确实是实现了深拷贝，但是限制新对象与原对象是有些许差异的<ul><li>比如数组 <code>fruits</code> ，原对象是一个数组，有三个元素，而新对象的 <code>fruits</code>  已经变为了一个对象，用索引作为 <code>key</code> ，用 <code>value</code>  作为值</li><li>还有函数也变为了对象</li><li>没有对 <code>Symbol</code>  类型进行处理</li><li>也没有对 <code>Set/Map</code>  进行处理</li></ul></li><li>所以接下来我会进一步进行完善深拷贝的其他类型判断</li></ul><h2 id="deepclone-v2-其他类型"><a class="anchor" href="#deepclone-v2-其他类型">#</a> deepClone <sub>v2</sub> 其他类型</h2><ul><li>这里进行了非常多的判断逻辑，都是比较简单的</li><li>可能对于 <code>Symbol/Set/Map</code>  类型的深拷贝会稍微复杂些</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 这里重写了用 is 对象来判断类型</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> is <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token literal-property property">Array</span><span class="token operator">:</span> Array<span class="token punctuation">.</span>isArray<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token function-variable function">Date</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> val <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token function-variable function">Set</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Set]'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token function-variable function">Map</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Map]'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token function-variable function">Object</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Object]'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token function-variable function">Symbol</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Symbol]'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token function-variable function">Function</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Function]'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token comment">// 2.1 函数浅拷贝</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token comment">/* if (is.Function(value)) return value */</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    </pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token comment">// 2.2 函数深拷贝</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">Function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^function</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\(\)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="19"></td><td><pre>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">'return '</span> <span class="token operator">+</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">'return function '</span> <span class="token operator">+</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  </pre></td></tr><tr><td data-num="24"></td><td><pre>  <span class="token comment">// 3.Date 深拷贝</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">Date</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token comment">// 4. 判断如果是 Symbol 的 value, 那么创建一个新的 Symbol</span></pre></td></tr><tr><td data-num="28"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">Symbol</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">Symbol</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>description<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre>  <span class="token comment">// 5. 判断是否是 Set 类型 进行深拷贝</span></pre></td></tr><tr><td data-num="31"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token comment">// 5.1 浅拷贝 直接进行解构即可</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token comment">// return new Set([...value])</span></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre>    <span class="token comment">// 5.2 深拷贝</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token keyword">const</span> newSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> value<span class="token punctuation">)</span> newSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">deepClone</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token keyword">return</span> newSet</pre></td></tr><tr><td data-num="39"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>  </pre></td></tr><tr><td data-num="41"></td><td><pre>  <span class="token comment">// 6. 判断是否是 Map 类型 </span></pre></td></tr><tr><td data-num="42"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">Map</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>    <span class="token comment">// 6.1 浅拷贝 直接进行解构即可</span></pre></td></tr><tr><td data-num="44"></td><td><pre>    <span class="token comment">// return new Map([...value])</span></pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token comment">// 6.2 深拷贝</span></pre></td></tr><tr><td data-num="47"></td><td><pre>    <span class="token keyword">const</span> newMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="48"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> value<span class="token punctuation">)</span> newMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token function">deepClone</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="49"></td><td><pre>    <span class="token keyword">return</span> newMap</pre></td></tr><tr><td data-num="50"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="51"></td><td><pre></pre></td></tr><tr><td data-num="52"></td><td><pre>  <span class="token comment">// 1. 如果不是对象类型则直接将当前值返回</span></pre></td></tr><tr><td data-num="53"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">Object</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> value</pre></td></tr><tr><td data-num="54"></td><td><pre></pre></td></tr><tr><td data-num="55"></td><td><pre>  <span class="token comment">// 7. 判断传入的对象是数组，还是对象</span></pre></td></tr><tr><td data-num="56"></td><td><pre>  <span class="token keyword">const</span> newObject <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">Array</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="57"></td><td><pre></pre></td></tr><tr><td data-num="58"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>    <span class="token comment">// 8 进行递归调用</span></pre></td></tr><tr><td data-num="60"></td><td><pre>    newObject<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>value<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="61"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="62"></td><td><pre></pre></td></tr><tr><td data-num="63"></td><td><pre>  <span class="token comment">// 4.1 对 Symbol 作为 key 进行特殊的处理 拿到对象上面的所有 Symbol key，以数组形式返回</span></pre></td></tr><tr><td data-num="64"></td><td><pre>  <span class="token keyword">const</span> symbolKeys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertySymbols</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="65"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> sKey <span class="token keyword">of</span> symbolKeys<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="66"></td><td><pre></pre></td></tr><tr><td data-num="67"></td><td><pre>    <span class="token comment">// 4.2 这里没有必要创建一个新的 Symbol</span></pre></td></tr><tr><td data-num="68"></td><td><pre>    <span class="token comment">// const newSKey = Symbol(sKey.description)</span></pre></td></tr><tr><td data-num="69"></td><td><pre></pre></td></tr><tr><td data-num="70"></td><td><pre>    <span class="token comment">// 4.3 直接将原来的 Symbol key 拷贝到新对象上就可以了</span></pre></td></tr><tr><td data-num="71"></td><td><pre>    newObject<span class="token punctuation">[</span>sKey<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>value<span class="token punctuation">[</span>sKey<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="72"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="73"></td><td><pre></pre></td></tr><tr><td data-num="74"></td><td><pre>  <span class="token keyword">return</span> newObject</pre></td></tr><tr><td data-num="75"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="测试目标对象"><a class="anchor" href="#测试目标对象">#</a> 测试目标对象</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> symboLain <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'lain'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> symboSaber <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'saber'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">const</span> lain <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"lain"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token literal-property property">friend</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"saber"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token literal-property property">fruits</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'cherry'</span><span class="token punctuation">,</span> <span class="token string">'peack'</span><span class="token punctuation">,</span> <span class="token string">'watermelon'</span><span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token literal-property property">friend</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>      <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">樱岛麻衣 foo~</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"saber foo~"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"lain foo~"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="22"></td><td><pre>  <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token punctuation">[</span>symboLain<span class="token punctuation">]</span><span class="token operator">:</span> symboLain<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="24"></td><td><pre>  <span class="token punctuation">[</span>symboSaber<span class="token punctuation">]</span><span class="token operator">:</span> symboSaber<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token literal-property property">symboLain</span><span class="token operator">:</span> symboSaber<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token literal-property property">set</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'入间同学'</span><span class="token punctuation">,</span> <span class="token string">'蝶祈'</span><span class="token punctuation">,</span> <span class="token string">'枫'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="28"></td><td><pre>  <span class="token literal-property property">map</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'age1'</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'age2'</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'age3'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'obj'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="测试-function"><a class="anchor" href="#测试-function">#</a> 测试  <code>Function</code></h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lain<span class="token punctuation">.</span>foo <span class="token operator">===</span> newLain<span class="token punctuation">.</span>foo<span class="token punctuation">)</span> <span class="token comment">// false</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lain<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>foo <span class="token operator">===</span> newLain<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>foo<span class="token punctuation">)</span> <span class="token comment">// false</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lain<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>foo <span class="token operator">===</span> newLain<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>foo<span class="token punctuation">)</span> <span class="token comment">// false</span></pre></td></tr></table></figure><h3 id="测试-date"><a class="anchor" href="#测试-date">#</a> 测试  <code>Date</code></h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lain<span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 可自行测试</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newLain<span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 时间也与上面一样 可自行测试</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lain<span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">]</span> <span class="token operator">===</span> newLain<span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// false</span></pre></td></tr></table></figure><h3 id="测试-symbol"><a class="anchor" href="#测试-symbol">#</a> 测试  <code>Symbol</code></h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lain<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">/*</pre></td></tr><tr><td data-num="3"></td><td><pre>&#123;</pre></td></tr><tr><td data-num="4"></td><td><pre>  name: 'lain',</pre></td></tr><tr><td data-num="5"></td><td><pre>  friend: &#123;</pre></td></tr><tr><td data-num="6"></td><td><pre>    name: 'saber',</pre></td></tr><tr><td data-num="7"></td><td><pre>    fruits: ['cherry', 'peack', 'watermelon'],</pre></td></tr><tr><td data-num="8"></td><td><pre>    friend: &#123; name: ' 樱岛麻衣 ', foo: [Function: foo] &#125;,</pre></td></tr><tr><td data-num="9"></td><td><pre>    foo: [Function: foo]</pre></td></tr><tr><td data-num="10"></td><td><pre>  &#125;,</pre></td></tr><tr><td data-num="11"></td><td><pre>  foo: [Function: foo],</pre></td></tr><tr><td data-num="12"></td><td><pre>  'Sun Feb 13 2022 14:52:05 GMT+0800 (中国标准时间)': 2022-02-13T06:52:05.892Z,</pre></td></tr><tr><td data-num="13"></td><td><pre>  symboLain: Symbol (saber),</pre></td></tr><tr><td data-num="14"></td><td><pre>  set: Set (4) &#123; ' 入间同学 ', ' 蝶祈 ', ' 枫 ', &#123; a: 1, b: 2 &#125; &#125;,</pre></td></tr><tr><td data-num="15"></td><td><pre>  map: Map (4) &#123;</pre></td></tr><tr><td data-num="16"></td><td><pre>    'age1' => 16,</pre></td></tr><tr><td data-num="17"></td><td><pre>    'age2' => 17,</pre></td></tr><tr><td data-num="18"></td><td><pre>    'age3' => 18,</pre></td></tr><tr><td data-num="19"></td><td><pre>    'obj' => &#123; a: 1, b: 2 &#125;</pre></td></tr><tr><td data-num="20"></td><td><pre>  &#125;,</pre></td></tr><tr><td data-num="21"></td><td><pre>  [Symbol (lain)]: Symbol (lain),</pre></td></tr><tr><td data-num="22"></td><td><pre>  [Symbol (saber)]: Symbol (saber)</pre></td></tr><tr><td data-num="23"></td><td><pre>&#125;</pre></td></tr><tr><td data-num="24"></td><td><pre>*/</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newLain<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token comment">/*</pre></td></tr><tr><td data-num="28"></td><td><pre>&#123;</pre></td></tr><tr><td data-num="29"></td><td><pre>  name: 'lain',</pre></td></tr><tr><td data-num="30"></td><td><pre>  friend: &#123;</pre></td></tr><tr><td data-num="31"></td><td><pre>    name: 'saber',</pre></td></tr><tr><td data-num="32"></td><td><pre>    fruits: ['cherry', 'peack', 'watermelon'],</pre></td></tr><tr><td data-num="33"></td><td><pre>    friend: &#123; name: ' 樱岛麻衣 ', foo: [Function: foo] &#125;,</pre></td></tr><tr><td data-num="34"></td><td><pre>    foo: [Function: foo]</pre></td></tr><tr><td data-num="35"></td><td><pre>  &#125;,</pre></td></tr><tr><td data-num="36"></td><td><pre>  foo: [Function: foo],</pre></td></tr><tr><td data-num="37"></td><td><pre>  'Sun Feb 13 2022 14:52:05 GMT+0800 (中国标准时间)': 2022-02-13T06:52:05.892Z,</pre></td></tr><tr><td data-num="38"></td><td><pre>  symboLain: Symbol (saber),</pre></td></tr><tr><td data-num="39"></td><td><pre>  set: Set (4) &#123; ' 入间同学 ', ' 蝶祈 ', ' 枫 ', &#123; a: 1, b: 2 &#125; &#125;,</pre></td></tr><tr><td data-num="40"></td><td><pre>  map: Map (4) &#123;</pre></td></tr><tr><td data-num="41"></td><td><pre>    'age1' => 16,</pre></td></tr><tr><td data-num="42"></td><td><pre>    'age2' => 17,</pre></td></tr><tr><td data-num="43"></td><td><pre>    'age3' => 18,</pre></td></tr><tr><td data-num="44"></td><td><pre>    'obj' => &#123; a: 1, b: 2 &#125;</pre></td></tr><tr><td data-num="45"></td><td><pre>  &#125;,</pre></td></tr><tr><td data-num="46"></td><td><pre>  [Symbol (lain)]: Symbol (lain),</pre></td></tr><tr><td data-num="47"></td><td><pre>  [Symbol (saber)]: Symbol (saber)</pre></td></tr><tr><td data-num="48"></td><td><pre>&#125;</pre></td></tr><tr><td data-num="49"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id="测试-set"><a class="anchor" href="#测试-set">#</a> 测试  Set</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>lain<span class="token punctuation">.</span>set<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">Object</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment">// 这里对 lain 中 set 属性中的对象进行添加属性</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    item<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">3</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lain<span class="token punctuation">.</span>set<span class="token punctuation">)</span> <span class="token comment">// Set (4) &#123; ' 入间同学 ', ' 蝶祈 ', ' 枫 ', &#123; a: 1, b: 2, c: 3 &#125; &#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newLain<span class="token punctuation">.</span>set<span class="token punctuation">)</span> <span class="token comment">// Set (4) &#123; ' 入间同学 ', ' 蝶祈 ', ' 枫 ', &#123; a: 1, b: 2 &#125; &#125;</span></pre></td></tr></table></figure><h3 id="最后对map进行代码测试"><a class="anchor" href="#最后对map进行代码测试">#</a> 最后对 <code>Map</code>  进行代码测试</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>lain<span class="token punctuation">.</span>map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">Object</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment">// 这里对 lain 中 map 属性中的对象进行添加属性</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    item<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">3</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lain<span class="token punctuation">.</span>map<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">/*</pre></td></tr><tr><td data-num="10"></td><td><pre>Map(4) &#123;</pre></td></tr><tr><td data-num="11"></td><td><pre>  'age1' => 16,</pre></td></tr><tr><td data-num="12"></td><td><pre>  'age2' => 17,</pre></td></tr><tr><td data-num="13"></td><td><pre>  'age3' => 18,</pre></td></tr><tr><td data-num="14"></td><td><pre>  'obj' => &#123; a: 1, b: 2, c: 3 &#125;</pre></td></tr><tr><td data-num="15"></td><td><pre>&#125;</pre></td></tr><tr><td data-num="16"></td><td><pre>*/</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newLain<span class="token punctuation">.</span>map<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment">/*</pre></td></tr><tr><td data-num="20"></td><td><pre>Map(4) &#123;</pre></td></tr><tr><td data-num="21"></td><td><pre>  'age1' => 16,</pre></td></tr><tr><td data-num="22"></td><td><pre>  'age2' => 17,</pre></td></tr><tr><td data-num="23"></td><td><pre>  'age3' => 18,</pre></td></tr><tr><td data-num="24"></td><td><pre>  'obj' => &#123; a: 1, b: 2 &#125;</pre></td></tr><tr><td data-num="25"></td><td><pre>&#125;</pre></td></tr><tr><td data-num="26"></td><td><pre>*/</span></pre></td></tr></table></figure><ul><li><p><code>map</code>  也是没有问题的</p></li><li><p>那么类型篇章算是完结了，但我们此时的代码是有 <code>bug</code>  的，至于是什么 <code>bug</code> ，看下面标题应该就知道了～</p></li></ul><h2 id="deepclone-v3-循环引用"><a class="anchor" href="#deepclone-v3-循环引用">#</a> deepClone <sub>v3</sub> 循环引用</h2><ul><li>此时我们进行一步操作，用下面的代码对上面对象进行测试会发生什么呢？</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>lain<span class="token punctuation">.</span>lain <span class="token operator">=</span> lain</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> newLain <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>lain<span class="token punctuation">)</span></pre></td></tr></table></figure><ul><li><code>Uncaught RangeError: Maximum call stack size exceeded</code>  没错，会发生栈溢出！</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 用于判断类型</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> is <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token literal-property property">Array</span><span class="token operator">:</span> Array<span class="token punctuation">.</span>isArray<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token function-variable function">Date</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> val <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token function-variable function">Set</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Set]'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token function-variable function">Map</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Map]'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token function-variable function">Object</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Object]'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token function-variable function">Symbol</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Symbol]'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token function-variable function">Function</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Function]'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> weakMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token comment">// 2.1 函数浅拷贝</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token comment">/* if (is.Function(value)) return value */</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    </pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token comment">// 2.2 函数深拷贝</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">Function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^function</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\(\)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="19"></td><td><pre>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">'return '</span> <span class="token operator">+</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">'return function '</span> <span class="token operator">+</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  </pre></td></tr><tr><td data-num="24"></td><td><pre>  <span class="token comment">// 3.Date 深拷贝</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">Date</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token comment">// 4. 判断如果是 Symbol 的 value, 那么创建一个新的 Symbol</span></pre></td></tr><tr><td data-num="28"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">Symbol</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">Symbol</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>description<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre>  <span class="token comment">// 5. 判断是否是 Set 类型 进行深拷贝</span></pre></td></tr><tr><td data-num="31"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token comment">// 5.1 浅拷贝 直接进行解构即可</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token comment">// return new Set([...value])</span></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre>    <span class="token comment">// 5.2 深拷贝</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token keyword">const</span> newSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> value<span class="token punctuation">)</span> newSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">deepClone</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">,</span> weakMap<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token keyword">return</span> newSet</pre></td></tr><tr><td data-num="39"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>  </pre></td></tr><tr><td data-num="41"></td><td><pre>  <span class="token comment">// 6. 判断是否是 Map 类型 </span></pre></td></tr><tr><td data-num="42"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">Map</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>    <span class="token comment">// 6.1 浅拷贝 直接进行解构即可</span></pre></td></tr><tr><td data-num="44"></td><td><pre>    <span class="token comment">// return new Map([...value])</span></pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token comment">// 6.2 深拷贝</span></pre></td></tr><tr><td data-num="47"></td><td><pre>    <span class="token keyword">const</span> newMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="48"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> value<span class="token punctuation">)</span> newMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token function">deepClone</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> weakMap<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> weakMap<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="49"></td><td><pre>    <span class="token keyword">return</span> newMap</pre></td></tr><tr><td data-num="50"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="51"></td><td><pre></pre></td></tr><tr><td data-num="52"></td><td><pre>  <span class="token comment">// 9. 判断 weakMap 是否有值 有值的情况下就直接将值返回就可以</span></pre></td></tr><tr><td data-num="53"></td><td><pre>  <span class="token keyword">if</span><span class="token punctuation">(</span>weakMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> weakMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="54"></td><td><pre></pre></td></tr><tr><td data-num="55"></td><td><pre>  <span class="token comment">// 1. 如果不是对象类型则直接将当前值返回</span></pre></td></tr><tr><td data-num="56"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">Object</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> value</pre></td></tr><tr><td data-num="57"></td><td><pre></pre></td></tr><tr><td data-num="58"></td><td><pre>  <span class="token comment">// 7. 判断传入的对象是数组，还是对象</span></pre></td></tr><tr><td data-num="59"></td><td><pre>  <span class="token keyword">const</span> newObj <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">Array</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="60"></td><td><pre></pre></td></tr><tr><td data-num="61"></td><td><pre>  <span class="token comment">// 10. 当 weakMap 没有值时，将 originValue 作为 key, newObj 作为 value</span></pre></td></tr><tr><td data-num="62"></td><td><pre>    weakMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> newObj<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="63"></td><td><pre>  </pre></td></tr><tr><td data-num="64"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="65"></td><td><pre>    weakMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> newObj<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="66"></td><td><pre>    <span class="token comment">// 8 进行递归调用</span></pre></td></tr><tr><td data-num="67"></td><td><pre>    newObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>value<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> weakMap<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="68"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="69"></td><td><pre></pre></td></tr><tr><td data-num="70"></td><td><pre>  <span class="token comment">// 4.1 对 Symbol 作为 key 进行特殊的处理 拿到对象上面的所有 Symbol key，以数组形式返回</span></pre></td></tr><tr><td data-num="71"></td><td><pre>  <span class="token keyword">const</span> symbolKeys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertySymbols</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="72"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> sKey <span class="token keyword">of</span> symbolKeys<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="73"></td><td><pre></pre></td></tr><tr><td data-num="74"></td><td><pre>    <span class="token comment">// 4.2 这里没有必要创建一个新的 Symbol</span></pre></td></tr><tr><td data-num="75"></td><td><pre>    <span class="token comment">// const newSKey = Symbol(sKey.description)</span></pre></td></tr><tr><td data-num="76"></td><td><pre></pre></td></tr><tr><td data-num="77"></td><td><pre>    <span class="token comment">// 4.3 直接将原来的 Symbol key 拷贝到新对象上就可以了</span></pre></td></tr><tr><td data-num="78"></td><td><pre>    newObj<span class="token punctuation">[</span>sKey<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>value<span class="token punctuation">[</span>sKey<span class="token punctuation">]</span><span class="token punctuation">,</span> weakMap<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="79"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="80"></td><td><pre></pre></td></tr><tr><td data-num="81"></td><td><pre>  <span class="token keyword">return</span> newObj</pre></td></tr><tr><td data-num="82"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>继续用上面的代码进行测试，建议用 <code>浏览器测试</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>lain<span class="token punctuation">.</span>lain <span class="token operator">=</span> lain</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> newLain <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>lain<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 没有溢栈 可自行去测</span></pre></td></tr><tr><td data-num="5"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lain<span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="6"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newLain<span class="token punctuation">)</span></pre></td></tr></table></figure><ul><li>此时代码就没有问题了，那么深拷贝篇到此就结束了～</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;自定义深拷贝函数&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#自定义深拷贝函数&quot;&gt;#&lt;/a&gt; 自定义深拷贝函数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;对象相互赋值的一些关系，分别包括：&lt;/li&gt;
&lt;li&gt;引入的赋值：指向同一个对象，相互之间会影响；&lt;/li&gt;
&lt;li</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 手写节流函数(throttle)</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2021/12/20/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/throttle/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2021/12/20/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/throttle/</id>
    <published>2021-12-19T16:36:14.000Z</published>
    <updated>2022-02-11T07:20:01.810Z</updated>
    
    <content type="html"><![CDATA[<h2 id="认识节流throttle函数"><a class="anchor" href="#认识节流throttle函数">#</a> 认识节流 throttle 函数</h2><ul><li><p>我们来理解一下节流的过程</p><ul><li><p>当事件触发时，会执行这个事件的响应函数</p></li><li><p>如果这个事件会被频繁触发，那么节流函数会按照一定的频率来执行函数</p></li><li><p>不管在这个中间有多少次触发这个事件，执行函数的频繁总是固定的</p></li></ul></li><li><p>节流的应用场景：</p><ul><li>监听页面的滚动事件</li><li>鼠标移动事件</li><li>用户频繁点击按钮操作</li><li>游戏中的一些设计</li></ul></li></ul><h2 id="节流函数的应用场景"><a class="anchor" href="#节流函数的应用场景">#</a> 节流函数的应用场景</h2><ul><li><p>很多人都玩过类似于 <code>王者荣耀或者LOL</code></p><ul><li>当玩 <code>ADC</code>  时，哪怕你疯狂点平 A，射手的射速与你点击的频率没有太大关系</li><li>因为游戏中它们是由自己的 <code>攻速阈值</code> 的，那么这种攻速阈值带来的效果就是 <code>节流</code></li></ul></li><li><p>很多人也都玩过类似于飞机大战的游戏</p></li><li><p>在飞机大战的游戏中，我们按下空格会发射一个子弹：</p><ul><li>很多飞机大战的游戏中会有这样的设定，即使按下的频率非常快，子弹也会保持一定的频率来发射</li><li>比如 1 秒钟只能发射一次，即使用户在这 1 秒钟按下了 10 次，子弹会保持发射一颗的频率来发射</li><li>但是事件是触发了 10 次的，响应的函数只触发了一次</li></ul></li></ul><h2 id="underscore-库的介绍"><a class="anchor" href="#underscore-库的介绍">#</a> Underscore 库的介绍</h2><ul><li>事实上我们可以通过一些第三方库来实现防抖操作：<ul><li>lodash</li><li>underscore</li></ul></li><li>这里使用 underscore<ul><li>我们可以理解成 lodash 是 underscore 的升级版，它更重量级，功能也更多；</li><li>但是目前我看到 underscore 还在维护，lodash 已经很久没有更新了；</li></ul></li><li>Underscore 的官网： <span class="exturl" data-url="aHR0cHM6Ly91bmRlcnNjb3JlanMub3JnLw==">https://underscorejs.org/</span></li><li>Underscore 的安装有很多种方式：<ul><li>下载 Underscore，本地引入；</li><li>通过 CDN 直接引入；</li><li>通过包管理工具（npm）管理安装；</li></ul></li><li>这里我们直接通过 CDN：</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/npm/underscore@1.13.1/underscore-umd-min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></pre></td></tr></table></figure><ul><li><code>HTML</code></li></ul><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr></table></figure><ul><li><code>js</code>  代码测试</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> inputEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">const</span> <span class="token function-variable function">inputChange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">发送了第</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token operator">++</span>counter<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">次网络请求</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>inputEl<span class="token punctuation">.</span>oninput <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">throttle</span><span class="token punctuation">(</span>inputChange<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="throttle-v1-基本实现"><a class="anchor" href="#throttle-v1-基本实现">#</a> throttle <sub>v1</sub> 基本实现</h2><ul><li>这里实现节流函数思路是采用 <code>时间戳</code> 的方式<ul><li>采用 <code>lastTime</code>  来记录每次执行的上一次函数触发的开始时间，默认为 <code>0</code></li><li>然后通过 <code>传入的时间间隔与当前触发的时间以及上一次触发的开始的时间, 计算出还剩余多长事件需要去触发函数</code></li><li>最后触发函数时，会将 <code>当前触发的时间赋值给用来保存上次触发事件的变量</code> ，实现 <code>节流</code> 效果</li></ul></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> interval</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">// 1. 记录上一次的开始时间</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">let</span> lastTime <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">// 2. 事件触发时，执行的函数</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">const</span> <span class="token function-variable function">_throttle</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token comment">// 2.1 获取当前事件触发时的时间</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">const</span> nowTime <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token comment">// 2.2 余下时间 = 间隔时间 - (触发开始时间 - 上一次的触发开始时间)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">const</span> remainTime <span class="token operator">=</span> interval <span class="token operator">-</span> <span class="token punctuation">(</span>nowTime <span class="token operator">-</span> lastTime<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>remainTime <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>      <span class="token comment">// 2.3 真正触发的函数</span></pre></td></tr><tr><td data-num="15"></td><td><pre>      <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>      <span class="token comment">// 2.4 保留上次触发的事件</span></pre></td></tr><tr><td data-num="18"></td><td><pre>      lastTime <span class="token operator">=</span> nowTime</pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  <span class="token keyword">return</span> _throttle</pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>那么这就是 <code>节流函数</code> 的基本实现，接下来还会增加一些功能</li></ul><h2 id="throttle-v2-leading实现"><a class="anchor" href="#throttle-v2-leading实现">#</a> throttle <sub>v2</sub> leading 实现</h2><ul><li>实现思路就是传入一个对象，对象控制两个变量 <code>leading</code>  与 <code>trailing</code><ul><li><code>leading</code>  控制第一次是否执行</li><li><code>trailing</code>  控制最后一次是否执行</li></ul></li><li>这里先实现 <code>leading </code> 功能，那么 <code>leading </code> 这里的默认值我设置了 <code>true</code> ，也就是默认第一次就执行</li><li>就下了就涉及到一个小算法，就是当 <code>leading</code>  为 <code>true</code>  时，那么将 <code>nowTime</code>  赋值给 <code>lastTime</code><ul><li>就比如当前触发开始时间 (nowTime) 是 <code>1000000</code> , 那么将上一次触发开始时间 (lastTime) 等于 <code>1000000</code></li><li>在执行 <code>nowTime - lastTime</code>  时，结果必然为 <code>0</code> , 那么就满足下面的 <code>if</code>  判断了，就会执行函数了！</li></ul></li><li>但还要一点要注意，立即执行的前提必然是每次节流函数的第一次生效，所以还需判断 <code>lastTime</code>  是否为 <code>0</code> ，当 <code>lastTime === 0</code>  代表是第一次执行，才会进行上面 <code>leading</code>  的判断</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> interval<span class="token punctuation">,</span> options <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">leading</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">trailing</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">// 1.1 控制第一次与最后一次是否执行</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> leading<span class="token punctuation">,</span> trailing <span class="token punctuation">&#125;</span> <span class="token operator">=</span> options</pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token comment">// 1.2 记录上一次的开始时间</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">let</span> lastTime <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token comment">// 2. 事件触发时，执行的函数</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token keyword">const</span> <span class="token function-variable function">_throttle</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token comment">// 2.1 获取当前事件触发时的时间</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">const</span> nowTime <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token comment">// 2.2 如果 lastTime 为 0 并且 leading 为 false  将 nowTime 赋值给 lastTime</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>lastTime <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>leading<span class="token punctuation">)</span> lastTime <span class="token operator">=</span> nowTime</pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token comment">// 2.3 使用当前触发的时间和之前的时间间隔以及上一次开始的时间，计算出还剩余多长事件需要去触发函数</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token comment">// 余下时间 = 间隔时间 - (触发开始时间 - 上一次的触发开始时间)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">const</span> remainTime <span class="token operator">=</span> interval <span class="token operator">-</span> <span class="token punctuation">(</span>nowTime <span class="token operator">-</span> lastTime<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>remainTime <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>      <span class="token comment">// 2.4 真正触发的函数</span></pre></td></tr><tr><td data-num="21"></td><td><pre>      <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>      <span class="token comment">// 2.5 保留上次触发事件的时间戳</span></pre></td></tr><tr><td data-num="24"></td><td><pre>      lastTime <span class="token operator">=</span> nowTime</pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token keyword">return</span> _throttle</pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>这里先进行代码测试</li><li><code>HTML</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span><span class="token operator">></span></pre></td></tr></table></figure><ul><li><code>JS代码</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> inputEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">const</span> <span class="token function-variable function">inputChange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">发送了第</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token operator">++</span>counter<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">次网络请求</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">//leading 这里默认就是 true，所以我们测试 false，那么第一次不会即立即触发执</span></pre></td></tr><tr><td data-num="9"></td><td><pre>inputEl<span class="token punctuation">.</span>oninput <span class="token operator">=</span> <span class="token function">throttle</span><span class="token punctuation">(</span>inputChange<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">leading</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="throttle-v3-traling实现"><a class="anchor" href="#throttle-v3-traling实现">#</a> throttle <sub>v3</sub> traling 实现</h2><ul><li><p>这里 <code>traling</code>  默认为 <code>false</code> ，也就是默认最后一次不会执行</p></li><li><p>接下来判断如果 <code>trailing</code>  为 <code>true</code>  并且没有执行过定时器时：</p><ul><li>开启定时器并将定时器编号给 timer，方便取消定时器</li><li>执行定时器时，再将 timer 初始化</li><li>判断 <code>leading</code>  为 <code>true</code>  时， <code>lastTime</code>  就需要重新获取时间</li></ul></li><li><p>比如 <code>interval</code>  是为 10s 时</p><ul><li>触发事件也是第 <code>10s</code>  时，就会执行 <code>if (remainTime &lt;= 0)</code>  里面的代码，然后会终止执行</li></ul></li><li><p>触发事件的时间大概率不会刚好与 <code>interval</code>  相等，后面很有可能会有 <code>ms</code>  的，就比如触发事件是 <code>10.1s(10100ms)</code>  时</p><ul><li>首先 <code>10 - (10.1 - 0)</code>  是小于 <code>0</code>  的，那么 <code>if (remainTime &lt;= 0)</code>  里面的代码依旧会执行</li><li>但此时  <code>remainTime</code>  是为 <code>-0.1s</code>  的，所以还会根据 <code>trailing :true</code>  进入函数，再进行最后一次的回调</li><li>那么也就是说，会重复执行两次函数</li></ul></li><li><p>那怎么解决呢？</p><ul><li>就是进行一个判断，当 <code>trailing</code>  为 <code>true</code>  时</li><li><code>lastTime</code>  就通过 <code>new Date()</code>  重新获取下当前的时间戳并赋值，意味着用 <code>interval - (nowTime - lastTime)</code>  重新求出 <code>remain</code>  值作为 <code>setTimeout</code>  延迟时间</li><li>否则的话就初始化变量为 0</li></ul></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> interval<span class="token punctuation">,</span> options <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">leading</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">trailing</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">// 1.1 控制第一次与最好一次是否执行</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">let</span> <span class="token punctuation">&#123;</span> leading<span class="token punctuation">,</span> trailing <span class="token punctuation">&#125;</span> <span class="token operator">=</span> options</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">// 1.2 记录上一次的开始时间</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">let</span> lastTime <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token comment">// 1.3 用于判断是否存在定时器</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token comment">// 2. 事件触发时，执行的函数</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">const</span> <span class="token function-variable function">_throttle</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token comment">// 2.1 获取当前事件触发时的时间</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">const</span> nowTime <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    </pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token comment">// 2.2 如果 lastTime 为 0 并且 leading 为 false  将 nowTime 赋值给 lastTime</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>lastTime <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>leading<span class="token punctuation">)</span> lastTime <span class="token operator">=</span> nowTime</pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token comment">// 2.3 使用当前触发的时间和之前的时间间隔以及上一次开始的时间，计算出还剩余多长事件需要去触发函数</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token comment">// 余下时间 = 间隔时间 - (触发开始时间 - 上一次的触发开始时间)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token keyword">const</span> remainTime <span class="token operator">=</span> interval <span class="token operator">-</span> <span class="token punctuation">(</span>nowTime <span class="token operator">-</span> lastTime<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>remainTime <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>      <span class="token comment">// 3.1 如果有定时器就取消定时器并初始化 timer</span></pre></td></tr><tr><td data-num="25"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        timer <span class="token operator">=</span> <span class="token keyword">null</span></pre></td></tr><tr><td data-num="28"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre>      <span class="token comment">// 2.4 真正触发的函数</span></pre></td></tr><tr><td data-num="31"></td><td><pre>      <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre>      <span class="token comment">// 2.5 保留上次触发的事件 并终止代码不执行定时器</span></pre></td></tr><tr><td data-num="34"></td><td><pre>      <span class="token keyword">return</span> lastTime <span class="token operator">=</span> nowTime</pre></td></tr><tr><td data-num="35"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token comment">// 3. 如果 trailing 为 true 并且 没有定时器执行下面代码</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>trailing <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>timer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>      timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>        timer <span class="token operator">=</span> <span class="token keyword">null</span></pre></td></tr><tr><td data-num="41"></td><td><pre></pre></td></tr><tr><td data-num="42"></td><td><pre>        <span class="token comment">// 3.2 需要重新获取时间</span></pre></td></tr><tr><td data-num="43"></td><td><pre>        lastTime <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="44"></td><td><pre>          </pre></td></tr><tr><td data-num="45"></td><td><pre>        <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="46"></td><td><pre>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> remainTime<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="47"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="49"></td><td><pre></pre></td></tr><tr><td data-num="50"></td><td><pre>  <span class="token keyword">return</span> _throttle</pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>这里先进行代码测试</li><li><code>HTML</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span><span class="token operator">></span></pre></td></tr></table></figure><ul><li><code>JS代码</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> inputEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">const</span> <span class="token function-variable function">inputChange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">发送了第</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token operator">++</span>counter<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">次网络请求</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 这里将 trailing 设为 true 最后一次会调用</span></pre></td></tr><tr><td data-num="8"></td><td><pre>inputEl<span class="token punctuation">.</span>oninput <span class="token operator">=</span> <span class="token function">throttle</span><span class="token punctuation">(</span>inputChange<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">leading</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token literal-property property">trailing</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="throttle-v4-this参数"><a class="anchor" href="#throttle-v4-this参数">#</a> throttle <sub>v4</sub> this 参数</h2><ul><li><code>this</code>  的写法与 <code>防抖</code> 写法一样，可以用 <code>apply 或 call</code>  都可以</li><li><code>bind不行吗？可以的，在后面加括号调用也可</code> ，这里我依旧采用 <code>apply</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> interval<span class="token punctuation">,</span> options <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">leading</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">trailing</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">// 1.1 控制第一次与最好一次是否执行</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">let</span> <span class="token punctuation">&#123;</span> leading<span class="token punctuation">,</span> trailing <span class="token punctuation">&#125;</span> <span class="token operator">=</span> options</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">// 1.2 记录上一次的开始时间</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">let</span> lastTime <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token comment">// 1.3 用于判断是否存在定时器</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token comment">// 2. 事件触发时，执行的函数</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">const</span> <span class="token function-variable function">_throttle</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token comment">// 2.1 获取当前事件触发时的时间</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">const</span> nowTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    </pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token comment">// 2.2 如果 lastTime 为 0 并且 leading 为 false  将 nowTime 赋值给 lastTime</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>lastTime <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>leading<span class="token punctuation">)</span> lastTime <span class="token operator">=</span> nowTime</pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token comment">// 2.3 使用当前触发的时间和之前的时间间隔以及上一次开始的时间，计算出还剩余多长事件需要去触发函数</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token comment">// 余下时间 = 间隔时间 - (触发开始时间 - 上一次的触发开始时间)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token keyword">const</span> remainTime <span class="token operator">=</span> interval <span class="token operator">-</span> <span class="token punctuation">(</span>nowTime <span class="token operator">-</span> lastTime<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    </pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>remainTime <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>      <span class="token comment">// 3.1 如果有定时器就取消定时器并初始化 timer</span></pre></td></tr><tr><td data-num="25"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        timer <span class="token operator">=</span> <span class="token keyword">null</span></pre></td></tr><tr><td data-num="28"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre>      <span class="token comment">// 2.4 真正触发的函数 并传入 this 与 参数</span></pre></td></tr><tr><td data-num="31"></td><td><pre>      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre>      <span class="token comment">// 2.5 保留上次触发的事件 并终止代码不执行定时器</span></pre></td></tr><tr><td data-num="34"></td><td><pre>      <span class="token keyword">return</span> lastTime <span class="token operator">=</span> nowTime</pre></td></tr><tr><td data-num="35"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token comment">// 3. 如果 trailing 为 true 并且 没有定时器执行下面代码</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>trailing <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>timer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>      timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>        timer <span class="token operator">=</span> <span class="token keyword">null</span></pre></td></tr><tr><td data-num="41"></td><td><pre></pre></td></tr><tr><td data-num="42"></td><td><pre>        <span class="token comment">// 3.2 需要重新获取时间</span></pre></td></tr><tr><td data-num="43"></td><td><pre>        lastTime <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="44"></td><td><pre></pre></td></tr><tr><td data-num="45"></td><td><pre>        <span class="token comment">// 3.3 传入 this 与 参数</span></pre></td></tr><tr><td data-num="46"></td><td><pre>        <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="47"></td><td><pre>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> remainTime<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="48"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="50"></td><td><pre></pre></td></tr><tr><td data-num="51"></td><td><pre>  <span class="token keyword">return</span> _throttle</pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>测试代码用上面的就行</li></ul><h2 id="throttle-v5-取消功能"><a class="anchor" href="#throttle-v5-取消功能">#</a> throttle <sub>v5</sub> 取消功能</h2><ul><li>这也是比较简单的，取消定时器就可以了，那么可能会有疑问了，如果 <code>traling</code>  为 <code>false</code>  怎么要取消呢？</li><li>其实这里针对 <code>traling</code>  功能就好了，因为如果在 <code>traling</code>  为 <code>false</code>  的情况下，你输入的时间小于节流函数的 <code>interval</code>  本质上也不会执行</li><li>所以针对 <code>traling</code>  为 <code>true</code>  时，进行取消是没有问题的</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> interval<span class="token punctuation">,</span> options <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">leading</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">trailing</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">// 1.1 控制第一次与最好一次是否执行</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">let</span> <span class="token punctuation">&#123;</span> leading<span class="token punctuation">,</span> trailing <span class="token punctuation">&#125;</span> <span class="token operator">=</span> options</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">// 1.2 记录上一次的开始时间</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">let</span> lastTime <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token comment">// 1.3 用于判断是否存在定时器</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token comment">// 2. 事件触发时，执行的函数</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">const</span> <span class="token function-variable function">_throttle</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token comment">// 2.1 获取当前事件触发时的时间</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">const</span> nowTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    </pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token comment">// 2.2 如果 lastTime 为 0 并且 leading 为 false  将 nowTime 赋值给 lastTime</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>lastTime <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>leading<span class="token punctuation">)</span> lastTime <span class="token operator">=</span> nowTime</pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token comment">// 2.3 使用当前触发的时间和之前的时间间隔以及上一次开始的时间，计算出还剩余多长事件需要去触发函数</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token comment">// 余下时间 = 间隔时间 - (触发开始时间 - 上一次的触发开始时间)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token keyword">const</span> remainTime <span class="token operator">=</span> interval <span class="token operator">-</span> <span class="token punctuation">(</span>nowTime <span class="token operator">-</span> lastTime<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    </pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>remainTime <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>      <span class="token comment">// 3.1 如果有定时器就取消定时器并初始化 timer</span></pre></td></tr><tr><td data-num="25"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        timer <span class="token operator">=</span> <span class="token keyword">null</span></pre></td></tr><tr><td data-num="28"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre>      <span class="token comment">// 2.4 真正触发的函数 并传入 this 与 参数</span></pre></td></tr><tr><td data-num="31"></td><td><pre>      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre>      <span class="token comment">// 2.5 保留上次触发的事件 并终止代码不执行定时器</span></pre></td></tr><tr><td data-num="34"></td><td><pre>      <span class="token keyword">return</span> lastTime <span class="token operator">=</span> nowTime</pre></td></tr><tr><td data-num="35"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token comment">// 3. 如果 trailing 为 true 并且 没有定时器执行下面代码</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>trailing <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>timer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>      timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>        timer <span class="token operator">=</span> <span class="token keyword">null</span></pre></td></tr><tr><td data-num="41"></td><td><pre></pre></td></tr><tr><td data-num="42"></td><td><pre>        <span class="token comment">// 3.2 需要重新获取时间</span></pre></td></tr><tr><td data-num="43"></td><td><pre>        lastTime <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="44"></td><td><pre></pre></td></tr><tr><td data-num="45"></td><td><pre>        <span class="token comment">// 3.3 传入 this 与 参数</span></pre></td></tr><tr><td data-num="46"></td><td><pre>        <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="47"></td><td><pre>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> remainTime<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="48"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="50"></td><td><pre></pre></td></tr><tr><td data-num="51"></td><td><pre>  <span class="token comment">// 4. 取消功能</span></pre></td></tr><tr><td data-num="52"></td><td><pre>  _throttle<span class="token punctuation">.</span><span class="token function-variable function">cancel</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="54"></td><td><pre></pre></td></tr><tr><td data-num="55"></td><td><pre>    <span class="token comment">// 4.1 取消代表整个函数终结了，那么建议初始化变量</span></pre></td></tr><tr><td data-num="56"></td><td><pre>    timer <span class="token operator">=</span> <span class="token keyword">null</span></pre></td></tr><tr><td data-num="57"></td><td><pre>    lastTime <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="58"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="59"></td><td><pre></pre></td></tr><tr><td data-num="60"></td><td><pre>  <span class="token keyword">return</span> _throttle</pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>这里也可以进行代码测试</li><li><code>HTML</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"cancel"</span><span class="token operator">></span>取消<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span></pre></td></tr></table></figure><ul><li><code>JS代码</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> inputEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> btnEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">const</span> <span class="token function-variable function">inputChange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">发送了第</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token operator">++</span>counter<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">次网络请求</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 拿到 throttle 返回值</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">const</span> _throttle <span class="token operator">=</span> <span class="token function">throttle</span><span class="token punctuation">(</span>inputChange<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">leading</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token literal-property property">trailing</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// 这种写法与之前的写法没有区别 都是调用 _throttle</span></pre></td></tr><tr><td data-num="10"></td><td><pre>inputEl<span class="token punctuation">.</span>oninput <span class="token operator">=</span> _throttle</pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">// 点击按钮取消</span></pre></td></tr><tr><td data-num="12"></td><td><pre>btnEl<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> _throttle<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="throttle-v6-函数返回值"><a class="anchor" href="#throttle-v6-函数返回值">#</a> throttle <sub>v6</sub> 函数返回值</h2><h3 id="思路一回调函数"><a class="anchor" href="#思路一回调函数">#</a> 思路一：回调函数</h3><ul><li>通过外界传入函数回调形式返回返回值</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> interval<span class="token punctuation">,</span> options <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">leading</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">trailing</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">// 1.1 控制第一次与最好一次是否执行</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">let</span> <span class="token punctuation">&#123;</span> leading<span class="token punctuation">,</span> trailing<span class="token punctuation">,</span> resultCallback <span class="token punctuation">&#125;</span> <span class="token operator">=</span> options</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">// 1.2 记录上一次的开始时间</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">let</span> lastTime <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token comment">// 1.3 用于判断是否存在定时器</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token comment">// 2. 事件触发时，执行的函数</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">const</span> <span class="token function-variable function">_throttle</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token comment">// 2.1 获取当前事件触发时的时间</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">const</span> nowTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    </pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token comment">// 2.2 如果 lastTime 为 0 并且 leading 为 false  将 nowTime 赋值给 lastTime</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>lastTime <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>leading<span class="token punctuation">)</span> lastTime <span class="token operator">=</span> nowTime</pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token comment">// 2.3 使用当前触发的时间和之前的时间间隔以及上一次开始的时间，计算出还剩余多长事件需要去触发函数</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token comment">// 余下时间 = 间隔时间 - (触发开始时间 - 上一次的触发开始时间)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token keyword">const</span> remainTime <span class="token operator">=</span> interval <span class="token operator">-</span> <span class="token punctuation">(</span>nowTime <span class="token operator">-</span> lastTime<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    </pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>remainTime <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>      <span class="token comment">// 3.1 如果有定时器就取消定时器并初始化 timer</span></pre></td></tr><tr><td data-num="25"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        timer <span class="token operator">=</span> <span class="token keyword">null</span></pre></td></tr><tr><td data-num="28"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre>      <span class="token comment">// 2.4 真正触发的函数 并传入 this 与 参数  再拿到其返回值</span></pre></td></tr><tr><td data-num="31"></td><td><pre>      <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre>      <span class="token comment">// 2.5 判断 resultCallback 是否传入并是否为函数 再将返回值传入回调函数</span></pre></td></tr><tr><td data-num="34"></td><td><pre>      <span class="token keyword">if</span><span class="token punctuation">(</span>resultCallback <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> resultCallback <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token function">resultCallback</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre>      <span class="token comment">// 2.6 保留上次触发的事件 并终止代码不执行定时器</span></pre></td></tr><tr><td data-num="37"></td><td><pre>      <span class="token keyword">return</span> lastTime <span class="token operator">=</span> nowTime</pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="39"></td><td><pre></pre></td></tr><tr><td data-num="40"></td><td><pre>    <span class="token comment">// 3. 如果 trailing 为 true 并且 没有定时器执行下面代码</span></pre></td></tr><tr><td data-num="41"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>trailing <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>timer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>      timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>        timer <span class="token operator">=</span> <span class="token keyword">null</span></pre></td></tr><tr><td data-num="44"></td><td><pre></pre></td></tr><tr><td data-num="45"></td><td><pre>        <span class="token comment">// 3.2 需要重新获取时间</span></pre></td></tr><tr><td data-num="46"></td><td><pre>        lastTime <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="47"></td><td><pre></pre></td></tr><tr><td data-num="48"></td><td><pre>        <span class="token comment">// 3.3 传入 this 与 参数  并拿到其返回值</span></pre></td></tr><tr><td data-num="49"></td><td><pre>        <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="50"></td><td><pre></pre></td></tr><tr><td data-num="51"></td><td><pre>        <span class="token comment">// 3.4 判断 resultCallback 是否传入并是否为函数 再将返回值传入回调函数</span></pre></td></tr><tr><td data-num="52"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>resultCallback <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> resultCallback <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token function">resultCallback</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="53"></td><td><pre>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> remainTime<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="54"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="56"></td><td><pre></pre></td></tr><tr><td data-num="57"></td><td><pre>  <span class="token comment">// 4. 取消功能</span></pre></td></tr><tr><td data-num="58"></td><td><pre>  _throttle<span class="token punctuation">.</span><span class="token function-variable function">cancel</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="60"></td><td><pre></pre></td></tr><tr><td data-num="61"></td><td><pre>    <span class="token comment">// 4.1 取消代表整个函数终结了，那么建议初始化变量</span></pre></td></tr><tr><td data-num="62"></td><td><pre>    timer <span class="token operator">=</span> <span class="token keyword">null</span></pre></td></tr><tr><td data-num="63"></td><td><pre>    lastTime <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="64"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="65"></td><td><pre></pre></td></tr><tr><td data-num="66"></td><td><pre>  <span class="token keyword">return</span> _throttle</pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="思路二promise"><a class="anchor" href="#思路二promise">#</a> 思路二：Promise</h3><ul><li>通过返回 <code>Promise</code>  外部进行 <code>then</code>  方法调用来获取返回值</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> interval<span class="token punctuation">,</span> options <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">leading</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">trailing</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">// 1.1 控制第一次与最好一次是否执行</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">let</span> <span class="token punctuation">&#123;</span> leading<span class="token punctuation">,</span> trailing<span class="token punctuation">,</span> resultCallback <span class="token punctuation">&#125;</span> <span class="token operator">=</span> options</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">// 1.2 记录上一次的开始时间</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">let</span> lastTime <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token comment">// 1.3 用于判断是否存在定时器</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token comment">// 2. 事件触发时，执行的函数</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">const</span> <span class="token function-variable function">_throttle</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>      <span class="token comment">// 2.1 获取当前事件触发时的时间</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">const</span> nowTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    </pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token comment">// 2.2 如果 lastTime 为 0 并且 leading 为 false  将 nowTime 赋值给 lastTime</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>lastTime <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>leading<span class="token punctuation">)</span> lastTime <span class="token operator">=</span> nowTime</pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token comment">// 2.3 使用当前触发的时间和之前的时间间隔以及上一次开始的时间，计算出还剩余多长事件需要去触发函数</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token comment">// 余下时间 = 间隔时间 - (触发开始时间 - 上一次的触发开始时间)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">const</span> remainTime <span class="token operator">=</span> interval <span class="token operator">-</span> <span class="token punctuation">(</span>nowTime <span class="token operator">-</span> lastTime<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    </pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>remainTime <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>      <span class="token comment">// 3.1 如果有定时器就取消定时器并初始化 timer</span></pre></td></tr><tr><td data-num="26"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        timer <span class="token operator">=</span> <span class="token keyword">null</span></pre></td></tr><tr><td data-num="29"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre>      <span class="token comment">// 2.4 真正触发的函数 并传入 this 与 参数  再拿到其返回值</span></pre></td></tr><tr><td data-num="32"></td><td><pre>      <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre>      <span class="token comment">// 2.5 判断 resultCallback 是否传入并是否为函数 再将返回值传入回调函数</span></pre></td></tr><tr><td data-num="35"></td><td><pre>      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>resultCallback <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> resultCallback <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="37"></td><td><pre>      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>        <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="39"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="40"></td><td><pre></pre></td></tr><tr><td data-num="41"></td><td><pre>      <span class="token comment">// 2.6 保留上次触发的事件 并终止代码不执行定时器</span></pre></td></tr><tr><td data-num="42"></td><td><pre>      <span class="token keyword">return</span> lastTime <span class="token operator">=</span> nowTime</pre></td></tr><tr><td data-num="43"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre></pre></td></tr><tr><td data-num="45"></td><td><pre>    <span class="token comment">// 3. 如果 trailing 为 true 并且 没有定时器执行下面代码</span></pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>trailing <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>timer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>      timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>        timer <span class="token operator">=</span> <span class="token keyword">null</span></pre></td></tr><tr><td data-num="49"></td><td><pre></pre></td></tr><tr><td data-num="50"></td><td><pre>        <span class="token comment">// 3.2 需要重新获取时间</span></pre></td></tr><tr><td data-num="51"></td><td><pre>        lastTime <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="52"></td><td><pre></pre></td></tr><tr><td data-num="53"></td><td><pre>        <span class="token comment">// 3.3 传入 this 与 参数  并拿到其返回值</span></pre></td></tr><tr><td data-num="54"></td><td><pre>        <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="55"></td><td><pre></pre></td></tr><tr><td data-num="56"></td><td><pre>        <span class="token comment">// 3.4 判断 resultCallback 是否传入并是否为函数 再将返回值传入回调函数</span></pre></td></tr><tr><td data-num="57"></td><td><pre>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>          <span class="token keyword">if</span><span class="token punctuation">(</span>resultCallback <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> resultCallback <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="59"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>          <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="61"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="62"></td><td><pre></pre></td></tr><tr><td data-num="63"></td><td><pre>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> remainTime<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="64"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="65"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="66"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="67"></td><td><pre></pre></td></tr><tr><td data-num="68"></td><td><pre>  <span class="token comment">// 4. 取消功能</span></pre></td></tr><tr><td data-num="69"></td><td><pre>  _throttle<span class="token punctuation">.</span><span class="token function-variable function">cancel</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="70"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="71"></td><td><pre></pre></td></tr><tr><td data-num="72"></td><td><pre>    <span class="token comment">// 4.1 取消代表整个函数终结了，那么建议初始化变量</span></pre></td></tr><tr><td data-num="73"></td><td><pre>    timer <span class="token operator">=</span> <span class="token keyword">null</span></pre></td></tr><tr><td data-num="74"></td><td><pre>    lastTime <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="75"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="76"></td><td><pre></pre></td></tr><tr><td data-num="77"></td><td><pre>  <span class="token keyword">return</span> _throttle</pre></td></tr><tr><td data-num="78"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>这里我依旧使用代码对 <code>Promise实现的返回值功能</code> 进行简单测试：</li><li><code>HTML测试代码</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"cancel"</span><span class="token operator">></span>取消<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span></pre></td></tr></table></figure><ul><li><code>js测试代码</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> inputEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> btnEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">const</span> <span class="token function-variable function">inputChange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">发送了第</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token operator">++</span>counter<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">次网络请求</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    </pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token comment">// 返回值：返回 0-99 随机一个 s</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">return</span> <span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment">// 拿到 throttle 返回值</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">const</span> _throttle <span class="token operator">=</span> <span class="token function">throttle</span><span class="token punctuation">(</span>inputChange<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token literal-property property">leading</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token literal-property property">trailing</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token function">resultCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment">// 通过临时函数获得_throttle 返回值 -> Promsie 通过 then 方法拿到返回值</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">const</span> <span class="token function-variable function">tempCallback</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">_throttle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Promise的返回值结果:"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token comment">// 调用 tempCallback 函数这种写法与之前的写法没有区别 也都是调用 _throttle</span></pre></td></tr><tr><td data-num="27"></td><td><pre>inputEl<span class="token punctuation">.</span>oninput <span class="token operator">=</span> tempCallback</pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token comment">// 点击按钮取消</span></pre></td></tr><tr><td data-num="30"></td><td><pre>btnEl<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> _throttle<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;认识节流throttle函数&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#认识节流throttle函数&quot;&gt;#&lt;/a&gt; 认识节流 throttle 函数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;我们来理解一下节流的过程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;当事件触</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
</feed>
