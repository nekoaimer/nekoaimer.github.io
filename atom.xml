<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>nekoaimer</title>
  
  <subtitle>清心如水，清水即心</subtitle>
  <link href="https://nekoaimer.github.io/nekoaimer.github.io/atom.xml" rel="self"/>
  
  <link href="https://nekoaimer.github.io/nekoaimer.github.io/"/>
  <updated>2022-01-16T07:48:15.030Z</updated>
  <id>https://nekoaimer.github.io/nekoaimer.github.io/</id>
  
  <author>
    <name>Nico Niconi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>进制转换</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2022/01/16/Algorithm/problems/easy/HexBinDecOct/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2022/01/16/Algorithm/problems/easy/HexBinDecOct/</id>
    <published>2022-01-16T06:49:39.000Z</published>
    <updated>2022-01-16T07:48:15.030Z</updated>
    
    <content type="html"><![CDATA[<h2 id="dec2bin-example"><a class="anchor" href="#dec2bin-example">#</a> Dec2Bin Example</h2><p><strong>Example 1:</strong></p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>输入：n = 10</pre></td></tr><tr><td data-num="2"></td><td><pre>输出：1010</pre></td></tr><tr><td data-num="3"></td><td><pre>解释：将十进制转换为二进制</pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>输入：n = 15</pre></td></tr><tr><td data-num="2"></td><td><pre>输出：1111</pre></td></tr><tr><td data-num="3"></td><td><pre>解释：将十进制转换为二进制</pre></td></tr></table></figure><h2 id="solving-ideas"><a class="anchor" href="#solving-ideas">#</a> Solving Ideas</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">dec2bin</span><span class="token punctuation">(</span><span class="token parameter">decNumber</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token comment">//decNumber > 0 停止循环</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">while</span> <span class="token punctuation">(</span>decNumber <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token comment">// 将每次取模的数存入栈中</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>decNumber <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token comment">// 同时向下取 / 2 的值 </span></pre></td></tr><tr><td data-num="11"></td><td><pre>    decNumber <span class="token operator">=</span> <span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span>decNumber <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token comment">// 将数组颠倒转换成字符串再强制转换为数字</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token keyword">return</span> <span class="token operator">+</span>stack<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">dec2bin</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="bin2dec-example"><a class="anchor" href="#bin2dec-example">#</a> Bin2Dec Example</h2><p><strong>Example 1:</strong></p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>输入：n = 1010</pre></td></tr><tr><td data-num="2"></td><td><pre>输出：10</pre></td></tr><tr><td data-num="3"></td><td><pre>解释：将二进制转换为十进制</pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>输入：n = 1111</pre></td></tr><tr><td data-num="2"></td><td><pre>输出：15</pre></td></tr><tr><td data-num="3"></td><td><pre>解释：将二进制转换为十进制</pre></td></tr></table></figure><h2 id="solving-ideas-2"><a class="anchor" href="#solving-ideas-2">#</a> Solving Ideas</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">bin2dec</span><span class="token punctuation">(</span><span class="token parameter">binNumber</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">// 将其切割成数组</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">(</span>binNumber <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">// edge case</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  stack<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">+</span>item <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Please enter the correct binary number'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token comment">// 用于记录数字位置的次方 从最后一位开始</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token keyword">let</span> pow <span class="token operator">=</span> stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> stack<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token comment">// 如果数组中是 0, 就不必算</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token comment">// 将数组的每个数的次方依次算出</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>      stack<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">**</span> pow</pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    </pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token comment">// 递减</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    pow<span class="token operator">--</span></pre></td></tr><tr><td data-num="24"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  </pre></td></tr><tr><td data-num="26"></td><td><pre>  <span class="token comment">// 将数组依次相加</span></pre></td></tr><tr><td data-num="27"></td><td><pre>  stack<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> res <span class="token operator">+=</span> <span class="token operator">+</span>item<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre>  <span class="token keyword">return</span> res</pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;dec2bin-example&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#dec2bin-example&quot;&gt;#&lt;/a&gt; Dec2Bin Example&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;figure cla</summary>
      
    
    
    
    <category term="Algorithm" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/Algorithm/"/>
    
    <category term="Easy" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/Algorithm/Easy/"/>
    
    
    <category term="Easy" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/Easy/"/>
    
    <category term="Algorithm" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/Algorithm/"/>
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>计算力扣银行的钱</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2022/01/15/Algorithm/problems/easy/calculate-money-in-leetcode-bank/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2022/01/15/Algorithm/problems/easy/calculate-money-in-leetcode-bank/</id>
    <published>2022-01-15T10:27:49.000Z</published>
    <updated>2022-01-16T07:30:29.114Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言声明"><a class="anchor" href="#前言声明">#</a> 前言声明</h2><p>来源：力扣（LeetCode）<br />链接：<span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvY2FsY3VsYXRlLW1vbmV5LWluLWxlZXRjb2RlLWJhbms=">https://leetcode-cn.com/problems/calculate-money-in-leetcode-bank</span></p><h2 id="计算力扣银行的钱"><a class="anchor" href="#计算力扣银行的钱">#</a> 计算力扣银行的钱</h2><ul><li>Hercy 想要为购买第一辆车存钱。他 每天 都往力扣银行里存钱。</li><li>最开始，他在周一的时候存入 1 块钱。从周二到周日，他每天都比前一天多存入 1 块钱。在接下来每一个周一，他都会比 前一个周一 多存入 1 块钱。</li><li>给你 n 天，请你返回在第 n 天结束的时候他在力扣银行总共存了多少块钱。</li></ul><h2 id="example"><a class="anchor" href="#example">#</a> Example</h2><p><strong>Example 1:</strong></p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>输入：n = 4</pre></td></tr><tr><td data-num="2"></td><td><pre>输出：10</pre></td></tr><tr><td data-num="3"></td><td><pre>解释：第 4 天后，总额为 1 + 2 + 3 + 4 = 10 。</pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>输入：n = 10</pre></td></tr><tr><td data-num="2"></td><td><pre>输出：37</pre></td></tr><tr><td data-num="3"></td><td><pre>解释：第 10 天后，总额为 (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4) = 37 。注意到第二个星期一，Hercy 存入 2 块钱。</pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>输入：n = 20</pre></td></tr><tr><td data-num="2"></td><td><pre>输出：96</pre></td></tr><tr><td data-num="3"></td><td><pre>解释：第 20 天后，总额为 (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4 + 5 + 6 + 7 + 8) + (3 + 4 + 5 + 6 + 7 + 8) = 96 。</pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 1000</code></li></ul><h2 id="solving-ideas"><a class="anchor" href="#solving-ideas">#</a> Solving Ideas</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> <span class="token function-variable function">totalMoney</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">let</span> WeekStartMoney <span class="token operator">=</span> <span class="token number">1</span> </pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">let</span> dayMoney <span class="token operator">=</span> <span class="token number">1</span> </pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  </pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    result <span class="token operator">+=</span> WeekStartMoney <span class="token operator">+</span> dayMoney <span class="token operator">-</span> <span class="token number">1</span>  </pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token operator">++</span>dayMoney</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dayMoney <span class="token operator">===</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>      WeekStartMoney<span class="token operator">++</span></pre></td></tr><tr><td data-num="12"></td><td><pre>      dayMoney <span class="token operator">=</span> <span class="token number">1</span> </pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>      </pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token keyword">return</span> result</pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token function">totalMoney</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment">// 30</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token function">totalMoney</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span> <span class="token comment">// 63</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言声明&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#前言声明&quot;&gt;#&lt;/a&gt; 前言声明&lt;/h2&gt;
&lt;p&gt;来源：力扣（LeetCode）&lt;br /&gt;
链接：&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9sZWV0Y29k</summary>
      
    
    
    
    <category term="Algorithm" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/Algorithm/"/>
    
    <category term="Easy" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/Algorithm/Easy/"/>
    
    
    <category term="Easy" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/Easy/"/>
    
    <category term="Algorithm" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/Algorithm/"/>
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>两数之和</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2022/01/15/Algorithm/problems/easy/two-sum/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2022/01/15/Algorithm/problems/easy/two-sum/</id>
    <published>2022-01-15T09:22:25.000Z</published>
    <updated>2022-01-16T07:46:22.451Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言声明"><a class="anchor" href="#前言声明">#</a> 前言声明</h2><ul><li>来源：力扣（LeetCode）</li><li>链接：<span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdHdvLXN1bQ==">https://leetcode-cn.com/problems/two-sum</span></li></ul><h2 id="两数之和"><a class="anchor" href="#两数之和">#</a> 两数之和</h2><ul><li><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。</p></li><li><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p></li><li><p>你可以按任意顺序返回答案。</p></li></ul><p>Example 1:</p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>输入：nums = <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target = 10</pre></td></tr><tr><td data-num="2"></td><td><pre>输出：<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre>解释：因为 nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> + nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> == 10 ，返回 <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span></pre></td></tr></table></figure><p>Example 2:</p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>输入：nums = <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target = 7</pre></td></tr><tr><td data-num="2"></td><td><pre>输出：<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre>解释：因为 nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> + nums<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> == 7 ，返回 <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span></pre></td></tr></table></figure><p>提示：</p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>2 &lt;= nums.length &lt;= 104</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">-</span>109 &lt;= nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> &lt;= 109</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">-</span>109 &lt;= target &lt;= 109</pre></td></tr><tr><td data-num="4"></td><td><pre>只会存在一个有效答案</pre></td></tr></table></figure><ul><li>进阶：你可以想出一个时间复杂度小于 O (n2) 的算法吗？</li></ul><h2 id="solving-ideas"><a class="anchor" href="#solving-ideas">#</a> Solving Ideas</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> <span class="token function-variable function">twoSum</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">// 用于保存遍历过的数据</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">const</span> hash <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">// 遍历数组</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token comment">// 判断 hash 中第二个值是否存在数组中  </span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>hash<span class="token punctuation">[</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>      <span class="token comment">// 一旦存在就返回最近符合的数组下标</span></pre></td></tr><tr><td data-num="12"></td><td><pre>     <span class="token keyword">return</span> <span class="token punctuation">[</span>hash<span class="token punctuation">[</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token comment">// 将遍历过的元素以 key:value 保存在 hash 中</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    hash<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i</pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    </pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token comment">// 没有找到就返回空数组</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment">// [2, 3]</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span> <span class="token comment">// []</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言声明&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#前言声明&quot;&gt;#&lt;/a&gt; 前言声明&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;来源：力扣（LeetCode）&lt;/li&gt;
&lt;li&gt;链接：&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9</summary>
      
    
    
    
    <category term="Algorithm" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/Algorithm/"/>
    
    <category term="Easy" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/Algorithm/Easy/"/>
    
    
    <category term="Easy" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/Easy/"/>
    
    <category term="Algorithm" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/Algorithm/"/>
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>CSS 边框滑动块</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2022/01/13/WebFE/CSS/CSS%20Demo/%E8%BE%B9%E6%A1%86%E6%BB%91%E5%8A%A8/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2022/01/13/WebFE/CSS/CSS%20Demo/%E8%BE%B9%E6%A1%86%E6%BB%91%E5%8A%A8/</id>
    <published>2022-01-13T13:07:49.000Z</published>
    <updated>2022-01-14T05:11:01.818Z</updated>
    
    <content type="html"><![CDATA[<h2 id="预览效果"><a class="anchor" href="#预览效果">#</a> 预览效果</h2><p> <style>  body {  --bgc: #353b48;  background-color: var(--bgc);}.container {      display: flex;      flex-direction: row;      flex-wrap: wrap;      justify-content: space-around;      width: 100%;    }.container .btn {  width: 35vw;  height: 60px;  border: 3px solid;  background: none;  color: var(--c);  cursor: pointer;  font-size: 16px;  font-width: 700;  margin: 20px;  position: relative;}.container .btn::before,.container .btn::after {  content: '';  position: absolute;  width: 14px;  height: 4px;  background-color: var(--bgc);  transform: skewX(30deg);  transition: .4s ease;}.container .btn::before {  top: -4px;  left: 10%;}.container .btn::after {  bottom: -4px;  right: 10%;}.container .btn:hover::before {  left: 80%}.container .btn:hover::after {  right: 80%;  /* animation: after 2s timing-function delay iteration-count direction fill-mode; */  animation: after 2s;}.container .btn:nth-child(1) {  --c: #4ad3e2}.container .btn:nth-child(2) {  --c: #93edd4}.container .btn:nth-child(3) {  --c: #f9cb8f}.container .btn:nth-child(4) {  --c: #ffb1a3}</style>    <div class="container">      <button class="btn">点赞</button>      <button class="btn">投币</button></button>      <button class="btn">收藏</button>      <button class="btn">分享</button></button>    </div></p><h2 id="边框滑动块代码"><a class="anchor" href="#边框滑动块代码">#</a> 边框滑动块代码</h2><figure class="highlight css"><figcaption data-lang="CSS"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">body</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token property">--bgc</span><span class="token punctuation">:</span> #353b48<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--bgc<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token selector">.container</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>      <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>      <span class="token property">flex-direction</span><span class="token punctuation">:</span> row<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>      <span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>      <span class="token property">justify-content</span><span class="token punctuation">:</span> space-around<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>      <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token selector">.container .btn</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token property">height</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token property">border</span><span class="token punctuation">:</span> 3px solid<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token property">background</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--c<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token property">font-size</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token property">font-width</span><span class="token punctuation">:</span> 700<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  <span class="token property">margin</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token selector">.container .btn::before,</pre></td></tr><tr><td data-num="25"></td><td><pre>.container .btn::after</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>  <span class="token property">width</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>  <span class="token property">height</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--bgc<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">skewX</span><span class="token punctuation">(</span>30deg<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>  <span class="token property">transition</span><span class="token punctuation">:</span> .4s ease<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token selector">.container .btn::before</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>  <span class="token property">top</span><span class="token punctuation">:</span> -4px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>  <span class="token property">left</span><span class="token punctuation">:</span> 10%<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token selector">.container .btn::after</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>  <span class="token property">bottom</span><span class="token punctuation">:</span> -4px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>  <span class="token property">right</span><span class="token punctuation">:</span> 10%<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token selector">.container .btn:hover::before</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>  <span class="token property">left</span><span class="token punctuation">:</span> 80%</pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token selector">.container .btn:hover::after</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>  <span class="token property">right</span><span class="token punctuation">:</span> 80%<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>  <span class="token comment">/* animation: after 2s timing-function delay iteration-count direction fill-mode; */</span></pre></td></tr><tr><td data-num="48"></td><td><pre>  <span class="token property">animation</span><span class="token punctuation">:</span> after 2s<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token selector">.container .btn:nth-child(1)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>  <span class="token property">--c</span><span class="token punctuation">:</span> #4ad3e2</pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token selector">.container .btn:nth-child(2)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>  <span class="token property">--c</span><span class="token punctuation">:</span> #93edd4</pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token selector">.container .btn:nth-child(3)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>  <span class="token property">--c</span><span class="token punctuation">:</span> #f9cb8f</pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token selector">.container .btn:nth-child(4)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>  <span class="token property">--c</span><span class="token punctuation">:</span> #ffb1a3</pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点赞<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>投币<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>收藏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>分享<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;预览效果&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#预览效果&quot;&gt;#&lt;/a&gt; 预览效果&lt;/h2&gt;
&lt;p&gt; 
&lt;style&gt;
  body {
  --bgc: #353b48;
  background-color: var(--bgc);
}
.cont</summary>
      
    
    
    
    <category term="CSS" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/CSS/"/>
    
    <category term="CSS Demo" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/CSS/CSS-Demo/"/>
    
    
    <category term="CSS" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/CSS/"/>
    
    <category term="CSS Demo" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/CSS-Demo/"/>
    
  </entry>
  
  <entry>
    <title>关于奇怪的 typeof 选择题 に</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2021/12/20/WebFE/JavaScript/interesting_question/Strange_02/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2021/12/20/WebFE/JavaScript/interesting_question/Strange_02/</id>
    <published>2021-12-20T10:17:23.000Z</published>
    <updated>2022-01-07T05:54:23.522Z</updated>
    
    <content type="html"><![CDATA[<h3 id="typeof-混蛋-不要把什么都往里面放啊"><a class="anchor" href="#typeof-混蛋-不要把什么都往里面放啊">#</a> typeof (° △ °|||)：混蛋！不要把什么都往里面放啊！！！</h3><ol><li class="quiz"><p>typeof new Date () 的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>string</li><li>function</li><li class="correct">object</li><li>number</li></ul></li><li class="quiz"><p>typeof +new Date () 的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>string</li><li>function</li><li>object</li><li class="correct">number</li></ul></li><li class="quiz"><p>typeof 1 + 2 的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>string</li><li>number</li><li>NaN</li><li class="correct">number2</li></ul></li><li class="quiz"><p>typeof RegExp 的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>string</li><li class="correct">function</li><li>object</li><li>RegExp</li></ul></li><li class="quiz"><p>typeof new RegExp 的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>string</li><li>function</li><li class="correct">object </li><li>number</li></ul></li><li class="quiz"><p>typeof RegExp () 的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>string</li><li>function</li><li class="correct">object </li><li>number</li></ul></li><li class="quiz"><p>typeof +new RegExp () 的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>string</li><li>function</li><li>object</li><li class="correct">number </li></ul></li><li class="quiz"><p>typeof !RegExp ()  的输出结果  <span class="gap"></span> 。</p><ul class="options"><li class="correct">boolean</li><li>function</li><li>object</li><li>number</li></ul></li><li class="quiz"><p>typeof /<span></span>^nekoaimer$/  的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>boolean</li><li>function</li><li class="correct">object</li><li>number</li></ul></li><li class="quiz"><p>typeof isNan  的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>boolean</li><li>function</li><li>object</li><li class="correct">undefined</li></ul></li><li class="quiz"><p>typeof isNaN  的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>boolean</li><li class="correct">function</li><li>object</li><li>undefined</li></ul></li><li class="quiz"><p>typeof isNaN ()  的输出结果  <span class="gap"></span> 。</p><ul class="options"><li class="correct">boolean </li><li>function</li><li>object</li><li>undefined</li></ul></li><li class="quiz"><p>typeof Class  的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>class</li><li>function</li><li>object</li><li class="correct">undefined</li></ul></li><li class="quiz"><p>typeof promise 的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>promise</li><li>function</li><li>object</li><li class="correct">undefined</li></ul></li><li class="quiz"><p>typeof Promise 的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>promise</li><li class="correct">function</li><li>object</li><li>undefined</li></ul></li><li class="quiz"><p>typeof Proxy 的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>proxy</li><li class="correct">function</li><li>object</li><li>undefined</li></ul></li><li class="quiz"><p>typeof BigInt 的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>promise</li><li class="correct">function</li><li>object</li><li>undefined</li></ul></li><li class="quiz"><p>typeof BigInt64Array 的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>promise</li><li class="correct">function</li><li>object</li><li>undefined</li></ul></li><li class="quiz"><p>typeof BigInt64Array 的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>promise</li><li>function</li><li class="correct">object</li><li>undefined</li></ul></li><li class="quiz"><p>typeof new Uint32Array 的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>promise</li><li>function</li><li class="correct">object</li><li>undefined</li></ul></li><li class="quiz"><p>typeof valueOf 的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>valueOf</li><li class="correct">function</li><li>object</li><li>undefined</li></ul></li><li class="quiz"><p>typeof Set 的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>set</li><li class="correct">function</li><li>object</li><li>undefined</li></ul></li><li class="quiz"><p>typeof new Set 的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>set</li><li>function</li><li class="correct">object</li><li>undefined</li></ul></li><li class="quiz"><p>typeof Map 的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>map</li><li class="correct">function</li><li>object</li><li>undefined</li></ul></li><li class="quiz"><p>typeof new Map 的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>map</li><li>function</li><li class="correct">object</li><li>undefined</li></ul></li><li class="quiz"><p>typeof JSON 的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>map</li><li>function</li><li class="correct">object</li><li>undefined</li></ul></li><li class="quiz"><p>typeof this 的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>this</li><li>function</li><li class="correct">object</li><li>undefined</li></ul></li><li class="quiz"><p>typeof HTML 的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>html</li><li>function</li><li class="correct">object</li><li>undefined</li></ul></li><li class="quiz"><p>typeof BODY 的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>html</li><li>function</li><li class="correct">object</li><li>undefined</li></ul></li><li class="quiz"><p>typeof CSS 的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>CSS</li><li>function</li><li class="correct">object</li><li>undefined</li></ul></li><li class="quiz"><p>typeof Pjax 的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>pjax</li><li>ajax</li><li>object</li><li class="correct">function</li></ul></li><li class="quiz"><p>typeof alert  的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>string</li><li class="correct">function</li><li>object</li><li>undefined</li></ul></li><li class="quiz"><p>typeof alert ()  的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>string</li><li>function</li><li>object</li><li class="correct">undefined</li></ul></li><li class="quiz"><p>typeof console  的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>string</li><li>function</li><li class="correct">object</li><li>undefined</li></ul></li><li class="quiz"><p>typeof dir  的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>string</li><li class="correct">function</li><li>object</li><li>undefined</li></ul></li><li class="quiz"><p>typeof cookieStore  的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>string</li><li>function</li><li class="correct">object</li><li>undefined</li></ul></li><li class="quiz"><p>typeof CookieStore  的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>string</li><li class="correct">function</li><li>object</li><li>undefined</li></ul></li><li class="quiz"><p>typeof constructor  的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>string</li><li class="correct">function</li><li>object</li><li>undefined</li></ul></li><li class="quiz"><p>typeof __proto__的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>string</li><li>function</li><li class="correct">object</li><li>undefined</li></ul></li><li class="quiz"><p>typeof Function.prototyper  的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>string</li><li>function</li><li>object</li><li class="correct">undefined</li></ul></li><li class="quiz"><p>typeof Function.__proto__的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>string</li><li class="correct">function</li><li>object</li><li>undefined</li></ul></li><li class="quiz"><p>typeof async 的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>string</li><li>function</li><li>object</li><li class="correct">undefined</li></ul></li><li class="quiz"><p>typeof await 的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>string</li><li>function</li><li>object</li><li class="correct">undefined</li></ul></li><li class="quiz"><p>typeof onclick 的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>string</li><li>function</li><li class="correct">object</li><li>undefined</li></ul></li><li class="quiz"><p>typeof addEventListener 的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>string</li><li class="correct">function</li><li>object</li><li>undefined</li></ul></li><li class="quiz"><p>typeof document 的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>document</li><li>function</li><li class="correct">object</li><li>undefined</li></ul></li><li class="quiz"><p>typeof Document 的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>document</li><li class="correct">function</li><li>object</li><li>undefined</li></ul></li><li class="quiz"><p>typeof window 的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>document</li><li>function</li><li class="correct">object</li><li>undefined</li></ul></li><li class="quiz"><p>typeof Window 的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>document</li><li class="correct">function</li><li>object</li><li>undefined</li></ul></li><li class="quiz"><p>typeof $ 的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>document</li><li class="correct">function</li><li>object</li><li>undefined</li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;typeof-混蛋-不要把什么都往里面放啊&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#typeof-混蛋-不要把什么都往里面放啊&quot;&gt;#&lt;/a&gt; typeof (° △ °|||)：混蛋！不要把什么都往里面放啊！！！&lt;/h3&gt;
&lt;ol&gt;
&lt;li class</summary>
      
    
    
    
    <category term="WebFE" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/WebFE/"/>
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/WebFE/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript/"/>
    
    <category term="Strange" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/Strange/"/>
    
    <category term="JavaScript选择题" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript%E9%80%89%E6%8B%A9%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>还没想好名字</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2021/12/19/WebFE/JavaScript/interesting_question/undefined/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2021/12/19/WebFE/JavaScript/interesting_question/undefined/</id>
    <published>2021-12-19T13:08:58.000Z</published>
    <updated>2022-01-07T05:54:39.110Z</updated>
    
    <content type="html"><![CDATA[<ol start="18"><li class="quiz"><p>null == undefined  的输出结果  <span class="gap"></span> 。</p><ul class="options"><li class="correct">true</li><li>false</li><li>ReferenceError</li></ul></li><li class="quiz"><p>null === undefined  的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>true</li><li class="correct">false</li><li>ReferenceError</li></ul></li><li class="quiz"><p>Infinity + 0  的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>0</li><li>NaN</li><li class="correct">Infinity</li><li>ReferenceError</li></ul></li><li class="quiz"><p>Infinity - 0  的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>0</li><li>NaN</li><li class="correct">Infinity</li><li>ReferenceError</li></ul></li><li class="quiz"><p>Infinity * 0  的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>0</li><li class="correct">NaN</li><li>Infinity</li><li>ReferenceError</li></ul></li><li class="quiz"><p>Infinity / 0  的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>0</li><li>NaN</li><li class="correct">Infinity</li><li>ReferenceError</li></ul></li><li class="quiz"><p>Infinity % 0  的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>0</li><li class="correct">NaN</li><li>Infinity</li><li>ReferenceError</li></ul></li><li class="quiz"><p>Infinity + Infinity  的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>0</li><li>NaN</li><li class="correct">Infinity</li><li>ReferenceError</li></ul></li><li class="quiz"><p>Infinity - Infinity  的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>0</li><li class="correct">NaN </li><li>Infinity</li><li>ReferenceError</li></ul></li><li class="quiz"><p>Infinity * Infinity  的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>0</li><li>NaN</li><li class="correct">Infinity</li><li>ReferenceError</li></ul></li><li class="quiz"><p>Infinity / Infinity  的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>0</li><li class="correct">NaN </li><li>Infinity</li><li>ReferenceError</li></ul></li><li class="quiz"><p>Infinity % Infinity  的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>0</li><li class="correct">NaN</li><li>Infinity</li><li>ReferenceError</li></ul></li><li class="quiz"><p>-0 === +0  的输出结果  <span class="gap"></span> 。</p><ul class="options"><li class="correct">true</li><li>false</li><li>ReferenceError</li></ul></li><li class="quiz"><p>'a' &lt; 3  的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>true</li><li class="correct">false</li><li>undefined</li><li>ReferenceError</li></ul></li><li class="quiz"><p>'a' &gt; 3  的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>true</li><li class="correct">false</li><li>undefined</li><li>ReferenceError</li></ul></li><li class="quiz"><p>'a' == 3  的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>true</li><li class="correct">false</li><li>undefined</li><li>ReferenceError</li></ul></li><li class="quiz"><p>NaN == NaN  的输出结果  <span class="gap"></span> 。</p><ul class="options"><li>true</li><li class="correct">false</li><li>undefined</li><li>ReferenceError</li></ul></li><li class="quiz"><p>alert(1 &amp;&amp; 2)  <span class="gap"></span> 。</p><ul class="options"><li>1</li><li class="correct">2</li><li>undefined</li><li>true</li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol start=&quot;18&quot;&gt;
&lt;li class=&quot;quiz&quot;&gt;
&lt;p&gt;null == undefined  的输出结果  &lt;span class=&quot;gap&quot;&gt;&lt;/span&gt; 。&lt;/p&gt;
&lt;ul class=&quot;options&quot;&gt;
&lt;li class=&quot;correct&quot;&gt;true</summary>
      
    
    
    
    <category term="WebFE" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/WebFE/"/>
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/WebFE/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript/"/>
    
    <category term="Strange" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/Strange/"/>
    
    <category term="JavaScript选择题" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript%E9%80%89%E6%8B%A9%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript Proxy &amp; Reflect</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2021/10/31/WebFE/JavaScript/Advanced/Proxy&amp;Reflect/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2021/10/31/WebFE/JavaScript/Advanced/Proxy&amp;Reflect/</id>
    <published>2021-10-31T08:59:58.000Z</published>
    <updated>2022-01-16T14:36:49.849Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言声明"><a class="anchor" href="#前言声明">#</a> 前言声明</h2><ul><li>本章大量释义来源于  <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04v">MDN</span></li></ul><h2 id="proxy"><a class="anchor" href="#proxy">#</a> Proxy</h2><h3 id="handlerget"><a class="anchor" href="#handlerget">#</a> handler.get()</h3><ul><li><p><strong> <code>handler.get</code> </strong> 方法用于拦截对象的读取属性操作。</p></li><li><p><code>target</code>  目标对象。</p></li><li><p><code>property</code>  被获取的属性名。</p></li><li><p><code>receiver</code>  Proxy 或者继承 Proxy 的对象</p></li><li><p>get 方法可以返回任何值。</p></li></ul><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> lain <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  name<span class="token operator">:</span> <span class="token string">'lain'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  age<span class="token operator">:</span> <span class="token number">16</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">const</span> lainProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>lain<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token comment">// 获取值的捕获器</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> property<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">lainProxy 的 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>property<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> 属性被访问了</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> target<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">return</span> target<span class="token punctuation">[</span>property<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token comment">//lainProxy 的 name 属性被访问了 &#123;name: 'lain', age: 16&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lainProxy<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// lain</span></pre></td></tr></table></figure><h3 id="handlerset"><a class="anchor" href="#handlerset">#</a> handler.set()</h3><ul><li><code>**handler.set()**</code>  方法是设置属性值操作的捕获器。</li><li><code>target</code>  目标对象</li><li><code>property</code>  将被设置的属性名或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol"> <code>Symbol</code> </a>。</li><li><code>value</code>  新属性值</li><li><code>receiver</code>  最初被调用的对象。通常是 proxy 本身，但 handler 的 set 方法也有可能在原型链上，或以其他方式被间接地调用（因此不一定是 proxy 本身）。</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> lain <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  name<span class="token operator">:</span> <span class="token string">'lain'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  age<span class="token operator">:</span> <span class="token number">16</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">const</span> lainProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>lain<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token comment">//  设置值的捕获器</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> property<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">lainProxy 的 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>property<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> 属性被设置为 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>newValue<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> target<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    target<span class="token punctuation">[</span>property<span class="token punctuation">]</span> <span class="token operator">=</span> newValue</pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token comment">//lainProxy 的 name 属性被设置为 saber &#123;name: 'lain', age: 16&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>lainProxy<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'saber'</span></pre></td></tr></table></figure><h3 id="handlerhas"><a class="anchor" href="#handlerhas">#</a> handler.has()</h3><ul><li><strong> <code>handler.has()</code> </strong> 方法是针对 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/in"> <code>in</code> </a> 操作符的代理方法。</li><li><code>target</code>  目标对象</li><li><code>prop</code>  需要检查是否存在的属性.</li><li><code>has</code>  方法返回一个 boolean 属性的值.</li><li><code>**handler.has**</code>  方法可以看作是针对 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/in"> <code>in</code> </a> 操作的钩子.</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> lain <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  name<span class="token operator">:</span> <span class="token string">'lain'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  age<span class="token operator">:</span> <span class="token number">16</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">const</span> lainProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>lain<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token function">has</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> prop</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">return</span> prop <span class="token keyword">in</span> target</pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'name'</span> <span class="token keyword">in</span> lainProxy<span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="13"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'friends'</span> <span class="token keyword">in</span> lainProxy<span class="token punctuation">)</span> <span class="token comment">// false</span></pre></td></tr></table></figure><pre><code>### handler.defineProperty()</code></pre><ul><li><strong> <code>handler.defineProperty()</code> </strong> 用于拦截对对象的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty"> <code>Object.defineProperty()</code> </a> 操作。</li><li><code>target</code>  目标对象</li><li><code>property</code>  待检索其描述的属性名</li><li><code>descriptor</code>  待定义或修改的属性的描述符</li><li><code>defineProperty</code>  方法必须以一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Boolean"> <code>Boolean</code> </a> 返回，表示定义该属性的操作成功与否。</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> lain <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  name<span class="token operator">:</span> <span class="token string">'lain'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  age<span class="token operator">:</span> <span class="token number">16</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">const</span> lainProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>lain<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token function">deleteProperty</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> prop</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">)</span> <span class="token comment">// &#123;name: 'lain', age: 16&#125; 'age'</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">delete</span> target<span class="token punctuation">[</span>prop<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">delete</span> lainProxy<span class="token punctuation">.</span>age</pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lainProxy<span class="token punctuation">)</span> <span class="token comment">// Proxy &#123;name: 'lain'&#125;</span></pre></td></tr></table></figure><h3 id="handlerdeleteproperty"><a class="anchor" href="#handlerdeleteproperty">#</a> handler.deleteProperty()</h3><ul><li><strong> <code>handler.getPrototypeOf()</code> </strong> 是一个代理（Proxy）方法，当读取代理对象的原型时，该方法就会被调用。</li><li><code>target</code>  被代理的目标对象。</li><li><code>handler</code>  一个通常以函数作为属性的对象，各属性中的函数分别定义了在执行各种操作时代理  <code>p</code>  的行为。</li><li><code>getPrototypeOf</code>  方法的返回值必须是一个对象或者  <code>null</code> 。</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> lain <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  name<span class="token operator">:</span> <span class="token string">'lain'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  age<span class="token operator">:</span> <span class="token number">16</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">const</span> handel <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token function">getPrototypeOf</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">return</span> lainProxy</pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">const</span> lainProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>lain<span class="token punctuation">,</span> handel<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>lainProxy<span class="token punctuation">)</span> <span class="token operator">===</span> lain<span class="token punctuation">)</span> <span class="token comment">// false</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>lainProxy<span class="token punctuation">)</span> <span class="token operator">===</span> foo<span class="token punctuation">)</span> <span class="token comment">// false</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>lainProxy<span class="token punctuation">)</span> <span class="token operator">===</span> lainProxy<span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr></table></figure><h3 id="handlerapply"><a class="anchor" href="#handlerapply">#</a> handler.apply()</h3><ul><li><strong> <code>handler.apply()</code> </strong> 方法用于拦截函数的调用。</li><li><code>target</code>  被代理的目标对象。</li><li><code>thisArg</code>  被调用时的上下文对象</li><li><code>apply</code>  方法可以返回任何值。</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> lain <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  name<span class="token operator">:</span> <span class="token string">'lain'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  age<span class="token operator">:</span> <span class="token number">16</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  </pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> thisArg<span class="token punctuation">,</span> argArray</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> thisArg<span class="token punctuation">,</span> argArray<span class="token punctuation">)</span> <span class="token comment">// [Function: foo] &#123;name: 'lain', age: 16&#125; (4) [' 我 ', ' 是 ', ' 参 ', ' 数 ']</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token function">target</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span> argArray<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">const</span> fooProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span> handler<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token function">fooProxy</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>lain<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'我'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'参'</span><span class="token punctuation">,</span> <span class="token string">'数'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="handlerconstruct"><a class="anchor" href="#handlerconstruct">#</a> handler.construct()</h3><ul><li><code>**handler.construct()**</code>  方法用于拦截 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new"> <code>new</code> </a> 操作符。</li><li><code>target</code>  被代理的目标对象。</li><li><code>argumentsList</code>  constructor 的参数列表。</li><li><code>newTarget</code>  最初被调用的构造函数，就上面的例子而言是 p。</li><li><code>construct</code>  方法必须返回一个对象。</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  </pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token function">construct</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> argArray<span class="token punctuation">,</span> newTarget</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> argArray<span class="token punctuation">,</span> newTarget<span class="token punctuation">)</span> <span class="token comment">// [Function: foo] [ ' 我 ', ' 是 ', ' 参 ', ' 数 ' ] [Function: foo]</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newTarget <span class="token operator">===</span> fooProxy<span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">target</span><span class="token punctuation">(</span><span class="token operator">...</span>argArray<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">const</span> fooProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span> handler<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">new</span> <span class="token class-name">fooProxy</span><span class="token punctuation">(</span><span class="token string">'我'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'参'</span><span class="token punctuation">,</span> <span class="token string">'数'</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="reflect"><a class="anchor" href="#reflect">#</a> Reflect</h2><h3 id="reflectget"><a class="anchor" href="#reflectget">#</a> Reflect.get()</h3><ul><li><p><code>**Reflect**</code> ** <code>.get()</code> ** 方法与从 对象 ( <code>target[propertyKey]</code> ) 中读取属性类似，但它是通过一个函数执行来操</p></li><li><p><code>target</code>   需要取值的目标对象</p></li><li><p><code>propertyKey</code>  需要获取的值的键值</p></li><li><p><code>receiver</code>  如果 <code>target</code>  对象中指定了 <code>getter</code> ， <code>receiver</code>  则为 <code>getter</code>  调用时的 <code>this</code>  值。</p></li><li><p><code>返回值</code>  属性的值。</p></li><li><p><code>Reflect.get</code>  方法允许你从一个对象中取属性值。就如同<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvT3BlcmF0b3JzL1Byb3BlcnR5X0FjY2Vzc29ycw==">属性访问器</span> 语法，但却是通过函数调用来实现。</p></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> lain <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    name<span class="token operator">:</span> <span class="token string">'lain'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    age<span class="token operator">:</span> <span class="token number">16</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  </pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">const</span> lainProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>lain<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Reflect get'</span><span class="token punctuation">)</span> <span class="token comment">// Reflect get</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  </pre></td></tr><tr><td data-num="10"></td><td><pre>      <span class="token keyword">const</span> returnValue <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>      </pre></td></tr><tr><td data-num="12"></td><td><pre>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>returnValue<span class="token punctuation">)</span> <span class="token comment">// lain</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  </pre></td></tr><tr><td data-num="16"></td><td><pre>  lainProxy<span class="token punctuation">.</span>name</pre></td></tr></table></figure><h3 id="reflectset"><a class="anchor" href="#reflectset">#</a> Reflect.set()</h3><ul><li>静态方法  <code>**Reflect**</code> <strong> <code>.set()</code> </strong> 工作方式就像在一个对象上设置一个属性。</li><li><code>语法</code>  <strong>Reflect.set(target, propertyKey, value[, receiver])</strong></li><li>· <code>propertyKey</code>  设置的属性的名称。</li><li><code>value</code>  设置的值。</li><li><code>receiver</code>  如果遇到  <code>setter</code> ， <code>receiver</code>  则为 <code>setter</code>  调用时的 <code>this</code>  值。</li><li>返回一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Boolean"> <code>Boolean</code> </a> 值表明是否成功设置属性。</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> lain <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  name<span class="token operator">:</span> <span class="token string">'lain'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  age<span class="token operator">:</span> <span class="token number">16</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">const</span> lainProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>lain<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>   <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> newValue<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Reflect set'</span><span class="token punctuation">)</span> <span class="token comment">// Reflect set</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">const</span> res <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> newValue<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    </pre></td></tr><tr><td data-num="12"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>lainProxy<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'saber'</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言声明&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#前言声明&quot;&gt;#&lt;/a&gt; 前言声明&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;本章大量释义来源于  &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9kZXZlbG9wZXIubW96</summary>
      
    
    
    
    <category term="WebFE" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/WebFE/"/>
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/WebFE/JavaScript/"/>
    
    <category term="JavaScript Advanced" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/WebFE/JavaScript/JavaScript-Advanced/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript/"/>
    
    <category term="ES6+" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/ES6/"/>
    
    <category term="JavaScript Advanced" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript-Advanced/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript ES6+ さん</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2021/10/28/WebFE/JavaScript/Advanced/ES6+%E3%81%95%E3%82%93/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2021/10/28/WebFE/JavaScript/Advanced/ES6+%E3%81%95%E3%82%93/</id>
    <published>2021-10-28T13:19:46.000Z</published>
    <updated>2022-01-16T11:14:23.072Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言声明"><a class="anchor" href="#前言声明">#</a> 前言声明</h2><ul><li>本章大量释义来源于 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04v">MDN</span></li></ul><h2 id="es7"><a class="anchor" href="#es7">#</a> ES7</h2><h3 id="includes"><a class="anchor" href="#includes">#</a> includes</h3><ul><li>在 ES7 之前，如果我们想判断一个数组中是否包含某个元素，需要通过 indexOf 获取结果，并且判断是否为 -1。</li><li>在 ES7 中，我们可以通过 includes 来判断一个数组中是否包含一个指定的元素，根据情况，如果包含则返回 true，否则返回 false。</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> friends <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'伊莉雅'</span><span class="token punctuation">,</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'入间同学'</span><span class="token punctuation">,</span> <span class="token string">'薇尔莉特'</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 在判断 +0 与 -0 时，被认为是相同的。</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment">// 3</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">// true</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 这里可以看出数组是包含 NaN 的 indexOf 返回的却是 -1</span></pre></td></tr><tr><td data-num="8"></td><td><pre>friends<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'樱岛麻衣'</span><span class="token punctuation">)</span> <span class="token comment">// 1</span></pre></td></tr><tr><td data-num="9"></td><td><pre>friends<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'saber'</span><span class="token punctuation">)</span> <span class="token comment">// -1</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>friends<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'伊莉雅'</span><span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="12"></td><td><pre>friends<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'saber'</span><span class="token punctuation">)</span> <span class="token comment">// false</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token comment">// 只能判断简单类型的数据，对于复杂类型的数据，比如对象类型的数组，二维数组，这些，是无法判断的.</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="16"></td><td><pre>arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//false</span></pre></td></tr><tr><td data-num="17"></td><td><pre>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//-1</span></pre></td></tr></table></figure><ul><li>includes &amp; indexof 区别</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> friends <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'伊莉雅'</span><span class="token punctuation">,</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'入间同学'</span><span class="token punctuation">,</span> <span class="token string">'薇尔莉特'</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 这里可以看出数组是包含 NaN 的 indexOf 返回的却是 -1  includes 则是 true</span></pre></td></tr><tr><td data-num="4"></td><td><pre>friends<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// -1</span></pre></td></tr><tr><td data-num="5"></td><td><pre>friends<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 第二个参数为 2 代表从第 2 个元素之后开始判断</span></pre></td></tr><tr><td data-num="8"></td><td><pre>friends<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// false</span></pre></td></tr></table></figure><h3 id="指数运算符"><a class="anchor" href="#指数运算符">#</a> 指数运算符</h3><ul><li>在 ES7 之前，计算数字的乘方需要通过 Math.pow 方法来完成。</li><li>在 ES7 中，增加了 ** 运算符，可以对数字来计算乘方</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> result1 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> result2 <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">5</span> </pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span> <span class="token comment">// 32</span></pre></td></tr><tr><td data-num="5"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span> <span class="token comment">// 32</span></pre></td></tr></table></figure><h2 id="es8"><a class="anchor" href="#es8">#</a> ES8</h2><h3 id="objectvalues"><a class="anchor" href="#objectvalues">#</a> Object.values</h3><ul><li><code>Object.values()</code>  返回一个数组，其元素是在对象上找到的可枚举属性值。属性的顺序与通过手动循环对象的属性值所给出的顺序相同。</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> lain <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  name<span class="token operator">:</span> <span class="token string">'lain'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  age<span class="token operator">:</span> <span class="token number">16</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 传入对象</span></pre></td></tr><tr><td data-num="6"></td><td><pre>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>lain<span class="token punctuation">)</span> <span class="token comment">//  ['lain', 16]</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// 传入数组</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">[</span><span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'薇尔莉特'</span><span class="token punctuation">,</span> <span class="token string">'伊莉雅'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//  [' 樱岛麻衣 ', ' 薇尔莉特 ', ' 伊莉雅 ']</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">// 传入字符串</span></pre></td></tr><tr><td data-num="12"></td><td><pre>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token string">'樱岛麻衣是我老婆'</span><span class="token punctuation">)</span> <span class="token comment">//  [' 樱 ', ' 岛 ', ' 麻 ', ' 衣 ', ' 是 ', ' 我 ', ' 老 ', ' 婆 ']</span></pre></td></tr></table></figure><h3 id="objectentries"><a class="anchor" href="#objectentries">#</a> Object.entries</h3><ul><li><code>Object.entries()</code>  返回一个数组，其元素是与直接在 <code>object</code>  上找到的可枚举属性键值对相对应的数组。属性的顺序与通过手动循环对象的属性值所给出的顺序相同。</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> lain <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  name<span class="token operator">:</span> <span class="token string">'lain'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  age<span class="token operator">:</span> <span class="token number">16</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// 传入对象</span></pre></td></tr><tr><td data-num="7"></td><td><pre>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>lain<span class="token punctuation">)</span> <span class="token comment">// [ [ 'name', 'lain' ], [ 'age', 16 ] ]</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// 传入数组</span></pre></td></tr><tr><td data-num="10"></td><td><pre>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'薇尔莉特'</span><span class="token punctuation">,</span> <span class="token string">'伊莉雅'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// [['0', ' 樱岛麻衣 '], [ '1', ' 薇尔莉特 ' ], [ '2', ' 伊莉雅 ' ] ]</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment">// 传入字符串</span></pre></td></tr><tr><td data-num="13"></td><td><pre>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token string">'樱岛麻衣'</span><span class="token punctuation">)</span> <span class="token comment">// [['0', ' 樱 '], [ '1', ' 岛 ' ], [ '2', ' 麻 ' ], [ '3', ' 衣 ' ] ]</span></pre></td></tr></table></figure><h3 id="padstart"><a class="anchor" href="#padstart">#</a> padStart</h3><ul><li><code>padStart()</code>  方法用另一个字符串填充当前字符串 (如果需要的话，会重复多次)，以便产生的字符串达到给定的长度。从当前字符串的左侧开始填充。</li><li>语法：  <code>str.padStart(targetLength [, padString])</code></li><li>参数：<ul><li><code>targetLength: 当前字符串需要填充到的目标长度。如果这个数值小于当前字符串的长度，则返回当前字符串本身。</code></li><li><code>padString 可选  填充字符串。如果字符串太长，使填充后的字符串长度超过了目标长度，则只保留最左侧的部分，其他部分会被截断。此参数的默认值为 &quot; &quot;（U+0020）。</code></li></ul></li><li>返回值： <code>在原字符串开头填充指定的填充字符串直到目标长度所形成的新字符串。</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'樱岛麻衣'</span></pre></td></tr><tr><td data-num="2"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>      <span class="token comment">//     樱岛麻衣</span></pre></td></tr><tr><td data-num="3"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">)</span> <span class="token comment">//---- 樱岛麻衣</span></pre></td></tr></table></figure><h3 id="padend"><a class="anchor" href="#padend">#</a> padEnd</h3><ul><li><code>padEnd()</code>   方法会用一个字符串填充当前字符串（如果需要的话则重复填充），返回填充后达到指定长度的字符串。从当前字符串的末尾（右侧）开始填充。</li><li>语法： <code>str.padEnd(targetLength [, padString])</code></li><li>参数：<ul><li><code>targetLength：</code> 当前字符串需要填充到的目标长度。如果这个数值小于当前字符串的长度，则返回当前字符串本身。</li><li><code>padString 可选  填充字符串。如果字符串太长，使填充后的字符串长度超过了目标长度，则只保留最左侧的部分，其他部分会被截断。此参数的缺省值为 &quot; &quot;（U+0020）。</code></li></ul></li><li>返回值：在原字符串末尾填充指定的填充字符串直到目标长度所形成的新字符串。</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'樱岛麻衣'</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">padEnd</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>         <span class="token comment">// 樱岛麻衣  </span></pre></td></tr><tr><td data-num="4"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">padEnd</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>        <span class="token comment">// 樱岛麻衣 empty*6     </span></pre></td></tr><tr><td data-num="5"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">padEnd</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span>   <span class="token comment">// 樱岛麻衣 ******</span></pre></td></tr><tr><td data-num="6"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">padEnd</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">)</span>    <span class="token comment">// 樱岛麻衣 ----</span></pre></td></tr></table></figure><h3 id="demo"><a class="anchor" href="#demo">#</a> Demo</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> identityCard <span class="token operator">=</span> <span class="token string">'421126200006132333'</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> lastIdentityCard <span class="token operator">=</span> identityCard<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>lastIdentityCard<span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span>identityCard<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">)</span> <span class="token comment">// **************2333</span></pre></td></tr></table></figure><h2 id="es10"><a class="anchor" href="#es10">#</a> ES10</h2><h3 id="flat"><a class="anchor" href="#flat">#</a> flat</h3><ul><li><code>flat()</code>  方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。</li><li>语法： <code>var newArray = arr.flat([depth])</code></li><li>参数：<ul><li><code>depth 可选 </code>   指定要提取嵌套数组的结构深度，默认值为 1</li></ul></li><li>返回值：一个包含将数组与子数组中所有元素的新数组。</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 声明一个多维数组</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 数组降维默认为 1</span></pre></td></tr><tr><td data-num="5"></td><td><pre>arr<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// [ 1, 2, 3, 4, 5, 6, 7, [ 8, 9 ], [ 10, [ 11, 12 ] ] ]</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 数组降维 2</span></pre></td></tr><tr><td data-num="8"></td><td><pre>arr<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, [ 11, 12 ] ]</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">// 使用 Infinity，可展开任意深度的嵌套数组</span></pre></td></tr><tr><td data-num="11"></td><td><pre>arr<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]</span></pre></td></tr></table></figure><h3 id="flagmap"><a class="anchor" href="#flagmap">#</a> flagMap</h3><ul><li><p><code>flatMap()</code>  方法首先使用映射函数映射每个元素，然后将结果压缩成一个新数组。它与 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvbWFw">map</span> 连着深度值为 1 的 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvZmxhdA==">flat</span> 几乎相同，但  <code>flatMap</code>  通常在合并成一种方法的效率稍微高一些。</p></li><li><p>语法： <code>var new_array = arr.flatMap(function callback(currentValue[, index[, array]]) &#123; // return element for new_array &#125;[, thisArg])</code></p></li><li><p>参数：</p><ul><li><p><code>callback</code>  可以生成一个新数组中的元素的函数，可以传入三个参数：</p></li><li><p><code>currentValue</code>  当前正在数组中处理的元素</p></li><li><p><code>index 可选 </code>  可选的。数组中正在处理的当前元素的索引。</p></li><li><p><code>array 可选</code>  可选的。被调用的  <code>map</code>  数组</p></li><li><p><code>thisArg 可选</code>  可选的。执行  <code>callback</code>  函数时 使用的 <code>this</code>  值。</p></li></ul></li><li><p>flatMap 方法与 map 方法和深度 depth 为 1 的 flat 几乎相同.</p></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> characters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'薇尔莉特 小鸟游六花'</span><span class="token punctuation">,</span><span class="token string">'稚名真白 土间埋'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 使用 map 得到的是多维数组</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">const</span> words1 <span class="token operator">=</span> characters<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> item<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>words1<span class="token punctuation">)</span> <span class="token comment">// [[' 薇尔莉特 ', ' 小鸟游六花 '], [ ' 稚名真白 ', ' 土间埋 ' ] ]</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 使用 flatMap 得到的是一维数组</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">const</span> words2 <span class="token operator">=</span> characters<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> item<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>words2<span class="token punctuation">)</span> <span class="token comment">// [' 薇尔莉特 ', ' 小鸟游六花 ', ' 稚名真白 ', ' 土间埋 ']</span></pre></td></tr></table></figure><h3 id="objectfromentries"><a class="anchor" href="#objectfromentries">#</a> Object.fromEntries</h3><ul><li>​ <code>Object.fromEntries()</code>  方法把键值对列表转换为一个对象。、</li><li>语法： <code>Object.fromEntries(iterable)</code></li><li>参数： <code>iterable</code>  类似 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array"> <code>Array</code> </a> 、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map"> <code>Map</code> </a> 或者其它实现了<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvSXRlcmF0aW9uX3Byb3RvY29scyN0aGVfaXRlcmFibGVfcHJvdG9jb2w=">可迭代协议</span>的可迭代对象。</li><li>返回值：一个由该迭代对象条目提供对应属性的新对象。</li><li><code>Object.fromEntries()</code>  方法接收一个键值对的列表参数，并返回一个带有这些键值对的新对象。这个迭代参数应该是一个能够实现 <code>@@iterator</code>  方法的的对象，返回一个迭代器对象。它生成一个具有两个元素的类数组的对象，第一个元素是将用作属性键的值，第二个元素是与该属性键关联的值。</li><li><code>Object.fromEntries()</code>  执行与 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/entries"> <code>Object.entries</code> </a> 互逆的操作。</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> entries <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token punctuation">[</span><span class="token string">'lain'</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token punctuation">[</span><span class="token string">'saber'</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>entries<span class="token punctuation">)</span> <span class="token comment">// Map(2) &#123; 'lain' => 16, 'saber' => 17 &#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">const</span> fromEntries <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">fromEntries</span><span class="token punctuation">(</span>entries<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fromEntries<span class="token punctuation">)</span> <span class="token comment">// &#123; lain: 16, saber: 17 &#125;</span></pre></td></tr></table></figure><h3 id="demo-2"><a class="anchor" href="#demo-2">#</a> Demo</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> queryString <span class="token operator">=</span> <span class="token string">'name=saber&amp;age=16'</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> queryParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>queryString<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>queryParams<span class="token punctuation">)</span> <span class="token comment">// URLSearchParams &#123; 'name' => 'saber', 'age' => '16' &#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> param <span class="token keyword">of</span> queryParams<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span> <span class="token comment">// [ 'name', 'saber' ]  [ 'age', '16' ]</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// 使用 Object.fromEntries 转换为对象  与 Object.entries 相反</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">const</span> paramObj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">fromEntries</span><span class="token punctuation">(</span>queryParams<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>paramObj<span class="token punctuation">)</span> <span class="token comment">// &#123; name: 'saber', age: '16' &#125;</span></pre></td></tr></table></figure><h3 id="trim"><a class="anchor" href="#trim">#</a> trim()</h3><h3 id="trimstart"><a class="anchor" href="#trimstart">#</a> trimStart()</h3><ul><li><code>trimStart()</code>  方法从字符串的开头删除空格。 <code>trimLeft()</code>  是此方法的别名。</li><li>返回值：一个新字符串，表示从其开头（左端）除去空格的调用字符串。</li><li><code>trimStart()</code>  /  <code>trimLeft()</code>  方法移除原字符串左端的连续空白符并返回一个新字符串，并不会直接修改原字符串本身。</li><li>别名：为了与 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/padStart"> <code>String.prototype.padStart</code> </a> 等函数保持一致，标准方法名称为 <code>trimStart</code> 。 但是，出于 Web 兼容性原因， <code>trimLeft</code>  仍然是  <code>trimStart</code>  的别名。在某些引擎中，这意味着： <code>String.prototype.trimLeft.name === &quot;trimStart&quot;</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'   Hello World'</span></pre></td></tr><tr><td data-num="2"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">trimStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// ''*3Hello World</span></pre></td></tr></table></figure><h3 id="trimend"><a class="anchor" href="#trimend">#</a> trimEnd</h3><ul><li><code>trimEnd() </code> 方法从一个字符串的末端移除空白字符。trimRight () 是这个方法的别名。</li><li>返回值：一个新字符串，表示从调用字串的末（右）端除去空白。</li><li><code>trimEnd()</code>  /  <code>trimRight()</code>  方法移除原字符串右端的连续空白符并返回， <code>trimEnd()</code>  /  <code>trimRight()</code>  方法并不会直接修改原字符串本身。</li><li>别名：为了与 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd"> <code>String.prototype.padEnd</code> </a> 等函数保持一致，标准方法名称为 <code>trimEnd</code> 。 但是，出于 Web 兼容性原因， <code>trimRight</code>  仍然是 <code>trimEnd</code>  的别名。 在某些引擎中，这意味着： <code>String.prototype.trimRight.name === &quot;trimEnd&quot;;</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'Hello World   '</span></pre></td></tr><tr><td data-num="2"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">trimEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// Hello World''*3</span></pre></td></tr></table></figure><h3 id="description"><a class="anchor" href="#description">#</a> description</h3><ul><li><code>description</code>  是一个只读属性，它会返回 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol"> <code>Symbol</code> </a> 对象的可选描述的字符串。</li><li>语法： <code>Symbol('myDescription').description;Symbol.iterator.description;Symbol.for('foo').description;</code></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol"> <code>Symbol</code> </a> 对象可以通过一个可选的描述创建，可用于调试，但不能用于访问 symbol 本身。</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'lain'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>description <span class="token comment">// lain</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>description <span class="token comment">// ''</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>description <span class="token comment">// undefined</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>description <span class="token comment">// 1,2,3</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token string">'lain'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>description <span class="token comment">// [object Object]</span></pre></td></tr></table></figure><h2 id="es11"><a class="anchor" href="#es11">#</a> ES11</h2><h3 id="bigint"><a class="anchor" href="#bigint">#</a> BigInt</h3><ul><li><strong> <code>BigInt</code> </strong> 是一种内置对象，它提供了一种方法来表示大于  <code>253 - 1</code>  的整数。这原本是 Javascript 中可以用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number"> <code>Number</code> </a> 表示的最大数字。<strong> <code>BigInt</code> </strong> 可以表示任意大的整数。</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">**</span> <span class="token number">53</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 9007199254740991n</span></pre></td></tr></table></figure><ul><li>可以用在一个整数字面量后面加  <code>n</code>  的方式定义一个  <code>BigInt</code>  ，如： <code>10n</code> ，或者调用函数 <code>BigInt()</code> 。</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> bigInt <span class="token operator">=</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> bigInt<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bigInt <span class="token operator">+</span> <span class="token number">10n</span><span class="token punctuation">)</span> <span class="token comment">// 20n</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">const</span> num1 <span class="token operator">=</span> <span class="token number">100</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">const</span> num2 <span class="token operator">=</span> <span class="token number">100</span></pre></td></tr><tr><td data-num="8"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bigInt <span class="token operator">+</span> <span class="token function">BigInt</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 110n</span></pre></td></tr><tr><td data-num="9"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bigInt <span class="token operator">+</span> <span class="token function">BigInt</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 110n</span></pre></td></tr></table></figure><ul><li>将 BigInt 转成 Number 类型</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> bigInt <span class="token operator">=</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 如果将大数转成 Number 类型，不一定能安全表示</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">const</span> smallNum <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>bigInt<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>smallNum<span class="token punctuation">)</span> <span class="token comment">// 10</span></pre></td></tr></table></figure><h3 id="nullish-coalescing-operator"><a class="anchor" href="#nullish-coalescing-operator">#</a> Nullish coalescing operator</h3><ul><li><strong>空值合并操作符</strong>（<strong> <code>??</code> </strong>）是一个逻辑操作符，当左侧的操作数为 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/null"> <code>null</code> </a> 或者 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined"> <code>undefined</code> </a> 时，返回其右侧操作数，否则返回左侧操作数。</li><li>与<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Logical_OR">逻辑或操作符（ <code>||</code> ）</a>不同，逻辑或操作符会在左侧操作数为<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9HbG9zc2FyeS9GYWxzeQ==">假值</span>时返回右侧操作数。也就是说，如果使用  <code>||</code>  来为某些变量设置默认值，可能会遇到意料之外的行为。比如为假值（例如， <code>''</code>  或  <code>0</code> ）时。见下面的例子。</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> nullValue <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> emptyText <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">const</span> someNumber <span class="token operator">=</span> <span class="token number">233</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">const</span> valA <span class="token operator">=</span> nullValue <span class="token operator">??</span> <span class="token string">"default valA"</span> <span class="token comment">// "efault valA"</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">const</span> valB <span class="token operator">=</span> emptyText <span class="token operator">??</span> <span class="token string">"default valB"</span> <span class="token comment">// "default valB"</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">const</span> valC <span class="token operator">=</span> someNumber <span class="token operator">??</span> <span class="token number">0</span> <span class="token comment">// 233</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">const</span> valD <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token operator">??</span> <span class="token string">'null value'</span> <span class="token comment">// null value</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">const</span> valE <span class="token operator">=</span> <span class="token keyword">undefined</span> <span class="token operator">??</span> <span class="token string">'undefined value'</span> <span class="token comment">// 'undefined value'</span></pre></td></tr></table></figure><h3 id="optional-chaining"><a class="anchor" href="#optional-chaining">#</a> Optional Chaining</h3><ul><li><strong>可选链</strong>操作符 ( <strong> <code>?.</code> </strong> ) 允许读取位于连接对象链深处的属性的值，而不必明确验证链中的每个引用是否有效。 <code>?.</code>  操作符的功能类似于  <code>.</code>  链式操作符，不同之处在于，在引用为空 (<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9HbG9zc2FyeS9OdWxsaXNo">nullish</span> ) (<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/null"> <code>null</code> </a> 或者 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined"> <code>undefined</code> </a>) 的情况下不会引起错误，该表达式短路返回值是  <code>undefined</code> 。与函数调用一起使用时，如果给定的函数不存在，则返回  <code>undefined</code> 。</li><li>当尝试访问可能不存在的对象属性时，可选链操作符将会使表达式更短、更简明。在探索一个对象的内容时，如果不能确定哪些属性必定存在，可选链操作符也是很有帮助的。</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> lain <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  name<span class="token operator">:</span> <span class="token string">'lain'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lain<span class="token punctuation">.</span>friend<span class="token operator">?.</span>name<span class="token punctuation">)</span> <span class="token comment">// undefined</span></pre></td></tr></table></figure><h3 id="globalthis"><a class="anchor" href="#globalthis">#</a> globalThis</h3><ul><li>全局属性  <code>globalThis</code>  包含全局的  <code>this</code>  值，类似于全局对象（global object）</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>globalThis<span class="token punctuation">)</span> <span class="token comment">// Browser -> window</span></pre></td></tr></table></figure><ul><li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvZ2xvYmFsVGhpcw==">详情请参考 MDN</span></li></ul><h2 id="es12"><a class="anchor" href="#es12">#</a> ES12</h2><h3 id="finalizationregistry"><a class="anchor" href="#finalizationregistry">#</a> FinalizationRegistry</h3><ul><li><p><strong> <code>FinalizationRegistry</code>  对象可以让你在对象被垃圾回收时请求一个回调。</strong></p></li><li><p><code>FinalizationRegistry</code>  提供了这样的一种方法：当一个在注册表中注册的对象被回收时，请求在某个时间点上调用一个清理回调。（清理回调有时被称为 finalizer ）。</p></li><li><p>GC (Garbage Collection) 会不定时回收， 并不是立即销毁就回收的。</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> finalRegistry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FinalizationRegistry</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">heldValue</span> <span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">注册在finalRegistry中的 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>heldValue<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> 对象被销毁了</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">let</span> lain <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  name<span class="token operator">:</span> <span class="token string">'lain'</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">let</span> saber <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  name<span class="token operator">:</span> <span class="token string">'saber'</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>finalRegistry<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>lain<span class="token punctuation">,</span> <span class="token string">'lain'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>finalRegistry<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>saber<span class="token punctuation">,</span> <span class="token string">'saber'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>finalRegistry<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>lain <span class="token operator">=</span> <span class="token keyword">null</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>saber <span class="token operator">=</span> <span class="token keyword">null</span></pre></td></tr></table></figure></li></ul><h3 id="weakref"><a class="anchor" href="#weakref">#</a> WeakRef</h3><p>WeakRef 对象允许您保留对另一个对象的弱引用，而不会阻止被弱引用对象被 GC 回收</p><p><code>WeakRef.prototype.deref()</code>     返回当前实例的 WeakRef 对象所绑定的 target 对象，如果该 target 对象已被 GC 回收则返回 <code>undefined</code></p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvV2Vha1JlZg==">详情请参考 MDN</span></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> finalRegistry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FinalizationRegistry</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">heldValue</span> <span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">注册在finalRegistry中的 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>heldValue<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> 对象被销毁了</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">let</span> lain <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  name<span class="token operator">:</span> <span class="token string">'lain'</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">let</span> newLain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakRef</span><span class="token punctuation">(</span>lain<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>finalRegistry<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>lain<span class="token punctuation">,</span> <span class="token string">'lain'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>finalRegistry<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>newLain<span class="token punctuation">,</span> <span class="token string">'newLain'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>finalRegistry<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre>lain <span class="token operator">=</span> <span class="token keyword">null</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newLain<span class="token punctuation">.</span><span class="token function">deref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?.</span>name<span class="token punctuation">)</span> <span class="token comment">// lain</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span> <span class="token comment">// GC 回收了 lain 后 获取到的则是 undefined</span></pre></td></tr></table></figure><h3 id="logical-assign-operator"><a class="anchor" href="#logical-assign-operator">#</a> logical-assign-operator</h3><h4 id=""><a class="anchor" href="#">#</a> ||=</h4><ul><li>逻辑或赋值（ <code>x ||= y</code> ）运算仅在  <code>x</code>  为<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9HbG9zc2FyeS9GYWxzeQ==">虚</span>值时赋值。</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> example <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  b<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  c<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  d<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  e<span class="token operator">:</span> <span class="token keyword">undefined</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>example<span class="token punctuation">.</span>a <span class="token operator">||=</span> <span class="token string">'default value'</span> <span class="token comment">// 1</span></pre></td></tr><tr><td data-num="10"></td><td><pre>example<span class="token punctuation">.</span>b <span class="token operator">||=</span> <span class="token string">'default value'</span> <span class="token comment">// default value</span></pre></td></tr><tr><td data-num="11"></td><td><pre>example<span class="token punctuation">.</span>c <span class="token operator">||=</span> <span class="token string">'default value'</span> <span class="token comment">// default value</span></pre></td></tr><tr><td data-num="12"></td><td><pre>example<span class="token punctuation">.</span>d <span class="token operator">||=</span> <span class="token string">'default value'</span> <span class="token comment">// default value</span></pre></td></tr><tr><td data-num="13"></td><td><pre>example<span class="token punctuation">.</span>e <span class="token operator">||=</span> <span class="token string">'default value'</span> <span class="token comment">// default value</span></pre></td></tr></table></figure><h4 id="-2"><a class="anchor" href="#-2">#</a> &amp;&amp;=</h4><ul><li>逻辑和赋值 (x &amp;&amp;= y) 操作符只在 x 为真时才赋值。</li><li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvT3BlcmF0b3JzL051bGxpc2hfY29hbGVzY2luZ19vcGVyYXRvcg==">空值合并</span>运算符从左至右求值，其使用以下规则测试是否可能进行语法短路求值： <code>(结果非 null 或 undefined 的表达式) ?? expr</code>  被短路求值为左侧表达式，当左侧证明为既非  <code>null</code>  也非  <code>undefined</code> .</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> example <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  b<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  c<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  d<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  e<span class="token operator">:</span> <span class="token keyword">undefined</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>example<span class="token punctuation">.</span>a <span class="token operator">&amp;&amp;=</span> <span class="token string">'default value'</span> <span class="token comment">// default value</span></pre></td></tr><tr><td data-num="10"></td><td><pre>example<span class="token punctuation">.</span>b <span class="token operator">&amp;&amp;=</span> <span class="token string">'default value'</span> <span class="token comment">// 0</span></pre></td></tr><tr><td data-num="11"></td><td><pre>example<span class="token punctuation">.</span>c <span class="token operator">&amp;&amp;=</span> <span class="token string">'default value'</span> <span class="token comment">// ''</span></pre></td></tr><tr><td data-num="12"></td><td><pre>example<span class="token punctuation">.</span>d <span class="token operator">&amp;&amp;=</span> <span class="token string">'default value'</span> <span class="token comment">// null</span></pre></td></tr><tr><td data-num="13"></td><td><pre>example<span class="token punctuation">.</span>e <span class="token operator">&amp;&amp;=</span> <span class="token string">'default value'</span> <span class="token comment">// undefined</span></pre></td></tr></table></figure><h4 id="-3"><a class="anchor" href="#-3">#</a> ??=</h4><ul><li>逻辑空赋值运算符 ( <code>x ??= y</code> ) 仅在  <code>x</code>  是 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9HbG9zc2FyeS9OdWxsaXNo">nullish</span> ( <code>null</code>  或  <code>undefined</code> ) 时对其赋值。</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> example <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  b<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  c<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  d<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  e<span class="token operator">:</span> <span class="token keyword">undefined</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>example<span class="token punctuation">.</span>a <span class="token operator">??=</span> <span class="token string">'default value'</span> <span class="token comment">// 1</span></pre></td></tr><tr><td data-num="10"></td><td><pre>example<span class="token punctuation">.</span>b <span class="token operator">??=</span> <span class="token string">'default value'</span> <span class="token comment">// 0</span></pre></td></tr><tr><td data-num="11"></td><td><pre>example<span class="token punctuation">.</span>c <span class="token operator">??=</span> <span class="token string">'default value'</span> <span class="token comment">// ''</span></pre></td></tr><tr><td data-num="12"></td><td><pre>example<span class="token punctuation">.</span>d <span class="token operator">??=</span> <span class="token string">'default value'</span> <span class="token comment">// default value</span></pre></td></tr><tr><td data-num="13"></td><td><pre>example<span class="token punctuation">.</span>e <span class="token operator">??=</span> <span class="token string">'default value'</span> <span class="token comment">// default value</span></pre></td></tr></table></figure><h3 id="numeric-separator"><a class="anchor" href="#numeric-separator">#</a> numeric separator</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token number">1_000_000</span></pre></td></tr><tr><td data-num="2"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token comment">// 1000000</span></pre></td></tr></table></figure><h3 id="replaceall"><a class="anchor" href="#replaceall">#</a> replaceAll</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>### <span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'Hello World'</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Hella Warld</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token comment">// 'Hello World'</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言声明&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#前言声明&quot;&gt;#&lt;/a&gt; 前言声明&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;本章大量释义来源于 &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9kZXZlbG9wZXIubW96a</summary>
      
    
    
    
    <category term="WebFE" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/WebFE/"/>
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/WebFE/JavaScript/"/>
    
    <category term="JavaScript Advanced" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/WebFE/JavaScript/JavaScript-Advanced/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript/"/>
    
    <category term="ES6+" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/ES6/"/>
    
    <category term="JavaScript Advanced" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript-Advanced/"/>
    
  </entry>
  
  <entry>
    <title>Set &amp; Map 数据结构</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2021/10/26/WebFE/JavaScript/Advanced/Set_Map/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2021/10/26/WebFE/JavaScript/Advanced/Set_Map/</id>
    <published>2021-10-26T05:03:49.000Z</published>
    <updated>2022-01-16T09:55:39.355Z</updated>
    
    <content type="html"><![CDATA[<h2 id="set"><a class="anchor" href="#set">#</a> Set</h2><ul><li>在 ES6 之前，我们存储数据的结构主要有两种：数组、对象。</li><li>在 ES6 中新增了另外两种数据结构：Set、Map，以及它们的另外形式 WeakSet、WeakMap。</li><li>Set 是一个新增的数据结构，可以用来保存数据，类似于数组，但是和数组的区别是元素不能重复。</li><li>创建 Set 我们需要通过 Set 构造函数（暂时没有字面量创建的方式）：</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 1. 生成 Set 结构</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span> <span class="token comment">// Set(4) &#123; 1, 2, 3, '4' &#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">// 2. 添加对象需注意</span></pre></td></tr><tr><td data-num="11"></td><td><pre>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span> <span class="token comment">// Set(6) &#123; 1, 2, 3, '4', &#123;&#125;, &#123;&#125; &#125;</span></pre></td></tr></table></figure><h3 id="数组去重"><a class="anchor" href="#数组去重">#</a> 数组去重</h3><ul><li>我们可以发现 Set 中存放的元素是不会重复的，那么 Set 有一个非常常用的功能就是给数组去重。</li><li>我们之前的做法是通过 indexOf 判断是否存在该元素</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> k <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>newArr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3, 4]</span></pre></td></tr></table></figure><ul><li>而现在使用 Set 会非常方便做到这一点</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> newArr <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">//const newArr = [... new Set (arr)] // 这种方法也是可以的</span></pre></td></tr><tr><td data-num="4"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3, 4]</span></pre></td></tr></table></figure><h3 id="size-属性"><a class="anchor" href="#size-属性">#</a> size 属性</h3><ul><li>Set 属性：<ul><li>size 返回 Set 中元素的个数；</li></ul></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="2"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token comment">// 4</span></pre></td></tr></table></figure><h3 id="set-方法"><a class="anchor" href="#set-方法">#</a> Set 方法</h3><ul><li><p>Set 常用方法：</p><ul><li>add (value)：添加某个元素，返回 Set 对象本身；</li></ul></li><li><p>delete (value)：从 set 中删除和这个值相等的元素，返回 boolean 类型；</p><ul><li>has (value)：判断 set 中是否存在某个元素，返回 boolean 类型；</li></ul></li><li><p>clear ()：清空 set 中所有的元素，没有返回值；</p></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="2"></td><td><pre>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token comment">// 6</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// 1.delete 传入的是需要删除的元素  不支持索引</span></pre></td></tr><tr><td data-num="7"></td><td><pre>set<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token comment">// 5</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">// 2.has 判断是否包含元素</span></pre></td></tr><tr><td data-num="11"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="12"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token comment">// 3.clear 清除所有元素</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment">// set.clear()</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment">// console.log(set.size) // 0</span></pre></td></tr></table></figure><h3 id="set-遍历"><a class="anchor" href="#set-遍历">#</a> Set 遍历</h3><ul><li><p>forEach (callback, [, thisArg])：通过 forEach 遍历 set；</p></li><li><p>Set 也是支持 for of 的遍历的</p></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 对 set 进行遍历</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// forEach</span></pre></td></tr><tr><td data-num="5"></td><td><pre>set<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1 2 3 4</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// for of</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> set<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token comment">// 1 2 3 4</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="weakset"><a class="anchor" href="#weakset">#</a> WeakSet</h2><ul><li><p>WeakSet 和 Set 区别</p><ul><li>区别一：WeakSet 中只能存放对象类型，不能存放基本数据类型；</li></ul></li><li><p>区别二：WeakSet 对元素的引用是弱引用，如果没有其他引用对某个对象进行引用，那么 GC 可以对该对象进行回收；</p></li><li><p>首先，WeakSet 的成员只能是对象，而不能是其他类型的值。</p></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> weakSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>weakSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// TypeError: Invalid value used in weak set</span></pre></td></tr></table></figure><ul><li>WeakSet 是一个构造函数，可以使用 <code>new</code>  命令，创建 WeakSet 数据结构。</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> weakSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><ul><li>作为构造函数，WeakSet 可以接受一个数组或类似数组的对象作为参数。（实际上，任何具有 Iterable 接口的对象，都可以作为 WeakSet 的参数。）该数组的所有成员，都会自动成为 WeakSet 实例对象的成员。</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakSet</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// WeakSet &#123;[1, 2], [3, 4]&#125;</span></pre></td></tr></table></figure><ul><li>上面代码中， <code>arr</code>  是一个数组，它有两个成员，也都是数组。将 <code>arr</code>  作为 WeakSet 构造函数的参数， <code>arr</code>  的成员会自动成为 WeakSet 的成员。</li><li>注意，是 <code>arr</code>  数组的成员成为 WeakSet 的成员，而不是 <code>arr</code>  数组本身。这意味着，数组的成员只能是对象。</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakSet</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError: Invalid value used in weak set</span></pre></td></tr></table></figure><h3 id="weakset-方法"><a class="anchor" href="#weakset-方法">#</a> WeakSet 方法</h3><ul><li>WeakSet.prototype.add (value)：向 WeakSet 实例添加一个新成员。</li><li>WeakSet.prototype.delete (value)：清除 WeakSet 实例的指定成员。</li><li>WeakSet.prototype.has (value)：返回一个布尔值，表示某个值是否在 WeakSet 实例之中。</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> lain <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">const</span> saber <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 1.add (value): 添加某个元素，返回 WeakSet 对象本身</span></pre></td></tr><tr><td data-num="6"></td><td><pre>ws<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>lain<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>ws<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>saber<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ws<span class="token punctuation">)</span> <span class="token comment">// WeakSet &#123;&#123;…&#125;,&#123;…&#125;&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">// 2.has (value)：判断 WeakSet 中是否存在某个元素，返回 boolean 类型</span></pre></td></tr><tr><td data-num="11"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ws<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>lain<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="12"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ws<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token comment">// 3.delete (value)：从 WeakSet 中删除和这个值相等的元素，返回 boolean 类型</span></pre></td></tr><tr><td data-num="15"></td><td><pre>ws<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>saber<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ws<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>saber<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></pre></td></tr></table></figure><h3 id="应用场景"><a class="anchor" href="#应用场景">#</a> 应用场景</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Characters</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    foo<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token function">sleeping</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>foo<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">'Characters.prototype.sleeping 只能在Characters的实例上调用！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">const</span> lain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Characters</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>lain<span class="token punctuation">.</span><span class="token function">sleeping</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><ul><li>上面代码保证了 <code>Characters</code>  的实例方法，只能在 <code>Characters</code>  的实例上调用。这里使用 WeakSet 的好处是， <code>lain</code>  对实例的引用，不会被计入内存回收机制，所以删除实例的时候，不用考虑 <code>lain</code> ，也不会出现内存泄漏。</li></ul><h2 id="map"><a class="anchor" href="#map">#</a> Map</h2><ul><li>另外一个新增的数据结构是 Map，用于存储映射关系。</li><li>但是在之前我们可以使用对象来存储映射关系，他们有什么区别呢？<ul><li>事实上我们对象存储映射关系只能用字符串（ES6 新增了 Symbol）作为属性名（key）；</li><li>某些情况下我们可能希望通过其他类型作为 key，比如对象，这个时候会自动将对象转成字符串来作为 key；</li></ul></li><li>之前对象是不能使用对象作为 key</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> lain <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  name<span class="token operator">:</span> <span class="token string">'lain'</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">const</span> saber <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  name<span class="token operator">:</span> <span class="token string">'saber'</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">const</span> characters <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token punctuation">[</span>lain<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">'lain'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token punctuation">[</span>saber<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">'saber'</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>characters<span class="token punctuation">)</span> <span class="token comment">// &#123;[object Object]: 'saber'&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment">// 对象作为 key 都会被转为 '[object Object]'，所以只输出下面一个是因为下面的将上面覆盖了</span></pre></td></tr></table></figure><ul><li>Map 则是允许我们对象类型来作为 key 的</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> lain <span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token string">'lain'</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>lain<span class="token punctuation">,</span> <span class="token string">'lain'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'obj'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">// Map(4) &#123;&#123;…&#125; => 'lain', 1 => 1, 'obj' => ƒ, null => undefined&#125;</span></pre></td></tr></table></figure><h3 id="map-传入-entries-格式"><a class="anchor" href="#map-传入-entries-格式">#</a> Map 传入 entries 格式</h3><p>错误格式</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// Iterator value 123 is not an entry object</span></pre></td></tr></table></figure><ul><li>正确传入格式： [[key, value], [key, value], [key, value]]</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'lain'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span> <span class="token comment">// Map(3) &#123;'name' => 'lain', 'age' => 16, 123 => 123&#125;</span></pre></td></tr></table></figure><h3 id="size属性返回-map-结构的成员总数"><a class="anchor" href="#size属性返回-map-结构的成员总数">#</a>  <code>size</code>  属性返回 Map 结构的成员总数。</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'lain'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token comment">// 3</span></pre></td></tr></table></figure><h3 id="map-方法"><a class="anchor" href="#map-方法">#</a> Map 方法</h3><h4 id="mapprototypesetkey-value"><a class="anchor" href="#mapprototypesetkey-value">#</a> <strong>Map.prototype.set(key, value)</strong></h4><ul><li><code>set</code>  方法设置键名 <code>key</code>  对应的键值为 <code>value</code> ，然后返回整个 Map 结构。如果 <code>key</code>  已经有值，则键值会被更新，否则就新生成该键。</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'lain'</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'saber'</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span> <span class="token comment">// Map(2) &#123;'lain' => 15, 'saber' => 16&#125;</span></pre></td></tr></table></figure><ul><li><code>set</code>  方法返回的是当前的 <code>Map</code>  对象，因此可以采用链式写法。</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'lain'</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'saber'</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>   </pre></td></tr><tr><td data-num="5"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span> <span class="token comment">// Map (3) &#123;'lain' => 15, 'saber' => 16, ' 樱岛麻衣 ' => 16&#125;</span></pre></td></tr></table></figure><h4 id="mapprototypegetkey"><a class="anchor" href="#mapprototypegetkey">#</a> <strong>Map.prototype.get(key)</strong></h4><ul><li><code>get</code>  方法读取 <code>key</code>  对应的键值，如果找不到 <code>key</code> ，返回 <code>undefined</code> 。</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'lain'</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 传入 key 获取 value</span></pre></td></tr><tr><td data-num="4"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'lain'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 15</span></pre></td></tr><tr><td data-num="5"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// undefined</span></pre></td></tr></table></figure><h4 id="mapprototypehaskey"><a class="anchor" href="#mapprototypehaskey">#</a> <strong>Map.prototype.has(key)</strong></h4><ul><li><code>has</code>  方法返回一个布尔值，表示某个键是否在当前 Map 对象之中。</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'lain'</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">'lain'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="4"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">'saber'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span></pre></td></tr></table></figure><h4 id="mapprototypedeletekey"><a class="anchor" href="#mapprototypedeletekey">#</a> <strong>Map.prototype.delete(key)</strong></h4><ul><li><code>delete</code>  方法删除某个键，返回 <code>true</code> 。如果删除失败，返回 <code>false</code> 。</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'lain'</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>map<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">'lain'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token comment">// 0</span></pre></td></tr></table></figure><h4 id="mapprototypeclear"><a class="anchor" href="#mapprototypeclear">#</a> <strong>Map.prototype.clear()</strong></h4><ul><li><code>clear</code>  方法清除所有成员，没有返回值。</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'lain'</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'saber'</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  </pre></td></tr><tr><td data-num="5"></td><td><pre>map<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token comment">// 0</span></pre></td></tr></table></figure><h3 id="遍历方法"><a class="anchor" href="#遍历方法">#</a> 遍历方法</h3><ul><li>forEach</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'lain'</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'saber'</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  </pre></td></tr><tr><td data-num="5"></td><td><pre>map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 15 'lain'  16'saber'  17 ' 樱岛麻衣'</span></pre></td></tr></table></figure><ul><li>for of</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'lain'</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'saber'</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  </pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> map<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token comment">//  ['lain', 15]  ['saber', 16]  [' 樱岛麻衣 ', 17]</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> map<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token comment">//  lain 15  saber 16  樱岛麻衣 17</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="weakmap"><a class="anchor" href="#weakmap">#</a> WeakMap</h2><ul><li>和 Map 类型相似的另外一个数据结构称之为 WeakMap，也是以键值对的形式存在的。</li><li>那么和 Map 有什么区别呢？</li><li><code>WeakMap</code>  和 <code>Map</code>  的区别:<ul><li><code>WeakMap</code>  只接受对象作为键名（ <code>null</code>  除外），不接受其他类型的值作为 <code>key</code> 。</li><li><code>WeakMap</code>  的键名所指向的对象，不计入垃圾回收机制。</li><li><code>WeakMap</code>  的 <code>key</code>  对对象想的引用是弱引用，如果没有其他引用引用这个对象，那么 GC 可以回收该对象；</li></ul></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'Lain'</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span> <span class="token comment">// Map(1) &#123;'Lain' => 16&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">const</span> weakMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>weakMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'Lain'</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token comment">// TypeError: Invalid value used as weak map key</span></pre></td></tr></table></figure><ul><li><code>WeakMap</code>  结构与 <code>Map</code>  结构类似，也是用于生成键值对的集合。</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// WeakMap 可以接受一个数组，作为构造函数的参数</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">const</span> wm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>arr1<span class="token punctuation">,</span> <span class="token string">'arr1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>arr2<span class="token punctuation">,</span> <span class="token string">'arr2'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>wm<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// arr1</span></pre></td></tr></table></figure><h3 id="weakmap-方法"><a class="anchor" href="#weakmap-方法">#</a> WeakMap 方法</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> lain <span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token string">'lain'</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> saber <span class="token operator">=</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'saber'</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">const</span> weakMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">//set 方法</span></pre></td></tr><tr><td data-num="7"></td><td><pre>weakMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>lain<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>weakMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>saber<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">//get 方法</span></pre></td></tr><tr><td data-num="11"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>weakMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>lain<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 16</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">//has 方法</span></pre></td></tr><tr><td data-num="14"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>weakMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>saber<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="15"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>weakMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token comment">//delete 方法</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token comment">// 删除失败返回 false</span></pre></td></tr><tr><td data-num="19"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>weakMap<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token comment">// 删除成功返回 false</span></pre></td></tr><tr><td data-num="22"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>weakMap<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>lain<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="23"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>weakMap<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>saber<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>weakMap<span class="token punctuation">)</span> <span class="token comment">// WeakMap &#123;&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token comment">// WeakMap 不能遍历</span></pre></td></tr><tr><td data-num="28"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>weakMap<span class="token punctuation">.</span>forEach<span class="token punctuation">)</span> <span class="token comment">// undefined</span></pre></td></tr></table></figure><h3 id="应用场景-响应式原理数据结构"><a class="anchor" href="#应用场景-响应式原理数据结构">#</a> 应用场景 -&gt; 响应式原理数据结构☟</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//lain 对象</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> lain <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  name<span class="token operator">:</span> <span class="token string">'lain'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  age<span class="token operator">:</span> <span class="token number">16</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">//lain 相关方法</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">function</span> <span class="token function">lainNameFn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'lain name 发生了改变，执行 lainNameFn1 函数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">function</span> <span class="token function">lainNameFn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'lain name 发生了改变，执行 lainNameFn2 函数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">function</span> <span class="token function">lainAgeFn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'lain age 发生了改变，执行 lainAgeFn1 函数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">function</span> <span class="token function">lainAgeFn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'lain age 发生了改变，执行 lainAgeFn2 函数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token comment">//saber 对象</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">const</span> saber <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  name<span class="token operator">:</span> <span class="token string">'saber'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="24"></td><td><pre>  age<span class="token operator">:</span> <span class="token number">17</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token comment">//saber 相关方法</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">function</span> <span class="token function">saberNameFn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'saber name 发生了改变，执行 saberNameFn1 函数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token keyword">function</span> <span class="token function">saberNameFn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'saber name 发生了改变，执行 saberNameFn2 函数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token keyword">function</span> <span class="token function">saberAgeFn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'saber age 发生了改变，执行 saberAgeFn1 函数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token keyword">function</span> <span class="token function">saberAgeFn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'saber age 发生了改变，执行 saberAgeFn2 函数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="40"></td><td><pre></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token comment">// 创建 Map 对象</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token keyword">const</span> lainMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token keyword">const</span> saberMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="44"></td><td><pre></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token comment">// 将属性名设置为 key, 相关方法设置为 value</span></pre></td></tr><tr><td data-num="46"></td><td><pre>lainMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>lainNameFn1<span class="token punctuation">,</span> lainNameFn2<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="47"></td><td><pre>lainMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>lainAgeFn1<span class="token punctuation">,</span> lainAgeFn2<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="48"></td><td><pre>saberMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>saberNameFn1<span class="token punctuation">,</span> saberNameFn2<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="49"></td><td><pre>saberMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>saberAgeFn1<span class="token punctuation">,</span> saberAgeFn2<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="50"></td><td><pre></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token comment">// 创建 WeakMap 对象</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token comment">// 因为如果有一天 lain 需要销毁，lain = null。使用 Map 会有依赖，不会被销毁。而 WeakMap 是弱引用，这正是它的价值所在～</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token keyword">const</span> weakMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="54"></td><td><pre></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token comment">// 将 lain/saber 对象作为 key, lainMap/saberMap 作为 value</span></pre></td></tr><tr><td data-num="56"></td><td><pre>weakMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>lain<span class="token punctuation">,</span> lainMap<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="57"></td><td><pre>weakMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>saber<span class="token punctuation">,</span> saberMap<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="58"></td><td><pre></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token comment">// 如果 lain 的 name 属性发生了改变</span></pre></td></tr><tr><td data-num="60"></td><td><pre>lain<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'樱岛麻衣'</span></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token keyword">const</span> lainNamesFns <span class="token operator">=</span> weakMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>lain<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token keyword">const</span> saberNamesFns <span class="token operator">=</span> weakMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>saber<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="63"></td><td><pre></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="65"></td><td><pre>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="66"></td><td><pre>    lainNamesFns<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="67"></td><td><pre>      <span class="token function">item</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="68"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="69"></td><td><pre>    saber<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'小鸟游六花'</span></pre></td></tr><tr><td data-num="70"></td><td><pre>    <span class="token function">resolve</span><span class="token punctuation">(</span>saberNamesFns<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="71"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="72"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="73"></td><td><pre><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="74"></td><td><pre>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="75"></td><td><pre>      res<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="76"></td><td><pre>       <span class="token function">item</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="77"></td><td><pre>     <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="78"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="79"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;set&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#set&quot;&gt;#&lt;/a&gt; Set&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在 ES6 之前，我们存储数据的结构主要有两种：数组、对象。&lt;/li&gt;
&lt;li&gt;在 ES6 中新增了另外两种数据结构：Set、Map，以及它们的另</summary>
      
    
    
    
    <category term="WebFE" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/WebFE/"/>
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/WebFE/JavaScript/"/>
    
    <category term="JavaScript Advanced" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/WebFE/JavaScript/JavaScript-Advanced/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript/"/>
    
    <category term="ES6+" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/ES6/"/>
    
    <category term="JavaScript Advanced" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript-Advanced/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript ES6+ に</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2021/10/24/WebFE/JavaScript/Advanced/ES6+%E3%81%AB/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2021/10/24/WebFE/JavaScript/Advanced/ES6+%E3%81%AB/</id>
    <published>2021-10-24T11:23:11.000Z</published>
    <updated>2022-01-15T12:06:35.027Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模板字符串"><a class="anchor" href="#模板字符串">#</a> 模板字符串</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">现在是北京时间： </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> 年 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>date<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> 月 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>date<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> 日</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">function</span> <span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token keyword">return</span> date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">function</span> <span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token keyword">return</span> date<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">function</span> <span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token keyword">return</span> date<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">现在是北京时间： </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> 年 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> 月 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> 日</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="标签模板字符串"><a class="anchor" href="#标签模板字符串">#</a> 标签模板字符串</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">my name is saber</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">'saber'</span></pre></td></tr><tr><td data-num="5"></td><td><pre>foo<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span> <span class="token comment">// 调用函数</span></pre></td></tr></table></figure><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// name [ 'saber 16' ] age undefined</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">name: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> age: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// name: saber 16 age: undefined</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">'saber'</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">16</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>foo<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">saber 16</span><span class="token template-punctuation string">`</span></span>  <span class="token comment">// 参数都被放到一个数组里面</span></pre></td></tr></table></figure><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// name [ 'saber ', ' heixiuxiu~~ ' ] age 16</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">name: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> age: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// name: saber , heixiuxiu~~  age: 16</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">'saber'</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">16</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>foo<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">saber </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> heixiuxiu~~ </span><span class="token template-punctuation string">`</span></span>  <span class="token comment">// $&#123;&#125; 通过这种方式切断数组</span></pre></td></tr></table></figure><h2 id="函数默认参数"><a class="anchor" href="#函数默认参数">#</a> 函数默认参数</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">'saber'</span><span class="token punctuation">,</span> age <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">name: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> age: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// name: saber age: 16</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="对象参数和默认值以及解构"><a class="anchor" href="#对象参数和默认值以及解构">#</a> 对象参数和默认值以及解构</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>name<span class="token punctuation">,</span> age <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token string">'saber'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">name: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> age: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// name: saber age: 16</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="传对象其中之一参数并赋默认值和解构"><a class="anchor" href="#传对象其中之一参数并赋默认值和解构">#</a> 传对象其中之一参数并赋默认值和解构</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span>name<span class="token punctuation">,</span> age <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">name: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> age: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// name: saber age: 16</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token string">'saber'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="有默认值的形参最好放在最后"><a class="anchor" href="#有默认值的形参最好放在最后">#</a> 有默认值的形参最好放在最后</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token number">30</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="默认值的形参放在前面解决方法"><a class="anchor" href="#默认值的形参放在前面解决方法">#</a> 默认值的形参放在前面解决方法</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">z <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">undefined</span> <span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 60 这种是可行的</span></pre></td></tr><tr><td data-num="5"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 30 不可行</span></pre></td></tr><tr><td data-num="6"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 30 不可行</span></pre></td></tr></table></figure><h3 id="有默认值函数length属性-对默认值前面的参数属性length才有效"><a class="anchor" href="#有默认值函数length属性-对默认值前面的参数属性length才有效">#</a> 有默认值函数 length 属性 对默认值前面的参数属性 length 才有效</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">w<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">,</span> z</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">return</span> w <span class="token operator">+</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment">// 2</span></pre></td></tr></table></figure><h3 id="函数剩余参数"><a class="anchor" href="#函数剩余参数">#</a> 函数剩余参数</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token comment">// 1 [ 2, 3, 4 ]</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token comment">// 1 2 3 4</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span></pre></td></tr></table></figure><ul><li>ES6 中引用了 rest parameter，可以将不定数量的参数放入到一个数组中：<ul><li>如果最后一个参数是 ... 为前缀的，那么它会将剩余的参数放到该参数中，并且作为一个数组；</li></ul></li></ul><p>剩余参数和 arguments 有什么区别呢？</p><ul><li>剩余参数只包含那些没有对应形参的实参，而 arguments 对象包含了传给函数的所有实参；</li><li>arguments 对象不是一个真正的数组，而 rest 参数是一个真正的数组，可以进行数组的所有操作；</li><li>arguments 是早期的 ECMAScript 中为了方便去获取所有的参数提供的一个数据结构，而 rest 参数是 ES6 中提供并且希望以此来替代 arguments 的；</li><li>剩余参数必须放到最后一个位置，否则会报错</li></ul><h3 id="箭头函数"><a class="anchor" href="#箭头函数">#</a> 箭头函数</h3><ul><li>箭头函数是没有显式原型的，所以不能作为构造函数，使用 new 来创建对象；</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">// console.log(arguments) // arguments is not defined</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// undefined</span></pre></td></tr></table></figure><h2 id="展开语法"><a class="anchor" href="#展开语法">#</a> 展开语法</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> friends <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'薇尔莉特'</span><span class="token punctuation">,</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'小鸟游六花'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> saber <span class="token operator">=</span> <span class="token string">'saber'</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">const</span> lain <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  name<span class="token operator">:</span> <span class="token string">'lain'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  friends<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'saber'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// 1. 函数调用</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">f1<span class="token punctuation">,</span> f2<span class="token punctuation">,</span> f3<span class="token punctuation">,</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f1<span class="token punctuation">,</span> f2<span class="token punctuation">,</span> f3<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> friends<span class="token punctuation">)</span> <span class="token comment">// 薇尔莉特 樱岛麻衣 小鸟游六花</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token function">foo</span><span class="token punctuation">(</span><span class="token operator">...</span>friends<span class="token punctuation">)</span> <span class="token comment">// 薇尔莉特 樱岛麻衣 小鸟游六花</span></pre></td></tr><tr><td data-num="14"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span>saber<span class="token punctuation">)</span> <span class="token comment">// s a b e r</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment">// 2. 构造数组</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">const</span> newFriends <span class="token operator">=</span> <span class="token punctuation">[</span>saber<span class="token punctuation">,</span> <span class="token operator">...</span>friends<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="18"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newFriends<span class="token punctuation">)</span> <span class="token comment">// ['saber', ' 薇尔莉特 ', ' 樱岛麻衣 ', ' 小鸟游六花 ']</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">// 3. 构建对象时</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">const</span> newLain <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>lain<span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">16</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newLain<span class="token punctuation">)</span> <span class="token comment">// &#123; name: 'lain', friends: [ 'saber' ], age: 16 &#125;</span></pre></td></tr></table></figure><h2 id="展开语法-浅拷贝"><a class="anchor" href="#展开语法-浅拷贝">#</a> 展开语法 -&gt; 浅拷贝</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> lain <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  name<span class="token operator">:</span> <span class="token string">'lain'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  friends<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'saber'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">const</span> newLain <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token operator">...</span>lain<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  age<span class="token operator">:</span> <span class="token number">16</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>newLain<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'小鸟游六花'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lain<span class="token punctuation">)</span> <span class="token comment">// &#123;name: 'lain', friends: [ 'saber', ' 小鸟游六花 '] &#125;</span></pre></td></tr></table></figure><h2 id="数值表示"><a class="anchor" href="#数值表示">#</a> 数值表示</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> n1 <span class="token operator">=</span> <span class="token number">100</span> <span class="token comment">// 十进制 </span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">const</span> n2 <span class="token operator">=</span> <span class="token number">0b100</span> <span class="token comment">// 二进制 binary</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">const</span> n3 <span class="token operator">=</span> <span class="token number">0o100</span> <span class="token comment">// 八进制 octonary</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">const</span> n4 <span class="token operator">=</span> <span class="token number">0x100</span> <span class="token comment">// 十六进制 hexadecimal</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> n3<span class="token punctuation">,</span> n4<span class="token punctuation">)</span> <span class="token comment">// 100 4 64 256</span></pre></td></tr></table></figure><h2 id="连接符"><a class="anchor" href="#连接符">#</a> 连接符</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> n5 <span class="token operator">=</span> <span class="token number">10_000_000</span></pre></td></tr><tr><td data-num="2"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n5<span class="token punctuation">)</span> <span class="token comment">// 10000000</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">const</span> n6 <span class="token operator">=</span> <span class="token number">10_0.50</span></pre></td></tr><tr><td data-num="5"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n6<span class="token punctuation">)</span> <span class="token comment">// 100.5</span></pre></td></tr></table></figure><h2 id="symbol"><a class="anchor" href="#symbol">#</a> Symbol</h2><ul><li>ES2019 (ES10) 中，Symbol 还有一个描述符 (description)</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> s1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'s1'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> s2 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'s2'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1 <span class="token operator">===</span> s2<span class="token punctuation">)</span> <span class="token comment">// false</span></pre></td></tr><tr><td data-num="4"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>description<span class="token punctuation">)</span> <span class="token comment">// s1</span></pre></td></tr></table></figure><ul><li>Symbol 值作为 key</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 1. 在定义对象字面量时使用</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> lain <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'lain'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">const</span> saber <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'saber'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">const</span> characters <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token punctuation">[</span>lain<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">'lain'</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>characters<span class="token punctuation">)</span> <span class="token comment">// &#123;Symbol(lain): 'lain'&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">// 2. 新增属性</span></pre></td></tr><tr><td data-num="12"></td><td><pre>characters<span class="token punctuation">[</span>saber<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'saber'</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>characters<span class="token punctuation">)</span> <span class="token comment">// &#123;Symbol(lain): 'lain', Symbol(saber): 'saber'&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment">// 3.Object.defineProprtty 方式</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">const</span> Neko <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'Neko'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>characters<span class="token punctuation">,</span> Neko<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  configurable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  writable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="22"></td><td><pre>  value<span class="token operator">:</span> <span class="token string">'Neko'</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>characters<span class="token punctuation">)</span> <span class="token comment">// &#123;Symbol(lain): 'lain', Symbol(saber): 'saber', Symbol(Neko): 'Neko'&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token comment">// 4. 获取 key</span></pre></td></tr><tr><td data-num="27"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>characters<span class="token punctuation">[</span>lain<span class="token punctuation">]</span><span class="token punctuation">,</span> characters<span class="token punctuation">[</span>saber<span class="token punctuation">]</span><span class="token punctuation">,</span> characters<span class="token punctuation">[</span>Neko<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// lain saber Neko</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token comment">// 5. 使用 Symbol 作为 key 的属性名，在遍历 / Object.keys 等中是获取不到这些 Symbol 值</span></pre></td></tr><tr><td data-num="30"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>characters<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// []</span></pre></td></tr><tr><td data-num="31"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>characters<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// []</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token comment">// 6. 通过 Object.getOwnPropertySymbols 可以获取到 Symbol 值</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token keyword">const</span> skeys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertySymbols</span><span class="token punctuation">(</span>characters<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>skeys<span class="token punctuation">)</span> <span class="token comment">// [Symbol(lain), Symbol(saber), Symbol(Neko)]</span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token comment">// 7. 遍历 Symbol </span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> skey <span class="token keyword">of</span> skeys<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>skey<span class="token punctuation">)</span> <span class="token comment">// Symbol(lain)  Symbol(saber)  ymbol(Neko)</span></pre></td></tr><tr><td data-num="40"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>characters<span class="token punctuation">[</span>skey<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// lain saber Neko</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="42"></td><td><pre></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token comment">// 8.Symbol 函数名</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre>characters<span class="token punctuation">[</span>foo<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>characters<span class="token punctuation">[</span>foo<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// foo</span></pre></td></tr></table></figure><ul><li>Symbol.for(key)</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 使传入的 Symbol 值一样  Symbol.for</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> s1 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">'Hello World'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">const</span> s2 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">'Hello World'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1 <span class="token operator">===</span> s2<span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// 获取 key  Symbol.keyFo</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">const</span> key <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">keyFor</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token comment">// Hello World</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">// 将上面的 key 继续传入，这样也是一样的</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">const</span> s3 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s3 <span class="token operator">===</span> s1<span class="token punctuation">)</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;模板字符串&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#模板字符串&quot;&gt;#&lt;/a&gt; 模板字符串&lt;/h2&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;figcaption data-lang=&quot;JavaScript&quot;&gt;&lt;/figcaption</summary>
      
    
    
    
    <category term="WebFE" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/WebFE/"/>
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/WebFE/JavaScript/"/>
    
    <category term="JavaScript Advanced" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/WebFE/JavaScript/JavaScript-Advanced/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript/"/>
    
    <category term="ES6+" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/ES6/"/>
    
    <category term="JavaScript Advanced" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript-Advanced/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript ES6+ いち</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2021/10/22/WebFE/JavaScript/Advanced/ES6+%E3%81%84%E3%81%A1/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2021/10/22/WebFE/JavaScript/Advanced/ES6+%E3%81%84%E3%81%A1/</id>
    <published>2021-10-22T04:31:56.000Z</published>
    <updated>2022-01-16T09:54:23.091Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字面量增强写法"><a class="anchor" href="#字面量增强写法">#</a> 字面量增强写法</h2><ul><li>ES6 中对 对象字面量 进行了增强，称之为 Enhanced object literals（增强对象字面量）。</li><li>字面量的增强主要包括下面几部分：</li><li>属性的简写：Property Shorthand</li><li>方法的简写：Method Shorthand</li><li>计算属性名：Computed Property Names</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> friends <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'小鸟游六花'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">const</span> Lain <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token comment">// 1.property shorthand (属性的简写)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  friends<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token comment">// 2.method shorthand (方法的简写)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token comment">// 3.computed property name (计算属性名)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token punctuation">[</span>friends <span class="token operator">+</span> <span class="token string">'->'</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">'蝶祈'</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>Lain<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token comment">// Lain [friends + '->'] = "蝶祈"</span></pre></td></tr><tr><td data-num="18"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Lain<span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="数据解构"><a class="anchor" href="#数据解构">#</a> 数据解构</h2><ul><li>ES6 中新增了一个从数组或对象中方便获取数据的方法，称之为解构 Destructuring。</li><li>我们可以划分为：数组的解构和对象的解构。</li><li>数组的解构： 基本解构过程，顺序解构，解构出数组，默认值</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> friends <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"樱岛麻衣"</span><span class="token punctuation">,</span> <span class="token string">"蝶祈"</span><span class="token punctuation">,</span> <span class="token string">"小鸟游六花"</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 对数组的解构: []</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">const</span> <span class="token punctuation">[</span>f1<span class="token punctuation">,</span> f2<span class="token punctuation">,</span> f3<span class="token punctuation">]</span> <span class="token operator">=</span> friends</pre></td></tr><tr><td data-num="5"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f1<span class="token punctuation">,</span> f2<span class="token punctuation">,</span> f3<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 解构后面的元素</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> fx<span class="token punctuation">]</span> <span class="token operator">=</span> friends</pre></td></tr><tr><td data-num="9"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fx<span class="token punctuation">)</span> <span class="token comment">// 小鸟游六花</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">// 解构出一个元素，后面的元素放到一个新数组中</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">const</span> <span class="token punctuation">[</span>fr1<span class="token punctuation">,</span> <span class="token operator">...</span>fris<span class="token punctuation">]</span> <span class="token operator">=</span> friends</pre></td></tr><tr><td data-num="13"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fr1<span class="token punctuation">,</span> fris<span class="token punctuation">)</span> <span class="token comment">// 樱岛麻衣，[' 蝶祈 ', ' 小鸟游六花 ']</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment">// 解构的默认值</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">const</span> <span class="token punctuation">[</span>fri1<span class="token punctuation">,</span> fri2<span class="token punctuation">,</span> fri3<span class="token punctuation">,</span> fri4 <span class="token operator">=</span> <span class="token string">"saber"</span><span class="token punctuation">]</span> <span class="token operator">=</span> friends</pre></td></tr><tr><td data-num="17"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fri4<span class="token punctuation">)</span> <span class="token comment">// saber</span></pre></td></tr></table></figure><ul><li>对象的解构： 基本解构过程，任意顺序，重命名，默认值</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> lain <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  name<span class="token operator">:</span> <span class="token string">"lain"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  age<span class="token operator">:</span> <span class="token number">16</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// 对象的解构: &#123;&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> age <span class="token punctuation">&#125;</span> <span class="token operator">=</span> lain</pre></td></tr><tr><td data-num="8"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token comment">// lain 16</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> newName <span class="token punctuation">&#125;</span> <span class="token operator">=</span> lain</pre></td></tr><tr><td data-num="12"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newName<span class="token punctuation">)</span> <span class="token comment">// lain</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token comment">// 命名新名字 & amp; 默认值</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> friends<span class="token operator">:</span> newFriends <span class="token operator">=</span> <span class="token string">"樱岛麻衣"</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> lain</pre></td></tr><tr><td data-num="16"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newFriends<span class="token punctuation">)</span> <span class="token comment">// 樱岛麻衣</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token comment">// 参数解构</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span>name<span class="token punctuation">,</span> age<span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token comment">// lain 16</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token function">foo</span><span class="token punctuation">(</span>lain<span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="var-let-const"><a class="anchor" href="#var-let-const">#</a> var &amp; let &amp; const</h2><ul><li>在 ES5 中我们声明变量都是使用的 var 关键字，从 ES6 开始新增了两个关键字可以声明变量：let、const<ul><li>let、const 在其他编程语言中都是有的，所以也并不是新鲜的关键字；</li><li>但是 let、const 确确实实给 JavaScript 带来一些不一样的东西；</li></ul></li><li>let 关键字：从直观的角度来说，let 和 var 是没有太大的区别的，都是用于声明一个变量</li><li>const 关键字是 constant 的单词的缩写，表示常量、衡量的意思；它表示保存的数据一旦被赋值，就不能被修改；但是如果赋值的是引用类型，那么可以通过引用找到对应的对象，修改对象的内容；</li><li>注意：let、const 是不允许重复声明；</li></ul><h3 id="let-const-基本使用"><a class="anchor" href="#let-const-基本使用">#</a> let &amp; const 基本使用</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'saber'</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">16</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">//age = 17 // 不可重发声明</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">const</span> lain <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    name<span class="token operator">:</span> <span class="token string">'lain'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    friends<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'薇尔莉特'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// 这种引用类型赋值是可以的</span></pre></td></tr><tr><td data-num="9"></td><td><pre>lain<span class="token punctuation">.</span>friends <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'saber'</span><span class="token punctuation">]</span></pre></td></tr></table></figure><h3 id="let-const-有没有作用域提升呢"><a class="anchor" href="#let-const-有没有作用域提升呢">#</a> let &amp; const 有没有作用域提升呢？</h3><ul><li>在执行上下文的词法环境创建出来的时候，变量事实上已经被创建了，只是这个变量是不能被访问的。<ul><li>那么变量已经有了，但是不能被访问，是不是一种作用域的提升呢？</li></ul></li><li>事实上维基百科并没有对作用域提升有严格的概念解释，那么我们自己从字面量上理解；<ul><li>作用域提升：在声明变量的作用域中，如果这个变量可以在声明之前被访问，那么我们可以称之为作用域提升；</li><li>在这里，它虽然被创建出来了，但是不能被访问，我认为不能称之为作用域提升；</li></ul></li><li>所以我的观点是 let、const 没有进行作用域提升，但是会在解析阶段被创建出来。</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'saber'</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token string">'16'</span></pre></td></tr></table></figure><p>可以参考在 Google 测试的结果！</p><p><img data-src="let_const.png" alt="let_const" /></p><h3 id="var-全局污染"><a class="anchor" href="#var-全局污染">#</a> var 全局污染</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'saber'</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token string">'16'</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">var</span> <span class="token function-variable function">pageXOffset</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>pageXOffset<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// saber</span></pre></td></tr><tr><td data-num="7"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment">// 16</span></pre></td></tr><tr><td data-num="8"></td><td><pre>window<span class="token punctuation">.</span><span class="token function">pageXOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// ƒ () &#123; console.log(window.pageXOffset) &#125;</span></pre></td></tr></table></figure><ul><li>通过 var 声明，会被记录在全局，这样有可能造成 事件 被覆盖，这会带来很大的安全隐患。</li></ul><p>变量被保存到 VariableMap 中</p><ul><li><p>我们声明的变量和环境记录是被添加到变量环境中的：</p><ul><li>但是标准有没有规定这个对象是 window 对象或者其他对象呢？</li><li>其实并没有，那么 JS 引擎在解析的时候，其实会有自己的实现；</li><li>比如 v8 中其实是通过 VariableMap 的一个 hashmap 来实现它们的存储的。</li><li>那么 window 对象呢？而 window 对象是早期的 GO 对象，在最新的实现中其实是浏览器添加的全局对象，并且一直保持了 window 和 var 之间值的相等性；</li></ul><figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// A hash map to support fast variable declaration and lookup.</span></pre></td></tr><tr><td data-num="2"></td><td><pre>class VariableMap <span class="token operator">:</span> public ZoneHashMap <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    public<span class="token operator">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    explicit <span class="token function">VariableMap</span><span class="token punctuation">(</span>Zone<span class="token operator">*</span> zone<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token function">VariableMap</span><span class="token punctuation">(</span><span class="token keyword">const</span> VariableMap<span class="token operator">&amp;</span> other<span class="token punctuation">,</span> Zone<span class="token operator">*</span> Zone<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    </pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token function">VariableMap</span><span class="token punctuation">(</span>VariableMap<span class="token operator">&amp;&amp;</span> other<span class="token punctuation">)</span> V8_NOEXCERT <span class="token operator">:</span> <span class="token function">ZoneHashMap</span><span class="token punctuation">(</span>std<span class="token operator">::</span><span class="token function">move</span><span class="token punctuation">(</span>other<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure></li></ul><h3 id="es6块级作用域"><a class="anchor" href="#es6块级作用域">#</a> ES6 块级作用域</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// ES6 的代码块级作用域</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// 对 let/const/function/class 声明的类型是有效</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">"saber"</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"foo function"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token keyword">class</span> <span class="token class-name">Characters</span>  <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">// console.log(foo) </span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">// 不同的浏览器有不同实现的 (大部分浏览器为了兼容以前的代码，让 function 是没有块级作用域)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment">// var lain = new Characters() // Characters is not defined</span></pre></td></tr></table></figure><h3 id="if-switch-for-块级作用域"><a class="anchor" href="#if-switch-for-块级作用域">#</a> if &amp; switch &amp; for 块级作用域</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//if 语句的代码就是块级作用域</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">"foo"</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token string">"bar"</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span>  <span class="token comment">//var 是没有块级作用域的</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// console.log(bar) // bar is not defined</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">//switch 语句的代码也是块级作用域</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">switch</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token keyword">case</span> <span class="token string">"red"</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">"foo"</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token string">"bar"</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token comment">//var 是没有块级作用域的</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">// console.log(bar) // bar is not defined</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token comment">//for 语句的代码也是块级作用域</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment">// 3</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token comment">// console.log(j) // j is not defined</span></pre></td></tr></table></figure><h3 id="let-const-暂时性死区"><a class="anchor" href="#let-const-暂时性死区">#</a> let &amp; const 暂时性死区</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token comment">//  Cannot access 'flag' before initialization</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token comment">// Cannot access 'flag' before initialization</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="经典面试题"><a class="anchor" href="#经典面试题">#</a> 经典面试题</h3><ul><li><p>点击按钮获取元素和下标？</p></li><li><p>一般使用立即执行函数闭包形式来解决这个问题</p></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">const</span> btns <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> btns<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>      btns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">第</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>i<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">个按钮被点击</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment">// 4</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><ul><li>使用 let 解决</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">const</span> btns <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> btns<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>      btns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">第</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>i<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">个按钮被点击</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token comment">// console.log(i) // i is not defined</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="var-let-const-的选择"><a class="anchor" href="#var-let-const-的选择">#</a> var &amp; let &amp; const 的选择</h3><ul><li>那么在开发中，我们到底应该选择使用哪一种方式来定义我们的变量呢？</li><li>对于 var 的使用：<ul><li>我们需要明白一个事实，var 所表现出来的特殊性：比如作用域提升、window 全局对象、没有块级作用域等都是一些历史遗留问题；</li></ul></li><li>其实是 JavaScript 在设计之初的一种语言缺陷；<ul><li>当然目前市场上也在利用这种缺陷出一系列的面试题，来考察大家对 JavaScript 语言本身以及底层的理解；</li><li>但是在实际工作中，我们可以使用最新的规范来编写，也就是不再使用 var 来定义变量了；</li></ul></li><li>对于 let、const：<ul><li>对于 let 和 const 来说，是目前开发中推荐使用的；</li><li>我们会有限推荐使用 const，这样可以保证数据的安全性不会被随意的篡改；</li><li>只有当我们明确知道一个变量后续会需要被重新赋值时，这个时候再使用 let；</li><li>这种在很多其他语言里面也都是一种约定俗成的规范，尽量我们也遵守这种规范；</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;字面量增强写法&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#字面量增强写法&quot;&gt;#&lt;/a&gt; 字面量增强写法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ES6 中对 对象字面量 进行了增强，称之为 Enhanced object literals（增强对象字面量）。&lt;/li</summary>
      
    
    
    
    <category term="WebFE" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/WebFE/"/>
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/WebFE/JavaScript/"/>
    
    <category term="JavaScript Advanced" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/WebFE/JavaScript/JavaScript-Advanced/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript/"/>
    
    <category term="ES6+" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/ES6/"/>
    
    <category term="JavaScript Advanced" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript-Advanced/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 面向对象 さん</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2021/10/20/WebFE/JavaScript/Advanced/object_oriented_%E3%81%95%E3%82%93/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2021/10/20/WebFE/JavaScript/Advanced/object_oriented_%E3%81%95%E3%82%93/</id>
    <published>2021-10-20T06:14:52.000Z</published>
    <updated>2022-01-16T09:55:50.760Z</updated>
    
    <content type="html"><![CDATA[<h2 id="class-定义方式"><a class="anchor" href="#class-定义方式">#</a> class 定义方式</h2><ul><li>我们会发现，按照前面的构造函数形式创建 类，不仅仅和编写普通的函数过于相似，而且代码并不容易理解。<ul><li>在 ES6（ECMAScript2015）新的标准中使用了 class 关键字来直接定义类；</li><li>但是类本质上依然是前面所讲的构造函数、原型链的语法糖而已；</li><li>所以学好了前面的构造函数、原型链更有利于我们理解类的概念和继承关系；</li></ul></li><li>那么，如何使用 class 来定义一个类呢？<ul><li>可以使用两种方式来声明类：类声明和类表达式；</li></ul></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 类的声明</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 类的表达式</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// const Animal = class &#123;&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 研究一下类的特性</span></pre></td></tr><tr><td data-num="8"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// &#123;constructor: ƒ&#125;/node -> &#123;&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span> <span class="token comment">// constructor: ƒ, …&#125;/node -> [Object: null prototype] &#123;&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span> <span class="token comment">// [class Person]</span></pre></td></tr><tr><td data-num="11"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> Person<span class="token punctuation">)</span> <span class="token comment">// function</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr></table></figure><h2 id="class-构造函数"><a class="anchor" href="#class-构造函数">#</a> class 构造函数</h2><ul><li><p>如果我们希望在创建对象的时候给类传递一些参数，这个时候应该如何做呢？</p><ul><li>每个类都可以有一个自己的构造函数（方法），这个方法的名称是固定的 constructor；</li><li>当我们通过 new 操作符，操作一个类的时候会调用这个类的构造函数 constructor；</li><li>每个类只能有一个构造函数，如果包含多个构造函数，那么会抛出异常；</li></ul></li><li><p>当我们通过 new 关键字操作类的时候，会调用这个 constructor 函数，并且执行如下操作：</p><ul><li>在内存中创建一个新的对象（空对象）；</li><li>这个对象内部的 [[prototype]] 属性会被赋值为该类的 prototype 属性；</li><li>构造函数内部的 this，会指向创建出来的新对象；</li><li>执行构造函数的内部代码（函数体代码）；</li><li>如果构造函数没有返回非空对象，则返回创建出来的新对象；</li></ul></li></ul><h2 id="class-方法定义"><a class="anchor" href="#class-方法定义">#</a> class 方法定义</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> characters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'稚名真白'</span><span class="token punctuation">,</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'薇尔莉特'</span><span class="token punctuation">,</span> <span class="token string">'和泉纱雾'</span><span class="token punctuation">,</span> <span class="token string">'小鸟游六花'</span> <span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// 类的实例方法</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Characters</span> <span class="token punctuation">&#123;</span>    </pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>_friends <span class="token operator">=</span> <span class="token string">'saber'</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token function">sleeping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">' sleeping'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token comment">// 类的访问器方法</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token keyword">get</span> <span class="token function">friends</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token comment">// 拦截访问器操作</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_friends</pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token comment">// 拦截设置操作</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token keyword">set</span> <span class="token function">friends</span><span class="token punctuation">(</span><span class="token parameter">newFriends</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>_friends <span class="token operator">=</span> newFriends</pre></td></tr><tr><td data-num="21"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token comment">// 类的静态方法</span></pre></td></tr><tr><td data-num="24"></td><td><pre>  <span class="token keyword">static</span> <span class="token function">randomCharacters</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Characters</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>characters<span class="token punctuation">[</span><span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> characters<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>Object<span class="token punctuation">.</span>getOwnPropertyDescriptors</pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">const</span> lain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Characters</span><span class="token punctuation">(</span><span class="token string">"lain"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lain<span class="token punctuation">)</span> <span class="token comment">// Person &#123;name: 'lain'&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>lain<span class="token punctuation">.</span><span class="token function">sleeping</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre>lain<span class="token punctuation">.</span>friends <span class="token operator">=</span> <span class="token string">'nekoaimer'</span></pre></td></tr><tr><td data-num="35"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lain<span class="token punctuation">)</span> <span class="token comment">// Character &#123;name: 'lain', _friends: 'nekoaimer'&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token comment">// 随机打印创建角色</span></pre></td></tr><tr><td data-num="38"></td><td><pre>characters<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Characters<span class="token punctuation">.</span><span class="token function">randomCharacters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="class-继承与重写"><a class="anchor" href="#class-继承与重写">#</a> class 继承与重写</h2><ul><li>我们会发现在下面的代码中我使用了一个 super 关键字，这个 super 关键字有不同的使用方式：<ul><li>注意：在子（派生）类的构造函数中使用 this 或者返回默认对象之前，必须先通过 super 调用父类的构造函数！</li><li>super 的使用位置有三个：子类的构造函数、实例方法、静态方法；</li></ul></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Characters</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token function">sleeping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Characters sleeping~'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">static</span> <span class="token function">sleepingStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </pre></td></tr><tr><td data-num="10"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Characters sleepingStatic~</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token comment">// Lain 称之为子类 (派生类)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Lain</span> <span class="token keyword">extends</span> <span class="token class-name">Characters</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token comment">// JS 引擎在解析子类的时候就有要求，如果我们有实现继承</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token comment">// 那么子类的构造方法中，在使用 this 之前</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age</pre></td></tr><tr><td data-num="21"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token function">drinking</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Lain drinking~</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token comment">//sleeping 方法重写 </span></pre></td></tr><tr><td data-num="28"></td><td><pre>  <span class="token function">sleeping</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">sleeping</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 调用父类方法执行逻辑再执行子类执行逻辑</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Lain sleeping~~~</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre>  <span class="token comment">// 重写静态方法</span></pre></td></tr><tr><td data-num="34"></td><td><pre>  <span class="token keyword">static</span> <span class="token function">sleepingStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">sleepingStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 调用父类静态方法执行逻辑再执行子类静态执行逻辑</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'sleepingStatic~~~'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="39"></td><td><pre></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token keyword">const</span> lain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Lain</span><span class="token punctuation">(</span><span class="token string">"lain"</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="41"></td><td><pre>lain<span class="token punctuation">.</span><span class="token function">sleeping</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Characters sleeping~ &amp; Lain sleeping~~~</span></pre></td></tr><tr><td data-num="42"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lain<span class="token punctuation">)</span> <span class="token comment">// Lain &#123;name: 'lain', age: 16&#125;</span></pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre>Lain<span class="token punctuation">.</span><span class="token function">sleepingStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Characters sleepingStatic~ &amp; sleepingStatic~~~</span></pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token comment">// console.log(Object.getOwnPropertyDescriptors(lain.__proto__))</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token comment">// console.log(Object.getOwnPropertyDescriptors(lain.__proto__.__proto__))</span></pre></td></tr></table></figure><h2 id="class-继承内置"><a class="anchor" href="#class-继承内置">#</a> class 继承内置</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">_Array</span> <span class="token keyword">extends</span> <span class="token class-name">Array</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token function">arrLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length</pre></td></tr><tr><td data-num="4"></td><td><pre> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">_Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">arrLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 3</span></pre></td></tr></table></figure><h2 id="class-实现混入"><a class="anchor" href="#class-实现混入">#</a> class 实现混入</h2><ul><li>JavaScript 的类只支持单继承：也就是只能有一个父类<ul><li>那么在开发中我们我们需要在一个类中添加更多相似的功能时，应该如何来做呢？</li><li>这个时候我们可以使用混入（mixin）；</li></ul></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Characters</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 在 JS 中类只能有一个父类：单继承</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Lain</span> <span class="token keyword">extends</span> <span class="token class-name">Characters</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  </pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">function</span> <span class="token function">mixinCharacters</span><span class="token punctuation">(</span><span class="token parameter">BaseClass</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> BaseClass <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token function">sleeping</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"sleeping~"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">const</span> NewLain <span class="token operator">=</span> <span class="token function">mixinCharacters</span><span class="token punctuation">(</span>Lain<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">const</span> lain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NewLain</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>lain<span class="token punctuation">.</span><span class="token function">sleeping</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="javascript-多态"><a class="anchor" href="#javascript-多态">#</a> JavaScript 多态</h2><ul><li><p>传统的面向对象多态是有三个前提:</p></li><li><p>必须有继承 (是多态的前提)</p></li><li><p>必须有重写 (子类重写父类的方法)</p></li><li><p>必须有父类引用指向子类对象</p></li></ul><h3 id="ts-多态"><a class="anchor" href="#ts-多态">#</a> TS 多态</h3><figure class="highlight tsx"><figcaption data-lang="React TSX"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Characters</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token function">getFriends</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">return</span> <span class="token string">'伊莉雅'</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Lain</span> <span class="token keyword">extends</span> <span class="token class-name">Characters</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token function">getFriends</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">return</span> <span class="token string">'樱岛麻衣'</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Saber</span> <span class="token keyword">extends</span> <span class="token class-name">Characters</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token function">getFriends</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">return</span> <span class="token string">'小鸟游六花'</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">var</span> lain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Lain</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">var</span> saber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Saber</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token comment">// 多态：当对不同的数据类型执行同一个操作时，如果表现出来的行为 (形态) 不一样，那么就是多态的体现.</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">function</span> <span class="token function">getFriends</span><span class="token punctuation">(</span><span class="token parameter">Characters<span class="token operator">:</span> Characters</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Characters<span class="token punctuation">.</span><span class="token function">getFriends</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token function">getFriends</span><span class="token punctuation">(</span>lain<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token function">getFriends</span><span class="token punctuation">(</span>saber<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">export</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="js-多态"><a class="anchor" href="#js-多态">#</a> JS 多态</h3><ul><li><p>JavaScript 有多态吗？</p><ul><li><p>维基百科对多态的定义：多态（英语：polymorphism）指为不同数据类型的实体提供统一的接口，或使用一个单一的符号来表示多个不同的类型。</p></li><li><p>非常的抽象，个人的总结：不同的数据类型进行同一个操作，表现出不同的行为，就是多态的体现。</p></li></ul></li><li><p>从下面的定义来看，JavaScript 是一定存在多态的</p></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 多态：当对不同的数据类型执行同一个操作时，如果表现出来的行为 (形态) 不一样，那么就是多态的体现.</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">function</span> <span class="token function">Characters</span><span class="token punctuation">(</span><span class="token parameter">foo</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span><span class="token function">getFriends</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">var</span> lain <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  name<span class="token operator">:</span> <span class="token string">"lain"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token function-variable function">getFriends</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">return</span> <span class="token string">'樱岛麻衣'</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Saber</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token function">getFriends</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">return</span> <span class="token string">'小鸟游六花'</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">var</span> saber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Saber</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token function">Characters</span><span class="token punctuation">(</span>lain<span class="token punctuation">)</span> <span class="token comment">// 樱岛麻衣</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token function">Characters</span><span class="token punctuation">(</span>saber<span class="token punctuation">)</span> <span class="token comment">// 小鸟游六花</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token comment">// 也是多态的体现</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">m<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token keyword">return</span> m <span class="token operator">+</span> n</pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token function">sum</span><span class="token punctuation">(</span><span class="token string">"樱岛麻衣"</span><span class="token punctuation">,</span> <span class="token string">"小鸟游六花"</span><span class="token punctuation">)</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;class-定义方式&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#class-定义方式&quot;&gt;#&lt;/a&gt; class 定义方式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;我们会发现，按照前面的构造函数形式创建 类，不仅仅和编写普通的函数过于相似，而且代码并不容易理解。
&lt;u</summary>
      
    
    
    
    <category term="WebFE" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/WebFE/"/>
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/WebFE/JavaScript/"/>
    
    <category term="JavaScript Advanced" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/WebFE/JavaScript/JavaScript-Advanced/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript/"/>
    
    <category term="ES6+" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/ES6/"/>
    
    <category term="JavaScript Advanced" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript-Advanced/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 面向对象 に</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2021/10/18/WebFE/JavaScript/Advanced/object_oriented_%E3%81%AB/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2021/10/18/WebFE/JavaScript/Advanced/object_oriented_%E3%81%AB/</id>
    <published>2021-10-18T14:21:39.000Z</published>
    <updated>2022-01-16T09:55:54.802Z</updated>
    
    <content type="html"><![CDATA[<h2 id="面向对象的特性-继承"><a class="anchor" href="#面向对象的特性-继承">#</a> 面向对象的特性 – 继承</h2><ul><li>面向对象有三大特性：封装、继承、多态<ul><li>封装：我们前面将属性和方法封装到一个类中，可以称之为封装的过程；</li><li>继承：继承是面向对象中非常重要的，不仅仅可以减少重复代码的数量，也是多态前提（纯面向对象中）；</li><li>多态：不同的对象在执行时表现出不同的形态；</li></ul></li><li>那么这里我们核心讲继承。</li><li>那么继承是做什么呢？<ul><li>继承可以帮助我们将重复的代码和逻辑抽取到父类中，子类只需要直接继承过来使用即可。</li></ul></li><li>那么 JavaScript 当中如何实现继承呢？<ul><li>不着急，我们先来看一下 JavaScript 原型链的机制；</li><li>再利用原型链的机制实现一下继承；</li></ul></li></ul><h2 id="javascript原型链"><a class="anchor" href="#javascript原型链">#</a> JavaScript 原型链</h2><ul><li>在真正实现继承之前，我们先来理解一个非常重要的概念：原型链。<ul><li>我们知道，从一个对象上获取属性，如果在当前对象中没有获取到就会去它的原型上面获取：</li></ul></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> lain <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  name<span class="token operator">:</span> <span class="token string">'lain'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  age<span class="token operator">:</span> <span class="token number">16</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>lain<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>lain<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>lain<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  friend<span class="token operator">:</span> <span class="token string">'saber'</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lain<span class="token punctuation">.</span>friend<span class="token punctuation">)</span> <span class="token comment">// saber</span></pre></td></tr></table></figure><p><img data-src="prototype_chain1.png" alt="prototype_chain1" /></p><h2 id="object的原型"><a class="anchor" href="#object的原型">#</a> Object 的原型</h2><ul><li>那么什么地方是原型链的尽头呢？比如第三个对象是否也是有原型__proto__属性呢？</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lain<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span> <span class="token comment">// [Object: null prototype] &#123;&#125;</span></pre></td></tr></table></figure><ul><li><p>我们会发现它打印的是 [Object: null prototype] {}</p><ul><li>事实上这个原型就是我们最顶层的原型了</li><li>从 Object 直接创建出来的对象的原型都是 [Object: null prototype] {}。</li></ul></li><li><p>那么我们可能会问题： [Object: null prototype] {} 原型有什么特殊吗？</p><ul><li>特殊一：该对象有原型属性，但是它的原型属性已经指向的是 null，也就是已经是顶层原型了；</li><li>特殊二：该对象上有很多默认的属性和方法；</li></ul></li></ul><h3 id="顶层原型是什么"><a class="anchor" href="#顶层原型是什么">#</a> 顶层原型是什么？</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">"why"</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// console.log(obj.address)</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 到底是找到哪一层对象之后停止继续查找了呢？</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// 字面对象 obj 的原型是 [Object: null prototype] &#123;&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// [Object: null prototype] &#123;&#125; 就是顶层的原型</span></pre></td></tr><tr><td data-num="8"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">// obj.__proto__ => [Object: null prototype] &#123;&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="顶层原型来自哪里"><a class="anchor" href="#顶层原型来自哪里">#</a> 顶层原型来自哪里？</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 1. 在内存中创建了一个对象</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// 2.this 赋值 this = saber</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 3. 将 Object 显示原型赋值给创建出来的对象的隐式原型</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// saber.__proto__ = Object.prototype</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">const</span> saber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="6"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>saber<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>friend <span class="token operator">=</span> <span class="token string">'saber'</span></pre></td></tr><tr><td data-num="8"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>saber<span class="token punctuation">.</span>friend<span class="token punctuation">)</span> <span class="token comment">// saber</span></pre></td></tr></table></figure><h3 id="创建object对象的内存图"><a class="anchor" href="#创建object对象的内存图">#</a> 创建 Object 对象的内存图</h3><p><img data-src="memory_map.png" alt="memory_map" /></p><h2 id="原型链实现继承"><a class="anchor" href="#原型链实现继承">#</a> 原型链实现继承</h2><ul><li>如果我们现在需要实现继承，那么就可以利用原型链来实现了：<ul><li>目前 stu 的原型是 p 对象，而 p 对象的原型是 Person 默认的原型，里面包含 running 等函数；</li><li>注意：步骤 4 和步骤 5 不可以调整顺序，否则会有问题</li></ul></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 1. 定义父类构造函数 父类：公共属性和方法</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"lain"</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 2. 父类原型上添加内容</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sleeping</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" sleeping~"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">// 3. 定义字类构造函数 子类：特有属性和方法</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">this</span><span class="token punctuation">.</span>sno <span class="token operator">=</span> <span class="token number">233</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment">// 4. 创建父类对象， 并且作为字类的原型对象</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token class-name">Student</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> p</pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment">// 5. 在子类原型上添加内容</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">studying</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" studying~"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">const</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// lain</span></pre></td></tr><tr><td data-num="27"></td><td><pre>stu<span class="token punctuation">.</span><span class="token function">sleeping</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// lain sleeping~</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre>stu<span class="token punctuation">.</span><span class="token function">studying</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// lain studying~</span></pre></td></tr></table></figure><p><img data-src="prototype_chain_inheritance.png" alt="prototype_chain_inheritance" /></p><h3 id="原型链的继承方案"><a class="anchor" href="#原型链的继承方案">#</a> 原型链的继承方案</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 父类：公共属性和方法</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'saber'</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">this</span><span class="token punctuation">.</span>friends <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sleeping</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" sleeping~"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">// 子类：特有属性和方法</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token keyword">this</span><span class="token punctuation">.</span>sno <span class="token operator">=</span> <span class="token number">233</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment">// Student.prototype = p</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token class-name">Student</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> p</pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">studying</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"studying~"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">var</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token comment">// 原型链实现继承的弊端：</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token comment">// 1. 第一个弊端：打印 lain 对象，继承的属性是看不到的</span></pre></td></tr><tr><td data-num="28"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span> <span class="token comment">// Student &#123;sno: 233&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// saber</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token comment">// 2. 第二个弊端：创建出来两个 stu 的对象</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token keyword">const</span> lain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token keyword">const</span> saber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token comment">// 直接修改对象上的属性，是给本对象添加了一个新属性</span></pre></td></tr><tr><td data-num="36"></td><td><pre>lain<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"nekoaimer"</span></pre></td></tr><tr><td data-num="37"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>saber<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// saber</span></pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token comment">// 获取引用，修改引用中的值，会相互影响</span></pre></td></tr><tr><td data-num="40"></td><td><pre>lain<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"イリヤ"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="41"></td><td><pre></pre></td></tr><tr><td data-num="42"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lain<span class="token punctuation">.</span>friends<span class="token punctuation">)</span> <span class="token comment">// [' イリヤ ']</span></pre></td></tr><tr><td data-num="43"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>saber<span class="token punctuation">.</span>friends<span class="token punctuation">)</span> <span class="token comment">// [' イリヤ ']</span></pre></td></tr><tr><td data-num="44"></td><td><pre></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token comment">// 3. 第三个弊端：在前面实现类的过程中都没有传递参数</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token keyword">const</span> stu3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"Neko"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="47"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu3<span class="token punctuation">)</span> <span class="token comment">// Student &#123;sno: 233&#125;</span></pre></td></tr></table></figure><ul><li>但是目前有一个很大的弊端：某些属性其实是保存在 p 对象上的；<ul><li>第一，我们通过直接打印对象是看不到这个属性的；</li><li>第二，这个属性会被多个对象共享，如果这个对象是一个引用类型，那么就会造成问题；</li><li>第三，不能给 Person 传递参数，因为这个对象是一次性创建的（没办法定制化）；</li></ul></li></ul><h3 id="借用构造函数继承"><a class="anchor" href="#借用构造函数继承">#</a> 借用构造函数继承</h3><ul><li><p>为了解决原型链继承中存在的问题，开发人员提供了一种新的技术: constructor stealing (有很多名称：借用构造函数或者称之为经典继承或者称之为伪造对象)：</p><ul><li>psteal 是偷窃、剽窃的意思，但是这里可以翻译成借用；</li></ul></li><li><p>借用继承的做法非常简单：在子类型构造函数的内部调用父类型构造函数.</p><ul><li>因为函数可以在任意的时刻被调用；</li><li>因此通过 apply () 和 call () 方法也可以在新创建的对象上执行构造函数；</li></ul></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> friend<span class="token punctuation">,</span> sno</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token function">Person</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> friend<span class="token punctuation">,</span> sno<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>sno <span class="token operator">=</span> sno</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>完整代码</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 父类：公共属性和方法</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">sno<span class="token punctuation">,</span> name<span class="token punctuation">,</span>  friends</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">this</span><span class="token punctuation">.</span>sno <span class="token operator">=</span> sno</pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">this</span><span class="token punctuation">.</span>friends <span class="token operator">=</span> friends</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sleeping</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" sleeping~"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment">// 子类：特有属性和方法</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">sno<span class="token punctuation">,</span> name<span class="token punctuation">,</span> friends</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token function">Person</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>sno<span class="token punctuation">,</span> name<span class="token punctuation">,</span> friends<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token keyword">this</span><span class="token punctuation">.</span>sno <span class="token operator">=</span> sno</pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token class-name">Student</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> p</pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">studying</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" studying~"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token comment">// 原型链实现继承已经解决以下的弊端：☟</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token comment">// 1. 第一个弊端：打印 Amelia 对象，继承的属性是看不到的</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">const</span> Amelia <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'232'</span><span class="token punctuation">,</span> <span class="token string">'Amelia'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Anna'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Amelia<span class="token punctuation">)</span> <span class="token comment">// Student &#123;sno: '232', name: 'Amelia', friends: Array(1)&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token comment">// 2. 第二个弊端：创建出来两个 stu 的对象</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token keyword">const</span> lain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">233</span><span class="token punctuation">,</span> <span class="token string">"lain"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'イリヤ'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token keyword">const</span> saber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">234</span><span class="token punctuation">,</span> <span class="token string">"saber"</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token string">'イリヤ'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token comment">// 直接修改对象上的属性，是给本对象添加了一个新属性</span></pre></td></tr><tr><td data-num="35"></td><td><pre>lain<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"nekoaimer"</span></pre></td></tr><tr><td data-num="36"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>saber<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// saber</span></pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token comment">// 获取引用，修改引用中的值，会相互影响</span></pre></td></tr><tr><td data-num="39"></td><td><pre>lain<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'saber'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="40"></td><td><pre></pre></td></tr><tr><td data-num="41"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lain<span class="token punctuation">.</span>friends<span class="token punctuation">)</span> <span class="token comment">// [' イリヤ ', 'saber']</span></pre></td></tr><tr><td data-num="42"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>saber<span class="token punctuation">.</span>friends<span class="token punctuation">)</span> <span class="token comment">// [' イリヤ ']</span></pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token comment">// 3. 第三个弊端：在前面实现类的过程中都没有传递参数</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token comment">// const Niko = new Student("Niko", 235)</span></pre></td></tr><tr><td data-num="46"></td><td><pre></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token comment">// 强调：借用构造函数也是有弊端:</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token comment">// 1. 第一个弊端: Person 函数至少被调用了两次</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token comment">// 2. 第二个弊端: Niko 的原型对象上会多出一些属性，但是这些属性是没有存在的必要</span></pre></td></tr></table></figure><p><img data-src="constructor_inheritance.png" alt="constructor_inheritance" /></p><h4 id="组合借用继承的问题"><a class="anchor" href="#组合借用继承的问题">#</a> 组合借用继承的问题</h4><ul><li>组合继承是 JavaScript 最常用的继承模式之一：<ul><li>如果你理解到这里，点到为止，那么组合来实现继承只能说问题不大；</li><li>但是它依然不是很完美，但是基本已经没有问题了；(不成问题的问题，基本一词基本可用，但基本不用)</li></ul></li><li>组合继承存在什么问题呢？<ul><li>组合继承最大的问题就是无论在什么情况下，都会调用两次父类构造函数。<ul><li>一次在创建子类原型的时候；</li><li>另一次在子类构造函数内部 (也就是每次创建子类实例的时候)；</li></ul></li><li>另外，如果你仔细按照我的流程走了上面的每一个步骤，你会发现：所有的子类实例事实上会拥有两份父类的属性<ul><li>一份在当前的实例自己里面 (也就是 person 本身的)，另一份在子类对应的原型对象中 (也就是 person.__proto__里面)；</li><li>当然，这两份属性我们无需担心访问出现问题，因为默认一定是访问实例本身这一部分的；</li></ul></li></ul></li></ul><h3 id="父类原型赋值给子类"><a class="anchor" href="#父类原型赋值给子类">#</a> 父类原型赋值给子类</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 父类：公共属性和方法</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>   friends</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">this</span><span class="token punctuation">.</span>friends <span class="token operator">=</span> friends</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">eating</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" eating~"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">// 子类：特有属性和方法</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> friends</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token function">Person</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> friends<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token comment">// this.name = name</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token comment">// this.friends = friends</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token comment">// 直接将父类的原型赋值给子类，作为子类的原型</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token class-name">Student</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype</pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sleeping</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" sleeping~"</span><span class="token punctuation">)</span> <span class="token comment">// saber sleeping~</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">const</span> saber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"saber"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"lain"</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>saber<span class="token punctuation">)</span> <span class="token comment">// Student &#123;name: 'saber', friends: Array(1)&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>saber<span class="token punctuation">.</span><span class="token function">sleeping</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><ul><li>给 Student 添加的东西同时也会给 Person 或 new Person 的所有对象共享，这样是不合理的。</li></ul><h3 id="原型式继承函数"><a class="anchor" href="#原型式继承函数">#</a> 原型式继承函数</h3><ul><li>原型式继承的渊源<ul><li>这种模式要从道格拉斯・克罗克福德（Douglas Crockford，著名的前端大师，JSON 的创立者）在 2006 年写的一篇文章说起: Prototypal Inheritance in JavaScript (在 JS 中使用原型式继承)</li><li>在这篇文章中，它介绍了一种继承方法，而且这种继承方法不是通过构造函数来实现的.</li><li>为了理解这种方式，我们先再次回顾一下 JavaScript 想实现继承的目的：重复利用另外一个对象的属性和方法.</li></ul></li><li>最终的目的：student 对象的原型指向了 person 对象；</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  name<span class="token operator">:</span> <span class="token string">"lain"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  age<span class="token operator">:</span> <span class="token number">16</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">const</span> lain <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// 1. 原型式继承函数</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">function</span> <span class="token function">createObject1</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token keyword">const</span> newObj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>newObj<span class="token punctuation">,</span> o<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">return</span> newObj</pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token comment">// const lain1 = createObject1(info)</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment">// 2.Douglas Crockford 实现方案</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">function</span> <span class="token function">createObject2</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token keyword">function</span> <span class="token function">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token class-name">Fn</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> o</pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>  <span class="token comment">// 不要用这种方法</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token comment">// const newObj = &#123;&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>  <span class="token comment">// newObj.__proto__ = o</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token comment">// return newObj</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">const</span> lain2 <span class="token operator">=</span> <span class="token function">createObject2</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token comment">// 3.Object.create</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">const</span> lain3 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lain3<span class="token punctuation">)</span> <span class="token comment">// &#123;&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lain3<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span> <span class="token comment">// &#123;name: 'lain', age: 16&#125;</span></pre></td></tr></table></figure><h3 id="寄生式继承函数"><a class="anchor" href="#寄生式继承函数">#</a> 寄生式继承函数</h3><ul><li>寄生式 (Parasitic) 继承<ul><li>寄生式 (Parasitic) 继承是与原型式继承紧密相关的一种思想，并且同样由道格拉斯・克罗克福德 (DouglasCrockford) 提出和推广的；</li></ul></li><li>寄生式继承的思路是结合原型类继承和工厂模式的一种方式；</li><li>即创建一个封装继承过程的函数，该函数在内部以某种方式来增强对象，最后再将这个对象返回；</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> Lain <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  name<span class="token operator">:</span> <span class="token string">'lain'</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">function</span> <span class="token function">createCharacter</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">const</span> lain <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Lain<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  lain<span class="token punctuation">.</span>name <span class="token operator">=</span> name</pre></td></tr><tr><td data-num="8"></td><td><pre>  lain<span class="token punctuation">.</span><span class="token function-variable function">sleeping</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"sleeping~"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token keyword">return</span> lain</pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">const</span> saber <span class="token operator">=</span> <span class="token function">createCharacter</span><span class="token punctuation">(</span><span class="token string">"saber"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>saber<span class="token punctuation">)</span> <span class="token comment">// &#123;name: 'saber', sleeping: ƒ&#125;</span></pre></td></tr></table></figure><h3 id="寄生组合式继承"><a class="anchor" href="#寄生组合式继承">#</a> 寄生组合式继承</h3><ul><li>现在我们来回顾一下之前提出的比较理想的组合继承<ul><li>组合继承是比较理想的继承方式，但是存在两个问题:</li><li>问题一：构造函数会被调用两次：一次在创建子类型原型对象的时候，一次在创建子类型实例的时候.</li><li>问题二：父类型中的属性会有两份：一份在原型对象中，一份在子类型实例中.</li></ul></li><li>事实上，我们现在可以利用寄生式继承将这两个问题给解决掉.<ul><li>你需要先明确一点：当我们在子类型的构造函数中调用父类型.call (this, 参数) 这个函数的时候，就会将父类型中的属性和方法复制一份到了子类型中。所以父类型本身里面的内容，我们不再需要.</li><li>这个时候，我们还需要获取到一份父类型的原型对象中的属性和方法.</li><li>能不能直接让子类型的原型对象 = 父类型的原型对象呢？</li><li>不要这么做，因为这么做意味着以后修改了子类型原型对象的某个引用类型的时候，父类型原生对象的引用类型也会被修改.</li></ul></li><li>我们使用前面的寄生式思想就可以了.</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 原型式继承函数</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// function createObject(o) &#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">//   function Fn() &#123;&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">//   Fn.prototype = o</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">//   return new Fn()</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// &#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// 工具函数：继承原型 </span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">function</span> <span class="token function">inheritPrototype</span><span class="token punctuation">(</span><span class="token parameter">SubType<span class="token punctuation">,</span> SuperType</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token comment">// 继承 prototype</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">SuperType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token comment">// 添加 constructor</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">"constructor"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    enumerable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    configurable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    writable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    value<span class="token operator">:</span> SubType</pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token comment">// 父</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">function</span> <span class="token function">Character</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>  friends</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</pre></td></tr><tr><td data-num="24"></td><td><pre>  <span class="token keyword">this</span><span class="token punctuation">.</span>friends <span class="token operator">=</span> friends</pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token class-name">Character</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sleeping</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"sleeping~"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token comment">// 子</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token keyword">function</span> <span class="token function">Lain</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> friends</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>  <span class="token function">Character</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> friends<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</pre></td></tr><tr><td data-num="35"></td><td><pre>  <span class="token keyword">this</span><span class="token punctuation">.</span>friends <span class="token operator">=</span> friends</pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token comment">// 子 -> 父</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token function">inheritPrototype</span><span class="token punctuation">(</span>Lain<span class="token punctuation">,</span> Character<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="40"></td><td><pre></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token class-name">Lain</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">studying</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"studying~"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token keyword">const</span> lain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Lain</span><span class="token punctuation">(</span><span class="token string">"lain"</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token string">"saber"</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="46"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lain<span class="token punctuation">)</span> <span class="token comment">// Lain &#123;name: 'lain', friends: Array(1)&#125;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lain<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// Lain</span></pre></td></tr></table></figure><h2 id="对象和函数原型之间关系"><a class="anchor" href="#对象和函数原型之间关系">#</a> 对象和函数原型之间关系</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> lain <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  name<span class="token operator">:</span> <span class="token string">"lain"</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lain<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span> <span class="token comment">// [Object: null prototype] &#123;&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 对象里面是有一个__proto__对象：隐式原型对象</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// Foo 是一个函数，那么它会有一个显示原型对象: Foo.prototype</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">// Foo.prototype 来自哪里？</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">// 答案：创建了一个函数，Foo.prototype = &#123;constructor: Foo&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">// Foo 是一个对象，那么它会有一个隐式原型对象: Foo.__proto__</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token comment">// Foo.__proto__来自哪里？</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment">// 答案: new Function ()  Foo.__proto__ = Function.prototype</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">&#123;</span> constructor<span class="token operator">:</span> Function <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token comment">// const Foo = new Function()</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype <span class="token operator">===</span> Foo<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span> <span class="token comment">// false</span></pre></td></tr><tr><td data-num="24"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span> <span class="token comment">// [Function: Foo]  </span></pre></td></tr><tr><td data-num="25"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Foo<span class="token punctuation">.</span><span class="token class-name">__proto__</span><span class="token punctuation">.</span>constructor<span class="token punctuation">)</span> <span class="token comment">// [Function: Function]</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token comment">// console.log(Object.getOwnPropertyDescriptors(Function.__proto__))-</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Foo<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="30"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype <span class="token operator">===</span> <span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="31"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Function<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Foo<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Object<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="34"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Foo<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="35"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Function<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Function<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Object<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Foo<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="40"></td><td><pre></pre></td></tr><tr><td data-num="41"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Function<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="42"></td><td><pre></pre></td></tr><tr><td data-num="43"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Foo<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">//  true </span></pre></td></tr><tr><td data-num="44"></td><td><pre></pre></td></tr><tr><td data-num="45"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype <span class="token operator">===</span> Object<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="46"></td><td><pre></pre></td></tr><tr><td data-num="47"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="48"></td><td><pre></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="50"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="51"></td><td><pre></pre></td></tr><tr><td data-num="52"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="53"></td><td><pre></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="55"></td><td><pre></pre></td></tr><tr><td data-num="56"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="57"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="58"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr></table></figure><p><img data-src="archetypal_inher_itance_relation.png" alt="archetypal_inher_itance_relation" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;面向对象的特性-继承&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#面向对象的特性-继承&quot;&gt;#&lt;/a&gt; 面向对象的特性 – 继承&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;面向对象有三大特性：封装、继承、多态
&lt;ul&gt;
&lt;li&gt;封装：我们前面将属性和方法封装到一个类中，可</summary>
      
    
    
    
    <category term="WebFE" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/WebFE/"/>
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/WebFE/JavaScript/"/>
    
    <category term="JavaScript Advanced" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/WebFE/JavaScript/JavaScript-Advanced/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript/"/>
    
    <category term="JavaScript Advanced" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript-Advanced/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 面向对象 いち</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2021/10/16/WebFE/JavaScript/Advanced/object_oriented_%E3%81%84%E3%81%A1/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2021/10/16/WebFE/JavaScript/Advanced/object_oriented_%E3%81%84%E3%81%A1/</id>
    <published>2021-10-16T06:39:32.000Z</published>
    <updated>2022-01-10T01:56:15.371Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建对象方案"><a class="anchor" href="#创建对象方案">#</a> 创建对象方案</h2><h3 id="字面量"><a class="anchor" href="#字面量">#</a> 字面量</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> lain <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    age<span class="token operator">:</span> <span class="token number">16</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="工厂模式-工厂函数"><a class="anchor" href="#工厂模式-工厂函数">#</a> 工厂模式：工厂函数</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">createMaster</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">return</span>  <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    name<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    age<span class="token punctuation">,</span>   </pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token function">sleeping</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> 在睡觉</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">const</span> Saber <span class="token operator">=</span> <span class="token function">createMaster</span><span class="token punctuation">(</span><span class="token string">"Saber"</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">const</span> Lain <span class="token operator">=</span> <span class="token function">createMaster</span><span class="token punctuation">(</span><span class="token string">"Lain"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">const</span> nekoaimer <span class="token operator">=</span> <span class="token function">createMaster</span><span class="token punctuation">(</span><span class="token string">"nekoaimer"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment">// 工厂模式的缺点 (获取不到对象最真实的类型)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Saber<span class="token punctuation">,</span> Lain<span class="token punctuation">,</span> nekoaimer<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token comment">// &#123;name: 'Saber', age: 16, sleep: ƒ&#125; &#123;name: 'Lain', age: 20, sleep: ƒ&#125; &#123;name: 'nekoaimer', age: 30, sleep: ƒ&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>Saber<span class="token punctuation">.</span><span class="token function">sleeping</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Saber 在睡觉</span></pre></td></tr><tr><td data-num="19"></td><td><pre>Lain<span class="token punctuation">.</span><span class="token function">sleeping</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Lain 在睡觉</span></pre></td></tr><tr><td data-num="20"></td><td><pre>nekoaimer<span class="token punctuation">.</span><span class="token function">sleeping</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//nekoaimer 在睡觉</span></pre></td></tr></table></figure><h3 id="构造函数"><a class="anchor" href="#构造函数">#</a> 构造函数</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 规范：构造函数的首字母一般是大写</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">function</span> <span class="token function">Master</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age</pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sleeping</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> 在睡觉</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">// 在 new 函数的时候 后面的括号如果在没有参数的情况下可以省略</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">var</span> saber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Master</span><span class="token punctuation">(</span><span class="token string">"Saber"</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">var</span> lain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Master</span><span class="token punctuation">(</span><span class="token string">"Lain"</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>saber<span class="token punctuation">)</span> <span class="token comment">// Master &#123;name: 'Saber', age: 16, sleeping: ƒ&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lain<span class="token punctuation">)</span> <span class="token comment">// Master &#123;name: 'Lain', age: 16, sleeping: ƒ&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>saber<span class="token punctuation">.</span><span class="token function">sleeping</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Saber 在睡觉</span></pre></td></tr><tr><td data-num="19"></td><td><pre>lain<span class="token punctuation">.</span><span class="token function">sleeping</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Lain 在睡觉</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token comment">// 每次 new 函数调用都会返回一个新对象 这比较浪费性能</span></pre></td></tr><tr><td data-num="22"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>saber <span class="token operator">===</span> lain<span class="token punctuation">)</span> <span class="token comment">// false</span></pre></td></tr></table></figure><h2 id="对象原型理解"><a class="anchor" href="#对象原型理解">#</a> 对象原型理解</h2><ul><li>JavaScript 当中每个对象都有一个特殊的内置属性 [[prototype]]，这个特殊的对象可以指向另外一个对象。</li><li>那么这个对象有什么用呢？<ul><li>当我们通过引用对象的属性 key 来获取一个 value 时，它会触发 [[Get]] 的操作；</li><li>这个操作会首先检查该属性是否有对应的属性，如果有的话就使用它；</li><li>如果对象中没有改属性，那么会访问对象 [[prototype]] 内置属性指向的对象上的属性；</li></ul></li><li>那么如果通过字面量直接创建一个对象，这个对象也会有这样的属性吗？如果有，应该如何获取这个属性呢？<ul><li>答案是有的，只要是对象都会有这样的一个内置属性；</li></ul></li><li>获取的方式有两种：<ul><li>方式一：通过对象的 <strong>proto</strong> 属性可以获取到（但是这个是早期浏览器自己添加的，存在一定的兼容性问</li></ul></li><li>题）；<ul><li>方式二：通过 Object.getPrototypeOf 方法可以获取到；</li></ul></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 我们每个对象中都有一个 [[prototype]], 这个属性可以称之为对象的原型 (隐式原型)</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">const</span> lain <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// [[prototype]]</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 1. 解释原型的概念和看一下原型</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// 早期的 ECMA 是没有规范如何去查看 [[prototype]]</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// 给对象中提供了一个属性，可以让我们查看一下这个原型对象 (浏览器提供) __proto__</span></pre></td></tr><tr><td data-num="9"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lain<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span> <span class="token comment">// &#123;constructor: ƒ ……&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">// var lain = &#123;age: "16", __proto__: &#123;&#125; &#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">// ES5 之后提供的 lainect.getPrototypeOf</span></pre></td></tr><tr><td data-num="14"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>lain<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &#123;constructor: ƒ ……&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token comment">// 2. 原型有什么用呢？</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token comment">// 当我们从一个对象中获取某一个属性时，它会触发 [[get]] 操作</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment">// 1. 在当前对象中去查找对应的属性，如果找到就直接使用</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">// 2. 如果没有找到，那么会沿着它的原型去查找 [[prototype]]</span></pre></td></tr><tr><td data-num="21"></td><td><pre>lain<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lain<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment">// 18</span></pre></td></tr></table></figure><h2 id="函数的原型理解"><a class="anchor" href="#函数的原型理解">#</a> 函数的原型理解</h2><ul><li>那么我们知道上面的东西对于我们的构造函数创建对象来说有什么用呢？<ul><li>它的意义是非常重大的！</li></ul></li><li>这里我们又要引入一个新的概念：所有函数都有一个 prototype 的属性：</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// 所有的函数都有一个属性：prototype</span></pre></td></tr><tr><td data-num="3"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span></pre></td></tr></table></figure><ul><li><p>你可能会问，是不是因为函数是一个对象，所以它有 prototype 的属性呢？</p><ul><li>不是的，因为它是一个函数，才有了这个特殊的属性；</li><li>而不是它是一个对象，所以有这个特殊的属性</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">//obj 没有这个属性</span></pre></td></tr></table></figure></li><li><p>函数也是一个对象</p></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">//console.log (foo.__proto__) // 函数作为对象来说，它也是有 [[prototype]] 隐式原型</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 因为是一个函数，所以它还会多出来一个显示原型属性: prototype</span></pre></td></tr><tr><td data-num="6"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// &#123;constructor: ƒ&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">const</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">const</span> f2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> foo<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="12"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f2<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> foo<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr></table></figure><h2 id="new操作符"><a class="anchor" href="#new操作符">#</a> new 操作符</h2><ul><li>new 关键字的步骤如下：<ul><li>在内存中创建一个新的对象（空对象）；</li><li>这个对象内部的 [[prototype]] 属性会被赋值为该构造函数的 prototype 属性；</li></ul></li><li>那么也就意味着我们通过 Person 构造函数创建出来的所有对象的 [[prototype]] 属性都指向 Person.prototype：</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 上面的操作符相当于会进行如下的操作：</span></pre></td></tr><tr><td data-num="4"></td><td><pre>p <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>p<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype</pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 可以尝试打印比较</span></pre></td></tr><tr><td data-num="8"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr></table></figure><ul><li>创建对象的内存表现：</li></ul><p><img data-src="p.png" alt="p" /></p><p>通过上面的图可以理解下面的代码了：</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">const</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> p2<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="6"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>p1<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>friend <span class="token operator">=</span> <span class="token string">'Saber'</span></pre></td></tr><tr><td data-num="9"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>friend<span class="token punctuation">)</span> <span class="token comment">// Saber</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">16</span> </pre></td></tr><tr><td data-num="12"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment">// 16</span></pre></td></tr></table></figure><h2 id="函数原型上的属性"><a class="anchor" href="#函数原型上的属性">#</a> 函数原型上的属性</h2><p><img data-src="prototype_object.png" alt="prototype_object" /></p><h3 id="constructor-属性"><a class="anchor" href="#constructor-属性">#</a> constructor 属性</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 1.constructor 属性</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">//foo.prototype 这个对象中有一个 constructor 属性</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// console.log(foo.prototype)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 获取对象所有属性描述器</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// 通过下面修改打印能看到属性描述器</span></pre></td></tr><tr><td data-num="9"></td><td><pre>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">"constructor"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  configurable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  writable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token comment">//value: [Function: foo] // 对应的就是 foo 函数</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span> <span class="token comment">// [Function: foo]</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token comment">//prototype.constructor 指向构造函数本身</span></pre></td></tr><tr><td data-num="19"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">===</span> foo<span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="20"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">//foo</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token comment">//console.log (foo.prototype.constructor.prototype.constructor.prototype.constructor) //prototype 指向 constructor constructor 指向 prototype</span></pre></td></tr></table></figure><h3 id="重写原型对-象"><a class="anchor" href="#重写原型对-象">#</a> 重写原型对 象</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">lain</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// 3. 直接修改整个 prototype 对象</span></pre></td></tr><tr><td data-num="3"></td><td><pre>lain<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token comment">//constructor: lain, //configurable enumerable writable 都是为 true</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  name<span class="token operator">:</span> <span class="token string">"lain"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  age<span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// console.log(Object.getOwnPropertyDescriptors(lain.prototype));</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// var p1 = new foo()</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">// console.log(p1.name, p1.age)</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">// 真实开发中我们可以通过 Object.defineProperty 方式添加 constructor</span></pre></td></tr><tr><td data-num="14"></td><td><pre>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>lain<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">"constructor"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  enumerable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  configurable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  writable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  value<span class="token operator">:</span> lain</pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span>lain<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p><img data-src="lain.png" alt="lain" /></p><h2 id="构造函数和原型组合"><a class="anchor" href="#构造函数和原型组合">#</a> 构造函数和原型组合</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sleeping</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" 在呼呼睡大觉~"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">var</span> lain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Lain"</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">var</span> saber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Saber"</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>lain<span class="token punctuation">.</span><span class="token function">sleeping</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>saber<span class="token punctuation">.</span><span class="token function">sleeping</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;创建对象方案&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#创建对象方案&quot;&gt;#&lt;/a&gt; 创建对象方案&lt;/h2&gt;
&lt;h3 id=&quot;字面量&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#字面量&quot;&gt;#&lt;/a&gt; 字面量&lt;/h3&gt;
&lt;figure class=&quot;</summary>
      
    
    
    
    <category term="WebFE" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/WebFE/"/>
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/WebFE/JavaScript/"/>
    
    <category term="JavaScript Advanced" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/WebFE/JavaScript/JavaScript-Advanced/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript/"/>
    
    <category term="JavaScript Advanced" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript-Advanced/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript defineProperty</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2021/10/14/WebFE/JavaScript/Advanced/defineProperty/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2021/10/14/WebFE/JavaScript/Advanced/defineProperty/</id>
    <published>2021-10-14T12:20:42.000Z</published>
    <updated>2022-01-09T05:12:55.852Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据属性描述符"><a class="anchor" href="#数据属性描述符">#</a> 数据属性描述符</h2><ul><li><p>数据数据描述符有如下四个特性：</p></li><li><p>[[Configurable]]：表示属性是否可以通过 delete 删除属性，是否可以修改它的特性，或者是否可以将它修改为存取属性描述符；</p></li><li><p>当我们直接在一个对象上定义某个属性时，这个属性的 [[Configurable]] 为 true；</p></li><li><p>当我们通过属性描述符定义一个属性时，这个属性的 [[Configurable]] 默认为 false；</p></li><li><p>[[Enumerable]]：表示属性是否可以通过 for-in 或者 Object.keys () 返回该属性；</p><ul><li>当我们直接在一个对象上定义某个属性时，这个属性的 [[Enumerable]] 为 true；</li><li>当我们通过属性描述符定义一个属性时，这个属性的 [[Enumerable]] 默认为 false；</li></ul></li><li><p>[[Writable]]：表示是否可以修改属性的值；</p></li><li><p>当我们直接在一个对象上定义某个属性时，这个属性的 [[Writable]] 为 true；</p></li><li><p>当我们通过属性描述符定义一个属性时，这个属性的 [[Writable]] 默认为 false；</p></li><li><p>[[value]]：属性的 value 值，读取属性时会返回该值，修改属性时，会对其进行修改；</p><ul><li>默认情况下这个值是 undefined；</li></ul></li></ul><p>测试代码</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">var</span> neko <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  friend<span class="token operator">:</span> <span class="token string">'lain'</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>neko<span class="token punctuation">,</span> <span class="token string">'friend'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  value<span class="token operator">:</span> <span class="token string">'Saber'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  writable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  configurable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  enumerable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'修改friend之前'</span><span class="token punctuation">,</span>neko<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  neko<span class="token punctuation">.</span>friend <span class="token operator">=</span> <span class="token string">'lain'</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'修改friend之后'</span><span class="token punctuation">,</span>neko<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token function">resolve</span><span class="token punctuation">(</span>neko<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'删除friend之前'</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">delete</span> neko<span class="token punctuation">.</span>friend</pre></td></tr><tr><td data-num="23"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'删除friend之后'</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>  <span class="token punctuation">&#125;</span> <span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> neko<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token comment">//friend 不可遍历所</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>neko<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>  </pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>​</p><h2 id="存取属性描述符"><a class="anchor" href="#存取属性描述符">#</a> 存取属性描述符</h2><ul><li>数据数据描述符有如下四个特性：</li><li>[[Configurable]]：表示属性是否可以通过 delete 删除属性，是否可以修改它的特性，或者是否可以将它修改为存取属性描述符；<ul><li>和数据属性描述符是一致的；</li><li>当我们直接在一个对象上定义某个属性时，这个属性的 [[Configurable]] 为 true；</li><li>当我们通过属性描述符定义一个属性时，这个属性的 [[Configurable]] 默认为 false；</li></ul></li><li>[[Enumerable]]：表示属性是否可以通过 for-in 或者 Object.keys () 返回该属性；<ul><li>和数据属性描述符是一致的；</li><li>当我们直接在一个对象上定义某个属性时，这个属性的 [[Enumerable]] 为 true；</li><li>当我们通过属性描述符定义一个属性时，这个属性的 [[Enumerable]] 默认为 false；</li></ul></li><li>[[get]]：获取属性时会执行的函数。默认为 undefined</li><li>[[set]]：设置属性时会执行的函数。默认为 undefined</li></ul><p>测试代码</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> lain <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  _friend<span class="token operator">:</span> <span class="token string">'nekoaimer'</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>lain<span class="token punctuation">,</span> <span class="token string">"friend"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  configurable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_friend</pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'value:'</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token comment">// 设置的值</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>_friend <span class="token operator">=</span> value</pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lain<span class="token punctuation">.</span>friend<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>lain<span class="token punctuation">.</span>friend <span class="token operator">=</span> <span class="token string">'Saber'</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lain<span class="token punctuation">.</span>friend<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'设置了friend的值'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"获取了一次friend的值"</span><span class="token punctuation">,</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="同时定义多个属性"><a class="anchor" href="#同时定义多个属性">#</a> 同时定义多个属性</h2><ul><li>Object.defineProperties () 方法直接在一个对象上定义 多个 新的属性或修改现有属性，并且返回该对象。</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> lain <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  _age<span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  _friend<span class="token operator">:</span> <span class="token string">'nekoaimer'</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span>lain<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  age<span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    configurable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    value<span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    writable<span class="token operator">:</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  friend<span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    configurable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    enumerable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </pre></td></tr><tr><td data-num="16"></td><td><pre>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_friend<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_friend</pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'set'</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="21"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>_friend <span class="token operator">=</span> value</pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre>lain<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'lain._age：'</span><span class="token punctuation">,</span> lain<span class="token punctuation">.</span>_age<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre>lain<span class="token punctuation">.</span>friend <span class="token operator">=</span> <span class="token string">'Saber'</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'lain.friend：'</span> <span class="token punctuation">,</span>lain<span class="token punctuation">.</span>friend<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lain<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>默认为 true 的写法</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> lain <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  _age<span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  _friend<span class="token operator">:</span> <span class="token string">'nekoaimer'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">set</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>_age <span class="token operator">=</span> value</pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token keyword">get</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_age </pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span>lain<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token comment">// age: &#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token comment">//   configurable: true,</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token comment">//   enumerable: true,</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token comment">//   value: 16,</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token comment">//   writable: true</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token comment">// &#125;,</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  friend<span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    configurable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    enumerable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </pre></td></tr><tr><td data-num="22"></td><td><pre>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_friend<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_friend</pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'set'</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="27"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>_friend <span class="token operator">=</span> value</pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre>lain<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'lain._age：'</span><span class="token punctuation">,</span> lain<span class="token punctuation">.</span>_age<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre>lain<span class="token punctuation">.</span>friend <span class="token operator">=</span> <span class="token string">'Saber'</span></pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'lain.friend：'</span> <span class="token punctuation">,</span>lain<span class="token punctuation">.</span>friend<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre></pre></td></tr><tr><td data-num="40"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lain<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="获取属性描述符"><a class="anchor" href="#获取属性描述符">#</a> 获取属性描述符</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> lain <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  _age<span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  _friend<span class="token operator">:</span> <span class="token string">'nekoaimer'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">set</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>_age <span class="token operator">=</span> value</pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token keyword">get</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_age </pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span>lain<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  friend<span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    configurable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    enumerable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </pre></td></tr><tr><td data-num="16"></td><td><pre>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_friend<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_friend</pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'set'</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="21"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>_friend <span class="token operator">=</span> value</pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token comment">// 获取某一个特性属性的属性描述符</span></pre></td></tr><tr><td data-num="26"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>lain<span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'friend'</span><span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>lain<span class="token punctuation">,</span> <span class="token string">'friend'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token comment">// 获取对象的所有属性描述符</span></pre></td></tr><tr><td data-num="30"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'lain'</span><span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span>lain<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="object方法对对象限制"><a class="anchor" href="#object方法对对象限制">#</a> Object 方法对对象限制</h2><h3 id="禁止对象继续添加新的属性"><a class="anchor" href="#禁止对象继续添加新的属性">#</a> 禁止对象继续添加新的属性</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> lain <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  age<span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  friend<span class="token operator">:</span> <span class="token string">'Saber'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>Object<span class="token punctuation">.</span><span class="token function">preventExtensions</span><span class="token punctuation">(</span>lain<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>lain<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">1.65</span></pre></td></tr><tr><td data-num="9"></td><td><pre>lain<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">"girl"</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lain<span class="token punctuation">)</span>  <span class="token comment">// &#123;age: 16, friend: 'Saber'&#125;</span></pre></td></tr></table></figure><h3 id="禁止对象配置删除里面的属性"><a class="anchor" href="#禁止对象配置删除里面的属性">#</a> 禁止对象配置 / 删除里面的属性</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> lain <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  age<span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  friend<span class="token operator">:</span> <span class="token string">'Saber'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>Object<span class="token punctuation">.</span><span class="token function">seal</span><span class="token punctuation">(</span>lain<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">delete</span> lain<span class="token punctuation">.</span>friend</pre></td></tr><tr><td data-num="9"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lain<span class="token punctuation">.</span>friend<span class="token punctuation">)</span> <span class="token comment">// Saber</span></pre></td></tr></table></figure><h3 id="冻结属性让属性不可以修改writable-false"><a class="anchor" href="#冻结属性让属性不可以修改writable-false">#</a> 冻结属性：让属性不可以修改 (writable: false)</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> lain <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  age<span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  friend<span class="token operator">:</span> <span class="token string">'Saber'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// 只冻结一级属性</span></pre></td></tr><tr><td data-num="7"></td><td><pre>Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>lain<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>lain<span class="token punctuation">.</span>friend <span class="token operator">=</span> <span class="token string">"Lain"</span></pre></td></tr><tr><td data-num="10"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lain<span class="token punctuation">.</span>friend<span class="token punctuation">)</span> <span class="token comment">// Saber</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数据属性描述符&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#数据属性描述符&quot;&gt;#&lt;/a&gt; 数据属性描述符&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;数据数据描述符有如下四个特性：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[[Configurable]]：表示属性是否</summary>
      
    
    
    
    <category term="WebFE" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/WebFE/"/>
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/WebFE/JavaScript/"/>
    
    <category term="JavaScript Advanced" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/WebFE/JavaScript/JavaScript-Advanced/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript/"/>
    
    <category term="JavaScript Advanced" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript-Advanced/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 柯里化实现</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2021/10/12/WebFE/JavaScript/Advanced/currying/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2021/10/12/WebFE/JavaScript/Advanced/currying/</id>
    <published>2021-10-12T02:11:42.000Z</published>
    <updated>2022-01-16T09:53:48.410Z</updated>
    
    <content type="html"><![CDATA[<h2 id="javascript-柯里化"><a class="anchor" href="#javascript-柯里化">#</a> JavaScript 柯里化</h2><ul><li><p>柯里化也是属于函数式编程里面一个非常重要的概念。</p></li><li><p>我们先来看一下维基百科的解释：</p></li><li><p>在计算机科学中，柯里化（英语：Currying），又译为卡瑞化或加里化；</p></li><li><p>是把接收多个参数的函数，变成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数，而且返回结果的新函数的技术；</p></li><li><p>柯里化声称 “如果你固定某些参数，你将得到接受余下参数的一个函数”；</p></li><li><p>维基百科的解释非常的抽象，coderwhy 老师对此的总结：</p><ul><li>只传递给函数一部分参数来调用它，让它返回一个函数去处理剩余的参数；</li><li>这个过程就称之为柯里化；</li></ul></li></ul><h2 id="柯里化过程"><a class="anchor" href="#柯里化过程">#</a> 柯里化过程</h2><p>未柯里化的函数</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">return</span> n1 <span class="token operator">+</span> n2</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 66</span></pre></td></tr></table></figure><p>柯里化处理函数</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">z</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>      <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z</pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 66</span></pre></td></tr></table></figure><p>sum 柯里化函数简写</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token parameter">x</span> <span class="token operator">=></span> <span class="token parameter">y</span> <span class="token operator">=></span> <span class="token parameter">z</span> <span class="token operator">=></span> x <span class="token operator">+</span> y <span class="token operator">+</span> z</pre></td></tr><tr><td data-num="2"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 66</span></pre></td></tr></table></figure><h2 id="让函数的职责单一"><a class="anchor" href="#让函数的职责单一">#</a> 让函数的职责单一</h2><ul><li>为什么需要有柯里化？<ul><li>在函数式编程中，我们其实往往希望一个函数处理的问题尽可能的单一，而不是将一大堆的处理过程交给一个函数来处理；</li><li>那么我们是否就可以将每次传入的参数在单一的函数中进行处理，处理完后在下一个函数中再使用处理后的结果；</li></ul></li></ul><p>每次调用都会执行 x = x * 2 这段代码</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  x <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">2</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">z</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>      <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z</pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 77</span></pre></td></tr><tr><td data-num="10"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">44</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 121</span></pre></td></tr></table></figure><p>简写，阅读性差不建议</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token parameter">x</span> <span class="token operator">=></span> <span class="token parameter">y</span> <span class="token operator">=></span> <span class="token parameter">z</span> <span class="token operator">=></span> x <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> y <span class="token operator">+</span> z </pre></td></tr><tr><td data-num="2"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 77</span></pre></td></tr><tr><td data-num="3"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">44</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 121</span></pre></td></tr></table></figure><h2 id="柯里化复用"><a class="anchor" href="#柯里化复用">#</a> 柯里化复用</h2><h3 id="例子1"><a class="anchor" href="#例子1">#</a> 例子 1</h3><p>这样我们不需要再继续传入 n1 了</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">n1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">return</span> n1 <span class="token operator">+</span> n2</pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">const</span> sum2 <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum2</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum2</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>简写，阅读性差不建议</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token parameter">n1</span> <span class="token operator">=></span> <span class="token parameter">n2</span> <span class="token operator">=></span> n1 <span class="token operator">+</span> n2</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> sum2 <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum2</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 33</span></pre></td></tr><tr><td data-num="4"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum2</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 44</span></pre></td></tr></table></figure><h3 id="例子2"><a class="anchor" href="#例子2">#</a> 例子 2</h3><p>未柯里化</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token parameter">date<span class="token punctuation">,</span> name<span class="token punctuation">,</span> food</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>date<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>date<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> 吃了</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>food<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'nekoaimer'</span><span class="token punctuation">,</span> <span class="token string">'月亮小饼干'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 15:25 nekoaimer 吃了月亮小饼干</span></pre></td></tr></table></figure><p>柯里化</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> <span class="token function-variable function">log</span> <span class="token operator">=</span> <span class="token parameter">date</span> <span class="token operator">=></span> <span class="token parameter">name</span> <span class="token operator">=></span> <span class="token parameter">food</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>date<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>date<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> 吃了</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>food<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">const</span> nowLog <span class="token operator">=</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token function">nowLog</span><span class="token punctuation">(</span><span class="token string">'lain'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">"椒盐夏虾和夏目葵子"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">const</span> nowLog2 <span class="token operator">=</span> <span class="token function">nowLog</span><span class="token punctuation">(</span><span class="token string">'saber'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token function">nowLog2</span><span class="token punctuation">(</span><span class="token string">'望月夏芽和酒酿梅子'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// 15:25 lain 吃了椒盐夏虾和夏目葵子</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">// 15:25 saber 吃了望月夏芽和酒酿梅子</span></pre></td></tr></table></figure><h2 id="柯里化函数实现"><a class="anchor" href="#柯里化函数实现">#</a> 柯里化函数实现</h2><h3 id="完整写法"><a class="anchor" href="#完整写法">#</a> 完整写法</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token string">"use strict"</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">function</span> <span class="token function">myCurrying</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">function</span> <span class="token function">curried</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment">// 判断当前已经接收的参数的个数，可以参数本身需要接受的参数是否已经一致了</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token comment">// 1. 当已经传入的参数 大于等于 需要的参数时，就执行函数</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">>=</span> fn<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>      <span class="token comment">// fn(...args)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>      <span class="token comment">// fn.call(this, ...args)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>      <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>      <span class="token comment">// 2. 没有达到个数时，需要返回一个新的函数，继续来接收的参数</span></pre></td></tr><tr><td data-num="12"></td><td><pre>      <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token comment">// 3. 接收到参数后，需要递归调用 curried 来检查函数的个数是否达到</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">return</span> <span class="token function">curried</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>args2<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token comment">// 4. 返回一个新的函数</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token keyword">return</span> curried</pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z</pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">var</span> curryAdd <span class="token operator">=</span> <span class="token function">myCurrying</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">curryAdd</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 60</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">curryAdd</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 60</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">curryAdd</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 60</span></pre></td></tr><tr><td data-num="33"></td><td><pre> </pre></td></tr><tr><td data-num="34"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">curryAdd</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 60</span></pre></td></tr></table></figure><h3 id="优化写法"><a class="anchor" href="#优化写法">#</a> 优化写法</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token string">"use strict"</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myCurrying</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">curried</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">>=</span> fn<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>      <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>      <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">return</span> <span class="token function">curried</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span>args<span class="token punctuation">,</span> <span class="token operator">...</span>args2<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z</pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">var</span> curryAdd <span class="token operator">=</span> Function<span class="token punctuation">.</span><span class="token function">myCurrying</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">curryAdd</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 60</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">curryAdd</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 60</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">curryAdd</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 60</span></pre></td></tr><tr><td data-num="25"></td><td><pre> </pre></td></tr><tr><td data-num="26"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">curryAdd</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 60</span></pre></td></tr></table></figure><h3 id="bind-妙用"><a class="anchor" href="#bind-妙用">#</a> bind 妙用</h3><p>这是我认为比较优雅的写法！~</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token string">"use strict"</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myCurrying</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">curried</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">>=</span> fn<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>      <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#125;</span> </pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">return</span> <span class="token function">curried</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z</pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">var</span> curryAdd <span class="token operator">=</span> Function<span class="token punctuation">.</span><span class="token function">myCurrying</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">curryAdd</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 60</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">curryAdd</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 60</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">curryAdd</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 60</span></pre></td></tr><tr><td data-num="22"></td><td><pre> </pre></td></tr><tr><td data-num="23"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">curryAdd</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 60</span></pre></td></tr></table></figure><h2 id="组合函数实现"><a class="anchor" href="#组合函数实现">#</a> 组合函数实现</h2><ul><li>组合（Compose）函数是在 JavaScript 开发过程中一种对函数的使用技巧、模式：<ul><li>比如我们现在需要对某一个数据进行函数的调用，执行两个函数 mul 和 square，这两个函数是依次执行的；</li><li>那么如果每次我们都需要进行两个函数的调用，操作上就会显得重复；</li><li>那么是否可以将这两个函数组合起来，自动依次调用呢？</li><li>这个过程就是对函数的组合，我们称之为 组合函数（Compose Function）；</li></ul></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token parameter">m</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">return</span> m <span class="token operator">*</span> <span class="token number">2</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">function</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">return</span> n <span class="token operator">**</span> <span class="token number">2</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">function</span> <span class="token function">composeFn</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>fns</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> k <span class="token keyword">in</span> fns<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fns<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">"Expected arguments are functions"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">let</span> result <span class="token operator">=</span> fns<span class="token punctuation">.</span>length <span class="token operator">?</span> fns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token operator">:</span> args</pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">++</span> <span class="token operator">&lt;</span> fns<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>     <span class="token keyword">return</span> result <span class="token operator">=</span> fns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">const</span> newFn <span class="token operator">=</span> <span class="token function">composeFn</span><span class="token punctuation">(</span>mul<span class="token punctuation">,</span> square<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre>  </pre></td></tr><tr><td data-num="27"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">newFn</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 400</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;javascript-柯里化&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#javascript-柯里化&quot;&gt;#&lt;/a&gt; JavaScript 柯里化&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;柯里化也是属于函数式编程里面一个非常重要的概念。&lt;/p&gt;
&lt;/li&gt;
&lt;</summary>
      
    
    
    
    <category term="WebFE" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/WebFE/"/>
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/WebFE/JavaScript/"/>
    
    <category term="JavaScript Advanced" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/WebFE/JavaScript/JavaScript-Advanced/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript/"/>
    
    <category term="JavaScript Advanced" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript-Advanced/"/>
    
    <category term="Implementation Principle" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/Implementation-Principle/"/>
    
  </entry>
  
  <entry>
    <title>call &amp; apply &amp; bind 使用与实现原理</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2021/10/10/WebFE/JavaScript/ImplementationPrinciple/call_apply_bind/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2021/10/10/WebFE/JavaScript/ImplementationPrinciple/call_apply_bind/</id>
    <published>2021-10-10T10:18:58.000Z</published>
    <updated>2022-01-16T09:54:34.676Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1实现-call"><a class="anchor" href="#1实现-call">#</a> 1. 实现 call</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_call</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">thisArg<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">// 1. 将 thisArg 转成对象类型 (防止传入的是非对象类型)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  thisArg <span class="token operator">=</span> <span class="token punctuation">(</span>thisArg <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> thisArg <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">Object</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">)</span> <span class="token operator">:</span> window</pre></td></tr><tr><td data-num="4"></td><td><pre>  </pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">// 2. 获取需要执行的函数</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  thisArg<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token keyword">this</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  </pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token comment">// 3. 调用需要被执行的函数</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">const</span> result <span class="token operator">=</span> thisArg<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token keyword">delete</span> thisArg<span class="token punctuation">.</span>fn</pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token comment">// 4. 将结果返回出去</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token keyword">return</span> result</pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">const</span> lain <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  name<span class="token operator">:</span> <span class="token string">'lain'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  age<span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  friends<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>newFriends</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newFriends<span class="token punctuation">)</span> <span class="token comment">// [' 小鸟游六花 ', ' 樱岛麻衣 ', ' 伊莉雅 ']</span></pre></td></tr><tr><td data-num="24"></td><td><pre>  <span class="token keyword">this</span><span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>newFriends<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// &#123;name: 'lain', age: 16, friends: Array(3), fn: ƒ&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>foo<span class="token punctuation">.</span><span class="token function">_call</span><span class="token punctuation">(</span>lain<span class="token punctuation">,</span> <span class="token string">'小鸟游六花'</span><span class="token punctuation">,</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'伊莉雅'</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="2-实现-apply"><a class="anchor" href="#2-实现-apply">#</a> 2. 实现 apply</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_apply</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">thisArg<span class="token punctuation">,</span> argArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">// 1. 将 thisArg 转成对象类型 (防止传入的是非对象类型)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  thisArg <span class="token operator">=</span> <span class="token punctuation">(</span>thisArg <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> thisArg <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">Object</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">)</span> <span class="token operator">:</span> window</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">// 2. 获取需要执行的函数</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  thisArg<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token keyword">this</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token comment">// 3. 调用需要执行的函数</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">const</span> result <span class="token operator">=</span> thisArg<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>argArray<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token keyword">delete</span> thisArg<span class="token punctuation">.</span>fn</pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token comment">// 4. 将结果返回出去</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token keyword">return</span> result</pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">const</span> lain <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  name<span class="token operator">:</span> <span class="token string">'lain'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  age<span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  friends<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>newFriends</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newFriends<span class="token punctuation">)</span> <span class="token comment">// [' 小鸟游六花 ', ' 樱岛麻衣 ', ' 伊莉雅 ']</span></pre></td></tr><tr><td data-num="24"></td><td><pre>  <span class="token keyword">this</span><span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>newFriends<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// &#123;name: 'lain', age: 16, friends: Array(3), fn: ƒ&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>foo<span class="token punctuation">.</span><span class="token function">_apply</span><span class="token punctuation">(</span>lain<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'小鸟游六花'</span><span class="token punctuation">,</span><span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span><span class="token string">'伊莉雅'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'saber'</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="3实现-bind"><a class="anchor" href="#3实现-bind">#</a> 3. 实现 bind</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_bind</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">thisArg<span class="token punctuation">,</span>argArray</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">// 1. 将 thisArg 转成对象类型 (防止传入的是非对象类型)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  thisArg <span class="token operator">=</span> <span class="token punctuation">(</span>thisArg <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> thisArg <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">Object</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">)</span> <span class="token operator">:</span> window</pre></td></tr><tr><td data-num="4"></td><td><pre>  </pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">// 2. 获取需要执行的函数</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  thisArg<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token keyword">this</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token comment">// 3. 返回函数地址以便调用</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">const</span> result <span class="token operator">=</span> thisArg<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>argArray<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    </pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token comment">// 4. 删除函数</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">delete</span> thisArg<span class="token punctuation">.</span>fn</pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token comment">// 5. 将结果返回出去</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">return</span> result</pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">const</span> lain <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  name<span class="token operator">:</span> <span class="token string">'lain'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="22"></td><td><pre>  age<span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  friends<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">newFriends</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newFriends<span class="token punctuation">)</span> <span class="token comment">// [' 小鸟游六花 ', ' 樱岛麻衣 ', ' 伊莉雅 ', ' 五河琴里]</span></pre></td></tr><tr><td data-num="28"></td><td><pre>  <span class="token keyword">this</span><span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>newFriends<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// &#123;name: 'lain', age: 16, friends: Array(4), fn: ƒ&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>foo<span class="token punctuation">.</span><span class="token function">_bind</span><span class="token punctuation">(</span>lain<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'小鸟游六花'</span><span class="token punctuation">,</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'伊莉雅'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'五河琴里'</span><span class="token punctuation">)</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1实现-call&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#1实现-call&quot;&gt;#&lt;/a&gt; 1. 实现 call&lt;/h2&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;figcaption data-lang=&quot;JavaScript&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="WebFE" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/WebFE/"/>
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/WebFE/JavaScript/"/>
    
    <category term="JavaScript Advanced" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/WebFE/JavaScript/JavaScript-Advanced/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript/"/>
    
    <category term="JavaScript Advanced" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript-Advanced/"/>
    
    <category term="Implementation Principle" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/Implementation-Principle/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript name &amp; this</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2021/10/08/WebFE/JavaScript/Advanced/this/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2021/10/08/WebFE/JavaScript/Advanced/this/</id>
    <published>2021-10-08T07:23:36.000Z</published>
    <updated>2022-01-16T09:54:07.471Z</updated>
    
    <content type="html"><![CDATA[<h2 id="name是window自带的全局属性"><a class="anchor" href="#name是window自带的全局属性">#</a> name 是 window 自带的全局属性</h2><h3 id="name属性可设置或返回存放窗口的名称的一个字符串"><a class="anchor" href="#name属性可设置或返回存放窗口的名称的一个字符串">#</a> name 属性可设置或返回存放窗口的名称的一个字符串</h3><p>它比较特殊。当你打开浏览器没有给 name 赋值时 console.log (<span class="exturl" data-url="aHR0cDovL3dpbmRvdy5uYW1l">window.name</span> === '') 是为 true 的！</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="2"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>参考：</p><p><img data-src="name1.png" alt="name1" /></p><h4 id="var-声明name"><a class="anchor" href="#var-声明name">#</a> var 声明 name</h4><p>var 第一次打印</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'nekoaimer'</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// 当你第一次赋值时 name 时可以正确打印的</span></pre></td></tr><tr><td data-num="3"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// name</span></pre></td></tr></table></figure><p>参考：</p><p><img data-src="name2.png" alt="name2" /></p><p>var 第二次打印</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// var name = 'nekoaimer'</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// 继续当前窗口，这一次把上面一行注释掉再打印</span></pre></td></tr><tr><td data-num="3"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// name</span></pre></td></tr></table></figure><p>参考：虽然没有声明但依然能打印出上一次赋的值 nekoaimer</p><p><img data-src="name2.png" alt="name" /></p><h4 id="const"><a class="anchor" href="#const">#</a> const</h4><p>注意测试 const&amp;let 时，<span class="red">请把窗口关闭重新打开，因为 name 依然是上一次 var 的值</span></p><p>const 第一次打印</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">'Saber'</span></pre></td></tr><tr><td data-num="2"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Saber</span></pre></td></tr></table></figure><p><img data-src="name3.png" alt="name3" /></p><p>const 第二次打印</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// const name = 'Saber'</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// 继续当前窗口，这一次把上面一行注释掉再打印</span></pre></td></tr><tr><td data-num="3"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ‘’</span></pre></td></tr></table></figure><p><img data-src="name4.png" alt="name4" /></p><h4 id="let"><a class="anchor" href="#let">#</a> let</h4><p>第一次</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'Saber'</span></pre></td></tr><tr><td data-num="2"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Saber</span></pre></td></tr></table></figure><p><img data-src="name3.png" alt="name3" /></p><p>第二次</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// let name = 'Saber'</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// 继续当前窗口，这一次把上面一行注释掉再打印</span></pre></td></tr><tr><td data-num="3"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ''</span></pre></td></tr></table></figure><p><img data-src="name4.png" alt="name4" /></p><h3 id="thisname"><a class="anchor" href="#thisname">#</a> <span class="exturl" data-url="aHR0cDovL3RoaXMubmFtZQ==">this.name</span></h3><p>var 声明的都是全局属性，可以通过 window 来获取！</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// window</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'nekoaimer'</span> </pre></td></tr><tr><td data-num="3"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// nekoaimer</span></pre></td></tr><tr><td data-num="4"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>window<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// nekoaimer</span></pre></td></tr></table></figure><p>参考：</p><p><img data-src="name5.png" alt="name5" /></p><p>const&amp;let 不能通过 window 来获取</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// window</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">'nekoaimer'</span> </pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// Mozilla Firefox 打印的是 & lt;empty string> 代表空字符串</span></pre></td></tr><tr><td data-num="4"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ''</span></pre></td></tr><tr><td data-num="5"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>window<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ''</span></pre></td></tr></table></figure><p>参考：</p><p><img data-src="name6.png" alt="name6" /></p><p><span class="rainbow">总之这就是它们的不同之处，关于 var 与 const&amp;let 区别我有时间还会开一个篇章～之所以提及 name 是在测试面试题的时候如果不注意可能会有偏差！</span></p><h2 id="this到底指向什么"><a class="anchor" href="#this到底指向什么">#</a> this 到底指向什么？</h2><ul><li><p>我们先来看一个让人困惑的问题：</p><ul><li>定义一个函数，我们采用三种不同的方式对它进行调用，它产生了三种不同的结果</li></ul></li><li><p>下面的案例可以给我们什么样的启示呢？</p><ul><li>1. 函数在调用时，JavaScript 会默认给 this 绑定一个值；</li><li>2.this 的绑定和定义的位置（编写的位置）没有关系；</li><li>3.this 的绑定和调用方式以及调用的位置有关系；</li><li>4.this 是在运行时被绑定的；</li></ul></li></ul><h3 id="同一个函数的-this-不同"><a class="anchor" href="#同一个函数的-this-不同">#</a> 同一个函数的 this 不同</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//this 指向什么，跟函数所处的位置是没有关系的</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// 跟函数被调用的方式是有关系</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// 1. 直接调用这个函数</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">// 2. 创建一个对象，对象中的函数指向 foo</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  name<span class="token operator">:</span> <span class="token string">'saber'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  foo<span class="token operator">:</span> foo</pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment">// 3.apply 调用</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token string">"nekoaimer"</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>参考：</p><p><img data-src="this1.png" alt="this1" /></p><ul><li><p>那么 this 到底是怎么样的绑定规则呢？</p><ul><li><p>绑定一：默认绑定；</p></li><li><p>绑定二：隐式绑定；</p></li><li><p>绑定三：显示绑定；</p></li><li><p>绑定四：new 绑定；</p></li></ul></li></ul><h2 id="this-绑定规则-面试题"><a class="anchor" href="#this-绑定规则-面试题">#</a> this 绑定规则 + 面试题</h2><h3 id="默认绑定"><a class="anchor" href="#默认绑定">#</a> 默认绑定</h3><ul><li>什么情况下使用默认绑定呢？独立函数调用。<ul><li>独立的函数调用我们可以理解成函数没有被绑定到某个对象上进行调用；</li></ul></li><li>我们通过几个案例来看一下，常见的默认绑定～</li></ul><ol class="mistake"><li class="quiz fill multi mistake"><p>this 指向例题 1</p><figure class="highlight js"><figcaption data-lang="JavaScript"><span>面试题</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token function">foo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token function">foo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token function">foo3</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>下面正确的的输出结果是：<span class="gap">C</span></p><ul class="options"><li><code>foo3 foo2 foo1</code></li><li><code>foo3 foo3 foo3</code></li><li class="correct"><code>以上都不对</code> </li></ul><blockquote><p>解析：<br />[正确输出顺序是：window window window ~ 它们都是独立函数调用，没有绑定 this，指向自然都是 window！~]</p><p>参考：</p><p><img data-src="default1.png" alt="default1" /></p><p></p></blockquote></li><li class="quiz fill multi mistake"><p>this 指向例题 2</p><figure class="highlight js"><figcaption data-lang="JavaScript"><span>面试题</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  name<span class="token operator">:</span> <span class="token string">'nekoaimer'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  age<span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">var</span> bar <span class="token operator">=</span> obj<span class="token punctuation">.</span>foo</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>下面正确的的输出结果是：<span class="gap">C</span></p><ul class="options"><li><code>obj</code></li><li><code>bar</code></li><li class="correct"><code>window</code> </li></ul><blockquote><p>解析：<br />[独立函数调用没有绑定 this，当前指向的自然是 window 了～]</p><p>参考：</p><p><img data-src="default2.png" alt="default2" /></p><p></p></blockquote></li><li class="quiz fill multi mistake"><p>this 指向例题 3</p><figure class="highlight js"><figcaption data-lang="JavaScript"><span>面试题</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  name<span class="token operator">:</span> <span class="token string">'nekoaimer'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  age<span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  foo<span class="token operator">:</span> foo</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">var</span> bar <span class="token operator">=</span> obj<span class="token punctuation">.</span>foo</pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>下面正确的的输出结果是：<span class="gap">C</span></p><ul class="options"><li><code>obj</code></li><li><code>bar</code></li><li class="correct"><code>window</code> </li></ul><blockquote><p>解析：<br />[bar 函数调用，当前 this 指向是 window，就这么简单！~]</p><p>参考：</p><p><img data-src="default3.png" alt="default3" /></p><p></p></blockquote></li><li class="quiz fill multi"><p>this 指向例题 4</p><figure class="highlight js"><figcaption data-lang="JavaScript"><span>面试题</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>下面正确的的输出结果是：<span class="gap">D</span></p><ul class="options"><li><code>bar</code></li><li><code>foo</code></li><li><code>fn</code></li><li class="correct"><code>window</code> </li></ul><blockquote><p>解析：<br />[嗯～不过多赘述了～]</p><p>参考：</p><p><img data-src="default3.png" alt="default3" /></p><p></p></blockquote></li></ol><h3 id="隐式绑定"><a class="anchor" href="#隐式绑定">#</a> 隐式绑定</h3><ul><li>另外一种比较常见的调用方式是通过某个对象进行调用的：<ul><li>也就是它的调用位置中，是通过某个对象发起的函数调用。</li></ul></li><li>我们通过几个案例来看一下，常见的默认绑定～</li></ul><ol class="mistake"><li class="quiz fill multi mistake"><p>this 指向例题 2</p><figure class="highlight js"><figcaption data-lang="JavaScript"><span>面试题</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  name<span class="token operator">:</span> <span class="token string">"nekoaimer"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token function-variable function">studying</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"在学习"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token function-variable function">sleeping</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">===</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> 在睡觉</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">var</span> sleep <span class="token operator">=</span> obj<span class="token punctuation">.</span>sleeping</pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>下面正确的的输出结果是：<span class="gap">A</span></p><ul class="options"><li class="correct"><code>true '在睡觉'</code> </li><li><code>false '在睡觉'</code></li><li><code>true 'nekoaimer在睡觉'</code></li><li><code>false 'nekoaimer在睡觉' </code></li></ul><blockquote><p>解析：<br />[隐式绑定：obj.sleep ()</p><p>obj 对象会被 js 引擎绑定到 sleep 函数中的 this 里面，而 sleep 中 this 指向 window，而 window 的 name 在未被定义时是空字符串，<span class="exturl" data-url="aHR0cDovL3RoaXMubmFtZQ==">this.name</span> 自然获取到的也是空字符串！这就是上面会特意为 name 开一个篇章来讲的原因！ ]</p><p>参考：</p><p><img data-src="implicit1.png" alt="implicit1" /></p><p></p></blockquote></li><li class="quiz fill multi mistake"><p>this 指向例题 2</p><figure class="highlight js"><figcaption data-lang="JavaScript"><span>面试题</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  name<span class="token operator">:</span> <span class="token string">'nekoaimer'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  foo<span class="token operator">:</span> fn</pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>下面正确的的输出结果是：<span class="gap">A</span></p><ul class="options"><li class="correct"><code>obj</code> </li><li><code>foo</code></li><li><code>fn</code></li><li><code>window</code></li></ul><blockquote><p>解析：<br />[不深入优先级的话，调用者是 obj，指向自然就是 obj ~]</p><p>参考：</p><p><img data-src="implicit2.png" alt="implicit2" /></p><p></p></blockquote></li><li class="quiz fill multi mistake"><p>this 指向例题 3</p><figure class="highlight js"><figcaption data-lang="JavaScript"><span>面试题</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  name<span class="token operator">:</span> <span class="token string">'nekoaimer'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token function-variable function">foo</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> fn</pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>foo<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>下面正确的的输出顺序是：<span class="gap">C</span></p><ul class="options"><li><code>bar bar</code></li><li><code>obj bar</code></li><li class="correct"><code>obj foo</code> </li><li><code>window foo</code></li></ul><blockquote><p>解析：<br />[call 绑定 obj，那么 this 指向 obj，this 的 parentScope 是 foo，foo 的 this 是 obj，你学废了吗～]</p><p>参考：</p><p><img data-src="implicit3.png" alt="implicit3" /></p><p></p></blockquote></li><li class="quiz fill multi"><p>this 指向例题 4</p><figure class="highlight js"><figcaption data-lang="JavaScript"><span>面试题</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  name<span class="token operator">:</span> <span class="token string">"obj1"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token function-variable function">foo</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  name<span class="token operator">:</span> <span class="token string">"obj2"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  bar<span class="token operator">:</span> obj1<span class="token punctuation">.</span>foo</pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>obj2<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>下面正确的的输出结果是：<span class="gap">C</span></p><ul class="options"><li><code>foo</code></li><li><code>obj1</code></li><li class="correct"><code>obj2</code> </li><li><code>window</code></li></ul><blockquote><p>解析：<br />[obj2 是调用者 隐式绑定优先级比独立函数调用高～]</p><p>参考：</p><p><img data-src="implicit4.png" alt="implicit4" /></p><p></p></blockquote></li></ol><h3 id="显示绑定"><a class="anchor" href="#显示绑定">#</a> 显示绑定</h3><p>隐式绑定有一个前提条件：</p><ul><li>必须在调用的对象内部有一个对函数的引用（比如一个属性）；</li><li>如果没有这样的引用，在进行调用时，会报找不到该函数的错误；</li><li>正是通过这个引用，间接的将 this 绑定到了这个对象上；</li></ul><p>如果我们不希望在 对象内部 包含这个函数的引用，同时又希望在这个对象上进行强制调用，该怎么做呢？</p><ul><li><p>JavaScript 所有的函数都可以使用 call 和 apply 方法（这个和 Prototype 有关）。</p><ul><li><p>它们两个的区别这里不再展开；</p></li><li><p>其实非常简单，第一个参数是相同的，后面的参数，apply 为数组，call 为参数列表；</p></li></ul></li></ul><p>这两个函数的第一个参数都要求是一个对象，这个对象的作用是什么呢？就是给 this 准备的。</p><p>在调用这个函数时，会将 this 绑定到这个传入的对象上。</p><p>因为上面的过程，我们明确的绑定了 this 指向的对象，所以称之为 显示绑定</p><ul><li><p>通过 call 或者 apply 绑定 this 对象</p><ul><li>显示绑定后，this 就会明确的指向绑定的对象</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  name<span class="token operator">:</span> <span class="token string">'nekoaimer'</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span> <span class="token comment">// window</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span> <span class="token comment">// info</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">233</span><span class="token punctuation">)</span> <span class="token comment">// Number, 存放是 233</span></pre></td></tr></table></figure></li><li><p>如果我们希望一个函数总是显示的绑定到一个对象上，可以怎么做呢</p></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  </pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    name<span class="token operator">:</span> <span class="token string">'nekoaimer'</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//info 对象</span></pre></td></tr></table></figure><h3 id="new绑定"><a class="anchor" href="#new绑定">#</a> new 绑定</h3><ul><li>JavaScript 中的函数可以当做一个类的构造函数来使用，也就是使用 new 关键字。</li><li>使用 new 关键字来调用函数是，会执行如下的操作：<ul><li>创建一个全新的对象；</li><li>这个新对象会被执行 prototype 连接；</li><li>这个新对象会绑定到函数调用的 this 上（this 的绑定在这个步骤完成）；</li><li>如果函数没有返回其他对象，表达式会返回这个新对象；</li></ul></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 我们通过一个 new 关键字调用一个函数时 (构造器), 这个时候 this 是在调用这个构造器时创建出来的对象</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">//this = 创建出来的对象</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 这个绑定过程就是 new 绑定</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Lain"</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name<span class="token punctuation">,</span> p1<span class="token punctuation">.</span>age<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Saber"</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>name<span class="token punctuation">,</span> p2<span class="token punctuation">.</span>age<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token function-variable function">foo</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="内置函数绑定"><a class="anchor" href="#内置函数绑定">#</a> 内置函数绑定</h3><ul><li>有些时候，我们会调用一些 JavaScript 的内置函数，或者一些第三方库中的内置函数。<ul><li>这些内置函数会要求我们传入另外一个函数；</li><li>我们自己并不会显示的调用这些函数，而是 JavaScript 内部或者第三方库内部会帮助我们执行；</li><li>这些函数中的 this 又是如何绑定的呢？</li></ul></li><li>setTimeout、数组的 forEach、div 的点击</li></ul><h4 id="settimeout"><a class="anchor" href="#settimeout">#</a> settimeout</h4><ol class="mistake"><li class="quiz fill multi mistake"><p>this 指向例题 1</p><figure class="highlight js"><figcaption data-lang="JavaScript"><span>面试题</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  name<span class="token operator">:</span> <span class="token string">'Lain'</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">function</span> <span class="token function">mySetTimer</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> duration</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>      <span class="token keyword">return</span> obj</pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>duration<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token function">mySetTimer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>下面正确的的输出结果是：<span class="gap">B</span></p><ul class="options"><li><code>fn</code></li><li class="correct"><code>obj</code>  </li><li><code>window</code></li><li><code>mySetTimer</code></li></ul><blockquote><p>解析：<br />[fn.call 代表调用函数，此时返回值是 obj，而 foo (){}.call () 这种写法虽然不会报错但没有实际意义，而此时调用的函数是 mySetTimer 里面的第一个参数，它正在进行 console.log (this) 操作，此时意味着 fn.call (obj), 那么打印出来的 this 自然就是 obj 了～]</p><p>参考：</p><p><img data-src="setTimeout1.png" alt="setTimeout1" /></p><p></p></blockquote></li><li class="quiz fill multi"><p>this 指向例题 2</p><figure class="highlight js"><figcaption data-lang="JavaScript"><span>面试题</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  name<span class="token operator">:</span> <span class="token string">'Lain'</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">function</span> <span class="token function">mySetTimer</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> duration</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>      <span class="token keyword">return</span> mySetTimer</pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> duration<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token function">mySetTimer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>下面正确的的输出结果是：<span class="gap">C</span></p><ul class="options"><li><code>''</code></li><li><code>fn</code></li><li><code>Lain</code></li><li class="correct"><code>mySetTimer</code>  </li></ul><blockquote><p>解析：[  懒得打字了，发挥智慧的小脑瓜想想吧<sub> (～￣▽￣)～</sub> ]</p><p>参考：</p><p><img data-src="setTimeout2.png" alt="setTimeout2" /></p><p></p></blockquote></li></ol><h4 id="监听点击"><a class="anchor" href="#监听点击">#</a> 监听点击</h4><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// html</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&lt;</span>button<span class="token operator">></span>点击<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// js</span></pre></td></tr><tr><td data-num="4"></td><td><pre>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onclick:'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>  btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'addEventListener:'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h4 id="foreachmap"><a class="anchor" href="#foreachmap">#</a> forEach/map</h4><ol class="mistake"><li class="quiz fill multi mistake"><p>this 指向例题 1</p><figure class="highlight js"><figcaption data-lang="JavaScript"><span>面试题</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">var</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Saber"</span><span class="token punctuation">,</span> <span class="token string">"Lain"</span><span class="token punctuation">,</span> <span class="token string">"Maelwine"</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre>names<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>下面 this 的正确输出结果是：<span class="gap">B</span></p><ul class="options"><li><code>names</code></li><li class="correct"><code>Number </code> </li><li><code>Function</code></li><li><code>window</code></li></ul><blockquote><p>解析：[为什么会是 Number 了？其实你只要打印 console.log (setTimeout (() =&gt; {})) 得到的结果是 1，那又为什么打印会是个 1 呢？嗯～个人猜测：大家都知道 setTimeout 是异步的，因为只执行了一次异步，那么它的进程是 1，如果同时打印两次，那么相当于有两个异步进程，第一个是 1，第二个打印的就是 2 了～]</p><p>参考：</p><p><img data-src="forEach1.png" alt="forEach1" /></p><p></p></blockquote></li><li class="quiz fill multi mistake"><p>this 指向例题 2</p><figure class="highlight js"><figcaption data-lang="JavaScript"><span>面试题</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">var</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Saber"</span><span class="token punctuation">,</span> <span class="token string">"Lain"</span><span class="token punctuation">,</span> <span class="token string">"Maelwine"</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre>names<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>下面正确的打印顺序是：<span class="gap">B</span></p><ul class="options"><li><code>123456</code></li><li class="correct"><code>234567</code>  </li><li><code>112233</code></li><li><code>223344</code></li></ul><blockquote><p>解析：[   懒得打字了，发挥智慧的小脑瓜想想吧<sub> (～￣▽￣)～</sub> ]</p><p>参考：</p><p><img data-src="forEach2.png" alt="forEach2" /></p><p></p></blockquote></li><li class="quiz fill multi mistake"><p>this 指向例题 3</p><figure class="highlight js"><figcaption data-lang="JavaScript"><span>面试题</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">var</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Saber"</span><span class="token punctuation">,</span> <span class="token string">"Lain"</span><span class="token punctuation">,</span> <span class="token string">"Maelwine"</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  names</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">return</span> obj</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>names<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>下面 this 的指向输出顺序是：<span class="gap">A</span></p><ul class="options"><li class="correct"><code>obj obj obj</code> </li><li><code>foo foo foo</code></li><li><code>window window windod</code></li></ul><blockquote><p>解析：[   懒得打字了，发挥智慧的小脑瓜想想吧<sub> (～￣▽￣)～</sub> ]</p><p>参考：</p><p><img data-src="map1.png" alt="map1" /></p><p></p></blockquote></li><li class="quiz fill multi"><p>this 指向例题 4</p><figure class="highlight js"><figcaption data-lang="JavaScript"><span>面试题</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">var</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Saber"</span><span class="token punctuation">,</span> <span class="token string">"Lain"</span><span class="token punctuation">,</span> <span class="token string">"Maelwine"</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  names</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">return</span> obj</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>names<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>下面 this 的指向输出顺序是：<span class="gap">B</span></p><ul class="options"><li><code>obj obj obj</code></li><li class="correct"><code>foo foo foo</code>  </li><li><code>window window windod</code></li></ul><blockquote><p>解析：[   懒得打字了，发挥智慧的小脑瓜想想吧<sub> (～￣▽￣)～</sub>就这些吧，出题好累～]</p><p>参考：</p><p><img data-src="map2.png" alt="map2" /></p><p></p></blockquote></li></ol><h3 id="特殊绑定"><a class="anchor" href="#特殊绑定">#</a> 特殊绑定</h3><h4 id="忽略显示绑定"><a class="anchor" href="#忽略显示绑定">#</a> 忽略显示绑定</h4><ol class="mistake"><li class="quiz fill multi"><p>this 指向例题 1</p><figure class="highlight js"><figcaption data-lang="JavaScript"><span>面试题</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>下面 this 的指向输出顺序是：<span class="gap">C</span></p><ul class="options"><li><code>Object  undefined Object</code></li><li><code>null undefined null</code></li><li class="correct"><code>window window windod</code> </li></ul><blockquote><p>参考：</p><p><img data-src="special1.png" alt="special1" /></p><p></p></blockquote></li></ol><h4 id="间接函数引用"><a class="anchor" href="#间接函数引用">#</a> 间接函数引用</h4><ol class="mistake"><li class="quiz fill multi mistake"><p>this 指向例题 1</p><figure class="highlight js"><figcaption data-lang="JavaScript"><span>面试题</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">var</span> saber <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  name<span class="token operator">:</span> <span class="token string">"Saber"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token function-variable function">foo</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">var</span> lain <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  name<span class="token operator">:</span> <span class="token string">"Lain"</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>lain<span class="token punctuation">.</span>bar <span class="token operator">=</span> saber<span class="token punctuation">.</span>foo</pre></td></tr><tr><td data-num="13"></td><td><pre>lain<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>下面 this 的指向是：<span class="gap">A</span></p><ul class="options"><li class="correct"><code>lain</code> </li><li><code>saber</code></li><li><code>window</code></li></ul><blockquote><p>参考：</p><p><img data-src="special2.png" alt="special2" /></p><p></p></blockquote></li><li class="quiz fill multi"><p>this 指向例题 2</p><figure class="highlight js"><figcaption data-lang="JavaScript"><span>面试题</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">var</span> saber <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  name<span class="token operator">:</span> <span class="token string">"Saber"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token function-variable function">foo</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">var</span> lain <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  name<span class="token operator">:</span> <span class="token string">"Lain"</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 注意这里不加分号词法解析不了会报错</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">(</span>lain<span class="token punctuation">.</span>bar <span class="token operator">=</span> saber<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>下面 this 的指向输出顺序是：<span class="gap">C</span></p><ul class="options"><li><code>lain</code></li><li><code>saber</code></li><li class="correct"><code>window</code> </li></ul><blockquote><p>参考：</p><p><img data-src="special3.png" alt="special3" /></p><p></p></blockquote></li></ol><h2 id="this-规则优先级-面试题"><a class="anchor" href="#this-规则优先级-面试题">#</a> this 规则优先级 + 面试题</h2><ul><li><p>学习了四条规则，接下来开发中我们只需要去查找函数的调用应用了哪条规则即可，但是如果一个函数调用位置应用了多条规则，优先级谁更高呢？</p></li><li><p>1. 默认规则的优先级最低</p><ul><li>毫无疑问，默认规则的优先级是最低的，因为存在其他规则时，就会通过其他规则的方式来绑定 this</li></ul></li><li><p>2. 显示绑定优先级高于隐式绑定</p></li><li><p>3.new 绑定优先级高于隐式绑定</p></li><li><p>4.new 绑定优先级高于 bind</p><ul><li>new 绑定和 call、apply 是不允许同时使用的，所以不存在谁的优先级更高</li><li>new 绑定可以和 bind 一起使用，new 绑定优先级更高</li></ul></li></ul><h3 id="优先级"><a class="anchor" href="#优先级">#</a> 优先级</h3><h4 id="默认绑定-2"><a class="anchor" href="#默认绑定-2">#</a> 默认绑定</h4><ol class="mistake"><li class="quiz fill multi"><p>this 指向例题 1</p><figure class="highlight js"><figcaption data-lang="JavaScript"><span>面试题</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  name<span class="token operator">:</span> <span class="token string">"Lain"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token function-variable function">favorite</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>obj<span class="token punctuation">.</span><span class="token function">favorite</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>下面 this 的指向是：<span class="gap">D</span></p><ul class="options"><li><code>foo</code></li><li><code>bar</code></li><li><code>nekoaimer</code></li><li class="correct"><code>window</code> </li></ul><blockquote><p>解析：[favorite 里面是一个立即执行函数，在你调用之前它已经执行完了，所以它的 this 是 window。如果你打印 obj.favorite () 这句结果自然是 undefined<sub>(～￣▽￣)～</sub>~ ]</p><p>参考：</p><p><img data-src="default2.png" alt="default2" /></p><p></p></blockquote></li></ol><h4 id="显示绑定-2"><a class="anchor" href="#显示绑定-2">#</a> 显示绑定</h4><ol start="2" class="mistake"><li class="quiz fill multi mistake"><p>this 指向例题 2</p><figure class="highlight js"><figcaption data-lang="JavaScript"><span>面试题</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">var</span> lain <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  name<span class="token operator">:</span> <span class="token string">"lain"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  foo<span class="token operator">:</span> <span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"Saber"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>lain<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>下面 this 的指向是：<span class="gap">C</span></p><ul class="options"><li><code>foo</code></li><li><code>lain</code></li><li class="correct"><code>Saber</code>  </li></ul><blockquote><p>解析：[  bind 绑定比默认绑定的优先级更高！<sub>(～￣▽￣)～</sub>~ ]</p><p>参考：</p><p><img data-src="priority1.png" alt="priority1" /></p><p></p></blockquote></li><li class="quiz fill multi"><p>this 指向例题 3</p><figure class="highlight js"><figcaption data-lang="JavaScript"><span>面试题</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">var</span> nekoaimer <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  name<span class="token operator">:</span> <span class="token string">"nekoaimer"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token function-variable function">favorite</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>nekoaimer<span class="token punctuation">.</span><span class="token function">favorite</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token string">'Saber'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>nekoaimer<span class="token punctuation">.</span><span class="token function">favorite</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'Lain'</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>下面 this 的指向输出顺序是：<span class="gap">A</span></p><ul class="options"><li class="correct"><code>Saber Lain</code> </li><li><code>window window</code></li><li><code>nekoaimer nekoaimer</code></li></ul><blockquote><p>解析：[  bind 绑定比默认绑定的优先级更高！<sub>(～￣▽￣)～</sub>~ ]</p><p>参考：</p><p><img data-src="priority2.png" alt="priority2" /></p><p></p></blockquote></li></ol><h4 id="隐式绑定-2"><a class="anchor" href="#隐式绑定-2">#</a> 隐式绑定</h4><ol class="mistake"><li class="quiz fill multi mistake"><p>this 指向例题 1</p><figure class="highlight js"><figcaption data-lang="JavaScript"><span>面试题</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  name<span class="token operator">:</span> <span class="token string">"Lain"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token function-variable function">foo</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">var</span> bar <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"Saber"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>下面 this 的指向是：<span class="gap">C</span></p><ul class="options"><li><code>obj</code></li><li><code>bar</code></li><li class="correct"><code>Saber</code>   </li></ul><blockquote><p>解析：[   bind 绑定比隐式绑定的优先级更高！<sub>(～￣▽￣)～</sub>~ ]</p><p>参考：</p><p><img data-src="priority1.png" alt="priority1" /></p><p></p></blockquote></li><li class="quiz fill multi"><p>this 指向例题 2</p><figure class="highlight js"><figcaption data-lang="JavaScript"><span>面试题</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  name<span class="token operator">:</span> <span class="token string">"Lain"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  foo<span class="token operator">:</span> <span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"Saber"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>下面 this 的指向是：<span class="gap">B</span></p><ul class="options"><li><code>obj</code></li><li class="correct"><code>Saber</code>   </li><li><code>window</code></li></ul><blockquote><p>解析：[   bind 绑定比隐式绑定的优先级更高！<sub>(～￣▽￣)～</sub>~  ]</p><p>参考：</p><p><img data-src="priority1.png" alt="priority1" /></p><p></p></blockquote></li></ol><h4 id="new绑定-2"><a class="anchor" href="#new绑定-2">#</a> new 绑定</h4><ol class="mistake"><li class="quiz fill multi mistake"><p>this 指向例题 1</p><figure class="highlight js"><figcaption data-lang="JavaScript"><span>面试题</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">var</span> info <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  name<span class="token operator">:</span> <span class="token string">"info"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token function-variable function">sleeping</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">const</span> Saber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">info<span class="token punctuation">.</span>sleeping</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>下面 this 的指向是：<span class="gap">C</span></p><ul class="options"><li><code>info</code></li><li><code>Saber</code></li><li class="correct"><code>sleeping</code> </li></ul><blockquote><p>解析：[  new 的优先级高于隐式绑定！<sub>(～￣▽￣)～</sub>~ ]</p><p>参考：</p><p><img data-src="priority3.png" alt="priority3" /></p><p></p></blockquote></li><li class="quiz fill multi mistake"><p>this 指向例题 2</p><figure class="highlight js"><figcaption data-lang="JavaScript"><span>面试题</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">sleeping</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token function">sleeping</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"Saber"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>下面 this 的指向是：<span class="gap">D</span></p><ul class="options"><li><code>obj</code></li><li><code>bar</code></li><li><code>Saber</code></li><li class="correct"><code>sleeping</code> </li></ul><blockquote><p>解析：[  结论: new 关键字不能和 apply/call 一起来使用</p><p>new 绑定 &gt; 显示绑定 (apply/call/bind) &gt; 隐式绑定 (obj.foo ()) &gt; 默认绑定 (独立函数调用)  <sub>(～￣▽￣)～</sub>~ ]</p><p>参考：</p><p><img data-src="priority3.png" alt="priority3" /></p><p></p></blockquote></li><li class="quiz fill multi mistake"><p>this 指向例题 3</p><figure class="highlight js"><figcaption data-lang="JavaScript"><span>面试题</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">'Saber'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token string">'Lain'</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>下面 this 的指向是：<span class="gap">B</span></p><ul class="options"><li><code>Lain</code></li><li class="correct"><code>Saber</code> </li><li><code>window</code></li></ul><blockquote><p>解析：[  bind 比 apply 的优先级更高！<sub>(～￣▽￣)～</sub>~ ]</p><p>参考：</p><p><img data-src="priority1.png" alt="priority1" /></p><p></p></blockquote></li><li class="quiz fill multi"><p>this 指向例题 4</p><figure class="highlight js"><figcaption data-lang="JavaScript"><span>面试题</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">'Saber'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'Lain'</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>下面 this 的指向是：<span class="gap">B</span></p><ul class="options"><li><code>Lain</code></li><li class="correct"><code>Saber</code> </li><li><code>window</code></li></ul><blockquote><p>解析：[  bind 也比 call 的优先级更高！<sub>(～￣▽￣)～</sub>~ ]</p><p>参考：</p><p><img data-src="priority1.png" alt="priority1" /></p><p></p></blockquote></li></ol><h3 id="面试题"><a class="anchor" href="#面试题">#</a> 面试题</h3><ol class="mistake"><li class="quiz fill multi mistake"><p>this 指向例题 1</p><figure class="highlight js"><figcaption data-lang="JavaScript"><span>面试题</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"window"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">var</span> saber <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  name<span class="token operator">:</span> <span class="token string">"saber"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token function-variable function">sayName</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">function</span> <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token keyword">var</span> lain <span class="token operator">=</span> saber<span class="token punctuation">.</span>sayName<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token function">lain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="13"></td><td><pre>  saber<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token punctuation">(</span>saber<span class="token punctuation">.</span>sayName<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token punctuation">(</span>lain <span class="token operator">=</span> saber<span class="token punctuation">.</span>sayName<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>下面正确的输出顺序是：<span class="gap">C</span></p><ul class="options"><li><code>saber saber saber saber</code></li><li><code>saber window window saber</code></li><li class="correct"><code>window saber saber window</code> </li></ul><blockquote><p>解析：[懒得打字了，发挥智慧的小脑瓜想想吧 (～￣▽￣)～~ ]</p><p>参考：</p><p><img data-src="interview1.png" alt="interview1" /></p><p></p></blockquote></li><li class="quiz fill multi mistake"><p>this 指向例题 2</p><figure class="highlight js"><figcaption data-lang="JavaScript"><span>面试题</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'window'</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  name<span class="token operator">:</span> <span class="token string">'person1'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token function-variable function">foo1</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token function-variable function">foo2</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token function-variable function">foo3</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token function-variable function">foo4</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'person2'</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>person1<span class="token punctuation">.</span><span class="token function">foo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="24"></td><td><pre>person1<span class="token punctuation">.</span><span class="token function">foo1</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre>person1<span class="token punctuation">.</span><span class="token function">foo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="27"></td><td><pre>person1<span class="token punctuation">.</span><span class="token function">foo2</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre>person1<span class="token punctuation">.</span><span class="token function">foo3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>person1<span class="token punctuation">.</span><span class="token function">foo3</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="31"></td><td><pre>person1<span class="token punctuation">.</span><span class="token function">foo3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre>person1<span class="token punctuation">.</span><span class="token function">foo4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="34"></td><td><pre>person1<span class="token punctuation">.</span><span class="token function">foo4</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>person1<span class="token punctuation">.</span><span class="token function">foo4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>下面正确的输出顺序是：<span class="gap">B</span></p><ul class="options"><li><code>window person2 window person1 window window person2 person1 person2 person1</code></li><li class="correct"><code>person1 person2 window window window window person2 person1 person2 person1</code> </li><li><code>person1 person2 window person1 window window person2 person1 person2 person1</code></li><li>以上选项都不对</li></ul><blockquote><p>解析：[懒得打字了，发挥智慧的小脑瓜想想吧 (～￣▽￣)～~ ]</p><p>参考：</p><p><img data-src="interview2.png" alt="interview2" /></p><p></p></blockquote></li><li class="quiz fill multi mistake"><p>this 指向例题 3</p><figure class="highlight js"><figcaption data-lang="JavaScript"><span>面试题</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">Person</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">foo1</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">foo2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">foo3</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">foo4</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'person1'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'person2'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>person1<span class="token punctuation">.</span><span class="token function">foo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="23"></td><td><pre>person1<span class="token punctuation">.</span><span class="token function">foo1</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre>person1<span class="token punctuation">.</span><span class="token function">foo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="26"></td><td><pre>person1<span class="token punctuation">.</span><span class="token function">foo2</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre>person1<span class="token punctuation">.</span><span class="token function">foo3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre>person1<span class="token punctuation">.</span><span class="token function">foo3</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="30"></td><td><pre>person1<span class="token punctuation">.</span><span class="token function">foo3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre>person1<span class="token punctuation">.</span><span class="token function">foo4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="33"></td><td><pre>person1<span class="token punctuation">.</span><span class="token function">foo4</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="34"></td><td><pre>person1<span class="token punctuation">.</span><span class="token function">foo4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span></pre></td></tr></table></figure><p>下面正确的输出顺序是：<span class="gap">C</span></p><ul class="options"><li><code>person1 person2 window person2 undefined person2 person2 person1 person2 person2</code></li><li><code>person1 person2 person1 person1 window window person2 person2 person1 person1</code></li><li class="correct"><code>person1 person2 person1 person1 window window person2 person1 person2 person1</code> </li><li><code>person1 person2 window window window window person2 person1 person2 person1</code></li></ul><blockquote><p>解析：[懒得打字了，发挥智慧的小脑瓜想想吧 (～￣▽￣)～~ ]</p><p>参考：</p><p><img data-src="interview3.png" alt="interview3" /></p><p></p></blockquote></li><li class="quiz fill multi"><p>this 指向例题 4</p><figure class="highlight js"><figcaption data-lang="JavaScript"><span>面试题</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'window'</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">function</span> <span class="token function">Person</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">this</span><span class="token punctuation">.</span>obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    name<span class="token operator">:</span> <span class="token string">'obj'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token function-variable function">foo1</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>      <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token function-variable function">foo2</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'person1'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'person2'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>person1<span class="token punctuation">.</span>obj<span class="token punctuation">.</span><span class="token function">foo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="23"></td><td><pre>person1<span class="token punctuation">.</span>obj<span class="token punctuation">.</span><span class="token function">foo1</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="24"></td><td><pre>person1<span class="token punctuation">.</span>obj<span class="token punctuation">.</span><span class="token function">foo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre>person1<span class="token punctuation">.</span>obj<span class="token punctuation">.</span><span class="token function">foo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="27"></td><td><pre>person1<span class="token punctuation">.</span>obj<span class="token punctuation">.</span><span class="token function">foo2</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="28"></td><td><pre>person1<span class="token punctuation">.</span>obj<span class="token punctuation">.</span><span class="token function">foo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span></pre></td></tr></table></figure><p>下面正确的输出顺序是：<span class="gap">A</span></p><ul class="options"><li class="correct"><code>window window person2 obj person2 obj   </code> </li><li><code>window window person2 person1 person2 person2  </code></li><li><code>obj person2 person2 obj person2 person2 </code></li><li>以上选项都不对</li></ul><blockquote><p>解析：[懒得打字了，发挥智慧的小脑瓜想想吧 (～￣▽￣)～~ ]</p><p>参考：</p><p><img data-src="interview4.png" alt="interview4" /></p><p></p></blockquote></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;name是window自带的全局属性&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#name是window自带的全局属性&quot;&gt;#&lt;/a&gt; name 是 window 自带的全局属性&lt;/h2&gt;
&lt;h3 id=&quot;name属性可设置或返回存放窗口的名称的一个字符串&quot;</summary>
      
    
    
    
    <category term="WebFE" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/WebFE/"/>
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/WebFE/JavaScript/"/>
    
    <category term="JavaScript Advanced" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/WebFE/JavaScript/JavaScript-Advanced/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript/"/>
    
    <category term="JavaScript Advanced" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript-Advanced/"/>
    
    <category term="JavaScript面试题" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 闭包</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2021/10/05/WebFE/JavaScript/Advanced/closure/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2021/10/05/WebFE/JavaScript/Advanced/closure/</id>
    <published>2021-10-05T07:23:36.000Z</published>
    <updated>2022-01-10T01:54:24.508Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1js闭包的定义"><a class="anchor" href="#1js闭包的定义">#</a> 1.JS 闭包的定义</h2><ul><li>这里先来看一下闭包的定义，分成两个：在计算机科学中和在 JavaScript 中。</li><li>在计算机科学中对闭包的定义（维基百科）：<ul><li>闭包（英语：Closure），又称词法闭包（Lexical Closure）或函数闭包（function closures）；</li><li>是在支持 头等函数 的编程语言中，实现词法绑定的一种技术；</li><li>闭包在实现上是一个结构体，它存储了一个函数和一个关联的环境（相当于一个符号查找表）；</li><li>闭包跟函数最大的区别在于，当捕捉闭包的时候，它的 自由变量 会在补充时被确定，这样即使脱离了捕捉时的上下文，它也能照常运行；</li></ul></li><li>闭包的概念出现于 60 年代，最早实现闭包的程序是 Scheme，那么我们就可以理解为什么 JavaScript 中有闭包：<ul><li>因为 JavaScript 中有大量的设计是来源于 Scheme 的；</li></ul></li><li>我们再来看一下 MDN 对 JavaScript 闭包的解释：<ul><li>一个函数和对其周围状态（lexical environment，词法环境）的引用捆绑在一起（或者说函数被引用包围），这样的组合就是闭包（closure）；</li><li>也就是说，闭包让你可以在一个内层函数中访问到其外层函数的作用域；</li><li>在 JavaScript 中，每当创建一个函数，闭包就会在函数创建的同时被创建出来；</li></ul></li><li>那么 coderwhy 老师的理解和总结：<ul><li>一个普通的函数 function，如果它可以访问外层作用于的自由变量，那么这个函数就是一个闭包；</li><li>从广义的角度来说：JavaScript 中的函数都是闭包；</li><li>从狭义的角度来说：JavaScript 中一个函数，如果访问了外层作用于的变量，那么它是一个闭包；</li></ul></li></ul><h2 id="2高阶函数的执行过程"><a class="anchor" href="#2高阶函数的执行过程">#</a> 2. 高阶函数的执行过程</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>   <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"bar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">return</span> bar</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>参考：</p><p><img data-src="fn1.png" alt="fn1" /></p><h2 id="3闭包执行过程"><a class="anchor" href="#3闭包执行过程">#</a> 3. 闭包执行过程</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'nekoaimer'</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"bar"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">return</span> bar</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>参考：这几张图画了贼久可能有些许偏差吧..... 欢迎指正！</p><p><img data-src="closure1.png" alt="closure1" /></p><h3 id="例子"><a class="anchor" href="#例子">#</a> 例子</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'nekoaimer'</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">//foo 是一个函数也可以访问外层作用域就可称之为闭包</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="4闭包的内存泄露"><a class="anchor" href="#4闭包的内存泄露">#</a> 4. 闭包的内存泄露</h2><h3 id="函数的执行过程内存"><a class="anchor" href="#函数的执行过程内存">#</a> 函数的执行过程内存</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"foo"</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">16</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"bar"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>参考：</p><p><img data-src="closure2.png" alt="closure2" /></p><h3 id="闭包的内存表现和泄露"><a class="anchor" href="#闭包的内存表现和泄露">#</a> 闭包的内存表现和泄露</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'foo'</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">16</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  </pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token keyword">return</span> bar</pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>参考：</p><p><img data-src="closure3.png" alt="closure3" /></p><h3 id="js闭包内存泄漏案例"><a class="anchor" href="#js闭包内存泄漏案例">#</a> JS 闭包内存泄漏案例</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">createFnArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">// var arr = [1, 1, 1, 1, 1, 1, 1, 1,1, 1,1, 1,1 ]</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token comment">// 占据的空间是 4M x 100 + 其他的内存 = 400M+</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token comment">// 1 -> number -> 8byte -> 8M</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">//js: 10 3.14 -> number -> 8byte ? js 引擎</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token comment">// 8byte => 2 的 64 次方 => 4byte</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token comment">// 小的数字类型，在 v8 中成为 Sim, 小数字 2 的 32 次方</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token comment">// var arrayFn = createFnArray()</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment">// arrayFn = null</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token comment">// 100 * 100 = 10000 = 10s</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token keyword">var</span> arrayFns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>      arrayFns<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">createFnArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> i <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre>  <span class="token comment">// arrayFns = null</span></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        arrayFns<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="js闭包引用的自用变量销毁"><a class="anchor" href="#js闭包引用的自用变量销毁">#</a> JS 闭包引用的自用变量销毁</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"nekoaimer"</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">16</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">debugger</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token keyword">return</span> bar</pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>可自行测试～</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1js闭包的定义&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#1js闭包的定义&quot;&gt;#&lt;/a&gt; 1.JS 闭包的定义&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;这里先来看一下闭包的定义，分成两个：在计算机科学中和在 JavaScript 中。&lt;/li&gt;
&lt;li&gt;在计算机科</summary>
      
    
    
    
    <category term="WebFE" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/WebFE/"/>
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/WebFE/JavaScript/"/>
    
    <category term="JavaScript Advanced" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/WebFE/JavaScript/JavaScript-Advanced/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript/"/>
    
    <category term="JavaScript Advanced" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript-Advanced/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 作用域</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2021/10/03/WebFE/JavaScript/Advanced/scope/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2021/10/03/WebFE/JavaScript/Advanced/scope/</id>
    <published>2021-10-03T07:20:44.000Z</published>
    <updated>2022-01-16T09:54:18.964Z</updated>
    
    <content type="html"><![CDATA[<h2 id="全局代码执行过程"><a class="anchor" href="#全局代码执行过程">#</a> 全局代码执行过程</h2><h3 id="变量"><a class="anchor" href="#变量">#</a> 变量</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"nekoaimer"</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">233</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token number">10</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">20</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>参考：</p><p><img data-src="variable_scope.png" alt="variable_scope" /></p><h3 id="函数"><a class="anchor" href="#函数">#</a> 函数</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'nekoaimer'</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">233</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token comment">// undefined</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token number">10</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">20</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'foo'</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// foo</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment">//foo (2333) // 再执行会创建 FEC 执行下面操作</span></pre></td></tr></table></figure><p>参考：</p><p><img data-src="fn_exe_procedure.png" alt="fn_exe_procedure" /></p><h3 id="函数嵌套"><a class="anchor" href="#函数嵌套">#</a> 函数嵌套</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"nekoaimer"</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">233</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token comment">// undefined</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token number">10</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">20</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token comment">// nekoaimer</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>参考：</p><p><img data-src="nested_function.png" alt="nested_function" /></p><h3 id="函数调用函数作用域查找"><a class="anchor" href="#函数调用函数作用域查找">#</a> 函数调用函数作用域查找</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">"Hello Global"</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">"Hello Bar"</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>参考：</p><p><img data-src="fn_call_Fn_exe_procedure.png" alt="fn_call_Fn_exe_procedure" /></p><h2 id="作用域面试题"><a class="anchor" href="#作用域面试题">#</a> 作用域面试题</h2><ol><li class="quiz fill multi"><p>作用域例题 1</p><figure class="highlight js"><figcaption data-lang="JavaScript"><span>面试题</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">233</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  n <span class="token operator">=</span> <span class="token number">322</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span></pre></td></tr></table></figure><p>下面正确的的输出结果是：<span class="gap">B</span></p><ul class="options"><li><code>233</code></li><li class="correct"><code>322</code> </li><li><code>undefined</code></li></ul><blockquote><p>作用域<br /><span class="mistake">  编译代码时会创建一个 GO 对象，对象里会有一个 n，它的值是 undefined。当执行到 var n = 233 这行代码时 n 就等于 233. 接着往下执行，会发现一个函数，它也有一个对应的地址。此时 GO:{n:undefined,foo:0x0001}，就会创建一个 foo 函数对象。继续执行会调用函数，执行这个函数就会创建一个 FEC，在函数调用栈里执行，执行里面的代码 n = 200，就会先去自己的 AO 里面找，但是自己的 AO 并没有这个 n，会找 parentScope，找到 GO，找到了 n 并把 n 修改为 322。执行完函数继续执行 console 时，打印出来的就是 322 了～</span></p></blockquote></li><li class="quiz fill multi"><p>作用域例题 2 </p><figure class="highlight js"><figcaption data-lang="JavaScript"><span>面试题</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">233</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">322</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span></pre></td></tr></table></figure><p>下面正确的的输出结果是：<span class="gap">A</span></p><ul class="options"><li class="correct"><code>233</code> </li><li><code>322</code></li><li><code>undefined</code></li></ul></li><li class="quiz fill multi"><p>作用域例题 3 </p><figure class="highlight js"><figcaption data-lang="JavaScript"><span>面试题</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">233</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">322</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span></pre></td></tr></table></figure><p>下面正确的的输出结果是：<span class="gap">A</span></p><ul class="options"><li class="correct"><code>233</code> </li><li><code>322</code></li><li><code>undefined</code></li></ul></li><li class="quiz fill multi"><p>作用域例题 4 </p><figure class="highlight js"><figcaption data-lang="JavaScript"><span>面试题</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">200</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">100</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>下面正确的的输出结果是：<span class="gap">B</span></p><ul class="options"><li><code>100 200</code></li><li class="correct"><code>undefined 200</code> </li><li><code>200 200</code></li></ul></li><li class="quiz fill multi"><p>作用域例题 5 </p><figure class="highlight js"><figcaption data-lang="JavaScript"><span>面试题</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">100</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">200</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token function">foo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token function">foo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span></pre></td></tr></table></figure><p>下面正确的的输出结果是：<span class="gap">C</span></p><ul class="options"><li><code>200 200 100</code></li><li><code>100 200 100</code></li><li class="correct"><code>200 100 100</code>  </li></ul></li><li class="quiz fill multi"><p>作用域例题 6</p><figure class="highlight js"><figcaption data-lang="JavaScript"><span>面试题</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">200</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">return</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">100</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>下面正确的的输出结果是：<span class="gap">C</span></p><ul class="options"><li><code>233</code></li><li><code>322</code></li><li class="correct"><code>undefined</code> </li></ul><blockquote><p>作用域<br /><span class="mistake">  虽然 return 了，但是在编译的时候 foo 函数时会执行 FEC，将 a 放进自己的 AO 里面，值是 undefined。接着执行代码时，先打印 a，取得的值就先从自己的 AO 里面找，值是 undefined，后面执行 return 就跳出函数！ 如果能看懂全局代码里面的图这个应该也很好理解！~ </span></p></blockquote></li><li class="quiz fill multi"><p>作用域例题 7</p><figure class="highlight js"><figcaption data-lang="JavaScript"><span>面试题</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">var</span> a <span class="token operator">=</span> b <span class="token operator">=</span> <span class="token number">100</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span></pre></td></tr></table></figure><p>下面正确的的输出结果是：<span class="gap">C</span></p><ul class="options"><li><code>100 100</code></li><li class="correct"><code>undefined 100</code>  </li><li><code>undefined undefined</code></li></ul><blockquote><p>作用域<br /><span class="mistake">～</span></p></blockquote></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;全局代码执行过程&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#全局代码执行过程&quot;&gt;#&lt;/a&gt; 全局代码执行过程&lt;/h2&gt;
&lt;h3 id=&quot;变量&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#变量&quot;&gt;#&lt;/a&gt; 变量&lt;/h3&gt;
&lt;figure clas</summary>
      
    
    
    
    <category term="WebFE" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/WebFE/"/>
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/WebFE/JavaScript/"/>
    
    <category term="JavaScript Advanced" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/WebFE/JavaScript/JavaScript-Advanced/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript/"/>
    
    <category term="JavaScript Advanced" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript-Advanced/"/>
    
    <category term="JavaScript面试题" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
</feed>
