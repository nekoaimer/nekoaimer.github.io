<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>nekoaimer</title>
  
  <subtitle>清心如水，清水即心</subtitle>
  <link href="https://nekoaimer.github.io/nekoaimer.github.io/atom.xml" rel="self"/>
  
  <link href="https://nekoaimer.github.io/nekoaimer.github.io/"/>
  <updated>2022-02-01T09:26:45.500Z</updated>
  <id>https://nekoaimer.github.io/nekoaimer.github.io/</id>
  
  <author>
    <name>Nico Niconi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>fill &amp; join &amp; includex 原理</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2022/01/25/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/fill-includex-join/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2022/01/25/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/fill-includex-join/</id>
    <published>2022-01-25T03:14:44.000Z</published>
    <updated>2022-02-01T09:26:45.500Z</updated>
    
    <content type="html"><![CDATA[<h2 id="fill-原理"><a class="anchor" href="#fill-原理">#</a> fill 原理</h2><h3 id="使用-for-实现"><a class="anchor" href="#使用-for-实现">#</a> 使用 for 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_fill</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">//start 大于数组长度 或 end 大于数组长度返回自身 不然下面的 this [i] 会改变自身长度</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">||</span> end <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">this</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">//start &lt; 0 或 end &lt; 0 则是按 length + start|end 来计算，MDN 有介绍 </span></pre></td></tr><tr><td data-num="6"></td><td><pre>  start <span class="token operator">=</span> start <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">+</span> start <span class="token operator">:</span> start</pre></td></tr><tr><td data-num="7"></td><td><pre>  end <span class="token operator">=</span> end <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">+</span> end <span class="token operator">:</span> end </pre></td></tr><tr><td data-num="8"></td><td><pre>  </pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token comment">// 边界判断 什么参数都不传则都为 undefined</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">undefined</span> </pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">else</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> value</pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token punctuation">&#125;</span> </pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token keyword">return</span> <span class="token keyword">this</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="测试"><a class="anchor" href="#测试">#</a> 测试</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// fill</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// [undefined, undefined, undefined]</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>               <span class="token comment">// [4, 4, 4]</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token comment">// [1, 4, 4]</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>         <span class="token comment">// [1, 4, 3]</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>         <span class="token comment">// [1, 2, 3]</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>         <span class="token comment">// [1, 2, 3]</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>       <span class="token comment">// [4, 2, 3]</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">)</span>     <span class="token comment">// [1, 2, 3]</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>         <span class="token comment">// [1, 2, 3]</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>                <span class="token comment">// [4, 4, 4]</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>  <span class="token comment">// &#123;0: 4, 1: 4, 2: 4, length: 3&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token comment">// _fill</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">_fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token comment">// [undefined, undefined, undefined]</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">_fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>              <span class="token comment">// [4, 4, 4]</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">_fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>           <span class="token comment">// [1, 4, 4]</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">_fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token comment">// [1, 4, 3]</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">_fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment">// [1, 2, 3]</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">_fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>        <span class="token comment">// [1, 2, 3]</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">_fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>      <span class="token comment">// [4, 2, 3]</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">_fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">)</span>    <span class="token comment">// [1, 2, 3]</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>         <span class="token comment">// [1, 2, 3]</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">_fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>               <span class="token comment">// [4, 4, 4]</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">_fill</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">// &#123;0: 4, 1: 4, 2: 4, length: 3&#125;</span></pre></td></tr></table></figure><h3 id="使用-for-in-实现"><a class="anchor" href="#使用-for-in-实现">#</a> 使用 for in 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_fill</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">//start 大于数组长度 或 end 大于数组长度返回自身 不然下面的 this [i] 会改变自身长度</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">||</span> end <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">this</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">//start &lt; 0 或 end &lt; 0 则是按 length + start|end 来计算，MDN 有介绍 </span></pre></td></tr><tr><td data-num="6"></td><td><pre>  start <span class="token operator">=</span> start <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">+</span> start <span class="token operator">:</span> start</pre></td></tr><tr><td data-num="7"></td><td><pre>  end <span class="token operator">=</span> end <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">+</span> end <span class="token operator">:</span> end </pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token comment">// 用于判断类似 Array (4)._fill (4) this+'' 这种情况时 此时会是三个逗号</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token keyword">const</span> commaLength <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token keyword">let</span> comma <span class="token operator">=</span> <span class="token string">''</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> commaLength<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> comma <span class="token operator">+=</span> <span class="token string">','</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  </pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token comment">// 进行的边界判断 </span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">+</span> <span class="token string">''</span> <span class="token operator">==</span> comma <span class="token operator">||</span> <span class="token keyword">this</span> <span class="token operator">+</span> <span class="token string">''</span> <span class="token operator">===</span> <span class="token string">'[object Object]'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> value</pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token keyword">return</span> <span class="token keyword">this</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>  <span class="token comment">// 进行遍历</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'_fill'</span> <span class="token operator">===</span> key<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">this</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token comment">// 从 start 开始 小于 start 就跳过</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&lt;</span> start<span class="token punctuation">)</span> <span class="token keyword">continue</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token comment">// 小于 end 就停止</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value</pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token comment">// 判断上面什么参数也没传则都为 undefined</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">undefined</span>  </pre></td></tr><tr><td data-num="33"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="测试-2"><a class="anchor" href="#测试-2">#</a> 测试</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// fill</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// [4, 4, 4]</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// [1, 4, 4]</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// [1, 4, 3]</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// [1, 2, 3]</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// [1, 2, 3]</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// [4, 2, 3]</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// [1, 2, 3]</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// [1, 2, 3]</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// [4, 4, 4]</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// &#123;0: 4, 1: 4, 2: 4, length: 3&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">// _fill</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">_fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>              <span class="token comment">// [4, 4, 4]</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">_fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>           <span class="token comment">// [1, 4, 4]</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">_fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token comment">// [1, 4, 3]</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">_fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment">// [1, 2, 3]</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">_fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>        <span class="token comment">// [1, 2, 3]</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">_fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>      <span class="token comment">// [4, 2, 3]</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">_fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">)</span>    <span class="token comment">// [1, 2, 3]</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>         <span class="token comment">// [1, 2, 3]</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">_fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>               <span class="token comment">// [4, 4, 4]</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">_fill</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">// &#123;0: 4, 1: 4, 2: 4, length: 3&#125;</span></pre></td></tr></table></figure><h2 id="join-原理"><a class="anchor" href="#join-原理">#</a> join 原理</h2><h3 id="使用-for-实现-2"><a class="anchor" href="#使用-for-实现-2">#</a> 使用 for 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_join</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">','</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">''</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    str <span class="token operator">=</span> i <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>str<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>str<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">return</span> str</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="测试-3"><a class="anchor" href="#测试-3">#</a> 测试</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// join</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Wind'</span><span class="token punctuation">,</span> <span class="token string">'Rain'</span><span class="token punctuation">,</span> <span class="token string">'Fire'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">// Wind,Rain,Fire</span></pre></td></tr><tr><td data-num="4"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">', '</span><span class="token punctuation">)</span>  <span class="token comment">// Wind, Rain, Fire</span></pre></td></tr><tr><td data-num="5"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">' + '</span><span class="token punctuation">)</span> <span class="token comment">// Wind + Rain + Fire</span></pre></td></tr><tr><td data-num="6"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token comment">// WindRainFire</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// _join</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Wind'</span><span class="token punctuation">,</span> <span class="token string">'Rain'</span><span class="token punctuation">,</span> <span class="token string">'Fire'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="10"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">_join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">// Wind,Rain,Fire</span></pre></td></tr><tr><td data-num="11"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">_join</span><span class="token punctuation">(</span><span class="token string">', '</span><span class="token punctuation">)</span>  <span class="token comment">// Wind, Rain, Fire</span></pre></td></tr><tr><td data-num="12"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">_join</span><span class="token punctuation">(</span><span class="token string">' + '</span><span class="token punctuation">)</span> <span class="token comment">// Wind + Rain + Fire</span></pre></td></tr><tr><td data-num="13"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">_join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token comment">// WindRainFire</span></pre></td></tr></table></figure><h3 id="使用-for-in-实现-2"><a class="anchor" href="#使用-for-in-实现-2">#</a> 使用 for in 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_join</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">','</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">''</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">'_join'</span> <span class="token operator">===</span> key<span class="token punctuation">)</span> <span class="token keyword">return</span> str</pre></td></tr><tr><td data-num="5"></td><td><pre>    str <span class="token operator">=</span> key <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>str<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>str<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="测试-4"><a class="anchor" href="#测试-4">#</a> 测试</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// join</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Wind'</span><span class="token punctuation">,</span> <span class="token string">'Rain'</span><span class="token punctuation">,</span> <span class="token string">'Fire'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">// Wind,Rain,Fire</span></pre></td></tr><tr><td data-num="4"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">', '</span><span class="token punctuation">)</span>  <span class="token comment">// Wind, Rain, Fire</span></pre></td></tr><tr><td data-num="5"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">' + '</span><span class="token punctuation">)</span> <span class="token comment">// Wind + Rain + Fire</span></pre></td></tr><tr><td data-num="6"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token comment">// WindRainFire</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// _join</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Wind'</span><span class="token punctuation">,</span> <span class="token string">'Rain'</span><span class="token punctuation">,</span> <span class="token string">'Fire'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="10"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">_join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">// Wind,Rain,Fire</span></pre></td></tr><tr><td data-num="11"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">_join</span><span class="token punctuation">(</span><span class="token string">', '</span><span class="token punctuation">)</span>  <span class="token comment">// Wind, Rain, Fire</span></pre></td></tr><tr><td data-num="12"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">_join</span><span class="token punctuation">(</span><span class="token string">' + '</span><span class="token punctuation">)</span> <span class="token comment">// Wind + Rain + Fire</span></pre></td></tr><tr><td data-num="13"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">_join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token comment">// WindRainFire</span></pre></td></tr></table></figure><h2 id="string-includex-原理"><a class="anchor" href="#string-includex-原理">#</a> String includex 原理</h2><h3 id="使用-for-实现-3"><a class="anchor" href="#使用-for-实现-3">#</a> 使用 for 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">String</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_includes</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> start <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">// 如果值一样直接 return true 节约性能</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> value<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">// 传进来字符串的长度</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">const</span> valueLength <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length</pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token comment">// 如果为负数从 0 开始查找</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  start <span class="token operator">=</span> start <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> start</pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token comment">// 当 start 索引大于自身长度时则直接返回 false</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token comment">// 定义用来接收每次遍历完的字符串 来和 value 比较</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token keyword">let</span> newValue <span class="token operator">=</span> <span class="token string">''</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  </pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token comment">// 需要遍历的次数 例如：abcde 查找 de -> ab bc cd de 需要遍历 4 次</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token keyword">let</span> end <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> valueLength <span class="token operator">+</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token comment">// 举栗:'abcde' -> 会以这种形式依次进行遍历 ab -> bc -> cd -> de  </span></pre></td></tr><tr><td data-num="21"></td><td><pre>  <span class="token keyword">const</span> <span class="token function-variable function">targetStr</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> valueLength<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>      newValue <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token keyword">return</span> newValue</pre></td></tr><tr><td data-num="26"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token comment">// 如果没查到就置空</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> <span class="token function">targetStr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> newValue <span class="token operator">=</span> <span class="token string">''</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="32"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre>  <span class="token keyword">return</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="测试-5"><a class="anchor" href="#测试-5">#</a> 测试</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'To be, or not to be, that is the question.'</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// includes</span></pre></td></tr><tr><td data-num="3"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'To be'</span><span class="token punctuation">)</span>       <span class="token comment">// true</span></pre></td></tr><tr><td data-num="4"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'question'</span><span class="token punctuation">)</span>    <span class="token comment">// true</span></pre></td></tr><tr><td data-num="5"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'nonexistent'</span><span class="token punctuation">)</span> <span class="token comment">// false</span></pre></td></tr><tr><td data-num="6"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'To be'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">// false</span></pre></td></tr><tr><td data-num="7"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'TO BE'</span><span class="token punctuation">)</span>       <span class="token comment">// false</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// _includes</span></pre></td></tr><tr><td data-num="10"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">_includes</span><span class="token punctuation">(</span><span class="token string">'To be'</span><span class="token punctuation">)</span>       <span class="token comment">// true</span></pre></td></tr><tr><td data-num="11"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">_includes</span><span class="token punctuation">(</span><span class="token string">'question'</span><span class="token punctuation">)</span>    <span class="token comment">// true</span></pre></td></tr><tr><td data-num="12"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">_includes</span><span class="token punctuation">(</span><span class="token string">'nonexistent'</span><span class="token punctuation">)</span> <span class="token comment">// false</span></pre></td></tr><tr><td data-num="13"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">_includes</span><span class="token punctuation">(</span><span class="token string">'To be'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">// false</span></pre></td></tr><tr><td data-num="14"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">_includes</span><span class="token punctuation">(</span><span class="token string">'TO BE'</span><span class="token punctuation">)</span>       <span class="token comment">// false</span></pre></td></tr></table></figure><h3 id="使用-while-实现"><a class="anchor" href="#使用-while-实现">#</a> 使用 while  实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">String</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_includes</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> startIndex <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> value<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token comment">// 字符串长度</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">const</span> length <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length</pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token comment">// 参数字符串长度</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token keyword">const</span> valueLength <span class="token operator">=</span> value<span class="token punctuation">.</span>length</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token comment">//startIndex &lt; 0 就从 0 开始搜索</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  startIndex <span class="token operator">=</span> startIndex <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> startIndex</pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token keyword">let</span> i <span class="token operator">=</span> startIndex</pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token comment">// 循环次数</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> valueLength <span class="token operator">&lt;=</span> length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> str <span class="token operator">=</span> <span class="token string">''</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    </pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token comment">// 判断需要遍历次数 例如 abcde 查找 de -> ab bc cd de 4 次</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> valueLength<span class="token punctuation">)</span> str <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i <span class="token operator">+</span> num<span class="token operator">++</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    i<span class="token operator">++</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token comment">// 如果查找到返回 true</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">===</span> value<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>  <span class="token keyword">return</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="测试-6"><a class="anchor" href="#测试-6">#</a> 测试</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'To be, or not to be, that is the question.'</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// includes</span></pre></td></tr><tr><td data-num="3"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'To be'</span><span class="token punctuation">)</span>       <span class="token comment">// true</span></pre></td></tr><tr><td data-num="4"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'question'</span><span class="token punctuation">)</span>    <span class="token comment">// true</span></pre></td></tr><tr><td data-num="5"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'nonexistent'</span><span class="token punctuation">)</span> <span class="token comment">// false</span></pre></td></tr><tr><td data-num="6"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'To be'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">// false</span></pre></td></tr><tr><td data-num="7"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'TO BE'</span><span class="token punctuation">)</span>       <span class="token comment">// false</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// _includes</span></pre></td></tr><tr><td data-num="10"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">_includes</span><span class="token punctuation">(</span><span class="token string">'To be'</span><span class="token punctuation">)</span>       <span class="token comment">// true</span></pre></td></tr><tr><td data-num="11"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">_includes</span><span class="token punctuation">(</span><span class="token string">'question'</span><span class="token punctuation">)</span>    <span class="token comment">// true</span></pre></td></tr><tr><td data-num="12"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">_includes</span><span class="token punctuation">(</span><span class="token string">'nonexistent'</span><span class="token punctuation">)</span> <span class="token comment">// false</span></pre></td></tr><tr><td data-num="13"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">_includes</span><span class="token punctuation">(</span><span class="token string">'To be'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">// false</span></pre></td></tr><tr><td data-num="14"></td><td><pre>str<span class="token punctuation">.</span><span class="token function">_includes</span><span class="token punctuation">(</span><span class="token string">'TO BE'</span><span class="token punctuation">)</span>       <span class="token comment">// false</span></pre></td></tr></table></figure><h2 id="array-includex-原理"><a class="anchor" href="#array-includex-原理">#</a> Array includex 原理</h2><h3 id="使用-for-实现-4"><a class="anchor" href="#使用-for-实现-4">#</a> 使用 for 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_includes</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> start <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  start <span class="token operator">=</span> start <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">+</span> start <span class="token operator">:</span> start</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> value <span class="token operator">||</span> Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token keyword">return</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="测试-7"><a class="anchor" href="#测试-7">#</a> 测试</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// includes</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>     <span class="token comment">// false </span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>     <span class="token comment">// false</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment">// true</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// _includes</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>     <span class="token comment">// true</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>     <span class="token comment">// false </span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment">// false</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr></table></figure><h3 id="使用-for-in-实现-3"><a class="anchor" href="#使用-for-in-实现-3">#</a> 使用 for in 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_includes</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> start <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  start <span class="token operator">=</span> start <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">+</span> start <span class="token operator">:</span> start</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">&lt;</span> start<span class="token punctuation">)</span> <span class="token keyword">continue</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">||</span> Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token operator">===</span> Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">return</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="测试-8"><a class="anchor" href="#测试-8">#</a> 测试</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// includes</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>     <span class="token comment">// false </span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>     <span class="token comment">// false</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment">// true</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// _includes</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>     <span class="token comment">// true</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>     <span class="token comment">// false </span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment">// false</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;fill-原理&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fill-原理&quot;&gt;#&lt;/a&gt; fill 原理&lt;/h2&gt;
&lt;h3 id=&quot;使用-for-实现&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#使用-for-实现&quot;&gt;#&lt;/a&gt; 使用 for 实现</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>every &amp; some &amp; find &amp; findIndex 原理</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2022/01/23/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/every-some-find-findIndex/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2022/01/23/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/every-some-find-findIndex/</id>
    <published>2022-01-23T08:29:59.000Z</published>
    <updated>2022-01-27T11:00:57.299Z</updated>
    
    <content type="html"><![CDATA[<h2 id="every-原理"><a class="anchor" href="#every-原理">#</a> every 原理</h2><h3 id="使用-for-实现"><a class="anchor" href="#使用-for-实现">#</a> 使用 for 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'稚名真白'</span><span class="token punctuation">,</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'蝶祈'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_every</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token keyword">return</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">const</span> flag <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">_every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token keyword">return</span> value <span class="token operator">!==</span> <span class="token string">'入间同学'</span> <span class="token comment">// true</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token comment">//return value !== ' 蝶祈 ' //false</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token comment">// true</span></pre></td></tr></table></figure><h3 id="使用-for-in-实现"><a class="anchor" href="#使用-for-in-实现">#</a> 使用 for in 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'稚名真白'</span><span class="token punctuation">,</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'蝶祈'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_every</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">'NaN'</span> <span class="token operator">===</span> <span class="token punctuation">(</span><span class="token operator">+</span>key <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token keyword">return</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">const</span> flag <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">_every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token comment">//return value !== ' 入间同学 ' //true</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token keyword">return</span> value <span class="token operator">!==</span> <span class="token string">'蝶祈'</span> <span class="token comment">// false</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token comment">// false</span></pre></td></tr></table></figure><h2 id="some-原理"><a class="anchor" href="#some-原理">#</a> some 原理</h2><h3 id="使用-for-实现-2"><a class="anchor" href="#使用-for-实现-2">#</a> 使用 for 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'稚名真白'</span><span class="token punctuation">,</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'蝶祈'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_some</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token keyword">return</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">const</span> flag <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">_some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token keyword">return</span> value <span class="token operator">===</span> <span class="token string">'入间同学'</span> <span class="token comment">// false</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token comment">//return value === ' 蝶祈 ' //true</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token comment">// false</span></pre></td></tr></table></figure><h3 id="使用-for-in-实现-2"><a class="anchor" href="#使用-for-in-实现-2">#</a> 使用 for in 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'稚名真白'</span><span class="token punctuation">,</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'蝶祈'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_some</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">'NaN'</span> <span class="token operator">===</span> <span class="token punctuation">(</span><span class="token operator">+</span>key <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token keyword">return</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">const</span> flag <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">_some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">return</span> value <span class="token operator">===</span> <span class="token string">'入间同学'</span> <span class="token comment">// false</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token comment">//return value === ' 蝶祈 ' //true</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token comment">// false</span></pre></td></tr></table></figure><h2 id="find-原理"><a class="anchor" href="#find-原理">#</a> find 原理</h2><h3 id="使用-for-实现-3"><a class="anchor" href="#使用-for-实现-3">#</a> 使用 for 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'稚名真白'</span><span class="token punctuation">,</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'蝶祈'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_find</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token keyword">return</span> <span class="token keyword">undefined</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">const</span> res <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">_find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token keyword">return</span> value <span class="token operator">===</span> <span class="token string">'入间同学'</span> <span class="token comment">// undefined</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token comment">//return value === ' 蝶祈 ' // 蝶祈</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment">// undefined</span></pre></td></tr></table></figure><h3 id="使用-for-in-实现-3"><a class="anchor" href="#使用-for-in-实现-3">#</a> 使用 for in 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'稚名真白'</span><span class="token punctuation">,</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'蝶祈'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_find</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">'NaN'</span> <span class="token operator">===</span> <span class="token punctuation">(</span><span class="token operator">+</span>key <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">undefined</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token keyword">return</span> <span class="token keyword">undefined</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">const</span> res <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">_find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token keyword">return</span> value <span class="token operator">===</span> <span class="token string">'入间同学'</span> <span class="token comment">// undefined</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token comment">//return value === ' 蝶祈 ' // 蝶祈</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment">// 蝶祈</span></pre></td></tr></table></figure><h2 id="findindex-原理"><a class="anchor" href="#findindex-原理">#</a> findIndex 原理</h2><h3 id="使用-for-实现-4"><a class="anchor" href="#使用-for-实现-4">#</a> 使用 for 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'稚名真白'</span><span class="token punctuation">,</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'蝶祈'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_findIndex</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> i</pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">const</span> res <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">_findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token comment">//return value === ' 入间同学 ' //-1</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">return</span> value <span class="token operator">===</span> <span class="token string">'蝶祈'</span> <span class="token comment">// 2</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment">// -1</span></pre></td></tr></table></figure><h3 id="使用-for-in-实现-4"><a class="anchor" href="#使用-for-in-实现-4">#</a> 使用 for in 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'稚名真白'</span><span class="token punctuation">,</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'蝶祈'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_findIndex</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">'NaN'</span> <span class="token operator">===</span> <span class="token operator">+</span>key <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">+</span>key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">+</span>key</pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">const</span> res <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">_findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token comment">//return value === ' 入间同学 ' //-1</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token keyword">return</span> value <span class="token operator">===</span> <span class="token string">'蝶祈'</span> <span class="token comment">// 2</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment">// 2</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;every-原理&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#every-原理&quot;&gt;#&lt;/a&gt; every 原理&lt;/h2&gt;
&lt;h3 id=&quot;使用-for-实现&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#使用-for-实现&quot;&gt;#&lt;/a&gt; 使用 for</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>forEach &amp; filter &amp; map &amp; reduce 原理</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2022/01/21/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/forEach-filter-map-reduce/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2022/01/21/JavaScript/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/forEach-filter-map-reduce/</id>
    <published>2022-01-21T07:26:10.000Z</published>
    <updated>2022-01-27T14:57:11.336Z</updated>
    
    <content type="html"><![CDATA[<h2 id="foreach-原理"><a class="anchor" href="#foreach-原理">#</a> forEach 原理</h2><h3 id="使用-for-实现"><a class="anchor" href="#使用-for-实现">#</a> 使用 for 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'稚名真白'</span><span class="token punctuation">,</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'蝶祈'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_forEach</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>array<span class="token punctuation">.</span><span class="token function">_forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment">/*</pre></td></tr><tr><td data-num="13"></td><td><pre> 稚名真白 0 [' 稚名真白 ', ' 樱岛麻衣 ', ' 蝶祈 ']</pre></td></tr><tr><td data-num="14"></td><td><pre> 樱岛麻衣 1 [ ' 稚名真白 ', ' 樱岛麻衣 ', ' 蝶祈 ' ]</pre></td></tr><tr><td data-num="15"></td><td><pre> 蝶祈 2 [ ' 稚名真白 ', ' 樱岛麻衣 ', ' 蝶祈 ' ]</pre></td></tr><tr><td data-num="16"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id="使用-for-in-实现"><a class="anchor" href="#使用-for-in-实现">#</a> 使用 for in 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'稚名真白'</span><span class="token punctuation">,</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'蝶祈'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_forEach</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'NaN'</span> <span class="token operator">===</span> <span class="token punctuation">(</span><span class="token operator">+</span>key <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>array<span class="token punctuation">.</span><span class="token function">_forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">/*</pre></td></tr><tr><td data-num="14"></td><td><pre> 稚名真白 0 [' 稚名真白 ', ' 樱岛麻衣 ', ' 蝶祈 ']</pre></td></tr><tr><td data-num="15"></td><td><pre> 樱岛麻衣 1 [ ' 稚名真白 ', ' 樱岛麻衣 ', ' 蝶祈 ' ]</pre></td></tr><tr><td data-num="16"></td><td><pre> 蝶祈 2 [ ' 稚名真白 ', ' 樱岛麻衣 ', ' 蝶祈 ' ]</pre></td></tr><tr><td data-num="17"></td><td><pre>*/</span></pre></td></tr></table></figure><h2 id="filter-原理"><a class="anchor" href="#filter-原理">#</a> filter 原理</h2><h3 id="使用-for-实现-2"><a class="anchor" href="#使用-for-实现-2">#</a> 使用 for 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'稚名真白'</span><span class="token punctuation">,</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'蝶祈'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_filter</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token keyword">return</span> res</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">const</span> ゆずりはいのり <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">_filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">return</span> value <span class="token operator">===</span> <span class="token string">'蝶祈'</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ゆずりはいのり<span class="token punctuation">)</span> <span class="token comment">// [' 蝶祈 ']</span></pre></td></tr></table></figure><h3 id="使用-for-in-实现-2"><a class="anchor" href="#使用-for-in-实现-2">#</a> 使用 for in 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'稚名真白'</span><span class="token punctuation">,</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'蝶祈'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_filter</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'NaN'</span> <span class="token operator">===</span> <span class="token punctuation">(</span><span class="token operator">+</span>key <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res</pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">const</span> ゆずりはいのり <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">_filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">return</span> value <span class="token operator">===</span> <span class="token string">'蝶祈'</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ゆずりはいのり<span class="token punctuation">)</span> <span class="token comment">// [' 蝶祈 ']</span></pre></td></tr></table></figure><h2 id="map-原理"><a class="anchor" href="#map-原理">#</a> map 原理</h2><h3 id="使用-for-实现-3"><a class="anchor" href="#使用-for-实现-3">#</a> 使用 for 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'稚名真白'</span><span class="token punctuation">,</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'蝶祈'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_map</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token keyword">return</span> res</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">const</span> newArray <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">_map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">return</span> index <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> value</pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArray<span class="token punctuation">)</span> <span class="token comment">// ['0 - 稚名真白 ', '1 - 樱岛麻衣 ', '2 - 蝶祈 ']</span></pre></td></tr></table></figure><h3 id="使用-for-in-实现-3"><a class="anchor" href="#使用-for-in-实现-3">#</a> 使用 for in 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'稚名真白'</span><span class="token punctuation">,</span> <span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'蝶祈'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_map</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'NaN'</span> <span class="token operator">===</span> <span class="token punctuation">(</span><span class="token operator">+</span>key <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res</pre></td></tr><tr><td data-num="7"></td><td><pre>    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">const</span> newArray <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">_map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">return</span> index <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> value</pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArray<span class="token punctuation">)</span> <span class="token comment">// ['0 - 稚名真白 ', '1 - 樱岛麻衣 ', '2 - 蝶祈 ']</span></pre></td></tr></table></figure><h2 id="reduce"><a class="anchor" href="#reduce">#</a> reduce</h2><h3 id="使用-for-实现-4"><a class="anchor" href="#使用-for-实现-4">#</a> 使用 for 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_reduce</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback<span class="token punctuation">,</span> initValue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">'[object Function]'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'callback must be function'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token comment">// 判断是否传了初始值，没有传就从下标 1 开始遍历，否则从下标 0 开始遍历</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">let</span> initIndex <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token comment">// 判断初始值，如果没传就默认取下标 0 的元素，否则取传过来的初始值为默认值</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">let</span> accumulator <span class="token operator">=</span> initIndex <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">:</span> initValue</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> initIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> accumulator <span class="token operator">=</span> <span class="token function">callback</span><span class="token punctuation">(</span>accumulator<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token keyword">return</span> accumulator  </pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">const</span> res <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">_reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> currentIndex<span class="token punctuation">,</span>  array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>accumulator<span class="token punctuation">)</span> <span class="token comment">// 10 14 30 66 115</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token keyword">return</span> accumulator <span class="token operator">+=</span> currentValue <span class="token operator">**</span> <span class="token number">2</span> <span class="token comment">// (10 + 2**2) (14 + 4**4) (30 + 6**6) (66 + 7**7) (115 + 8**8)</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment">// 179</span></pre></td></tr></table></figure><h3 id="使用-for-in-实现-4"><a class="anchor" href="#使用-for-in-实现-4">#</a> 使用 for in 实现</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_reduce</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback<span class="token punctuation">,</span> initValue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">'[object Function]'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'callback must be function'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token comment">// 判断是否传了初始值，没有传就从下标 1 开始遍历，否则从下标 0 开始遍历</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">let</span> initIndex <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token comment">// 判断初始值，如果没传就默认取下标 0 的元素，否则取传过来的初始值为默认值</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">let</span> accumulator <span class="token operator">=</span> initIndex <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">:</span> initValue</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">'NaN'</span> <span class="token operator">===</span> <span class="token operator">+</span>key <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token keyword">return</span> accumulator</pre></td></tr><tr><td data-num="16"></td><td><pre>    accumulator <span class="token operator">=</span> <span class="token function">callback</span><span class="token punctuation">(</span>accumulator<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">const</span> res <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">_reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> currentIndex<span class="token punctuation">,</span>  array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>accumulator<span class="token punctuation">)</span> <span class="token comment">// 10 14 30 66 115</span></pre></td></tr><tr><td data-num="22"></td><td><pre>  <span class="token keyword">return</span> accumulator <span class="token operator">+=</span> currentValue <span class="token operator">**</span> <span class="token number">2</span> <span class="token comment">// 执行流程 -> (10 + 2**2) (14 + 4**4) (30 + 6**6) (66 + 7**7) (115 + 8**8)</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment">// 179</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;foreach-原理&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#foreach-原理&quot;&gt;#&lt;/a&gt; forEach 原理&lt;/h2&gt;
&lt;h3 id=&quot;使用-for-实现&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#使用-for-实现&quot;&gt;#&lt;/a&gt; </summary>
      
    
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript/"/>
    
    <category term="JavaScript 手写原理" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript-%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>优先级队列实现</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2022/01/19/data-structures-and-algorithms/problems/easy/priority-queue/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2022/01/19/data-structures-and-algorithms/problems/easy/priority-queue/</id>
    <published>2022-01-19T15:01:23.000Z</published>
    <updated>2022-01-19T16:19:01.367Z</updated>
    
    <content type="html"><![CDATA[<h2 id="优先级队列结构"><a class="anchor" href="#优先级队列结构">#</a> 优先级队列结构</h2><ul><li><p>优先级队列的特点</p><ul><li>我们知道，普通的队列插入一个元素，数据会被放在后端。并且需要前面所有的元素都处理完后才会处理前面的数据。</li><li>但是优先级队列，再插入一个元素的时候会考虑该数据的优先级。和其他数据优先级 <code>进行比较</code></li><li>比较完成后，可以得出这个元素在队列中正确的位置</li><li>其他处理方式，和基本队列的处理方式一样。</li></ul></li><li><p>优先级队列主要考虑的问题：</p><ul><li>每个元素不再只是一个数据，而且包含数据的优先级</li></ul></li></ul><h2 id="example"><a class="anchor" href="#example">#</a> Example</h2><ul><li>生活中的优先级队列例子<ul><li>比如某些家庭在吃饭时，老人优先级更高，先动筷子，其次是父母，最后才是小孩。</li><li>你正在吃饭，突然非常想去五谷轮回之所，于是你就去了。</li></ul></li></ul><p><strong>Example 1:</strong></p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>每次插入几组数据：</pre></td></tr><tr><td data-num="2"></td><td><pre>'Saber'<span class="token punctuation">,</span> <span class="token number">100</span></pre></td></tr><tr><td data-num="3"></td><td><pre>'Nekoaimer'<span class="token punctuation">,</span> <span class="token number">1000</span></pre></td></tr><tr><td data-num="4"></td><td><pre>'Lain'<span class="token punctuation">,</span> <span class="token number">10</span></pre></td></tr><tr><td data-num="5"></td><td><pre>输出：'Lain'<span class="token punctuation">,</span> 10  'Saber'<span class="token punctuation">,</span> 100  'Nekoaimer'<span class="token punctuation">,</span> <span class="token number">1000</span></pre></td></tr></table></figure><ul><li>解释：第一个是为元素，第二个是为优先级。<strong> <code>那么这个例子我们就以认为数字越低 优先级越高来实现优先级队列</code> </strong> 那么每次插入数据都会进行比较 排列，所以会得出这个结果。</li></ul><p><strong>Example 2:</strong></p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>每次插入几组数据：</pre></td></tr><tr><td data-num="2"></td><td><pre>'Saber'<span class="token punctuation">,</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="3"></td><td><pre>'Nekoaimer'<span class="token punctuation">,</span> <span class="token number">3</span></pre></td></tr><tr><td data-num="4"></td><td><pre>'Lain'<span class="token punctuation">,</span> <span class="token number">2</span></pre></td></tr><tr><td data-num="5"></td><td><pre>输出：Saber 1  Lain 2  Nekoaimer 3</pre></td></tr></table></figure><h2 id="solving-ideas"><a class="anchor" href="#solving-ideas">#</a> Solving Ideas</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 封装优先级队列</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">function</span> <span class="token function">PriorityQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token comment">// 1. 内部类</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">function</span> <span class="token function">QueueElement</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> priority</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>el <span class="token operator">=</span> el</pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>priority <span class="token operator">=</span> priority</pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token comment">// 封装属性</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token keyword">this</span><span class="token punctuation">.</span>items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token comment">// 封装方法</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token comment">// 实现插入方法</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token class-name">PriorityQueue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">enqueue</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> priority</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token comment">// 1. 创建 QueueElement 对象</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">const</span> queueElement <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueueElement</span><span class="token punctuation">(</span>el <span class="token punctuation">,</span>priority<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>queueElement<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token comment">// 3. 判断队列是否为空</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>queueElement<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>      <span class="token keyword">let</span> added <span class="token operator">=</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="23"></td><td><pre>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>queueElement<span class="token punctuation">.</span>priority <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>priority<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>          <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> queueElement<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre>          added <span class="token operator">=</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="27"></td><td><pre>          <span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>queueElement<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre>   <span class="token comment">// 4. 从队列中删除前端元素</span></pre></td></tr><tr><td data-num="35"></td><td><pre>   <span class="token class-name">PriorityQueue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">dequeue</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="37"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre>  <span class="token comment">// 5. 查看前端的元素</span></pre></td></tr><tr><td data-num="40"></td><td><pre>  <span class="token class-name">PriorityQueue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">front</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="42"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre>  <span class="token comment">// 6. 查看队列是否为空</span></pre></td></tr><tr><td data-num="45"></td><td><pre>  <span class="token class-name">PriorityQueue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">isEmpty</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="47"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="48"></td><td><pre></pre></td></tr><tr><td data-num="49"></td><td><pre>  <span class="token comment">// 7. 查看队列中元素个数</span></pre></td></tr><tr><td data-num="50"></td><td><pre>  <span class="token class-name">PriorityQueue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">size</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length</pre></td></tr><tr><td data-num="52"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="53"></td><td><pre></pre></td></tr><tr><td data-num="54"></td><td><pre>  <span class="token comment">// 8.toString 方法</span></pre></td></tr><tr><td data-num="55"></td><td><pre>  <span class="token class-name">PriorityQueue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">toString</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>    <span class="token keyword">let</span> resStr <span class="token operator">=</span> <span class="token string">''</span></pre></td></tr><tr><td data-num="57"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span>key <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>      resStr <span class="token operator">+=</span> key<span class="token punctuation">.</span>el <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> key<span class="token punctuation">.</span>priority <span class="token operator">+</span> <span class="token string">'  '</span></pre></td></tr><tr><td data-num="59"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>    <span class="token keyword">return</span> resStr</pre></td></tr><tr><td data-num="61"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="63"></td><td><pre></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token comment">// 测试代码</span></pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token keyword">const</span> pq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="66"></td><td><pre>pq<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token string">'Lain'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="67"></td><td><pre>pq<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token string">'Saber'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="68"></td><td><pre>pq<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token string">'Nekoaimer'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="69"></td><td><pre></pre></td></tr><tr><td data-num="70"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pq<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="71"></td><td><pre><span class="token comment">/*</pre></td></tr><tr><td data-num="72"></td><td><pre>PriorityQueue &#123;</pre></td></tr><tr><td data-num="73"></td><td><pre>  items: [</pre></td></tr><tr><td data-num="74"></td><td><pre>    QueueElement &#123; el: 'Lain', priority: 10 &#125;,      </pre></td></tr><tr><td data-num="75"></td><td><pre>    QueueElement &#123; el: 'Saber', priority: 100 &#125;,    </pre></td></tr><tr><td data-num="76"></td><td><pre>    QueueElement &#123; el: 'Nekoaimer', priority: 1000 &#125;</pre></td></tr><tr><td data-num="77"></td><td><pre>  ]</pre></td></tr><tr><td data-num="78"></td><td><pre>&#125;</pre></td></tr><tr><td data-num="79"></td><td><pre>*/</span></pre></td></tr><tr><td data-num="80"></td><td><pre></pre></td></tr><tr><td data-num="81"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pq<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Lain 10  Saber 100  Nekoaimer 1000</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;优先级队列结构&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#优先级队列结构&quot;&gt;#&lt;/a&gt; 优先级队列结构&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;优先级队列的特点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们知道，普通的队列插入一个元素，数据会被放在后端。并且需要前面所有的</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/data-structures-and-algorithms/"/>
    
    <category term="Easy" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/data-structures-and-algorithms/Easy/"/>
    
    
    <category term="Easy" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/Easy/"/>
    
    <category term="数据结构与算法" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>队列实现击鼓传花</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2022/01/19/data-structures-and-algorithms/problems/easy/pass-the-parcel/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2022/01/19/data-structures-and-algorithms/problems/easy/pass-the-parcel/</id>
    <published>2022-01-19T01:58:35.000Z</published>
    <updated>2022-01-19T12:09:54.739Z</updated>
    
    <content type="html"><![CDATA[<h2 id="队列结构queue"><a class="anchor" href="#队列结构queue">#</a> 队列结构（Queue）</h2><ul><li><p>队列是一个简单的数据结构，它是一个 <code>允许在一端进行插入操作，而在另一端进行删除操作的线性表</code> 。队列遵循先进先出（FIFO, First-In-First-Out）的特征，和栈（LIFO, Last In First Out）刚好相反。</p></li><li><p>队列，它是一种受限的线性表</p><ul><li>受限之处在于它只允许在表的前端 (front) 进行删除操作</li><li>而在表的后端 (rear) 进行插入操作</li></ul></li><li><p>生活中类似的队列结构</p><ul><li>比如电影院、商城、奶茶店排队</li><li>优先排队的人，优先处理</li></ul></li></ul><h2 id="实现队列"><a class="anchor" href="#实现队列">#</a> 实现队列</h2><ul><li><code>封装一个队列实现下面的击鼓传花</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 封装队列类</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">function</span> <span class="token function">Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token comment">// 属性</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">this</span><span class="token punctuation">.</span>items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token comment">// 方法</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token comment">// 1. 将元素加入到队列中</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token class-name">Queue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">enqueue</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token comment">// 2. 从队列中删除前端元素</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token class-name">Queue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">dequeue</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token comment">// 3. 查看前端的元素</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token class-name">Queue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">front</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>  <span class="token comment">// 4. 查看队列是否为空</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token class-name">Queue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">isEmpty</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token comment">// 5. 查看队列中元素个数</span></pre></td></tr><tr><td data-num="28"></td><td><pre>  <span class="token class-name">Queue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">size</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length</pre></td></tr><tr><td data-num="30"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre>  <span class="token comment">// 6.toString 方法</span></pre></td></tr><tr><td data-num="33"></td><td><pre>  <span class="token class-name">Queue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">toString</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token keyword">let</span> resStr <span class="token operator">=</span> <span class="token string">''</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span>key <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>      resStr<span class="token operator">+=</span> key</pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token keyword">return</span> resStr</pre></td></tr><tr><td data-num="39"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="example"><a class="anchor" href="#example">#</a> Example</h2><ul><li>原游戏击鼓传花规则是，例如班级的学生围城一圈，从某位学生手里向旁边的同学传一束花。这个时候某个人在击鼓， 鼓声停下的一刻，花落在谁手里，谁就出来表演节目</li><li>修改游戏规则<ul><li>学生们围成一圈， 开始数数， 数到某个数的人自动淘汰，最后剩下的人获得游戏胜利，并获得胜利者的位置。</li></ul></li></ul><p><strong>Example 1:</strong></p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>输入：<span class="token punctuation">[</span><span class="token string">'樱岛麻衣'</span><span class="token punctuation">,</span> <span class="token string">'小鸟游六花'</span><span class="token punctuation">,</span> <span class="token string">'入间同学'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">6</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token key atrule">输出：el</span><span class="token punctuation">:</span> <span class="token key atrule">入间同学  index</span><span class="token punctuation">:</span> <span class="token number">2</span></pre></td></tr></table></figure><ul><li>解释：从 0 开始数到 6 是樱岛麻衣，那么樱岛麻衣被淘汰此时数组剩下两个元素 [' 小鸟游六花 ', ' 入间同学 '],</li><li>接着被淘汰的元素往下从 0 数到 6，是小鸟游六花，那么小鸟游六花被淘汰</li><li>此时数组只剩下入间同学，并获取原来的下标值，那么就是 2</li></ul><p><strong>Example 2:</strong></p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>输入：<span class="token punctuation">[</span><span class="token string">'Saber'</span><span class="token punctuation">,</span> <span class="token string">'Lain'</span><span class="token punctuation">,</span> <span class="token string">'Nico'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">8</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token key atrule">输出：el</span><span class="token punctuation">:</span> <span class="token key atrule">Lain  index</span><span class="token punctuation">:</span> <span class="token number">1</span></pre></td></tr></table></figure><h2 id="solving-ideas"><a class="anchor" href="#solving-ideas">#</a> Solving Ideas</h2><ul><li><code>我们使用上面封装的队列方法实现击鼓传花</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">passGame</span><span class="token punctuation">(</span><span class="token parameter">nameList<span class="token punctuation">,</span> num</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">// 1. 创建一个队列</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">// 2. 将所有人依次加入到队列中</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nameList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    queue<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>nameList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token comment">// 3. 开始数数字</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>      queue<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    queue<span class="token punctuation">.</span><span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">index: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>nameList<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> : el: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>queue<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">passGame</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Saber'</span><span class="token punctuation">,</span> <span class="token string">'Lain'</span><span class="token punctuation">,</span> <span class="token string">'Nico'</span><span class="token punctuation">,</span> <span class="token string">'Nekoaimer'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment">// el: Nekoaimer  index: 3</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;队列结构queue&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#队列结构queue&quot;&gt;#&lt;/a&gt; 队列结构（Queue）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;队列是一个简单的数据结构，它是一个 &lt;code&gt;允许在一端进行插入操作，而在另一端进行删除操作的线</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/data-structures-and-algorithms/"/>
    
    <category term="Easy" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/data-structures-and-algorithms/Easy/"/>
    
    
    <category term="Easy" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/Easy/"/>
    
    <category term="数据结构与算法" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>进制转换</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2022/01/16/data-structures-and-algorithms/problems/easy/HexBinDecOct/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2022/01/16/data-structures-and-algorithms/problems/easy/HexBinDecOct/</id>
    <published>2022-01-16T06:49:39.000Z</published>
    <updated>2022-01-19T05:59:34.721Z</updated>
    
    <content type="html"><![CDATA[<h2 id="dec2bin-example"><a class="anchor" href="#dec2bin-example">#</a> Dec2Bin Example</h2><p><strong>Example 1:</strong></p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>输入：n = 10</pre></td></tr><tr><td data-num="2"></td><td><pre>输出：1010</pre></td></tr><tr><td data-num="3"></td><td><pre>解释：将十进制转换为二进制</pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>输入：n = 15</pre></td></tr><tr><td data-num="2"></td><td><pre>输出：1111</pre></td></tr><tr><td data-num="3"></td><td><pre>解释：将十进制转换为二进制</pre></td></tr></table></figure><h2 id="solving-ideas"><a class="anchor" href="#solving-ideas">#</a> Solving Ideas</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">dec2bin</span><span class="token punctuation">(</span><span class="token parameter">decNumber</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token comment">//decNumber > 0 停止循环</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">while</span> <span class="token punctuation">(</span>decNumber <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token comment">// 将每次取模的数存入栈中</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>decNumber <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token comment">// 同时向下取 / 2 的值 </span></pre></td></tr><tr><td data-num="11"></td><td><pre>    decNumber <span class="token operator">=</span> <span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span>decNumber <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token comment">// 将数组颠倒转换成字符串再强制转换为数字</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token keyword">return</span> <span class="token operator">+</span>stack<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">dec2bin</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="bin2dec-example"><a class="anchor" href="#bin2dec-example">#</a> Bin2Dec Example</h2><p><strong>Example 1:</strong></p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>输入：n = 1010</pre></td></tr><tr><td data-num="2"></td><td><pre>输出：10</pre></td></tr><tr><td data-num="3"></td><td><pre>解释：将二进制转换为十进制</pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>输入：n = 1111</pre></td></tr><tr><td data-num="2"></td><td><pre>输出：15</pre></td></tr><tr><td data-num="3"></td><td><pre>解释：将二进制转换为十进制</pre></td></tr></table></figure><h2 id="solving-ideas-2"><a class="anchor" href="#solving-ideas-2">#</a> Solving Ideas</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">bin2dec</span><span class="token punctuation">(</span><span class="token parameter">binNumber</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">// 将其切割成数组</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">(</span>binNumber <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">// edge case</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  stack<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">+</span>item <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Please enter the correct binary number'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token comment">// 用于记录数字位置的次方 从最后一位开始</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token keyword">let</span> pow <span class="token operator">=</span> stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> stack<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>      </pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token comment">// 如果数组中是 0, 就不必算</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>      stack<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">**</span> pow</pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    </pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token comment">// 递减</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    pow<span class="token operator">--</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>  </pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token comment">// 将数组元素依次相加</span></pre></td></tr><tr><td data-num="26"></td><td><pre>  stack<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> res <span class="token operator">+=</span> <span class="token operator">+</span>item<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre>  <span class="token keyword">return</span> res</pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;dec2bin-example&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#dec2bin-example&quot;&gt;#&lt;/a&gt; Dec2Bin Example&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;figure cla</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/data-structures-and-algorithms/"/>
    
    <category term="Easy" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/data-structures-and-algorithms/Easy/"/>
    
    
    <category term="Easy" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/Easy/"/>
    
    <category term="数据结构与算法" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>计算力扣银行的钱</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2022/01/15/data-structures-and-algorithms/problems/easy/calculate-money-in-leetcode-bank/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2022/01/15/data-structures-and-algorithms/problems/easy/calculate-money-in-leetcode-bank/</id>
    <published>2022-01-15T10:27:49.000Z</published>
    <updated>2022-01-19T05:59:30.007Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言声明"><a class="anchor" href="#前言声明">#</a> 前言声明</h2><p>来源：力扣（LeetCode）<br />链接：<span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvY2FsY3VsYXRlLW1vbmV5LWluLWxlZXRjb2RlLWJhbms=">https://leetcode-cn.com/problems/calculate-money-in-leetcode-bank</span></p><h2 id="计算力扣银行的钱"><a class="anchor" href="#计算力扣银行的钱">#</a> 计算力扣银行的钱</h2><ul><li>Hercy 想要为购买第一辆车存钱。他 每天 都往力扣银行里存钱。</li><li>最开始，他在周一的时候存入 1 块钱。从周二到周日，他每天都比前一天多存入 1 块钱。在接下来每一个周一，他都会比 前一个周一 多存入 1 块钱。</li><li>给你 n 天，请你返回在第 n 天结束的时候他在力扣银行总共存了多少块钱。</li></ul><h2 id="example"><a class="anchor" href="#example">#</a> Example</h2><p><strong>Example 1:</strong></p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>输入：n = 4</pre></td></tr><tr><td data-num="2"></td><td><pre>输出：10</pre></td></tr><tr><td data-num="3"></td><td><pre>解释：第 4 天后，总额为 1 + 2 + 3 + 4 = 10 。</pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>输入：n = 10</pre></td></tr><tr><td data-num="2"></td><td><pre>输出：37</pre></td></tr><tr><td data-num="3"></td><td><pre>解释：第 10 天后，总额为 (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4) = 37 。注意到第二个星期一，Hercy 存入 2 块钱。</pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>输入：n = 20</pre></td></tr><tr><td data-num="2"></td><td><pre>输出：96</pre></td></tr><tr><td data-num="3"></td><td><pre>解释：第 20 天后，总额为 (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4 + 5 + 6 + 7 + 8) + (3 + 4 + 5 + 6 + 7 + 8) = 96 。</pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 1000</code></li></ul><h2 id="solving-ideas"><a class="anchor" href="#solving-ideas">#</a> Solving Ideas</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> <span class="token function-variable function">totalMoney</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">// 每周一的钱</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">let</span> WeekStartMoney <span class="token operator">=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">// 一周 0-6 表示 配合 WeekStartMoney 实现每天递增一元和每周一起始钱加 1</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">let</span> dayMoney <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token comment">// 保存结果</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  </pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    res <span class="token operator">+=</span> WeekStartMoney <span class="token operator">+</span> dayMoney</pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token operator">++</span>dayMoney</pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token comment">// 如果等于 7 代表是第二个星期 </span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dayMoney <span class="token operator">===</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>      <span class="token comment">// 起始钱 + 1</span></pre></td></tr><tr><td data-num="18"></td><td><pre>      WeekStartMoney<span class="token operator">++</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>      <span class="token comment">// 初始为周一</span></pre></td></tr><tr><td data-num="21"></td><td><pre>      dayMoney <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>      </pre></td></tr><tr><td data-num="24"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token keyword">return</span> res</pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token function">totalMoney</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span> <span class="token comment">// 63</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token function">totalMoney</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment">// 96</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言声明&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#前言声明&quot;&gt;#&lt;/a&gt; 前言声明&lt;/h2&gt;
&lt;p&gt;来源：力扣（LeetCode）&lt;br /&gt;
链接：&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9sZWV0Y29k</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/data-structures-and-algorithms/"/>
    
    <category term="Easy" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/data-structures-and-algorithms/Easy/"/>
    
    
    <category term="Easy" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/Easy/"/>
    
    <category term="数据结构与算法" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>两数之和</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2022/01/15/data-structures-and-algorithms/problems/easy/two-sum/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2022/01/15/data-structures-and-algorithms/problems/easy/two-sum/</id>
    <published>2022-01-15T09:22:25.000Z</published>
    <updated>2022-01-19T05:59:37.871Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言声明"><a class="anchor" href="#前言声明">#</a> 前言声明</h2><ul><li>来源：力扣（LeetCode）</li><li>链接：<span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdHdvLXN1bQ==">https://leetcode-cn.com/problems/two-sum</span></li></ul><h2 id="两数之和"><a class="anchor" href="#两数之和">#</a> 两数之和</h2><ul><li><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。</p></li><li><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p></li><li><p>你可以按任意顺序返回答案。</p></li></ul><p>Example 1:</p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>输入：nums = <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target = 10</pre></td></tr><tr><td data-num="2"></td><td><pre>输出：<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre>解释：因为 nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> + nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> == 10 ，返回 <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span></pre></td></tr></table></figure><p>Example 2:</p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>输入：nums = <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target = 7</pre></td></tr><tr><td data-num="2"></td><td><pre>输出：<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre>解释：因为 nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> + nums<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> == 7 ，返回 <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span></pre></td></tr></table></figure><p>提示：</p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>2 &lt;= nums.length &lt;= 104</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">-</span>109 &lt;= nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> &lt;= 109</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">-</span>109 &lt;= target &lt;= 109</pre></td></tr><tr><td data-num="4"></td><td><pre>只会存在一个有效答案</pre></td></tr></table></figure><ul><li>进阶：你可以想出一个时间复杂度小于 O (n2) 的算法吗？</li></ul><h2 id="solving-ideas"><a class="anchor" href="#solving-ideas">#</a> Solving Ideas</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> <span class="token function-variable function">twoSum</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">// 用于保存遍历过的数据</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">const</span> hash <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token comment">// 遍历数组</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token comment">// 判断 hash 中第二个值是否存在数组中  </span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>hash<span class="token punctuation">[</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>      <span class="token comment">// 一旦存在就返回最近符合的数组下标</span></pre></td></tr><tr><td data-num="12"></td><td><pre>     <span class="token keyword">return</span> <span class="token punctuation">[</span>hash<span class="token punctuation">[</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token comment">// 将遍历过的元素以 key:value 保存在 hash 中</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    hash<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i</pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    </pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token comment">// 没有找到就返回空数组</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment">// [2, 3]</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span> <span class="token comment">// []</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言声明&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#前言声明&quot;&gt;#&lt;/a&gt; 前言声明&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;来源：力扣（LeetCode）&lt;/li&gt;
&lt;li&gt;链接：&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/data-structures-and-algorithms/"/>
    
    <category term="Easy" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/data-structures-and-algorithms/Easy/"/>
    
    
    <category term="Easy" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/Easy/"/>
    
    <category term="数据结构与算法" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>CSS 边框滑块</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2022/01/13/css/CSS%20Demo/%E8%BE%B9%E6%A1%86%E6%BB%91%E5%9D%97/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2022/01/13/css/CSS%20Demo/%E8%BE%B9%E6%A1%86%E6%BB%91%E5%9D%97/</id>
    <published>2022-01-13T13:07:49.000Z</published>
    <updated>2022-01-19T06:49:45.879Z</updated>
    
    <content type="html"><![CDATA[<h2 id="预览效果"><a class="anchor" href="#预览效果">#</a> 预览效果</h2><p> <style>  body {  --bgc: #353b48;  background-color: var(--bgc);}.container {      display: flex;      flex-direction: row;      flex-wrap: wrap;      justify-content: space-around;      width: 100%;    }.container .btn {  width: 35vw;  height: 60px;  border: 3px solid;  background: none;  color: var(--c);  cursor: pointer;  font-size: 16px;  font-width: 700;  margin: 20px;  position: relative;}.container .btn::before,.container .btn::after {  content: '';  position: absolute;  width: 14px;  height: 4px;  background-color: var(--bgc);  transform: skewX(30deg);  transition: .4s ease;}.container .btn::before {  top: -4px;  left: 10%;}.container .btn::after {  bottom: -4px;  right: 10%;}.container .btn:hover::before {  left: 80%}.container .btn:hover::after {  right: 80%;  /* animation: after 2s timing-function delay iteration-count direction fill-mode; */  animation: after 2s;}.container .btn:nth-child(1) {  --c: #4ad3e2}.container .btn:nth-child(2) {  --c: #93edd4}.container .btn:nth-child(3) {  --c: #f9cb8f}.container .btn:nth-child(4) {  --c: #ffb1a3}</style>    <div class="container">      <button class="btn">点赞</button>      <button class="btn">投币</button></button>      <button class="btn">收藏</button>      <button class="btn">分享</button></button>    </div></p><h2 id="边框滑块代码"><a class="anchor" href="#边框滑块代码">#</a> 边框滑块代码</h2><figure class="highlight css"><figcaption data-lang="CSS"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">body</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token property">--bgc</span><span class="token punctuation">:</span> #353b48<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--bgc<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token selector">.container</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>      <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>      <span class="token property">flex-direction</span><span class="token punctuation">:</span> row<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>      <span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>      <span class="token property">justify-content</span><span class="token punctuation">:</span> space-around<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>      <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token selector">.container .btn</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token property">height</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token property">border</span><span class="token punctuation">:</span> 3px solid<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token property">background</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--c<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token property">font-size</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token property">font-width</span><span class="token punctuation">:</span> 700<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  <span class="token property">margin</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token selector">.container .btn::before,</pre></td></tr><tr><td data-num="25"></td><td><pre>.container .btn::after</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>  <span class="token property">width</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>  <span class="token property">height</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--bgc<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">skewX</span><span class="token punctuation">(</span>30deg<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>  <span class="token property">transition</span><span class="token punctuation">:</span> .4s ease<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token selector">.container .btn::before</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>  <span class="token property">top</span><span class="token punctuation">:</span> -4px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>  <span class="token property">left</span><span class="token punctuation">:</span> 10%<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token selector">.container .btn::after</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>  <span class="token property">bottom</span><span class="token punctuation">:</span> -4px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>  <span class="token property">right</span><span class="token punctuation">:</span> 10%<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token selector">.container .btn:hover::before</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>  <span class="token property">left</span><span class="token punctuation">:</span> 80%</pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token selector">.container .btn:hover::after</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>  <span class="token property">right</span><span class="token punctuation">:</span> 80%<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>  <span class="token comment">/* animation: after 2s timing-function delay iteration-count direction fill-mode; */</span></pre></td></tr><tr><td data-num="48"></td><td><pre>  <span class="token property">animation</span><span class="token punctuation">:</span> after 2s<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token selector">.container .btn:nth-child(1)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>  <span class="token property">--c</span><span class="token punctuation">:</span> #4ad3e2</pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token selector">.container .btn:nth-child(2)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>  <span class="token property">--c</span><span class="token punctuation">:</span> #93edd4</pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token selector">.container .btn:nth-child(3)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>  <span class="token property">--c</span><span class="token punctuation">:</span> #f9cb8f</pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token selector">.container .btn:nth-child(4)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>  <span class="token property">--c</span><span class="token punctuation">:</span> #ffb1a3</pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点赞<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>投币<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>收藏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>分享<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;预览效果&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#预览效果&quot;&gt;#&lt;/a&gt; 预览效果&lt;/h2&gt;
&lt;p&gt; 
&lt;style&gt;
  body {
  --bgc: #353b48;
  background-color: var(--bgc);
}
.cont</summary>
      
    
    
    
    <category term="CSS" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/css/"/>
    
    <category term="CSS Demo" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/css/CSS-Demo/"/>
    
    
    <category term="CSS" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/CSS/"/>
    
    <category term="CSS Demo" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/CSS-Demo/"/>
    
  </entry>
  
  <entry>
    <title>BOM</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2021/12/12/JavaScript/Advanced/BOM/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2021/12/12/JavaScript/Advanced/BOM/</id>
    <published>2021-12-12T13:48:32.000Z</published>
    <updated>2022-02-06T13:49:19.934Z</updated>
    
    <content type="html"><![CDATA[<h2 id="认识bom"><a class="anchor" href="#认识bom">#</a> 认识 BOM</h2><ul><li>JavaScript 有一个非常重要的运行环境就是浏览器，而且浏览器本身又作为一个应用程序需要对其本身进行操作，所以通常浏览器会有对应的对象模型（BOM，Browser Object Model）。<ul><li>我们可以将 BOM 看成是连接 JavaScript 脚本与浏览器窗口的桥梁。</li></ul></li><li>BOM 主要包括一下的对象模型：<ul><li>window：包括全局属性、方法，控制浏览器窗口相关的属性、方法；</li><li>location：浏览器连接到的对象的位置（URL）；</li><li>history：操作浏览器的历史；</li><li>document：当前窗口操作文档的对象；</li></ul></li><li>window 对象在浏览器中有两个身份：<ul><li>身份一：全局对象。<ul><li>我们知道 ECMAScript 其实是有一个全局对象的，这个全局对象在 Node 中是 global；</li><li>在浏览器中就是 window 对象；</li></ul></li><li>身份二：浏览器窗口对象。<ul><li>作为浏览器窗口时，提供了对浏览器操作的相关的 API；</li></ul></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;认识bom&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#认识bom&quot;&gt;#&lt;/a&gt; 认识 BOM&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;JavaScript 有一个非常重要的运行环境就是浏览器，而且浏览器本身又作为一个应用程序需要对其本身进行操作，所以通常浏览器会有对</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>浏览器存储方案 Cookie</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2021/12/09/JavaScript/Advanced/Cookie/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2021/12/09/JavaScript/Advanced/Cookie/</id>
    <published>2021-12-09T08:55:00.000Z</published>
    <updated>2022-02-06T13:49:13.461Z</updated>
    
    <content type="html"><![CDATA[<h2 id="认识-cookie"><a class="anchor" href="#认识-cookie">#</a> 认识 Cookie</h2><ul><li>Cookie（复数形态 Cookies），又称为 “小甜饼”。类型为 “小型文本文件，某些网站为了辨别用户身份而存储在用户本地终端（Client Side）上的数据。<ul><li>浏览器会在特定的情况下携带上 cookie 来发送请求，我们可以通过 cookie 来获取一些信息；</li></ul></li><li>Cookie 总是保存在客户端中，按在客户端中的存储位置，Cookie 可以分为内存 Cookie 和硬盘 Cookie。<ul><li>内存 Cookie 由浏览器维护，保存在内存中，浏览器关闭时 Cookie 就会消失，其存在时间是短暂的；</li><li>硬盘 Cookie 保存在硬盘中，有一个过期时间，用户手动清理或者过期时间到时，才会被清理；</li></ul></li><li>如果判断一个 cookie 是内存 cookie 还是硬盘 cookie 呢？<ul><li>没有设置过期时间，默认情况下 cookie 是内存 cookie，在关闭浏览器时会自动删除；</li><li>有设置过期时间，并且过期时间不为 0 或者负数的 cookie，是硬盘 cookie，需要手动或者到期时，才会删除；</li></ul></li></ul><h2 id="cookie-server"><a class="anchor" href="#cookie-server">#</a> cookie-server</h2><h3 id="packagejson"><a class="anchor" href="#packagejson">#</a> package.json</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"cookie-server"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token string-property property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token string-property property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token string-property property">"main"</span><span class="token operator">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token string-property property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token string-property property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token string-property property">"author"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token string-property property">"license"</span><span class="token operator">:</span> <span class="token string">"ISC"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token string-property property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token string-property property">"koa"</span><span class="token operator">:</span> <span class="token string">"^2.13.4"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token string-property property">"koa-router"</span><span class="token operator">:</span> <span class="token string">"^10.1.1"</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="server"><a class="anchor" href="#server">#</a> server</h3><figure class="highlight js"><figcaption data-lang="JavaScript"><span>node</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> Router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-router'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">const</span> testRouter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// 登录接口</span></pre></td></tr><tr><td data-num="9"></td><td><pre>testRouter<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/test'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token comment">//maxAge 对应毫秒</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  ctx<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"lain"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token literal-property property">maxAge</span><span class="token operator">:</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token literal-property property">httpOnly</span><span class="token operator">:</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre>  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">"test"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>testRouter<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/demo'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token comment">// 读取 cookie</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  <span class="token keyword">const</span> value <span class="token operator">=</span> ctx<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">"你的cookie是"</span> <span class="token operator">+</span> value<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>testRouter<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>testRouter<span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"服务器启动成功~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p><img data-src="cookie.png" alt="cookie" /></p><h2 id="cookie-常见的属性"><a class="anchor" href="#cookie-常见的属性">#</a> cookie 常见的属性</h2><ul><li>cookie 的生命周期：<ul><li>默认情况下的 cookie 是内存 cookie，也称之为会话 cookie，也就是在浏览器关闭时会自动被删除；</li><li>我们可以通过设置 expires 或者 max-age 来设置过期的时间；<ul><li>expires：设置的是 Date.toUTCString ()，设置格式是；expires=date-in-GMTString-format；</li><li>max-age：设置过期的秒钟，;max-age=max-age-in-seconds (例如一年为 60<em>60</em>24*365)；</li></ul></li></ul></li><li>cookie 的作用域：（允许 cookie 发送给哪些 URL）<ul><li>Domain：指定哪些主机可以接受 cookie<ul><li>如果不指定，那么默认是 origin，不包括子域名。</li><li>如果指定 Domain，则包含子域名。例如，如果设置 <span class="exturl" data-url="aHR0cDovL0RvbWFpbj1tb3ppbGxhLm9yZw==">Domain=mozilla.org</span>，则 Cookie 也包含在子域名中（<span class="exturl" data-url="aHR0cDovL3huLS1kZXZlbG9wZXItazk5cC5tb3ppbGxhLm9yZw==">如 developer.mozilla.org</span>）。</li></ul></li><li>Path：指定主机下哪些路径可以接受 cookie<ul><li>例如，设置 Path=/docs，则以下地址都会匹配：<ul><li>/docs</li><li>/docs/Web/</li><li>/docs/Web/HTTP</li></ul></li></ul></li></ul></li></ul><h2 id="客户端设置cookie"><a class="anchor" href="#客户端设置cookie">#</a> 客户端设置 cookie</h2><ul><li><p>js 直接设置和获取 cookie：</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">)</span></pre></td></tr></table></figure></li><li><p>这个 cookie 会在会话关闭时被删除掉；</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 设置过期时间就是本地 cookie，不设置就是内存 cookie</span></pre></td></tr><tr><td data-num="2"></td><td><pre>document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">'name=lain'</span></pre></td></tr><tr><td data-num="3"></td><td><pre>document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">'age=16'</span></pre></td></tr></table></figure></li><li><p>设置 cookie，同时设置过期时间（默认单位是秒钟）</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">'name=lain;max-age=10'</span></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;认识-cookie&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#认识-cookie&quot;&gt;#&lt;/a&gt; 认识 Cookie&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Cookie（复数形态 Cookies），又称为 “小甜饼”。类型为 “小型文本文件，某些网站为了辨别用户身份</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>浏览器存储方案 IndexedDB</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2021/12/07/JavaScript/Advanced/IndexedDB/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2021/12/07/JavaScript/Advanced/IndexedDB/</id>
    <published>2021-12-07T08:55:16.000Z</published>
    <updated>2022-02-06T08:58:58.199Z</updated>
    
    <content type="html"><![CDATA[<h2 id="认识-indexeddb"><a class="anchor" href="#认识-indexeddb">#</a> 认识 IndexedDB</h2><ul><li>什么是 IndexedDB 呢？<ul><li>我们能看到 DB 这个词，就说明它其实是一种数据库（Database），通常情况下在服务器端比较常见；</li><li>在实际的开发中，大量的数据都是存储在数据库的，客户端主要是请求这些数据并且展示；</li><li>有时候我们可能会存储一些简单的数据到本地（浏览器中），比如 token、用户名、密码、用户信息等，比较少存储大量的数据；</li><li>那么如果确实有大量的数据需要存储，这个时候可以选择使用 IndexedDB；</li></ul></li><li>IndexedDB 是一种底层的 API，用于在客户端存储大量的结构化数据。<ul><li>它是一种事务型数据库系统，是一种基于 JavaScript 面向对象数据库，有点类似于 NoSQL（非关系型数据库）；</li><li>IndexDB 本身就是基于事务的，我们只需要指定数据库模式，打开与数据库的连接，然后检索和更新一系列事务即可；</li></ul></li></ul><h2 id="indexeddb-的连接数据库"><a class="anchor" href="#indexeddb-的连接数据库">#</a> IndexedDB  的连接数据库</h2><ul><li><p>第一步：打开 indexDB 的某一个数据库；</p><ul><li>通过 indexDB.open (数据库名称，数据库版本) 方法；</li><li>如果数据库不存在，那么会创建这个数据；</li><li>如果数据库已经存在，那么会打开这个数据库；</li></ul></li><li><p>第二步：通过监听回调得到数据库连接结果；</p><ul><li>数据库的 open 方法会得到一个 IDBOpenDBRequest 类型</li></ul></li><li><p>我们可以通过下面的三个回调来确定结果：</p><ul><li>onerror：当数据库连接失败时；</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 打开数据 (和数据库建立连接)</span></pre></td></tr><tr><td data-num="2"></td><td><pre> <span class="token keyword">const</span> dbRequest <span class="token operator">=</span> indexedDB<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"nekoaimer"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre> dbRequest<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"比如浏览器不支持，打开数据库失败~"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre> <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>onsuccess：当数据库连接成功时回调；</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 数据库连接成功时回调；</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">let</span> db <span class="token operator">=</span> <span class="token keyword">null</span></pre></td></tr><tr><td data-num="3"></td><td><pre>dbRequest<span class="token punctuation">.</span><span class="token function-variable function">onsuccess</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  db <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result</pre></td></tr><tr><td data-num="5"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span>  </pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>onupgradeneeded：当数据库的 version 发生变化并且高于之前版本时回调；</li><li>我们可以通过 onsuccess 回调的 event 获取到 db 对象：event.target.result</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 第一次打开 / 或者版本发生升级</span></pre></td></tr><tr><td data-num="2"></td><td><pre>dbRequest<span class="token punctuation">.</span><span class="token function-variable function">onupgradeneeded</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">const</span> db <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span> <span class="token comment">// IDBDatabase &#123;name: 'nekoaimer', version: 1, objectStoreNames: DOMStringList, onabort: null, onclose: null, …&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token comment">// 创建一些存储对象</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  db<span class="token punctuation">.</span><span class="token function">createObjectStore</span><span class="token punctuation">(</span><span class="token string">"users"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">keyPath</span><span class="token operator">:</span> <span class="token string">"id"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>通常我们在这里会创建具体的存储对象：db.createObjectStore (存储对象名称，{ keypath: 存储的主键})</li></ul></li></ul><h2 id="indexeddb的数据库操作"><a class="anchor" href="#indexeddb的数据库操作">#</a> IndexedDB 的数据库操作</h2><ul><li>我们对数据库的操作要通过事务对象来完成：<ul><li>第一步：通过 db 获取对应存储的事务 db.transaction (存储名称，可写操作)；</li><li>第二步：通过事务获取对应的存储对象 transaction.objectStore (存储名称)；</li></ul></li><li>接下来我们就可以进行增删改查操作了：<ul><li>新增数据 store.add</li><li>查询数据<ul><li>方式一：store.get (key)</li><li>方式二：通过 store.openCursor 拿到游标对象<ul><li>在 request.onsuccess 中获取 cursor：event.target.result</li><li>获取对应的 key：cursor.key；</li><li>获取对应的 value：cursor.value；</li><li>可以通过 cursor.continue 来继续执行；</li></ul></li></ul></li><li>修改数据 cursor.update (value)</li><li>删除数据 cursor.delete ()</li></ul></li></ul><h2 id="indexeddb-数据库的使用"><a class="anchor" href="#indexeddb-数据库的使用">#</a> IndexedDB 数据库的使用</h2><ul><li>HTML</li></ul><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>新增<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>查询<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>修改<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><ul><li>数据</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id</pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age</pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">const</span> users <span class="token operator">=</span> <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">001</span><span class="token punctuation">,</span> <span class="token string">"lain"</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">002</span><span class="token punctuation">,</span> <span class="token string">"saber"</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">003</span><span class="token punctuation">,</span> <span class="token string">"aimer"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">]</span></pre></td></tr></table></figure><ul><li>整体结构</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 获取四个按钮</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> btns <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> btns<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  btns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token comment">// 操作哪一张表</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">const</span> transaction <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token string">"users"</span><span class="token punctuation">,</span> <span class="token string">"readwrite"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token comment">// 从 transaction 事务里拿 users 对象，因为 transaction 是可以传多个的 ["users"]</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">const</span> store <span class="token operator">=</span> transaction<span class="token punctuation">.</span><span class="token function">objectStore</span><span class="token punctuation">(</span><span class="token string">"users"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>      <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"点击了新增"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">break</span></pre></td></tr><tr><td data-num="15"></td><td><pre>      <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"点击了查询"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token keyword">break</span></pre></td></tr><tr><td data-num="18"></td><td><pre>      <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"点击了删除"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">break</span></pre></td></tr><tr><td data-num="21"></td><td><pre>      <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"点击了修改"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token keyword">break</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="新增数据"><a class="anchor" href="#新增数据">#</a> 新增数据</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"点击了新增"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> user <span class="token keyword">of</span> users<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token comment">//add 新增数据 并且每一次返回一个对象</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">const</span> request <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token comment">// 每条数据插入成功的回调</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    request<span class="token punctuation">.</span><span class="token function-variable function">onsuccess</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>user<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">插入成功</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token comment">// 事务全部完成后回调 oncomplete 函数</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  transaction<span class="token punctuation">.</span><span class="token function-variable function">oncomplete</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"添加操作全部完成"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token keyword">break</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment">// 点击后插入成功打印下面信息</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">/* </pre></td></tr><tr><td data-num="21"></td><td><pre>   点击了新增</pre></td></tr><tr><td data-num="22"></td><td><pre>   lain 插入成功</pre></td></tr><tr><td data-num="23"></td><td><pre>   saber 插入成功</pre></td></tr><tr><td data-num="24"></td><td><pre>   aimer 插入成功</pre></td></tr><tr><td data-num="25"></td><td><pre>   添加操作全部完成</pre></td></tr><tr><td data-num="26"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id="查询数据"><a class="anchor" href="#查询数据">#</a> 查询数据</h3><ul><li>查询方式一 (知道主键，根据主键查询)</li><li>如果没查询到返回 <code>undefined </code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"点击了查询"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">const</span> request <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">001</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  request<span class="token punctuation">.</span><span class="token function-variable function">onsuccess</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token keyword">break</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// 点击查询后打印下面信息</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">/* </pre></td></tr><tr><td data-num="11"></td><td><pre>  点击了查询</pre></td></tr><tr><td data-num="12"></td><td><pre>  &#123;id: 1, name: 'lain', age: 16&#125;</pre></td></tr><tr><td data-num="13"></td><td><pre>*/</span></pre></td></tr></table></figure><ul><li>查询方式二</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">const</span> request <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">openCursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  request<span class="token punctuation">.</span><span class="token function-variable function">onsuccess</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">const</span> cursor <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result</pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cursor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>      <span class="token comment">// 如果找到 key 就不用查了</span></pre></td></tr><tr><td data-num="7"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span>cursor<span class="token punctuation">.</span>key <span class="token operator">===</span> <span class="token number">002</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cursor<span class="token punctuation">.</span>key<span class="token punctuation">,</span> cursor<span class="token punctuation">.</span>value<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token comment">// 没找到继续查</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        cursor<span class="token punctuation">.</span><span class="token function">continue</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>      <span class="token comment">// 如果查询完都没找到打印 查询完成</span></pre></td></tr><tr><td data-num="15"></td><td><pre>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"查询完成"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token keyword">break</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token comment">// 点击查询后打印下面信息</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token comment">/* </pre></td></tr><tr><td data-num="23"></td><td><pre>  点击了查询</pre></td></tr><tr><td data-num="24"></td><td><pre>  2 &#123;id: 2, name: 'saber', age: 17&#125;</pre></td></tr><tr><td data-num="25"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id="修改数据"><a class="anchor" href="#修改数据">#</a> 修改数据</h3><ul><li>获取游标并修改 <code>name</code> ，最好记得一定要用游标将 <code>value</code>  放进去</li><li>这些操作可在 <code>IndexedDB</code>  里验证查看</li><li>, 注意每次数据发生变化或有一句提示 <code>Data may be stale</code> , 记得 <code>Refresh</code> ，再查看 <code>IndexedDB</code>  数据库</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"点击了修改"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">const</span> updateRequest <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">openCursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  updateRequest<span class="token punctuation">.</span><span class="token function-variable function">onsuccess</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">const</span> cursor <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result</pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cursor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span>cursor<span class="token punctuation">.</span>key <span class="token operator">===</span> <span class="token number">003</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">const</span> value <span class="token operator">=</span> cursor<span class="token punctuation">.</span>value<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        value<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"樱岛麻衣"</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token comment">// 再用游标将 value 放进去 可以在 IndexedDB 里验证查看</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        cursor<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        </pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token comment">// 打印看看</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cursor<span class="token punctuation">.</span>key<span class="token punctuation">,</span> cursor<span class="token punctuation">.</span>value<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        cursor<span class="token punctuation">.</span><span class="token function">continue</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"查询完成"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>  <span class="token keyword">break</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token comment">// 点击 x 修改后打印下面信息</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token comment">/* </pre></td></tr><tr><td data-num="26"></td><td><pre>  点击了修改</pre></td></tr><tr><td data-num="27"></td><td><pre>  3 &#123;id: 3, name: ' 樱岛麻衣 ', age: 18&#125;</pre></td></tr><tr><td data-num="28"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id="删除数据"><a class="anchor" href="#删除数据">#</a> 删除数据</h3><ul><li>删除数据后，最好去 <code>IndexedDB</code>  查看数据是否删除</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"点击了删除"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">const</span> deleteRequest <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">openCursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  deleteRequest<span class="token punctuation">.</span><span class="token function-variable function">onsuccess</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">const</span> cursor <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result</pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cursor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span>cursor<span class="token punctuation">.</span>key <span class="token operator">===</span> <span class="token number">002</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token comment">// 找到对应游标的 delete</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        cursor<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        cursor<span class="token punctuation">.</span><span class="token function">continue</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"查询完成"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">break</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment">// 点击删除后打印下面信息，最好去 IndexedDB 数据库查看</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">/* </pre></td></tr><tr><td data-num="21"></td><td><pre>  点击了删除</pre></td></tr><tr><td data-num="22"></td><td><pre>*/</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;认识-indexeddb&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#认识-indexeddb&quot;&gt;#&lt;/a&gt; 认识 IndexedDB&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;什么是 IndexedDB 呢？
&lt;ul&gt;
&lt;li&gt;我们能看到 DB 这个词，就说明它其实是</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>浏览器存储方案 Storage</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2021/12/05/JavaScript/Advanced/Storage/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2021/12/05/JavaScript/Advanced/Storage/</id>
    <published>2021-12-05T13:55:12.000Z</published>
    <updated>2022-02-06T08:57:44.472Z</updated>
    
    <content type="html"><![CDATA[<h2 id="认识-storage"><a class="anchor" href="#认识-storage">#</a> 认识 Storage</h2><ul><li>WebStorage 主要提供了一种机制，可以让浏览器提供一种比 cookie 更直观的 key、value 存储方式：</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"localStorage"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"sessionStorage"</span><span class="token punctuation">)</span></pre></td></tr></table></figure><ul><li>localStorage：本地存储，提供的是一种永久性的存储方法，在关闭掉网页重新打开时，存储的内容依然保留；</li></ul><p><img data-src="localStorage.png" alt="localStorage" /></p><ul><li>sessionStorage：会话存储，提供的是本次会话的存储，在关闭掉会话时，存储的内容会被清除；</li></ul><p><img data-src="sessionStorage.png" alt="sessionStorage" /></p><h2 id="localstorage和sessionstorage的区别"><a class="anchor" href="#localstorage和sessionstorage的区别">#</a> localStorage 和 sessionStorage 的区别</h2><ul><li>我们会发现 localStorage 和 sessionStorage 看起来非常的相似。</li><li>那么它们有什么区别呢？<ul><li>验证一：关闭网页后重新打开，localStorage 会保留，而 sessionStorage 会被删除；</li><li>验证二：在页面内实现跳转，localStorage 会保留，sessionStorage 也会保留；</li><li>验证三：在页面外实现跳转（打开新的网页），localStorage 会保留，sessionStorage 不会被保留；</li></ul></li></ul><h2 id="localstorage-常见的方法和属性"><a class="anchor" href="#localstorage-常见的方法和属性">#</a> localStorage 常见的方法和属性</h2><ul><li><p>localStorage 有如下的属性和方法：</p></li><li><p>属性：</p><ul><li>localStorage.length：只读属性<ul><li>返回一个整数，表示存储在 Storage 对象中的数据项数量；</li></ul></li></ul></li><li><p>方法：</p><ul><li>localStorage.key ()：该方法接受一个数值 n 作为参数，返回存储中的第 n 个 key 名称；</li><li>localStorage.getItem ()：该方法接受一个 key 作为参数，并且返回 key 对应的 value；</li><li>localStorage.setItem ()：该方法接受一个 key 和 value，并且将会把 key 和 value 添加到存储中。<ul><li>如果 key 存储，则更新其对应的值；</li></ul></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"lain"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p><img data-src="setItem.png" alt="setItem" /></p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 1.localStorage.setItem</span></pre></td></tr><tr><td data-num="2"></td><td><pre>localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"lain"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 2.localStorage.length</span></pre></td></tr><tr><td data-num="6"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span>length<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> localStorage<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token comment">// 3.localStorage.key()</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  key<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token comment">// 4.localStorage.getItem()</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  value<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token comment">// ['age', 'name']</span></pre></td></tr><tr><td data-num="17"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token comment">// ['16', 'lain']</span></pre></td></tr></table></figure></li><li><p>localStorage.removeItem ()：该方法接受一个 key 作为参数，并把该 key 从存储中删除；</p></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// null</span></pre></td></tr></table></figure><ul><li>Storage.clear ()：该方法的作用是清空存储中的所有 key；</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>localStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="2"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// null</span></pre></td></tr></table></figure><h2 id="封装storage"><a class="anchor" href="#封装storage">#</a> 封装 Storage</h2><ul><li>在开发中，为了让我们对 Storage 使用更加方便，我们可以对其进行一些封装</li></ul><h3 id="封装-cache"><a class="anchor" href="#封装-cache">#</a> 封装 Cache</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Cache</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">isLocal <span class="token operator">=</span> <span class="token boolean">true</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>storage <span class="token operator">=</span> isLocal <span class="token operator">?</span> localStorage <span class="token operator">:</span> sessionStorage</pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token function">setItem</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token function">getItem</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token keyword">return</span> value <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>storage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>storage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token function">key</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storage<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storage<span class="token punctuation">.</span>length</pre></td></tr><tr><td data-num="29"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="测试-cache"><a class="anchor" href="#测试-cache">#</a> 测试 Cache</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// setItem</span></pre></td></tr><tr><td data-num="2"></td><td><pre>localCache<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'lain'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>localCache<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token string">'16'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// getItem</span></pre></td></tr><tr><td data-num="6"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>localCache<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>localCache<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// length</span></pre></td></tr><tr><td data-num="10"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>localCache<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 2</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment">// key</span></pre></td></tr><tr><td data-num="13"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>localCache<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// age</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment">// removeItem</span></pre></td></tr><tr><td data-num="16"></td><td><pre>localCache<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token comment">// length</span></pre></td></tr><tr><td data-num="19"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>localCache<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token comment">// clear</span></pre></td></tr><tr><td data-num="22"></td><td><pre>localCache<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>localCache<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 0</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;认识-storage&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#认识-storage&quot;&gt;#&lt;/a&gt; 认识 Storage&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;WebStorage 主要提供了一种机制，可以让浏览器提供一种比 cookie 更直观的 key、val</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JSON 数据存储</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2021/12/02/JavaScript/Advanced/JSON/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2021/12/02/JavaScript/Advanced/JSON/</id>
    <published>2021-12-02T11:42:27.000Z</published>
    <updated>2022-02-05T13:53:26.878Z</updated>
    
    <content type="html"><![CDATA[<h2 id="json-的由来"><a class="anchor" href="#json-的由来">#</a> JSON 的由来</h2><ul><li>在目前的开发中，JSON 是一种非常重要的数据格式，它并不是编程语言，而是一种可以在服务器和客户端之间传输的数据格式。</li><li>JSON 的全称是 JavaScript Object Notation（JavaScript 对象符号）：<ul><li>JSON 是由 Douglas Crockford 构想和设计的一种轻量级资源 (数据) 交换格式，算是 JavaScript 的一个子集；</li><li>但是虽然 JSON 被提出来的时候是主要应用 JavaScript 中，但是目前已经独立于编程语言，可以在各个编程语言中使用；</li><li>很多编程语言都实现了将 JSON 转成对应模型的方式；</li></ul></li><li>其他的传输格式：<ul><li><code>XML</code> ：在早期的网络传输中主要是使用 XML 来进行数据交换的，但是这种格式在解析、传输等各方面都弱于 JSON，所以目前已经很少在被使用了；</li><li><code>Protobuf</code> ：另外一个在网络传输中目前已经越来越多使用的传输格式是 protobuf，但是直到 2021 年的 3.x 版本才支持 JavaScript，所</li></ul></li><li>以目前在前端使用的较少；</li><li>目前 JSON 被使用的场景也越来越多：<ul><li>网络数据的传输 JSON 数据；</li><li>项目的某些配置文件；</li><li>非关系型数据库（NoSQL）将 json 作为存储格式；</li></ul></li></ul><h2 id="json-基本语法"><a class="anchor" href="#json-基本语法">#</a> JSON 基本语法</h2><ul><li><p>JSON 的顶层支持三种类型的值：</p><ul><li>简单值：数字（Number）、字符串（String，不支持单引号）、布尔类型（Boolean）、null 类型；</li></ul></li></ul><figure class="highlight json"><figcaption data-lang="JSON"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token string">"nekoaimer"</span></pre></td></tr></table></figure><ul><li>对象值：由 key、value 组成，key 是字符串类型，并且必须添加双引号，值可以是简单值、对象值、数组值；</li></ul><figure class="highlight json"><figcaption data-lang="JSON"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Lain"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token property">"friends"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Saber"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">17</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>数组值：数组的值可以是简单值、对象值、数组值；</li></ul><figure class="highlight json"><figcaption data-lang="JSON"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token string">"nekoaimer"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token number">16</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Lain"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token property">"friends"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Saber"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>      <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">17</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">]</span></pre></td></tr></table></figure><h2 id="json-序列化"><a class="anchor" href="#json-序列化">#</a> JSON 序列化</h2><ul><li>某些情况下我们希望将 JavaScript 中的复杂类型转化成 JSON 格式的字符串，这样方便对其进行处理：<ul><li>比如我们希望将一个对象保存到 localStorage 中；</li><li>但是如果我们直接存放一个对象，这个对象会被转化成 [object Object] 格式的字符串，并不是我们想要的结果；</li></ul></li></ul><h2 id="json-序列化方法"><a class="anchor" href="#json-序列化方法">#</a> JSON 序列化方法</h2><ul><li>在 ES5 中引用了 JSON 全局对象，该对象有两个常用的方法：<ul><li>stringify 方法：将 JavaScript 类型转成对应的 JSON 字符串；</li><li>parse 方法：解析 JSON 字符串，转回对应的 JavaScript 类型；</li></ul></li><li>那么上面的代码我们可以通过如下的方法来使用：</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> lain <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"lain"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token literal-property property">friends</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"saber"</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// 将 lain 转成 JSON 格式的字符串</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">const</span> lainString <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>lain<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lainString<span class="token punctuation">)</span> <span class="token comment">// &#123;"name":"lain","age":16,"friends":&#123;"name":"saber"&#125;&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">// 将对象数据存储 localStorage</span></pre></td></tr><tr><td data-num="14"></td><td><pre>localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"lain"</span><span class="token punctuation">,</span> lainString<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment">// 获取 localStorage 中存放的 JSON 数据</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">const</span> jsonString <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"lain"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment">// 再将 JSON 格式的字符串转回对象</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">const</span> lainObj <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lainObj<span class="token punctuation">)</span> <span class="token comment">// &#123;name: 'lain', age: 16, friends: &#123;…&#125;&#125;</span></pre></td></tr></table></figure><h2 id="stringify的参数replace"><a class="anchor" href="#stringify的参数replace">#</a> Stringify 的参数 replace</h2><ul><li>JSON.stringify () 方法将一个 JavaScript 对象或值转换为 JSON 字符串：<ul><li>如果指定了一个 replacer 函数，则可以选择性地替换值；</li><li>如果指定的 replacer 是数组，则可选择性地仅包含数组指定的属性；</li></ul></li><li>下面以 <code>lain</code>  对象举栗</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> lain <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"lain"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token literal-property property">friends</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"saber"</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="直接转化"><a class="anchor" href="#直接转化">#</a> 直接转化</h3><ul><li>普通用法 传入一个对象参数</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> jsonString1 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>lain<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jsonString1<span class="token punctuation">)</span> <span class="token comment">// &#123;"name":"lain","age":16,"friends":&#123;"name":"saber"&#125;&#125;</span></pre></td></tr></table></figure><h3 id="传入数组"><a class="anchor" href="#传入数组">#</a> 传入数组</h3><ul><li>设定哪些是需要转换</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> jsonString2 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>lain<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jsonString2<span class="token punctuation">)</span> <span class="token comment">// &#123;"name":"lain","age":16&#125;</span></pre></td></tr></table></figure><h3 id="传入回调函数"><a class="anchor" href="#传入回调函数">#</a> 传入回调函数</h3><ul><li><code>key</code>  是每一个字段</li><li><code>value</code>  是每个字段的值</li><li>例如下面打印 <code>key</code>  就是  <code>name age friends name</code></li><li>例如下面打印 <code>value</code>  就是  <code>lain 16 &#123;name: 'saber'&#125; saber</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> jsonString3 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>lain<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">"age"</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">++</span>value</pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">return</span> value</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jsonString3<span class="token punctuation">)</span> <span class="token comment">// &#123;"name":"lain","age":17,"friends":&#123;"name":"saber"&#125;&#125;</span></pre></td></tr></table></figure><h3 id="stringify第三参数-space"><a class="anchor" href="#stringify第三参数-space">#</a> stringify 第三参数 space</h3><ul><li>当是数字时，会在前面加上 4 个空格</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> jsonString4 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>lain<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jsonString4<span class="token punctuation">)</span>  </pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">/* </pre></td></tr><tr><td data-num="4"></td><td><pre>&#123;</pre></td></tr><tr><td data-num="5"></td><td><pre>    "name": "lain",</pre></td></tr><tr><td data-num="6"></td><td><pre>    "age": 16,</pre></td></tr><tr><td data-num="7"></td><td><pre>    "friends": &#123;</pre></td></tr><tr><td data-num="8"></td><td><pre>        "name": "saber"</pre></td></tr><tr><td data-num="9"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num="10"></td><td><pre>&#125;</pre></td></tr><tr><td data-num="11"></td><td><pre>*/</span></pre></td></tr></table></figure><ul><li>当是字符时，则会在前面加上字符</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> jsonString4 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>lain<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">'--'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jsonString4<span class="token punctuation">)</span>  </pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">/*</pre></td></tr><tr><td data-num="4"></td><td><pre>&#123;</pre></td></tr><tr><td data-num="5"></td><td><pre>--"name": "lain",</pre></td></tr><tr><td data-num="6"></td><td><pre>--"age": 16,</pre></td></tr><tr><td data-num="7"></td><td><pre>--"friends": &#123;</pre></td></tr><tr><td data-num="8"></td><td><pre>----"name": "saber"</pre></td></tr><tr><td data-num="9"></td><td><pre>--&#125;</pre></td></tr><tr><td data-num="10"></td><td><pre>&#125;</pre></td></tr><tr><td data-num="11"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id="如果对象中有tojson方法"><a class="anchor" href="#如果对象中有tojson方法">#</a> 如果对象中有 toJSON 方法</h3><ul><li>如果转化的对象包含了 <code>toJSON</code>  函数时，它的返回值就会作为结果</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> lain <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"lain"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token literal-property property">friends</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"saber"</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token function-variable function">toJSON</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token string">'我将是结果'</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">const</span> jsonString1 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>lain<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jsonString1<span class="token punctuation">)</span> <span class="token comment">// "我将是结果"</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">const</span> jsonString2 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>lain<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jsonString2<span class="token punctuation">)</span> <span class="token comment">// "我将是结果"</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">const</span> jsonString3 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>lain<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">'--'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jsonString3<span class="token punctuation">)</span> <span class="token comment">// "我将是结果"</span></pre></td></tr></table></figure><h2 id="parse-方法"><a class="anchor" href="#parse-方法">#</a> parse 方法</h2><ul><li><p>JSON.parse () 方法用来解析 JSON 字符串，构造由字符串描述的 JavaScript 值或对象。</p><ul><li>提供可选的 reviver 函数用以在返回之前对所得到的对象执行变换 (操作)</li></ul></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> JSONString <span class="token operator">=</span> <span class="token string">'&#123;"name":"lain","age":16&#125;'</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 对返回的转化过程做了一个拦截</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSONString<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">"age"</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">--</span>value</pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">return</span> value</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span> <span class="token comment">// &#123;name: 'lain', age: 15&#125;</span></pre></td></tr></table></figure><h2 id="使用json序列化深拷贝"><a class="anchor" href="#使用json序列化深拷贝">#</a> 使用 JSON 序列化深拷贝</h2><ul><li>下面以 <code>lain</code>  对象举栗</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> lain <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"lain"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token literal-property property">friends</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"saber"</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'foo~'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="引用赋值"><a class="anchor" href="#引用赋值">#</a> 引用赋值</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> lain2 <span class="token operator">=</span> lain</pre></td></tr><tr><td data-num="2"></td><td><pre>lain<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">17</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lain2<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment">// 17</span></pre></td></tr><tr><td data-num="5"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lain<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment">// 17</span></pre></td></tr></table></figure><h3 id="浅拷贝"><a class="anchor" href="#浅拷贝">#</a> 浅拷贝</h3><ul><li>展开运算发相当于只是将 lain 对象中 <code>key</code>  和 <code>value</code>  复制了一份给新的 lain2 对象里面</li><li>比如 <code>lain</code>  在内存地址是 <code>0xa00</code> , <code>lain2</code>  是 <code>oxb00</code> , 也就是说 <code>lain</code>  和 <code>lain2</code>  是在内存里面是两个对象</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> lain2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>lain <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>lain<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">17</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lain<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment">// 17</span></pre></td></tr><tr><td data-num="5"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lain2<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment">// 16</span></pre></td></tr></table></figure><ul><li>但里面的 <code>friends</code>  属性依然指向的是同一个对象，所以这也是浅拷贝</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> lain2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>lain <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>lain<span class="token punctuation">.</span>friends<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"nekoaimer"</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lain<span class="token punctuation">.</span>friends<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// nekoaimer</span></pre></td></tr><tr><td data-num="5"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lain2<span class="token punctuation">.</span>friends<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// nekoaimer</span></pre></td></tr></table></figure><h3 id="stringify和parse来实现深拷贝"><a class="anchor" href="#stringify和parse来实现深拷贝">#</a> stringify 和 parse 来实现深拷贝</h3><ul><li>利用 stringify 和 parse 来实现深拷贝，但是也是有问题的</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> jsonString <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>lain<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span> <span class="token comment">// &#123;"name":"lain","age":16,"friends":&#123;"name":"saber"&#125;&#125;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">const</span> lain2 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>lain<span class="token punctuation">.</span>friends<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"nekoaimer"</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lain<span class="token punctuation">.</span>friends<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// nekoaimer</span></pre></td></tr><tr><td data-num="8"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lain2<span class="token punctuation">.</span>friends<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// saber</span></pre></td></tr></table></figure><ul><li>上面说的问题细心的同学已经发现了问题，上面 <code>lain</code>  对象中是有一个 <code>foo</code>  函数的，但上面实现深拷贝转化 JSON 格式打印时却没有这个函数</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> lain <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"lain"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token literal-property property">friends</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"saber"</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'foo~'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">const</span> jsonString <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>lain<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span> <span class="token comment">// &#123;"name":"lain","age":16,"friends":&#123;"name":"saber"&#125;&#125;</span></pre></td></tr></table></figure><ul><li>所以我们能够知道 <code>stringify和parse确实可以实现深拷贝</code> ，但是对于 <code>函数</code> 是无能为力的～</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;json-的由来&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#json-的由来&quot;&gt;#&lt;/a&gt; JSON 的由来&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在目前的开发中，JSON 是一种非常重要的数据格式，它并不是编程语言，而是一种可以在服务器和客户端之间传输的数据格式</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript Npm 发布自己的包</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2021/11/30/JavaScript/Advanced/publish-package/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2021/11/30/JavaScript/Advanced/publish-package/</id>
    <published>2021-11-30T09:18:54.000Z</published>
    <updated>2022-02-05T11:25:27.259Z</updated>
    
    <content type="html"><![CDATA[<h2 id="npm发布自己的包"><a class="anchor" href="#npm发布自己的包">#</a> npm 发布自己的包</h2><ul><li>注册 npm 账号：<span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tLw==">https://www.npmjs.com/</span><ul><li>选择 sign up</li></ul></li><li><code>npm init </code> 修改 package.json , 例如这样：</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"test-exec-generator"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token string-property property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token string-property property">"description"</span><span class="token operator">:</span> <span class="token string">"a test generator"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token string-property property">"main"</span><span class="token operator">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token string-property property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token string-property property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token string-property property">"author"</span><span class="token operator">:</span> <span class="token string">"nekoaimer"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token string-property property">"license"</span><span class="token operator">:</span> <span class="token string">"MIT"</span><span class="token punctuation">,</span> </pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token string-property property">"repository"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  </pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"git"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token string-property property">"url"</span><span class="token operator">:</span> <span class="token string">"https://github.com/nekoaimer"</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token string-property property">"homepage"</span><span class="token operator">:</span> <span class="token string">"https://github.com/nekoaimer"</span><span class="token punctuation">,</span> </pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token string-property property">"keywords"</span><span class="token operator">:</span> <span class="token punctuation">[</span> </pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token string">"nekoaimer"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token string">"generator"</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token punctuation">]</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li><p>在命令行登录： <code>npm login</code> ，会出现下面信息</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token literal-property property">Username</span><span class="token operator">:</span> <span class="token comment">// 用户名</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token literal-property property">Password</span><span class="token operator">:</span> <span class="token comment">// 密码</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token literal-property property">Email</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token constant">IS</span> <span class="token keyword">public</span><span class="token punctuation">)</span> <span class="token comment">// 注册的邮箱</span></pre></td></tr></table></figure><ul><li>然后第一次可能还会在您的邮发送一次验证码，输入验证码后可以进行发布啦～</li></ul><p><img data-src="npm-publish.png" alt="npm-publish" /></p></li><li><p>发布到 npm registry 上  <code>npm publish</code> ，进行测试我随便发布一段用于异步演化的代码 <sub>(可取去官网账号查看是否发布成功</sub>)~</p></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 封装了一个自动执行的函数</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">execGenerator</span><span class="token punctuation">(</span><span class="token parameter">genFn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">const</span> generator <span class="token operator">=</span> <span class="token function">genFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">function</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">const</span> result <span class="token operator">=</span> generator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>done<span class="token punctuation">)</span> <span class="token keyword">return</span> result<span class="token punctuation">.</span>value</pre></td></tr><tr><td data-num="7"></td><td><pre>    result<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token function">exec</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="更新仓库"><a class="anchor" href="#更新仓库">#</a> 更新仓库</h2><ul><li>加入您更新了代码重新发布时不可直接 <code>npm publish</code> , 否则会报类似下面的错<img data-src="npm-publish-err.png" alt="npm-publish-err" /></li><li>需要进行操作<ul><li>修改版本号 (最好符合 semver 规范)</li><li>重新发布</li></ul></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"exec-generator"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token string-property property">"version"</span><span class="token operator">:</span> <span class="token string">"1.1.1"</span><span class="token punctuation">,</span> <span class="token comment">// 这里修改了版本号</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token string-property property">"description"</span><span class="token operator">:</span> <span class="token string">"a test execGenerator"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token string-property property">"main"</span><span class="token operator">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token string-property property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token string-property property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token string-property property">"author"</span><span class="token operator">:</span> <span class="token string">"nekoaimer"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token string-property property">"license"</span><span class="token operator">:</span> <span class="token string">"MIT"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token string-property property">"repository"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"git"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token string-property property">"url"</span><span class="token operator">:</span> <span class="token string">"https://github.com/nekoaimer"</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token string-property property">"homepage"</span><span class="token operator">:</span> <span class="token string">"https://github.com/nekoaimer"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token string-property property">"keywords"</span><span class="token operator">:</span> <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token string">"nekoaimer"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token string">"generator"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token string">"utils"</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  <span class="token string-property property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token string-property property">"exec-generator"</span><span class="token operator">:</span> <span class="token string">"^1.0.0"</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>修改了版本号之后执行 <code>npm publish</code> , 出现类似下面这种说明更新发布成功啦～</li></ul><p><img data-src="npm-publish2.png" alt="npm-publish2" /></p><h2 id="使用自己的包"><a class="anchor" href="#使用自己的包">#</a> 使用自己的包</h2><ul><li><p>先初始化  <code>npm init</code></p></li><li><p>再进行安装  <code>npm install est-exec-generator</code> ，就是下面的这样</p></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// package.json</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"test-exec-generator"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token string-property property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token string-property property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token string-property property">"main"</span><span class="token operator">:</span> <span class="token string">"main.js"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token string-property property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token string-property property">"test-exec-generator"</span><span class="token operator">:</span> <span class="token string">"^1.1.0"</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token string-property property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token string-property property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token string-property property">"author"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token string-property property">"license"</span><span class="token operator">:</span> <span class="token string">"ISC"</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>然后此时我安装好的目录的亚子</li></ul><p><img data-src="npm-install-execGenerator.png" alt="npm-install-execGenerator" /></p><ul><li>进行引入，最后成功使用</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> execGenerator <span class="token keyword">from</span> <span class="token string">'./node_modules/test-exec-generator/index.js'</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// 网络请求</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">function</span> <span class="token function">requsetDate</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">resolve</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">//generator 方式代码清晰明了</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">const</span> res1 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">requsetDate</span><span class="token punctuation">(</span><span class="token string">'https://neko'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token keyword">const</span> res2 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">requsetDate</span><span class="token punctuation">(</span>res1 <span class="token operator">+</span> <span class="token string">'aimer'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token keyword">const</span> res3 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">requsetDate</span><span class="token punctuation">(</span>res2 <span class="token operator">+</span> <span class="token string">'.com'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res3<span class="token punctuation">)</span> <span class="token comment">// 8s -> https://nekoaimer.com</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token function">execGenerator</span><span class="token punctuation">(</span>getData<span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="删除发布的包"><a class="anchor" href="#删除发布的包">#</a> 删除发布的包</h2><p>​ <code>npm unpublish</code></p><h2 id="让发布的包过期"><a class="anchor" href="#让发布的包过期">#</a> 让发布的包过期</h2><p><code>npm deprecate  </code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;npm发布自己的包&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#npm发布自己的包&quot;&gt;#&lt;/a&gt; npm 发布自己的包&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;注册 npm 账号：&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly93d</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 包管理工具</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2021/11/27/JavaScript/Advanced/package-management-tool/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2021/11/27/JavaScript/Advanced/package-management-tool/</id>
    <published>2021-11-27T06:56:07.000Z</published>
    <updated>2022-02-05T09:20:02.454Z</updated>
    
    <content type="html"><![CDATA[<h2 id="代码共享方案"><a class="anchor" href="#代码共享方案">#</a> 代码共享方案</h2><ul><li>我们已经学习了在 JavaScript 中可以通过模块化的方式将代码划分成一个个小的结构：<ul><li>在以后的开发中我们就可以通过模块化的方式来封装自己的代码，并且封装成一个工具；</li><li>这个工具我们可以让同事通过导入的方式来使用，甚至你可以分享给世界各地的程序员来使用；</li></ul></li><li>如果我们分享给世界上所有的程序员使用，有哪些方式呢？</li><li>方式一：上传到 GitHub 上、其他程序员通过 GitHub 下载我们的代码手动的引用；<ul><li>缺点是大家必须知道你的代码 GitHub 的地址，并且从 GitHub 上手动下载；</li><li>需要在自己的项目中手动的引用，并且管理相关的依赖；</li><li>不需要使用的时候，需要手动来删除相关的依赖；</li><li>当遇到版本升级或者切换时，需要重复上面的操作；</li></ul></li><li>显然，上面的方式是有效的，但是这种传统的方式非常麻烦，并且容易出错；</li><li>方式二：使用一个专业的工具来管理我们的代码<ul><li>我们通过工具将代码发布到特定的位置；</li><li>其他程序员直接通过工具来安装、升级、删除我们的工具代码；</li></ul></li><li>显然，通过第二种方式我们可以更好的管理自己的工具包，其他人也可以更好的使用我们的工具包。</li></ul><h2 id="包管理工具npm"><a class="anchor" href="#包管理工具npm">#</a> 包管理工具 npm</h2><ul><li>包管理工具 npm：<ul><li>Node Package Manager，也就是 Node 包管理器；</li><li>但是目前已经不仅仅是 Node 包管理器了，在前端项目中我们也在使用它来管理依赖的包；</li><li>比如 vue、vue-router、vuex、express、koa、react、react-dom、axios、babel、webpack 等等；</li></ul></li><li>如何下载 npm 工具呢？<ul><li>npm 属于 node 的一个管理工具，所以我们需要先安装 Node；</li><li>node 管理工具：<span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL2VuLw==">https://nodejs.org/en/</span></li></ul></li><li>npm 管理的包可以在哪里查看、搜索呢？<ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMub3JnLw==">https://www.npmjs.org/</span></li><li>这是我们安装相关的 npm 包的官网；</li></ul></li><li>npm 管理的包存放在哪里呢？<ul><li>我们发布自己的包其实是发布到 registry 上面的；</li><li>当我们安装一个包时其实是从 registry 上面下载的包；</li></ul></li></ul><h2 id="npm-的配置文件"><a class="anchor" href="#npm-的配置文件">#</a> npm 的配置文件</h2><ul><li><p>那么对于一个项目来说，我们如何使用 npm 来管理这么多包呢？</p><ul><li><p>事实上，我们每一个项目都会有一个对应的配置文件，无论是前端项目（Vue、React）还是后端项目（Node）；</p></li><li><p>这个配置文件会记录着你项目的名称、版本号、项目描述等；</p></li><li><p>也会记录着你项目所依赖的其他库的信息和依赖库的版本号；</p></li></ul></li><li><p>这个配置文件就是 package.json</p></li><li><p>那么这个配置文件如何得到呢？</p><ul><li>方式一：手动从零创建项目，npm init –y</li><li>方式二：通过脚手架创建项目，脚手架会帮助我们生成 package.json，并且里面有相关的配置</li></ul></li></ul><h3 id="npm-init-进行配置"><a class="anchor" href="#npm-init-进行配置">#</a> npm init 进行配置</h3><ol><li>npm init 先进行初始化</li></ol><figure class="highlight js"><figcaption data-lang="JavaScript"><span>npm</span></figcaption><table><tr><td data-num="1"></td><td><pre>npm init <span class="token comment">// 执行 添加 初始化 json 文件</span></pre></td></tr></table></figure><ol start="2"><li>如果您的文件名称是中文 则会出现以下提示<ul><li><code>Sorry, name can only contain URL-friendly characters.</code></li></ul></li><li>所以最好以英文命名，这里我以 <code>demo</code>  命名，就会出现下面这句代码</li></ol><figure class="highlight js"><figcaption data-lang="JavaScript"><span>npm</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token literal-property property">version</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">1.0</span><span class="token number">.0</span><span class="token punctuation">)</span> <span class="token comment">// 代表这个项目准备的版本号是什么</span></pre></td></tr></table></figure><ol start="4"><li>我们回车默认 <code>1.0.0</code>  版本号，接着出现下面这句代码</li></ol><figure class="highlight js"><figcaption data-lang="JavaScript"><span>npm</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token literal-property property">description</span><span class="token operator">:</span> <span class="token comment">// 可以对项目做一个描述</span></pre></td></tr></table></figure><ol start="5"><li>这里我随便加上一句  <code>test demo</code>  来进行描述，然后出现下面代码</li></ol><figure class="highlight js"><figcaption data-lang="JavaScript"><span>npmjs</span></figcaption><table><tr><td data-num="1"></td><td><pre>entry point<span class="token operator">:</span> <span class="token punctuation">(</span>index<span class="token punctuation">.</span>js<span class="token punctuation">)</span> <span class="token comment">// 当前项目的入口是什么</span></pre></td></tr></table></figure><ol start="6"><li>我这里以 <code>src/main.js</code>  为入口，继续出现下面代码</li></ol><figure class="highlight js"><figcaption data-lang="JavaScript"><span>npm</span></figcaption><table><tr><td data-num="1"></td><td><pre>test command<span class="token operator">:</span> <span class="token comment">// 要不要有个测试的命令</span></pre></td></tr></table></figure><ol start="7"><li>这里我暂时不用，直接敲回车就行了，然后继续出现下面代码</li></ol><figure class="highlight js"><figcaption data-lang="JavaScript"><span>npm</span></figcaption><table><tr><td data-num="1"></td><td><pre>git repository<span class="token operator">:</span> <span class="token comment">// 准不准备放到 git 仓库里面</span></pre></td></tr></table></figure><ol start="8"><li>这里我也不用，所以直接敲回车，然后继续出现下面代码</li></ol><figure class="highlight js"><figcaption data-lang="JavaScript"><span>npm</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token literal-property property">keywords</span><span class="token operator">:</span> <span class="token comment">// 关键字 -> 想让别人搜索到你时的关键字</span></pre></td></tr></table></figure><ol start="9"><li>这里我也不用，直接敲回车，然后继续出现下面代码</li></ol><figure class="highlight js"><figcaption data-lang="JavaScript"><span>npm</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token literal-property property">author</span><span class="token operator">:</span> <span class="token comment">// 作者是谁</span></pre></td></tr></table></figure><ol start="9"><li>这里我写上 <code>nekoaimer</code>  这个名字，然后回车出现下面代码</li></ol><figure class="highlight js"><figcaption data-lang="JavaScript"><span>npm</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token literal-property property">license</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token constant">ISC</span><span class="token punctuation">)</span> <span class="token comment">// 开源协议</span></pre></td></tr></table></figure><ol start="10"><li>这里我也不写了，直接默认 <code>ISC</code>  协议，然后会生成 <code>package.json</code>  内容并会询问你  <code>ok</code> ？</li></ol><figure class="highlight js"><figcaption data-lang="JavaScript"><span>npm</span></figcaption><table><tr><td data-num="1"></td><td><pre>About to write to <span class="token comment">// 这里是写代码的路径</span></pre></td></tr><tr><td data-num="2"></td><td><pre>ckage<span class="token punctuation">.</span>json<span class="token operator">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"demo"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token string-property property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token string-property property">"description"</span><span class="token operator">:</span> <span class="token string">"test demo"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token string-property property">"main"</span><span class="token operator">:</span> <span class="token string">"src/main.js"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token string-property property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token string-property property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token string-property property">"author"</span><span class="token operator">:</span> <span class="token string">"nekoaimer"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token string-property property">"license"</span><span class="token operator">:</span> <span class="token string">"ISC"</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>Is <span class="token keyword">this</span> <span class="token constant">OK</span><span class="token operator">?</span> <span class="token punctuation">(</span>yes<span class="token punctuation">)</span></pre></td></tr></table></figure><ol start="11"><li>这里我们敲回车确认，生成 <code>package.json</code>  文件</li></ol><figure class="highlight js"><figcaption data-lang="JavaScript"><span>npm</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//package.json 文件 </span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"demo"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token string-property property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token string-property property">"description"</span><span class="token operator">:</span> <span class="token string">"test demo"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token string-property property">"main"</span><span class="token operator">:</span> <span class="token string">"src/main.js"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token string-property property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token string-property property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token string-property property">"author"</span><span class="token operator">:</span> <span class="token string">"nekoaimer"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token string-property property">"license"</span><span class="token operator">:</span> <span class="token string">"ISC"</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="npm-init-y-进行配置"><a class="anchor" href="#npm-init-y-进行配置">#</a> npm init -y 进行配置</h3><ol><li>使用 <code>npm init -y </code> 命令代表刚刚那些问题都是  <code>yes</code></li></ol><figure class="highlight js"><figcaption data-lang="JavaScript"><span>npm</span></figcaption><table><tr><td data-num="1"></td><td><pre>npm init <span class="token operator">-</span>y</pre></td></tr></table></figure><ol start="2"><li>但可能会发生下面的错误</li></ol><figure class="highlight js"><figcaption data-lang="JavaScript"><span>npm</span></figcaption><table><tr><td data-num="1"></td><td><pre>npm <span class="token constant">ERR</span><span class="token operator">!</span> Invalid name<span class="token operator">:</span> <span class="token function">xxx</span><span class="token punctuation">(</span>中文名<span class="token punctuation">)</span> <span class="token comment">// 上面提到过的，不能使用中文名</span></pre></td></tr><tr><td data-num="2"></td><td><pre>npm <span class="token constant">ERR</span><span class="token operator">!</span> <span class="token constant">A</span> complete log <span class="token keyword">of</span> <span class="token keyword">this</span> run can be found <span class="token keyword">in</span><span class="token operator">:</span> xxx <span class="token comment">// 告诉你 npm 犯错！此运行的完整日志可在以下文件中找到:  </span></pre></td></tr><tr><td data-num="3"></td><td><pre>npm <span class="token constant">ERR</span><span class="token operator">!</span>  xxx 路径</pre></td></tr></table></figure><ol start="3"><li>我们将文件名改为 <code>demo</code> , 再进行 <code>npm init -y</code>  操作，则会出现生产成功的代码，只不过都是类似直接回车默认的信息</li></ol><figure class="highlight js"><figcaption data-lang="JavaScript"><span>npm</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"demo"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token string-property property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token string-property property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token string-property property">"main"</span><span class="token operator">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token string-property property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token string-property property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token string-property property">"keywords"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token string-property property">"author"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token string-property property">"license"</span><span class="token operator">:</span> <span class="token string">"ISC"</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="或者创建vuereact等脚手架"><a class="anchor" href="#或者创建vuereact等脚手架">#</a> 或者创建 vue/react 等脚手架</h3><ul><li>这里以 <code>vue</code>  举栗，这样也是会有 <code>package.json</code>  文件的</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"><span>npm</span></figcaption><table><tr><td data-num="1"></td><td><pre>vue create demo</pre></td></tr></table></figure><ul><li>一般我们都是以这种方式创建，它会自动帮你生成好这个目录，目录里默认就要这个文件！</li></ul><h2 id="常见的属性"><a class="anchor" href="#常见的属性">#</a> 常见的属性</h2><ul><li><p>必须填写的属性：name、version</p><ul><li>name 是项目的名称；</li><li>version 是当前项目的版本号；</li><li>description 是描述信息，很多时候是作为项目的基本描述；</li><li>author 是作者相关信息（发布时用到）；</li><li>license 是开源协议（发布时用到）；</li></ul></li><li><p>private 属性：</p><ul><li>private 属性记录当前的项目是否是私有的；</li><li>当值为 true 时，npm 是不能发布它的，这是防止私有项目或模块发布出去的方式；</li></ul></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"><span>npm</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"demo"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token string-property property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token string-property property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token string-property property">"main"</span><span class="token operator">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token string-property property">"private"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 脚手架生产时一般会加上这个字段，例如公司项目一般情况下不允许开源</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token string-property property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token string-property property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token string-property property">"keywords"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token string-property property">"author"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token string-property property">"license"</span><span class="token operator">:</span> <span class="token string">"ISC"</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="main-属性"><a class="anchor" href="#main-属性">#</a> main 属性</h3><ul><li>设置程序的入口。</li><li>很多人会有疑惑，webpack 不是会自动找到程序的入口吗？<ul><li>这个入口和 webpack 打包的入口并不冲突</li><li>它是在你发布一个模块的时候会用到的</li><li>比如我们使用 axios 模块 const axios = require ('axios')</li><li>实际上是找到对应的 main 属性查找文件的</li></ul></li><li>一般情况，开源的项目都是需要 <code>main</code>  属性的，下比如 <code>axios</code>  的源码就是指向 <code>index.js</code>  的</li></ul><h3 id="scripts-属性"><a class="anchor" href="#scripts-属性">#</a> scripts 属性</h3><ul><li>scripts 属性用于配置一些脚本命令，以键值对的形式存在；</li><li>配置后我们可以通过 npm run 命令的 key 来执行这个命令；</li><li>举个栗子</li></ul><ol><li><code>foo.js</code></li></ol><figure class="highlight js"><figcaption data-lang="JavaScript"><span>npm</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 比如在 foo.js 文件 有一句打印命令</span></pre></td></tr><tr><td data-num="2"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"npm foo~"</span><span class="token punctuation">)</span></pre></td></tr></table></figure><ol start="2"><li><code>package.json</code></li></ol><figure class="highlight js"><figcaption data-lang="JavaScript"><span>npm</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token string-property property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token string-property property">"foo"</span><span class="token operator">:</span> <span class="token string">"node ./foo.js"</span> <span class="token comment">// 在 scripts 写上这句代码</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr></table></figure><ol start="3"><li>控制台进行 <code>npm run foo</code>  命令</li><li>成功打印 <code>npm foo~</code>  信息</li></ol><ul><li>有时候能看见不写 run 命令的，类似下面这两句代码</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"><span>npm</span></figcaption><table><tr><td data-num="1"></td><td><pre>npm start </pre></td></tr><tr><td data-num="2"></td><td><pre>npm run start</pre></td></tr></table></figure><ul><li><p>那么 npm start 和 npm run start 的区别是什么？</p><ul><li><p>它们是等价的；</p></li><li><p>对于常用的 start、 test、stop、restart 可以省略掉 run 直接通过 npm start 等方式运行；</p></li></ul></li></ul><h3 id="dependencies-属性"><a class="anchor" href="#dependencies-属性">#</a> dependencies 属性</h3><ul><li>dependencies 属性是指定无论开发环境还是生成环境都需要依赖的包；</li><li>通常是我们项目实际开发用到的一些库模块 vue、vuex、vue-router、react、react-dom、axios 等等；</li><li>比如下面进行安装 <code>axios</code> , 会生成 <code>node_modules</code>  这个文件，同时 <code>dependencies</code>  就会记录下来</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"><span>npm</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token string-property property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>   <span class="token string-property property">"axios"</span><span class="token operator">:</span> <span class="token string">"^0.25.0"</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>这样的好处就是比如给同事代码时，不需要将 <code>node_modules</code>  这个文件也传过去，因为这个文件占用内存可能会非常大，传输也非常麻烦与慢<ul><li>而将 <code>package.json</code>  这个文件发过去，对方进行 <code>npm install</code>  操作就会根据依赖自动安装对应的包，这种方法更加简单快速</li></ul></li><li>而与之对应的则是 devDependencies 属性</li></ul><h3 id="devdependencies-属性"><a class="anchor" href="#devdependencies-属性">#</a> devDependencies 属性</h3><ul><li>一些包在生成环境是不需要的，比如 webpack、babel 等；</li><li>这个时候我们会通过 npm install webpack --save-dev，将它安装到 devDependencies 属性中；</li><li>例如安装 <code>webpack</code>  和 <code>webpack-cli</code> , 使用 <code>npm install webpack webpack-cli --save-dev</code>  命令，与上面一样也会记录下来.</li><li>或者 <code>npm install webpack webpack-cli -D</code> , 这是上面命令的缩写</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"><span>npm</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 代表开发时依赖</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token string-property property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token string-property property">"webpack"</span><span class="token operator">:</span> <span class="token string">"^5.68.0"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token string-property property">"webpack-cli"</span><span class="token operator">:</span> <span class="token string">"^4.9.2"</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="peerdependencies-属性"><a class="anchor" href="#peerdependencies-属性">#</a> peerDependencies 属性</h3><ul><li><p>还有一种项目依赖关系是对等依赖，也就是你依赖的一个包，它必须是以另外一个宿主包为前提的</p></li><li><p>比如 element-plus 是依赖于 vue3 的，ant design 是依赖于 react、react-dom</p></li><li><p>例如 <code>element-plus</code>  中 <code>package.json</code>  里就有用到 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2VsZW1lbnQtcGx1cy9lbGVtZW50LXBsdXMvYmxvYi9kZXYvcGFja2FnZS5qc29u">https://github.com/element-plus/element-plus/blob/dev/package.json</span></p></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"><span>npm</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token string-property property">"peerDependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>   <span class="token string-property property">"vue"</span><span class="token operator">:</span> <span class="token string">"^3.2.0"</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>还有 <code>ant design</code>  中 <code>package.json</code>  也是有的 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FudC1kZXNpZ24vYW50LWRlc2lnbi9ibG9iL21hc3Rlci9wYWNrYWdlLmpzb24=">https://github.com/ant-design/ant-design/blob/master/package.json</span></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token string-property property">"peerDependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>   <span class="token string-property property">"react"</span><span class="token operator">:</span> <span class="token string">">=16.9.0"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token string-property property">"react-dom"</span><span class="token operator">:</span> <span class="token string">">=16.9.0"</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="package中的版本管理"><a class="anchor" href="#package中的版本管理">#</a> package 中的版本管理</h2><ul><li>我们会发现安装的依赖版本出现：^2.0.3 或～2.0.3，这是什么意思呢？</li><li>npm 的包通常需要遵从 semver 版本规范：<ul><li>semver：<span class="exturl" data-url="aHR0cHM6Ly9zZW12ZXIub3JnL2xhbmcvemgtQ04=">https://semver.org/lang/zh-CN</span></li><li>npm semver：<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm5wbWpzLmNvbS9taXNjL3NlbXZlcg==">https://docs.npmjs.com/misc/semver</span></li></ul></li><li>semver 版本规范是 X.Y.Z：<ul><li>X 主版本号（major）：当你做了不兼容的 API 修改（可能不兼容之前的版本）；</li><li>Y 次版本号（minor）：当你做了向下兼容的功能性新增（新功能增加，但是兼容之前的版本）；</li><li>Z 修订号（patch）：当你做了向下兼容的问题修正（没有新功能，修复了之前版本的 bug）；</li></ul></li><li>我们这里解释一下 ^ 和～的区别：<ul><li>^x.y.z：表示 x 是保持不变的，y 和 z 永远安装最新的版本；</li><li>~x.y.z：表示 x 和 y 保持不变的，z 永远安装最新的版本；</li></ul></li><li><code>package.json</code>  记录的是大概版本</li><li><code>package-lock.json</code>  记录的则是真实版本</li><li>而项目里上面两个文件都有，将 <code>node_modules</code>  删掉，执行 <code>npm install</code>  时会根据 <code>package.json</code>  版本匹配 <code>package-lock.json</code>  版本</li><li>如果 <code>package-lock.json</code>  记录的版本是符合 <code>package.json</code>  版本的，那么就会按照 <code>package-lock.json</code>  记录的版本安装</li></ul><h2 id="常见属性"><a class="anchor" href="#常见属性">#</a> 常见属性</h2><ul><li>engines 属性<ul><li>engines 属性用于指定 Node 和 NPM 的版本号；</li><li>在安装的过程中，会先检查对应的引擎版本，如果不符合就会报错；</li><li>事实上也可以指定所在的操作系统 &quot;os&quot; : [&quot;darwin&quot;, &quot;linux&quot;]，只是很少用到；</li></ul></li><li>browserslist 属性<ul><li>用于配置打包后的 JavaScript 浏览器的兼容情况</li><li>否则我们需要手动的添加 polyfills 来让支持某些语法</li><li>也就是说它是为 webpack 等打包工具服务的一个属性</li></ul></li></ul><h2 id="npm-install-命令"><a class="anchor" href="#npm-install-命令">#</a> npm install 命令</h2><ul><li><p>安装 npm 包分两种情况：</p><ul><li>全局安装（global install）： npm install webpack -g;</li><li>项目（局部）安装（local install）： npm install webpack</li></ul></li><li><p>全局安装</p><ul><li><p>全局安装是直接将某个包安装到全局</p></li><li><p>比如 yarn 的全局安装：</p></li></ul></li><li><p>但是很多人对全局安装有一些误会：</p><ul><li>通常使用 npm 全局安装的包都是一些工具包：yarn、webpack 等；</li><li>并不是类似于 axios、express、koa 等库文件；</li><li>所以全局安装了之后并不能让我们在所有的项目中使用 axios 等库；</li></ul></li></ul><h2 id="项目安装"><a class="anchor" href="#项目安装">#</a> 项目安装</h2><ul><li>项目安装会在当前目录下生产一个 node_modules 文件夹，我们之前讲解 require 查找顺序时有讲解过这个包在什么情况下被查找；</li><li>局部安装分为开发时依赖和生产时依赖：</li><li>安装开发和生产依赖<ul><li><code>npm install axios</code></li><li><code>npm i axios</code></li></ul></li><li>开发依赖<ul><li><code>npm install webpack --save-dev</code></li><li><code>npm install webpack -D</code></li><li><code>npm i webpack –D</code></li></ul></li><li>根据 package.json 中的依赖包<ul><li><code>npm install  </code></li></ul></li></ul><h2 id="npm-install-原理"><a class="anchor" href="#npm-install-原理">#</a> npm install 原理</h2><ul><li>很多同学之前应该已经会了 npm install &lt;package&gt;，但是你是否思考过它的内部原理呢？<ul><li>执行 npm install 它背后帮助我们完成了什么操作？</li><li>我们会发现还有一个成为 package-lock.json 的文件，它的作用是什么？</li><li>从 npm5 开始，npm 支持缓存策略（来自 yarn 的压力），缓存有什么作用呢？</li></ul></li><li>这是一幅我画出的根据 npm install 的原理图：</li></ul><p><img data-src="npm-install.png" alt="npm-install" /></p><ul><li>可通过 <code>npm get cache</code>  查看缓存</li></ul><h2 id="npm-install-原理图解析"><a class="anchor" href="#npm-install-原理图解析">#</a> npm install 原理图解析</h2><ul><li><p>npm install 会检测是有 package-lock.json 文件：</p><ol><li>没有 lock 文件</li></ol><ul><li>分析依赖关系，这是因为我们可能包会依赖其他的包，并且多个包之间会产生相同依赖的情况；</li><li>从 registry 仓库中下载压缩包（如果我们设置了镜像，那么会从镜像服务器下载压缩包）；</li><li>获取到压缩包后会对压缩包进行缓存（从 npm5 开始有的）；</li><li>​将压缩包解压到项目的 node_modules 文件夹中（前面我们讲过，require 的查找顺序会在该包下面查找）</li></ul><ol start="2"><li>有 lock 文件</li></ol><ul><li><p>检测 lock 中包的版本是否和 package.json 中一致（会按照 semver 版本规范检测）；</p><ul><li>不一致，那么会重新构建依赖关系，直接会走顶层的流程；</li></ul></li><li><p>一致的情况下，会去优先查找缓存</p><ul><li>没有找到，会从 registry 仓库下载，直接走顶层流程；</li></ul></li><li><p>查找到，会获取缓存中的压缩文件，并且将压缩文件解压到 node_modules 文件夹中；</p></li></ul></li></ul><h2 id="package-lockjson"><a class="anchor" href="#package-lockjson">#</a> package-lock.json</h2><ul><li>package-lock.json 文件解析：</li><li>name：项目的名称；</li><li>version：项目的版本；</li><li>lockfileVersion：lock 文件的版本；</li><li>requires：使用 requires 来跟踪模块的依赖关系；</li><li>dependencies：项目的依赖<ul><li>当前项目依赖 axios，但是 axios 依赖 follow-redireacts；</li><li>axios 中的属性如下：<ul><li>version 表示实际安装的 axios 的版本；</li><li>resolved 用来记录下载的地址，registry 仓库中的位置；</li><li>requires 记录当前模块的依赖；</li><li>integrity 用来从缓存中获取索引，再通过索引去获取压缩包文件；</li></ul></li></ul></li></ul><h2 id="npm-其他命令"><a class="anchor" href="#npm-其他命令">#</a> npm 其他命令</h2><ul><li>我们这里再介绍几个比较常用的：</li><li>卸载某个依赖包：<ul><li><code>npm uninstall package</code></li><li><code>npm uninstall package --save-dev</code></li><li><code>npm uninstall package -D</code></li></ul></li><li>强制重新 build<ul><li><code>npm rebuild</code></li></ul></li><li>清除缓存<ul><li><code>npm cache clean</code></li></ul></li><li>npm 的命令其实是非常多的：<ul><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm5wbWpzLmNvbS9jbGktZG9jdW1lbnRhdGlvbi9jbGk=">https://docs.npmjs.com/cli-documentation/cli</span></li><li>更多的命令，可以根据需要查阅官方文档</li></ul></li></ul><h2 id="yarn-工具"><a class="anchor" href="#yarn-工具">#</a> yarn 工具</h2><ul><li>另一个 node 包管理工具 yarn：<ul><li>yarn 是由 Facebook、Google、Exponent 和 Tilde 联合推出了一个新的 JS 包管理工具</li><li>yarn 是为了弥补 npm 的一些缺陷而出现的</li><li>早期的 npm 存在很多的缺陷，比如安装依赖速度很慢、版本依赖混乱等等一系列的问题</li><li>虽然从 npm5 版本开始，进行了很多的升级和改进，但是依然很多人喜欢使用 yarn</li></ul></li></ul><table><thead><tr><th>Npm</th><th>Yarn</th></tr></thead><tbody><tr><td>npm install</td><td>yarn install</td></tr><tr><td>npm install [package]</td><td>yarn add [package]</td></tr><tr><td>npm install --save [package]</td><td>yarn add [package]</td></tr><tr><td>npm install --save-dev [package]</td><td>yarn add [package] [--dev/-D]</td></tr><tr><td>npm rebuild</td><td>yarn install --force</td></tr><tr><td>npm uninstall [package]</td><td>yarn remove [package]</td></tr><tr><td>npm uninstall --save [package]</td><td>yarn remove [package]</td></tr><tr><td>npm install --save-dev [package]</td><td>yarn remove [package]</td></tr><tr><td>npm install --save-optional [package]</td><td>yarn remove [package]</td></tr><tr><td>npm cache clean</td><td>yarn cache clean</td></tr><tr><td>rm -rf node_modules &amp;&amp; npm install</td><td>yarn upgrade</td></tr></tbody></table><ul><li><code>注意npm和yarn不要混用</code></li></ul><h2 id="cnpm工具"><a class="anchor" href="#cnpm工具">#</a> cnpm 工具</h2><ul><li><p>由于一些特殊的原因，某些情况下我们没办法很好的从 <span class="exturl" data-url="aHR0cHM6Ly9yZWdpc3RyeS5ucG1qcy54bi0tb3JnLXMxOGQwYmEzMmhrMnhnejFjY3Y1YXp3NmJlOW9uNnc=">https://registry.npmjs.org 下载下来一些需要的包</span>。</p></li><li><p>查看 npm 镜像： <code>npm config get registry # npm config get registry</code></p></li><li><p>我们可以直接设置 npm 的镜像： <code>npm config set registry https://registry.npm.taobao.org</code></p></li><li><p>但是对于大多数人来说（比如我），并不希望将 npm 镜像修改了：</p><ul><li>第一，不太希望随意修改 npm 原本从官方下来包的渠道；</li><li>第二，担心某天淘宝的镜像挂了或者不维护了，又要改来改去；</li></ul></li><li><p>这个时候，我们可以使用 cnpm，并且将 cnpm 设置为淘宝的镜像：</p><ul><li>npm install -g cnpm --registry=https://registry.npm.taobao.org</li><li>cnpm config get registry # <span class="exturl" data-url="aHR0cHM6Ly9yLm5wbS50YW9iYW8ub3Jn">https://r.npm.taobao.org</span></li></ul></li></ul><h2 id="npx-工具"><a class="anchor" href="#npx-工具">#</a> npx 工具</h2><ul><li>npx 是 npm5.2 之后自带的一个命令。<ul><li>npx 的作用非常多，但是比较常见的是使用它来调用项目中的某个模块的指令。</li></ul></li><li>我们以 webpack 为例：<ul><li>全局安装的是 webpack5.1.3</li><li>项目安装的是 webpack3.6.0</li></ul></li><li>如果我在终端执行 webpack --version 使用的是哪一个命令呢？<ul><li>显示结果会是 webpack 5.1.3，事实上使用的是全局的，为什么呢？</li><li>原因非常简单，在当前目录下找不到 webpack 时，就会去全局找，并且执行命令；</li></ul></li><li>如何解决这个问题呢？</li></ul><h2 id="局部命令的执行"><a class="anchor" href="#局部命令的执行">#</a> 局部命令的执行</h2><ul><li><p>那么如何使用项目（局部）的 webpack，常见的是两种方式：</p><ul><li>方式一：明确查找到 node_module 下面的 webpack</li><li>方式二：在 scripts 定义脚本，来执行 webpack；</li></ul></li><li><p>方式一：在终端中使用如下命令（在项目根目录下）</p><ul><li><code>./node_modules/.bin/webpack --version  </code></li></ul></li><li><p>方式二：修改 package.json 中的 scripts</p><ul><li><code>&quot;scripts&quot;: &#123; &quot;webpack&quot;: &quot;webpack --version&quot; &#125;</code></li></ul></li><li><p>方式三：使用 npx</p><ul><li><code>npx webpack --version  </code></li></ul></li><li><p>npx 的原理非常简单，它会到当前目录的 node_modules/.bin 目录下查找对应的命令；</p></li><li><p>另外全局的环境变量安装查看命令  <code> npm config get prefix</code></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;代码共享方案&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#代码共享方案&quot;&gt;#&lt;/a&gt; 代码共享方案&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;我们已经学习了在 JavaScript 中可以通过模块化的方式将代码划分成一个个小的结构：
&lt;ul&gt;
&lt;li&gt;在以后的开发中我们</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript ES Module</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2021/11/25/JavaScript/Advanced/modularization%E3%81%AB/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2021/11/25/JavaScript/Advanced/modularization%E3%81%AB/</id>
    <published>2021-11-25T10:14:06.000Z</published>
    <updated>2022-02-04T06:53:21.529Z</updated>
    
    <content type="html"><![CDATA[<h2 id="认识-es-module"><a class="anchor" href="#认识-es-module">#</a> 认识 ES Module</h2><ul><li>JavaScript 没有模块化一直是它的痛点，所以才会产生我们前面学习的社区规范：CommonJS、AMD、CMD 等，<ul><li>所以在 ES 推出自己的模块化系统时，大家也是兴奋异常。</li></ul></li><li>ES Module 和 CommonJS 的模块化有一些不同之处：<ul><li>一方面它使用了 import 和 export 关键字；</li><li>另一方面它采用编译期的静态分析，并且也加入了动态引用的方式；</li></ul></li><li>ES Module 模块采用 export 和 import 关键字来实现模块化：<ul><li>export 负责将模块内的内容导出；</li><li>import 负责从其他模块导入内容；</li></ul></li><li>了解：采用 ES Module 将自动采用严格模式：use strict<ul><li>如果你不熟悉严格模式可以简单看一下 MDN 上的解析；</li><li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvU3RyaWN0X21vZGU=">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode</span></li></ul></li></ul><h2 id="案例代码结构组件"><a class="anchor" href="#案例代码结构组件">#</a> 案例代码结构组件</h2><ul><li>这里我在浏览器中演示 ES6 的模块化开发：</li></ul><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./main.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><ul><li><p>如果直接在浏览器中运行代码，会报类似如下错误：</p></li><li><p><code>Access to script at file:// ...... from origin 'null' has been blocked by CORS policy: Cross origin requests are only supported for protocol schemes: http, data, chrome, chrome-extension, chrome-untrusted, https. </code></p></li><li><p>这个在 MDN 上面有给出解释：</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9HdWlkZS9Nb2R1bGVz">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Modules</span></p><ul><li>你需要注意本地测试 — 如果你通过本地加载 Html 文件 (比如一个 file:// 路径的文件), 你将会遇到 CORS 错误，因为 Javascript 模块安全性需要。</li><li>你需要通过一个服务器来测试。</li></ul></li><li><p>我这里使用的 VSCode，VSCode 中有一个插件：Live Server</p></li></ul><h2 id="exports关键字"><a class="anchor" href="#exports关键字">#</a> exports 关键字</h2><ul><li>export 关键字将一个模块中的变量、函数、类等导出；</li><li>我们希望将其他中内容全部导出，它可以有如下的方式：</li><li>方式一：在语句声明的前面直接加上 export 关键字</li><li>方式二：将所有需要导出的标识符，放到 export 后面的 {} 中<ul><li>注意：这里的 {} 里面不是 ES6 的对象字面量的增强写法，{} 也不是表示一个对象的；</li><li>所以： export {name: name}，是错误的写法；</li></ul></li><li>方式三：导出时给标识符起一个别名</li></ul><h3 id="export-声明语句"><a class="anchor" href="#export-声明语句">#</a> export 声明语句</h3><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre>// 加上type="module"属性，告知加载的文件是个模块</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./main.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><ul><li><code>foo.js</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">"lain"</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">16</span></pre></td></tr></table></figure><ul><li><code>main.js</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> age <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./foo.js"</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token comment">// lain</span></pre></td></tr><tr><td data-num="4"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token comment">// 16</span></pre></td></tr></table></figure><ul><li><code>注：不允许使用file协议加载模块化代码</code></li></ul><h3 id="export-导出-和-声明分开"><a class="anchor" href="#export-导出-和-声明分开">#</a> export 导出 和 声明分开</h3><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./main.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><ul><li><code>foo.js</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">"lain"</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">16</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'foo function'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">export</span> <span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> foo <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li><code>注意: export后面这个大括号是固定语法,可不是对象</code></li><li><code>main.js</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> foo <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./foo.js"</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token comment">// lain</span></pre></td></tr><tr><td data-num="4"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token comment">// 16</span></pre></td></tr><tr><td data-num="5"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token comment">// [Function: foo]</span></pre></td></tr></table></figure><h3 id="第二种导出时起别名"><a class="anchor" href="#第二种导出时起别名">#</a> 第二种导出时起别名</h3><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./main.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><ul><li><code>foo.js</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">"lain"</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">16</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'foo function'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 起别名</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">export</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  name <span class="token keyword">as</span> fName<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  age <span class="token keyword">as</span> fAge<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  foo <span class="token keyword">as</span> fFoo</pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li><code>注意: export后面这个大括号是固定语法,可不是对象</code></li><li><code>main.js</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> fName<span class="token punctuation">,</span> fAge<span class="token punctuation">,</span> fFoo <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./foo.js"</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fName<span class="token punctuation">)</span> <span class="token comment">// lain</span></pre></td></tr><tr><td data-num="4"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fAge<span class="token punctuation">)</span> <span class="token comment">// 16</span></pre></td></tr><tr><td data-num="5"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fFoo<span class="token punctuation">)</span> <span class="token comment">// [Function: foo]</span></pre></td></tr></table></figure><h2 id="import-关键字"><a class="anchor" href="#import-关键字">#</a> import 关键字</h2><ul><li>import 关键字负责从另外一个模块中导入内容</li><li>导入内容的方式也有多种：</li><li>方式一：import {标识符列表} from ' 模块 '；<ul><li>注意：这里的 {} 也不是一个对象，里面只是存放导入的标识符列表内容；</li></ul></li><li>方式二：导入时给标识符起别名</li><li>方式三：通过 * 将模块功能放到一个模块功能对象（a module object）上</li></ul><h3 id="普通导入"><a class="anchor" href="#普通导入">#</a> 普通导入</h3><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./main.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><ul><li><code>foo.js</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">"lain"</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">16</span></pre></td></tr></table></figure><ul><li><code>main.js</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 普通导入方式</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> age <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./foo.js"</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token comment">// lain</span></pre></td></tr><tr><td data-num="5"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token comment">// 16</span></pre></td></tr></table></figure><h3 id="别名方式"><a class="anchor" href="#别名方式">#</a> 别名方式</h3><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./main.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><ul><li><code>foo.js</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">"lain"</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">16</span></pre></td></tr></table></figure><ul><li><code>main.js</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> name <span class="token keyword">as</span> fName<span class="token punctuation">,</span> age <span class="token keyword">as</span> fAge<span class="token punctuation">,</span> foo <span class="token keyword">as</span> fFoo <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./foo.js"</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fName<span class="token punctuation">)</span> <span class="token comment">// lain</span></pre></td></tr><tr><td data-num="4"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fAge<span class="token punctuation">)</span> <span class="token comment">// 16</span></pre></td></tr><tr><td data-num="5"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fFoo<span class="token punctuation">)</span> <span class="token comment">// [Function: foo]</span></pre></td></tr></table></figure><h3 id="将导出的所有内容放到一个标识符中"><a class="anchor" href="#将导出的所有内容放到一个标识符中">#</a> 将导出的所有内容放到一个标识符中</h3><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./main.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><ul><li><code>foo.js</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">"lain"</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">16</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'foo function'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">export</span> <span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> foo <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li><code>main.js</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> foo <span class="token keyword">from</span> <span class="token string">"./foo.js"</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token comment">// Module &#123;Symbol(Symbol.toStringTag): 'Module'&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// lain</span></pre></td></tr><tr><td data-num="5"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment">// 16</span></pre></td></tr><tr><td data-num="6"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>foo<span class="token punctuation">)</span> <span class="token comment">// [Function: foo]</span></pre></td></tr></table></figure><h2 id="举个栗子-export和import结合使用"><a class="anchor" href="#举个栗子-export和import结合使用">#</a> 举个栗子 export 和 import 结合使用</h2><ul><li>补充：export 和 import 可以结合使用</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">export</span> <span class="token punctuation">&#123;</span> sum <span class="token keyword">as</span> fooSum <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./foo.js'</span></pre></td></tr></table></figure><ul><li><p>为什么要这样做呢？</p><ul><li>在开发和封装一个功能库时，通常我们希望将暴露的所有接口放到一个文件中；</li><li>这样方便指定统一的接口规范，也方便阅读；</li><li>这个时候，我们就可以使用 export 和 import 结合使用；</li></ul></li><li><p><code>案例：这是一些工具函数，将它们全部导出实际运用</code></p></li><li><p><code>format.js</code></p></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">timeFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">return</span> <span class="token string">"2021-11-25"</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">function</span> <span class="token function">priceFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">return</span> <span class="token string">"2021.11"</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">export</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  timeFormat<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  priceFormat</pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li><code>math.js</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">function</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">return</span> num1 <span class="token operator">-</span> num2</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">export</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  add<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  sub</pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li><code>request.js</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  </pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>我一般会建一个 <code>index.js</code>  文件，将它们全部导入进来，最后统一导出，我认为这种方式阅读体验会比较好</li></ul><h3 id="导出方式一"><a class="anchor" href="#导出方式一">#</a> 导出方式一</h3><ul><li><code>index.js</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> add<span class="token punctuation">,</span> sub <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./math.js'</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> timeFormat<span class="token punctuation">,</span> priceFormat <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./format.js'</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">export</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  add<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  sub<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  timeFormat<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  priceFormat</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>这种方式比较繁琐，不方便，下面将使用简单一些的导出方式</li></ul><h3 id="导出方式二"><a class="anchor" href="#导出方式二">#</a> 导出方式二</h3><ul><li><code>index.js</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">export</span> <span class="token punctuation">&#123;</span> add<span class="token punctuation">,</span> sub <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./math.js'</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">export</span> <span class="token punctuation">&#123;</span> timeFormat<span class="token punctuation">,</span> priceFormat <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./format.js'</span></pre></td></tr></table></figure><ul><li>这样直接导出比上面那种更加方便</li></ul><h3 id="导出方式三"><a class="anchor" href="#导出方式三">#</a> 导出方式三</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">'./math.js'</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">'./format.js'</span></pre></td></tr></table></figure><h2 id="default-用法"><a class="anchor" href="#default-用法">#</a> Default 用法</h2><ul><li><p>前面我们学习的导出功能都是有名字的导出（named exports）：</p><ul><li>在导出 export 时指定了名字；</li><li>在导入 import 时需要知道具体的名字；</li></ul></li><li><p>还有一种导出叫做默认导出（default export）</p><ul><li>默认导出 export 时可以不需要指定名字；</li><li>在导入时不需要使用 {}，并且可以自己来指定名字；</li><li>它也方便我们和现有的 CommonJS 等规范相互操作；</li></ul></li><li><p>注意：在一个模块中，只能有一个默认导出（default export）；</p></li><li><p><code>foo.js</code></p></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token string">"foo value"</span></pre></td></tr></table></figure><h3 id="默认导出的方式一"><a class="anchor" href="#默认导出的方式一">#</a> 默认导出的方式一</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">export</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">// 默认导出</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  foo <span class="token keyword">as</span> <span class="token keyword">default</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>等价于下面的这种写法</li></ul><h3 id="默认导出的方式二"><a class="anchor" href="#默认导出的方式二">#</a> 默认导出的方式二</h3><ul><li><code>这种方式更加常见！</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">export</span> <span class="token keyword">default</span> foo</pre></td></tr></table></figure><ul><li>导入测试一下</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> foo <span class="token keyword">from</span> <span class="token string">'./foo.js'</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token comment">// foo value</span></pre></td></tr></table></figure><ul><li><code>注意：默认导出只能有一个 </code></li></ul><h2 id="import-用法"><a class="anchor" href="#import-用法">#</a> import 用法</h2><h3 id="import-函数"><a class="anchor" href="#import-函数">#</a> import 函数</h3><ul><li><p>通过 import 加载一个模块，是不可以在其放到逻辑代码中的，比如：</p></li><li><p>为什么会出现这个情况呢？</p><ul><li>这是因为 ES Module 在被 JS 引擎解析时，就必须知道它的依赖关系；</li><li>由于这个时候 js 代码没有任何的运行，所以无法在进行类似于 if 判断中根据代码的执行情况；</li><li>甚至下面的这种写法也是错误的：因为我们必须到运行时能确定 path 的值；</li></ul></li><li><p>但是某些情况下，我们确确实实希望动态的来加载某一个模块：</p><ul><li>如果根据不懂的条件，动态来选择加载模块的路径；</li><li>这个时候我们需要使用 import () 函数来动态加载；</li></ul></li><li><p><code>foo.js</code></p></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token string">"foo value"</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">export</span> <span class="token punctuation">&#123;</span> foo <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li><code>可以把import是当成一个函数</code></li><li><code>import函数返回的结果是一个Promise</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./foo.js"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"res:"</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span>foo<span class="token punctuation">)</span> <span class="token comment">// 2.res: foo value</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>promise<span class="token punctuation">)</span> <span class="token comment">// 1.Promise &#123; &lt;pending> &#125;</span></pre></td></tr></table></figure><h3 id="import-meta"><a class="anchor" href="#import-meta">#</a> import meta</h3><ul><li><p>import.meta 是一个给 JavaScript 模块暴露特定上下文的元数据属性的对象。</p><ul><li>它包含了这个模块的信息，比如说这个模块的 URL；</li><li>在 ES11（ES2020）中新增的特性；</li></ul></li><li><p><code>所以也可以把import当成一个对象,作为对象时还有一个属性：meta</code></p></li><li><p><code>ES11新增的特性：meta属性本身也是一个对象: &#123; url: &quot;当前模块所在的路径&quot; &#125;</code></p></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">)</span> <span class="token comment">// &#123;url: 'http://127.0.0.1:5500/...'&#125;</span></pre></td></tr></table></figure><h2 id="es-module的解析流程"><a class="anchor" href="#es-module的解析流程">#</a> ES Module 的解析流程</h2><ul><li>ES Module 是如何被浏览器解析并且让模块之间可以相互引用的呢？<ul><li><span class="exturl" data-url="aHR0cHM6Ly9oYWNrcy5tb3ppbGxhLm9yZy8yMDE4LzAzL2VzLW1vZHVsZXMtYS1jYXJ0b29uLWRlZXAtZGl2ZS8=">https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/</span></li></ul></li><li>ES Module 的解析过程可以划分为三个阶段：<ul><li>阶段一：构建（Construction），根据地址查找 js 文件，并且下载，将其解析成模块记录（Module Record）</li><li>阶段二：实例化（Instantiation），对模块记录进行实例化，并且分配内存空间，解析模块的导入和导出语句，把模块指向对应的内存地址。<ul><li>阶段三：运行（Evaluation），运行代码，计算值，并且将值填充到内存地址中</li></ul></li></ul></li></ul><h3 id="不允许导入变量修改值"><a class="anchor" href="#不允许导入变量修改值">#</a> 不允许导入变量修改值</h3><ul><li><p><code>exporting module can update variable value...</code></p></li><li><p><code>...but importing module cannot update variable value</code></p></li><li><p>​ <code>foo.js</code></p></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">"lain"</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">16</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">export</span> <span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> age <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li><code>main.js</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> age <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./foo.js'</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token comment">// lain 16</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// Uncaught TypeError: Assignment to constant variable.</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  name <span class="token operator">=</span> <span class="token string">"saber"</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  age <span class="token operator">=</span> <span class="token number">17</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">// 可以看出并没有修改成功 还是原来的值</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span> <span class="token comment">// lain 16</span></pre></td></tr></table></figure><h2 id="相互引用"><a class="anchor" href="#相互引用">#</a> 相互引用</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>npm install webpack webpack<span class="token operator">-</span>cli</pre></td></tr></table></figure><ul><li><code>foo.js</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">"foo"</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">//commonjs 导出</span></pre></td></tr><tr><td data-num="4"></td><td><pre>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span> name <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li><code>bar.js</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">"bar"</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">100</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">//es module 导出</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">export</span> <span class="token punctuation">&#123;</span> name <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li><code>index.js</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//es module 导入</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> name <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./foo'</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token comment">// foo</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">//commonjs 导入</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./bar"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// bar</span></pre></td></tr></table></figure><ul><li><code>npx webpack打包 -&gt; dist文件</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//main.js  npx webpack 打包后的文件</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> e<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">825</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>o<span class="token punctuation">,</span>r</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token string">"use strict"</span><span class="token punctuation">;</span>r<span class="token punctuation">.</span><span class="token function">r</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token function-variable function">name</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span>t<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> t<span class="token operator">=</span><span class="token string">"bar"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">717</span><span class="token operator">:</span><span class="token parameter">e</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>e<span class="token punctuation">.</span>exports<span class="token operator">=</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"foo"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>o<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">r</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> n<span class="token operator">=</span>o<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token number">0</span><span class="token operator">!==</span>n<span class="token punctuation">)</span><span class="token keyword">return</span> n<span class="token punctuation">.</span>exports<span class="token punctuation">;</span><span class="token keyword">var</span> a<span class="token operator">=</span>o<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token literal-property property">exports</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">return</span> e<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token punctuation">.</span>exports<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>exports<span class="token punctuation">&#125;</span>r<span class="token punctuation">.</span><span class="token function-variable function">n</span><span class="token operator">=</span><span class="token parameter">e</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> o<span class="token operator">=</span>e<span class="token operator">&amp;&amp;</span>e<span class="token punctuation">.</span>__esModule<span class="token operator">?</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span>e<span class="token punctuation">.</span><span class="token function-variable function">default</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span>e<span class="token punctuation">;</span><span class="token keyword">return</span> r<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">a</span><span class="token operator">:</span>o<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">)</span><span class="token punctuation">,</span>o<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token function-variable function">d</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>o</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> t <span class="token keyword">in</span> o<span class="token punctuation">)</span>r<span class="token punctuation">.</span><span class="token function">o</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span>r<span class="token punctuation">.</span><span class="token function">o</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>t<span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">enumerable</span><span class="token operator">:</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token literal-property property">get</span><span class="token operator">:</span>o<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token function-variable function">o</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>o</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>o<span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token function-variable function">r</span><span class="token operator">=</span><span class="token parameter">e</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token string">"undefined"</span><span class="token operator">!=</span><span class="token keyword">typeof</span> Symbol<span class="token operator">&amp;&amp;</span>Symbol<span class="token punctuation">.</span>toStringTag<span class="token operator">&amp;&amp;</span>Object<span class="token punctuation">.</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token function">defineProperty</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>Symbol<span class="token punctuation">.</span>toStringTag<span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">value</span><span class="token operator">:</span><span class="token string">"Module"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token string">"__esModule"</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">value</span><span class="token operator">:</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token keyword">var</span> e<span class="token operator">=</span><span class="token function">r</span><span class="token punctuation">(</span><span class="token number">717</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> o<span class="token operator">=</span><span class="token function">r</span><span class="token punctuation">(</span><span class="token number">825</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;认识-es-module&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#认识-es-module&quot;&gt;#&lt;/a&gt; 认识 ES Module&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;JavaScript 没有模块化一直是它的痛点，所以才会产生我们前面学习的社区规范：Comm</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 模块化</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2021/11/23/JavaScript/Advanced/modularization%E3%81%84%E3%81%A1/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2021/11/23/JavaScript/Advanced/modularization%E3%81%84%E3%81%A1/</id>
    <published>2021-11-23T11:42:07.000Z</published>
    <updated>2022-02-03T11:30:11.061Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是模块化"><a class="anchor" href="#什么是模块化">#</a> 什么是模块化？</h2><ul><li><p>到底什么是模块化、模块化开发呢？</p><ul><li>事实上模块化开发最终的目的是将程序划分成一个个小的结构；</li><li>这个结构中编写属于自己的逻辑代码，有自己的作用域，不会影响到其他的结构；</li><li>这个结构可以将自己希望暴露的变量、函数、对象等导出给其结构使用；</li><li>也可以通过某种方式，导入另外结构中的变量、函数、对象等；</li></ul></li><li><p>上面说提到的结构，就是模块；按照这种结构划分开发程序的过程，就是模块化开发的过程；</p></li><li><p>无论你多么喜欢 JavaScript，以及它现在发展的有多好，它都有很多的缺陷：</p><ul><li>比如 var 定义的变量作用域问题；</li><li>比如 JavaScript 的面向对象并不能像常规面向对象语言一样使用 class；</li><li>比如 JavaScript 没有模块化的问题；</li></ul></li><li><p>Brendan Eich 本人也多次承认过 JavaScript 设计之初的缺陷，但是随着 JavaScript 的发展以及标准化，存在的缺陷问题基本都得到了完善。</p></li><li><p>无论是 web、移动端、小程序端、服务器端、桌面应用都被广泛的使用；</p></li></ul><h2 id="模块化的历史"><a class="anchor" href="#模块化的历史">#</a> 模块化的历史</h2><ul><li>在网页开发的早期，Brendan Eich 开发 JavaScript 仅仅作为一种脚本语言，做一些简单的表单验证或动画实现等，那个时候代码还是很少的：<ul><li>这个时候我们只需要讲 JavaScript 代码写到 &lt;script&gt; 标签中即可；</li><li>并没有必要放到多个文件中来编写；甚至流行：通常来说 JavaScript 程序的长度只有一行。</li></ul></li><li>但是随着前端和 JavaScript 的快速发展，JavaScript 代码变得越来越复杂了：<ul><li>ajax 的出现，前后端开发分离，意味着后端返回数据后，我们需要通过 JavaScript 进行前端页面的渲染；</li><li>SPA 的出现，前端页面变得更加复杂：包括前端路由、状态管理等等一系列复杂的需求需要通过 JavaScript 来实现；</li><li>包括 Node 的实现，JavaScript 编写复杂的后端程序，没有模块化是致命的硬伤；</li></ul></li><li>所以，模块化已经是 JavaScript 一个非常迫切的需求：<ul><li>但是 JavaScript 本身，直到 ES6（2015）才推出了自己的模块化方案；</li><li>在此之前，为了让 JavaScript 支持模块化，涌现出了很多不同的模块化规范：AMD、CMD、CommonJS 等；</li></ul></li></ul><h2 id="没有模块化带来的问题"><a class="anchor" href="#没有模块化带来的问题">#</a> 没有模块化带来的问题</h2><ul><li><p>早期没有模块化带来了很多的问题：比如命名冲突的问题</p></li><li><p>当然，我们有办法可以解决上面的问题：立即函数调用表达式（IIFE）</p><ul><li>IFE (Immediately Invoked Function Expression)</li></ul></li><li><p>但是，我们其实带来了新的问题：</p><ul><li>第一，我必须记得每一个模块中返回对象的命名，才能在其他模块使用过程中正确的使用；</li><li>第二，代码写起来混乱不堪，每个文件中的代码都需要包裹在一个匿名函数中来编写；</li><li>第三，在没有合适的规范情况下，每个人、每个公司都可能会任意命名、甚至出现模块名称相同的情况；</li></ul></li><li><p>举个栗子</p></li></ul><p>这是 Saber 的 js 文件</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">var</span> moduleSaber <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"saber"</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">var</span> isFlag <span class="token operator">=</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    name<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    isFlag</pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>这是 Lain 的 js 文件</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">var</span> moduleLain <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"lain"</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">var</span> isFlag <span class="token operator">=</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    name<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    isFlag</pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><ul><li>这是执行的文件，执行代码引用自己对应的模块名，虽然可以做到模块化，但依旧不方便管理以及会引出其他的问题！</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>moduleSaber<span class="token punctuation">.</span>isFlag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我的名字是"</span> <span class="token operator">+</span> moduleSaber<span class="token punctuation">.</span>name<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><ul><li>所以，我们会发现，虽然实现了模块化，但是我们的实现过于简单，并且是没有规范的。<ul><li>我们需要制定一定的规范来约束每个人都按照这个规范去编写模块化的代码；</li><li>这个规范中应该包括核心功能：模块本身可以导出暴露的属性，模块又可以导入自己需要的属性；</li><li>JavaScript 社区为了解决上面的问题，涌现出一系列好用的规范，接下来我们就学习具有代表性的一些规范。</li></ul></li></ul><h2 id="commonjs规范和node关系"><a class="anchor" href="#commonjs规范和node关系">#</a> CommonJS 规范和 Node 关系</h2><ul><li>到底什么是模块化、模块化开发呢？<ul><li>事实上模块化开发最终的目的是将程序划分成一个个小的结构；</li><li>这个结构中编写属于自己的逻辑代码，有自己的作用域，不会影响到其他的结构；</li><li>这个结构可以将自己希望暴露的变量、函数、对象等导出给其结构使用；</li><li>也可以通过某种方式，导入另外结构中的变量、函数、对象等；</li></ul></li><li>上面说提到的结构，就是模块；按照这种结构划分开发程序的过程，就是模块化开发的过程；</li><li>无论你多么喜欢 JavaScript，以及它现在发展的有多好，它都有很多的缺陷：<ul><li>比如 var 定义的变量作用域问题；</li><li>比如 JavaScript 的面向对象并不能像常规面向对象语言一样使用 class；</li><li>比如 JavaScript 没有模块化的问题；</li></ul></li><li>Brendan Eich 本人也多次承认过 JavaScript 设计之初的缺陷，但是随着 JavaScript 的发展以及标准化，存在的缺陷问题基本都得到了完善。</li><li>无论是 web、移动端、小程序端、服务器端、桌面应用都被广泛的使用</li></ul><h2 id="commonjs-基本使用"><a class="anchor" href="#commonjs-基本使用">#</a> CommonJS 基本使用</h2><ul><li>这是 lain 的 js 文件</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">"lain"</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">16</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// 1. 导出方案 module.exports</span></pre></td></tr><tr><td data-num="9"></td><td><pre>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  name<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  age<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  sum</pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul><li>这是 main js 文件，module.exports 导出的是一个对象 所以可以解构赋值</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 使用另外一个模块导出的对象，那么就要进行导入 require</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sum <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./lain.js"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token comment">// lain</span></pre></td></tr><tr><td data-num="5"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token comment">// 16</span></pre></td></tr><tr><td data-num="6"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 50</span></pre></td></tr></table></figure><h2 id="commonjs-原理"><a class="anchor" href="#commonjs-原理">#</a> CommonJS 原理</h2><ul><li>这是 lain 的 js 文件</li><li>通过 module.exports 向外暴露</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> lain <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"lain"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// 下面的 main 将 lain.name 改变为 saber，这里也会被改变！</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lain<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// saber</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> lain</pre></td></tr></table></figure><ul><li>这是 main js 文件</li><li>require 相等于  <code>function require(id)&#123; return module.exports &#125;</code></li><li><code>module.exports = lain</code>  、  <code>require(&quot;./lain.js&quot;)</code>  与  <code>lain</code>  指向的都是同一个地址，它们是 <code>相等的关系</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> lain <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./lain.js"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  </pre></td></tr><tr><td data-num="3"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lain<span class="token punctuation">)</span> <span class="token comment">// &#123; name: 'lain', age: 16 &#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  </pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    lain<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"saber"</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lain<span class="token punctuation">)</span> <span class="token comment">// &#123; name: 'saber', age: 16 &#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span></pre></td></tr></table></figure><ul><li>所以通过上面代码验证是能够看出来的，它们都是引用赋值，因此它们都是同一个对象。</li></ul><h2 id="exports-导出"><a class="anchor" href="#exports-导出">#</a> exports 导出</h2><ul><li>注意：exports 是一个对象，我们可以在这个对象中添加很多个属性，添加的属性会导出；</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//lain.js 文件</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">"lain"</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">16</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">//exports 导出</span></pre></td></tr><tr><td data-num="5"></td><td><pre>exports<span class="token punctuation">.</span>name <span class="token operator">=</span> name</pre></td></tr><tr><td data-num="6"></td><td><pre>exports<span class="token punctuation">.</span>age <span class="token operator">=</span> age</pre></td></tr></table></figure><ul><li>另外一个文件中可以导入：</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//main.js 文件</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> lain <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./lain.js"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lain<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// lain</span></pre></td></tr><tr><td data-num="5"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lain<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment">// 16</span></pre></td></tr></table></figure><ul><li>上面这行完成了什么操作呢？理解下面这句话，Node 中的模块化一目了然<ul><li>意味着 main 中的 lain 变量等于 exports 对象；</li><li>也就是 require 通过各种查找方式，最终找到了 exports 这个对象；</li><li>并且将这个 exports 对象赋值给了 lain 变量；</li><li>lain 变量就是 exports 对象了；</li></ul></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 源码逻辑</span></pre></td></tr><tr><td data-num="2"></td><td><pre>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>exports <span class="token operator">=</span> module<span class="token punctuation">.</span>exports</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 这样的操作相当于就是往 module.exports 里面添加</span></pre></td></tr><tr><td data-num="6"></td><td><pre>exports<span class="token punctuation">.</span>name <span class="token operator">=</span> name</pre></td></tr><tr><td data-num="7"></td><td><pre>exports<span class="token punctuation">.</span>age <span class="token operator">=</span> age</pre></td></tr></table></figure><h2 id="moduleexports"><a class="anchor" href="#moduleexports">#</a> module.exports</h2><ul><li><p>但是 Node 中我们经常导出东西的时候，又是通过 module.exports 导出的：</p><ul><li>module.exports 和 exports 有什么关系或者区别呢？</li></ul></li><li><p>我们追根溯源，通过维基百科中对 CommonJS 规范的解析：</p><ul><li>CommonJS 中是没有 module.exports 的概念的；</li><li>但是为了实现模块的导出，Node 中使用的是 Module 的类，每一个模块都是 Module 的一个实例，也就是 module；</li><li>所以在 Node 中真正用于导出的其实根本不是 exports，而是 module.exports；</li><li>因为 module 才是导出的真正实现者；</li></ul></li><li><p>但是，为什么 exports 也可以导出呢？</p><ul><li>这是因为 module 对象的 exports 属性是 exports 对象的一个引用；</li><li>也就是说 module.exports = exports = main 中的 lain；</li></ul></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>exports<span class="token punctuation">.</span>name <span class="token operator">=</span> name</pre></td></tr><tr><td data-num="2"></td><td><pre>exports<span class="token punctuation">.</span>age <span class="token operator">=</span> age</pre></td></tr><tr><td data-num="3"></td><td><pre>exports<span class="token punctuation">.</span>sum <span class="token operator">=</span> sum</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 这样导出的它们的引用地址明显不一样，所以它导出的是一个空对象</span></pre></td></tr><tr><td data-num="6"></td><td><pre>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="require-细节"><a class="anchor" href="#require-细节">#</a> require 细节</h2><ul><li><p>我们现在已经知道，require 是一个函数，可以帮助我们引入一个文件（模块）中导出的对象。</p></li><li><p>那么，require 的查找规则是怎么样的呢？</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL2Rpc3QvbGF0ZXN0LXYxNC54L2RvY3MvYXBpL21vZHVsZXMuaHRtbCNtb2R1bGVzX2FsbF90b2dldGhlcg==">https://nodejs.org/dist/latest-v14.x/docs/api/modules.html#modules_all_together</span></p></li><li><p>这里我总结比较常见的查找规则：导入格式如下：require (X)</p></li></ul><h3 id="情况一"><a class="anchor" href="#情况一">#</a> 情况一</h3><ul><li>X 是一个 Node 核心模块，比如 path、http...</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><ul><li>直接返回核心模块，并且停止查找</li></ul><h3 id="情况二"><a class="anchor" href="#情况二">#</a> 情况二</h3><ul><li>X 是以 ./ 或 ../ 或 /（根目录）开头的</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 路径</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> lain <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./lain"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 根路径</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">const</span> lain <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"/lain"</span><span class="token punctuation">)</span></pre></td></tr></table></figure><ul><li><p>第一步：将 X 当做一个文件在对应的目录下查找；</p><ul><li>如果有后缀名，按照后缀名的格式查找对应的文件</li><li>如果没有后缀名，会按照如下顺序：<ol><li>直接查找文件 X</li><li>查找 X.js 文件</li><li>查找 X.json 文件</li><li>查找 X.node 文件</li></ol></li></ul></li><li><p>第二步：没有找到对应的文件，将 X 作为一个目录</p><ul><li>查找目录下面的 index 文件<ol><li>查找 X/index.js 文件</li><li>查找 X/index.json 文件</li><li>查找 X/index.node 文件</li></ol></li></ul></li><li><p>如果没有找到，那么报错：not found</p></li></ul><h3 id="情况三"><a class="anchor" href="#情况三">#</a> 情况三</h3><ul><li><p>情况三：直接是一个 X（没有路径），并且 X 不是一个核心模块</p></li><li><p>/Users/coderwhy/Desktop/Node/TestCode/04_learn_node/05_javascript-module/02_commonjs/main.js 中编写 require ('why’)</p></li><li><p>如果上面的路径中都没有找到，那么报错：not found</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 不是路径也不是核心模块</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> axios <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"axios"</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 会打印出许多路径，上面的代码会向当前文件夹 node_modules 查找</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 如果没有找到，则会取上上次，依次类推最终路径到当前根文件夹所在盘的 node_modules 最终都没找到就会报错 not found</span></pre></td></tr><tr><td data-num="6"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>paths<span class="token punctuation">)</span></pre></td></tr></table></figure></li></ul><h2 id="模块的加载过程"><a class="anchor" href="#模块的加载过程">#</a> 模块的加载过程</h2><h3 id="结论一模块在被第一次引入时模块中的js代码会被运行一次"><a class="anchor" href="#结论一模块在被第一次引入时模块中的js代码会被运行一次">#</a>  <code>结论一：模块在被第一次引入时，模块中的js代码会被运行一次</code></h3><ul><li>foo 文件</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"foo中的代码被运行"</span><span class="token punctuation">)</span></pre></td></tr></table></figure><ul><li>main 文件</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"main.js代码开始运行"</span><span class="token punctuation">)</span> <span class="token comment">// 1.main.js 代码开始运行</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./foo"</span><span class="token punctuation">)</span> <span class="token comment">// 2.foo 中的代码被运行</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"main.js代码后续运行"</span><span class="token punctuation">)</span> <span class="token comment">// 3.main.js 代码后续运行</span></pre></td></tr></table></figure><h3 id="结论二模块被多次引入时会缓存最终只加载运行一次"><a class="anchor" href="#结论二模块被多次引入时会缓存最终只加载运行一次">#</a>  <code>结论二：模块被多次引入时，会缓存，最终只加载（运行）一次</code></h3><ul><li><p>为什么只会加载运行一次呢？</p></li><li><p>这是因为每个模块对象 module 都有一个属性：loaded。</p></li><li><p>为 false 表示还没有加载，为 true 表示已经加载；</p></li><li><p>foo 文件</p></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"foo中的代码被运行"</span><span class="token punctuation">)</span></pre></td></tr></table></figure><ul><li>main 文件</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"main.js代码开始运行"</span><span class="token punctuation">)</span> <span class="token comment">// 1.main.js 代码开始运行</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 2.foo 中的代码被运行 且只会被运行一次</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./foo"</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./foo"</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"main.js代码后续运行"</span><span class="token punctuation">)</span> <span class="token comment">// 4.main.js 代码后续运行</span></pre></td></tr></table></figure><h3 id="结论三如果有循环引入那么加载顺序是什么"><a class="anchor" href="#结论三如果有循环引入那么加载顺序是什么">#</a>  <code>结论三：如果有循环引入，那么加载顺序是什么？</code></h3><ul><li>如果出现右图模块的引用关系，那么加载顺序是什么呢？<ul><li>这个其实是一种数据结构：图结构；</li><li>图结构在遍历的过程中，有深度优先搜索（DFS, depth first search）和广度优先搜索（BFS, breadth first search）</li></ul></li></ul><h2 id="commonjs规范缺点"><a class="anchor" href="#commonjs规范缺点">#</a> CommonJS 规范缺点</h2><ul><li>CommonJS 加载模块是同步的：<ul><li>同步的意味着只有等到对应的模块加载完毕，当前模块中的内容才能被运行；</li><li>这个在服务器不会有什么问题，因为服务器加载的 js 文件都是本地文件，加载速度非常快；</li></ul></li><li>如果将它应用于浏览器呢？<ul><li>浏览器加载 js 文件需要先从服务器将文件下载下来，之后再加载运行；</li><li>那么采用同步的就意味着后续的 js 代码都无法正常运行，即使是一些简单的 DOM 操作；</li></ul></li><li>所以在浏览器中，我们通常不使用 CommonJS 规范：<ul><li>当然在 webpack 中使用 CommonJS 是另外一回事；</li><li>因为它会将我们的代码转成浏览器可以直接执行的代码；</li></ul></li><li>在早期为了可以在浏览器中使用模块化，通常会采用 AMD 或 CMD：<ul><li>但是目前一方面现代的浏览器已经支持 ES Modules，另一方面借助于 webpack 等工具可以实现对 CommonJS 或者 ESModule 代码的转换；</li><li>而且 AMD 和 CMD 已经使用非常少了</li></ul></li></ul><h2 id="amd规范"><a class="anchor" href="#amd规范">#</a> AMD 规范</h2><ul><li><p>AMD 主要是应用于浏览器的一种模块化规范：</p><ul><li><p>AMD 是 Asynchronous Module Definition（异步模块定义）的缩写；</p></li><li><p>它采用的是异步加载模块；</p></li><li><p>事实上 AMD 的规范还要早于 CommonJS，但是 CommonJS 目前依然在被使用，而 AMD 使用的较少了；</p></li></ul></li><li><p>我们提到过，规范只是定义代码的应该如何去编写，只有有了具体的实现才能被应用：</p><ul><li>AMD 实现的比较常用的库是 require.js 和 curl.js</li></ul></li></ul><h3 id="requirejs的使用"><a class="anchor" href="#requirejs的使用">#</a> require.js 的使用</h3><ul><li><p>第一步：下载 require.js</p><ul><li>下载地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JlcXVpcmVqcy9yZXF1aXJlanM=">https://github.com/requirejs/requirejs</span></li><li>找到其中的 require.js 文件；</li></ul></li><li><p>第二步：定义 HTML 的 script 标签引入 require.js 和定义入口文件：</p><ul><li>data-main 属性的作用是在加载完 src 的文件后会加载执行该文件</li></ul></li></ul><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./lib/require.js<span class="token punctuation">"</span></span> <span class="token attr-name">data-main</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./index.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><ul><li><code>foo.js 文件</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">"lain"</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">16</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    name<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    age</pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><ul><li><code>bar.js 文件</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// ["foo"] 依赖 foo 模块 先加载 foo 模块</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"foo"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">foo</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"--------"</span><span class="token punctuation">)</span> <span class="token comment">// 1.--------</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"foo"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">foo</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"bar:"</span><span class="token punctuation">,</span> foo<span class="token punctuation">)</span> <span class="token comment">// 4.bar: &#123;name: 'lain', age: 16&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"bar:"</span><span class="token punctuation">,</span> foo<span class="token punctuation">)</span> <span class="token comment">// 2.bar: &#123;name: 'lain', age: 16&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><ul><li><code>main.js 文件</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>require<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token literal-property property">baseUrl</span><span class="token operator">:</span> <span class="token string">'./src'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token literal-property property">paths</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">"./foo"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token string">"./bar"</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token string">"bar"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">foo</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"main:"</span><span class="token punctuation">,</span> foo<span class="token punctuation">)</span> <span class="token comment">// 3.console.log("main:", foo)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="cmd规范"><a class="anchor" href="#cmd规范">#</a> CMD 规范</h2><ul><li>CMD 规范也是应用于浏览器的一种模块化规范：<ul><li>CMD 是 Common Module Definition（通用模块定义）的缩写；</li><li>它也采用了异步加载模块，但是它将 CommonJS 的优点吸收了过来；</li><li>但是目前 CMD 使用也非常少了；</li></ul></li><li>CMD 也有自己比较优秀的实现方案：<ul><li>SeaJS</li></ul></li></ul><h3 id="seajs的使用"><a class="anchor" href="#seajs的使用">#</a> SeaJS 的使用</h3><ul><li>第一步：下载 SeaJS<ul><li>下载地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NlYWpzL3NlYWpz">https://github.com/seajs/seajs</span></li><li>找到 dist 文件夹下的 sea.js</li></ul></li><li>第二步：引入 sea.js 和使用主入口文件<ul><li>seajs 是指定主入口文件的</li></ul></li></ul><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./lib/sea.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">seajs<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">"./src/main.js"</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><ul><li><code>foo.js 文件</code></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> module</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">"why"</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">18</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>  module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    name<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    age</pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p><code>main.js 文件</code></p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> module</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./foo"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"main:"</span><span class="token punctuation">,</span> foo<span class="token punctuation">)</span> <span class="token comment">// main: &#123;name: 'why', age: 18&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是模块化&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#什么是模块化&quot;&gt;#&lt;/a&gt; 什么是模块化？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;到底什么是模块化、模块化开发呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事实上模块化开发最终的目的是将程序划分成一个个小的结构；&lt;</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>error-handling</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2021/11/20/JavaScript/Advanced/error-handling/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2021/11/20/JavaScript/Advanced/error-handling/</id>
    <published>2021-11-20T04:28:23.000Z</published>
    <updated>2022-02-01T11:39:40.162Z</updated>
    
    <content type="html"><![CDATA[<h2 id="错误处理方案"><a class="anchor" href="#错误处理方案">#</a> 错误处理方案</h2><ul><li>很多时候我们可能验证到不是希望得到的参数时，就会直接 return：<ul><li>但是 return 存在很大的弊端：调用者不知道是因为函数内部没有正常执行，还是执行结果就是一个 undefined；</li><li>事实上，正确的做法应该是如果没有通过某些验证，那么应该让外界知道函数内部报错了；</li></ul></li><li>如何可以让一个函数告知外界自己内部出现了错误呢？<ul><li>通过 throw 关键字，抛出一个异常；</li></ul></li><li>throw 语句：<ul><li>throw 语句用于抛出一个用户自定义的异常；</li><li>当遇到 throw 语句时，当前的函数执行会被停止（throw 后面的语句不会执行）；</li><li>如果我们执行代码，就会报错，拿到错误信息的时候我们可以及时的去修正代码。</li></ul></li><li>当我们有一个函数，在调用这个函数时，如果出现了错误，那么我们应该去修复这个错误</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">m<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment">// 当传入的参数的类型不正确时，应该告知调用者一个错误</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> m <span class="token operator">!==</span> <span class="token string">"number"</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> n <span class="token operator">!==</span> <span class="token string">"number"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">throw</span> <span class="token string">"parameters is error type~"</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token keyword">return</span> m <span class="token operator">+</span> n</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">// 调用者 (如果没有对错误进行处理，那么程序会直接终止)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"why"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// parameters is error type~</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment">// console.log(sum(20, 30))</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"后续的代码会继续运行~"</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="throw关键字"><a class="anchor" href="#throw关键字">#</a> throw 关键字</h2><ul><li>throw 表达式就是在 throw 后面可以跟上一个表达式来表示具体的异常信息：</li><li>throw 关键字可以跟上哪些类型呢？<ul><li>基本数据类型：比如 number、string、Boolean</li><li>对象类型：对象类型可以包含更多的信息</li></ul></li></ul><h3 id="抛出一个字符串类型基本的数据类型"><a class="anchor" href="#抛出一个字符串类型基本的数据类型">#</a> 抛出一个字符串类型 (基本的数据类型)</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"foo函数开始执行"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">!==</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">throw</span> <span class="token string">"error"</span>  <span class="token comment">// Uncaught error</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"foo函数结束执行"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token function">foo</span><span class="token punctuation">(</span><span class="token string">'saber'</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="抛出一个对象类型"><a class="anchor" href="#抛出一个对象类型">#</a> 抛出一个对象类型</h3><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"foo函数开始执行"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token comment">// Uncaught &#123;errorCode: 404, errorMessage: ' 所请求的页面不存在或已被删除 '&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">throw</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">errorCode</span><span class="token operator">:</span> <span class="token number">404</span><span class="token punctuation">,</span> <span class="token literal-property property">errorMessage</span><span class="token operator">:</span> <span class="token string">"所请求的页面不存在或已被删除"</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"foo函数结束执行"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="创建类-并且创建这个类对应的对象"><a class="anchor" href="#创建类-并且创建这个类对应的对象">#</a> 创建类，并且创建这个类对应的对象</h3><ul><li>如上面每次写这么长的对象又有点麻烦，所以我们可以创建一个类</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">_Error</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">errorCode<span class="token punctuation">,</span> errorMessage</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>errorCode <span class="token operator">=</span> errorCode</pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>errorMessage <span class="token operator">=</span> errorMessage</pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"foo函数开始执行"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">_Error</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">errorCode</span><span class="token operator">:</span> <span class="token number">404</span><span class="token punctuation">,</span> <span class="token literal-property property">errorMessage</span><span class="token operator">:</span> <span class="token string">"所请求的页面不存在或已被删除"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"foo函数结束执行"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="error类型"><a class="anchor" href="#error类型">#</a> Error 类型</h2><ul><li>事实上，JavaScript 已经给我们提供了一个 Error 类，我们可以直接创建这个类的对象：</li><li>Error 包含三个属性：<ul><li>messsage：创建 Error 对象时传入的 message；</li><li>name：Error 的名称，通常和类的名称一致；</li><li>stack：整个 Error 的错误信息，包括函数的调用栈，当我们直接打印 Error 对象时，打印的就是 stack；</li></ul></li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">const</span> err <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"error~"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  err<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"ErrorMessage"</span> <span class="token comment">// ErrorMessage: error~</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token comment">// err.stack = "stack" // [stack] &#123; name: 'ErrorMessage' &#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">throw</span> err </pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><ul><li>Error 的子类</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">const</span> err <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">"TypeError~"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  err<span class="token punctuation">.</span>stack <span class="token operator">=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">throw</span> err <span class="token comment">// TypeError: TypeError~</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"foo函数后续的代码不会执行！"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><ul><li><p>Error 有一些自己的子类：</p></li><li><p>RangeError：下标值越界时使用的错误类型；</p></li><li><p>SyntaxError：解析语法错误时使用的错误类型；</p></li><li><p>TypeError：出现类型错误时，使用的错误类型；</p></li></ul><h2 id="异常的处理"><a class="anchor" href="#异常的处理">#</a> 异常的处理</h2><ul><li>我们会发现在之前的代码中，一个函数抛出了异常，调用它的时候程序会被强制终止：</li><li>这是因为如果我们在调用一个函数时，这个函数抛出了异常，但是我们并没有对这个异常进行处理，那么这个异常会继续传递到上一个函数调用中；</li><li>而如果到了最顶层（全局）的代码中依然没有对这个异常的处理代码，这个时候就会报错并且终止程序的运行；</li><li>我们先来看一下这段代码的异常传递过程：</li></ul><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'foo err message~'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">function</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'demo~'</span><span class="token punctuation">)</span> <span class="token comment">// 不会执行啦</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><ul><li>foo 函数在被执行时会抛出异常，也就是我们的 bar 函数会拿到这个异常；</li><li>但是 bar 函数并没有对这个异常进行处理，那么这个异常就会被继续传递到调用 bar 函数的函数，也就是 test 函数；</li><li>但是 test 函数依然没有处理，就会继续传递到我们的全局代码逻辑中；</li><li>依然没有被处理，这个时候程序会终止执行，后续代码都不会再执行了；</li></ul><h2 id="使用try-catch来捕获异常"><a class="anchor" href="#使用try-catch来捕获异常">#</a> 使用 try catch 来捕获异常</h2><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"foo error message~"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"bar函数后续的继续运行"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// ES10 开始 err 可以省掉 直接 catch，但拿不到 err 了</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span> <span class="token comment">// err: foo error message~</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token function">alert</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span> <span class="token comment">// foo error message~</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"finally代码执行~"</span><span class="token punctuation">)</span> <span class="token comment">//finally 代码执行～</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"error:"</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">function</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>  <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>  <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;错误处理方案&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#错误处理方案&quot;&gt;#&lt;/a&gt; 错误处理方案&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;很多时候我们可能验证到不是希望得到的参数时，就会直接 return：
&lt;ul&gt;
&lt;li&gt;但是 return 存在很大的弊端：调用</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>事件循环面试题</title>
    <link href="https://nekoaimer.github.io/nekoaimer.github.io/2021/11/17/JavaScript/Advanced/event-loop-interview-question/"/>
    <id>https://nekoaimer.github.io/nekoaimer.github.io/2021/11/17/JavaScript/Advanced/event-loop-interview-question/</id>
    <published>2021-11-17T12:06:01.000Z</published>
    <updated>2022-01-27T04:25:35.463Z</updated>
    
    <content type="html"><![CDATA[<h2 id="浏览器中的javascript线程"><a class="anchor" href="#浏览器中的javascript线程">#</a> 浏览器中的 JavaScript 线程</h2><ul><li>我们经常会说 JavaScript 是单线程的，但是 JavaScript 的线程应该有自己的容器进程：浏览器或者 Node。</li><li>浏览器是一个进程吗，它里面只有一个线程吗？<ul><li>目前多数的浏览器其实都是多进程的，当我们打开一个 tab 页面时就会开启一个新的进程，这是为了防止一个页面卡死而造成所有页面无法响应，整个浏览器需要强制退出；</li><li>每个进程中又有很多的线程，其中包括执行 JavaScript 代码的线程；</li></ul></li><li>JavaScript 的代码执行是在一个单独的线程中执行的：<ul><li>这就意味着 JavaScript 的代码，在同一个时刻只能做一件事；</li><li>如果这件事是非常耗时的，就意味着当前的线程就会被阻塞；</li></ul></li><li>所以真正耗时的操作，实际上并不是由 JavaScript 线程在执行的：<ul><li>浏览器的每个进程是多线程的，那么其他线程可以来完成这个耗时的操作；</li><li>比如网络请求、定时器，我们只需要在特性的时候执行应该有的回调即可；</li></ul></li></ul><h2 id="宏任务和微任务"><a class="anchor" href="#宏任务和微任务">#</a> 宏任务和微任务</h2><ul><li>但是事件循环中并非只维护着一个队列，事实上是有两个队列：<ul><li>宏任务队列（macrotask queue）：ajax、setTimeout、setInterval、DOM 监听、UI Rendering 等</li><li>微任务队列（microtask queue）：Promise 的 then 回调、 Mutation Observer API、queueMicrotask () 等</li></ul></li><li>那么事件循环对于两个队列的优先级是怎么样的呢？<ul><li>1.main script 中的代码优先执行（编写的顶层 script 代码）；</li><li>2. 在执行任何一个宏任务之前（不是队列，是一个宏任务），都会先查看微任务队列中是否有任务需要执行<ul><li>也就是宏任务执行之前，必须保证微任务队列是空的；</li><li>如果不为空，那么就优先执行微任务队列中的任务（回调）；</li></ul></li></ul></li></ul><h2 id="事件循环面试题一"><a class="anchor" href="#事件循环面试题一">#</a> 事件循环面试题一</h2><ol class="mistake"><li class="quiz fill multi"><p>事件循环面试题</p><figure class="highlight js"><figcaption data-lang="JavaScript"><span>面试题</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"setTimeout1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"then4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"then2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"promise1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"then1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"setTimeout2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token function">queueMicrotask</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"queueMicrotask1"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"then3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>下面正确的的输出结果是：<span class="gap">A</span></p><ul class="options"><li class="correct"><code>promise1 2 then1 queueMicrotask1 then3 setTimeout1 then2 then4 setTimtout2</code> </li><li><code>2 queueMicrotask1 setTimeout1 then2 then4 promise1 then1 setTimeout2 then3</code></li><li><code>2 queueMicrotask1 promise1 then1 then3 setTimeout1 then2 then4 setTimeout2</code></li></ul><blockquote><p>初始任务队列：<br />main script：promise1 回调函数 2<br />microtask： Promise1 queueMicrotask Promise2<br />macrotask：setTimeout1 setTimeout2</p></blockquote></li></ol><h2 id="事件循环面试题二"><a class="anchor" href="#事件循环面试题二">#</a> 事件循环面试题二</h2><ol start="2"><li class="quiz fill multi"><p>事件循环面试题</p><figure class="highlight js"><figcaption data-lang="JavaScript"><span>面试题</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"樱岛麻衣"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"入间同学"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">await</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"稚名真白"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"萌王"</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>下面正确的的输出结果是：<span class="gap">C</span></p><ul class="options"><li><code>萌王 入间同学 稚名真白 樱岛麻衣</code></li><li><code>萌王 入间同学 樱岛麻衣 稚名真白</code></li><li class="correct"><code>入间同学 樱岛麻衣 萌王 稚名真白</code> </li></ul></li></ol><h2 id="事件循环面试题三"><a class="anchor" href="#事件循环面试题三">#</a> 事件循环面试题三</h2><ol start="3"><li class="quiz fill multi"><p>事件循环面试题</p><figure class="highlight js"><figcaption data-lang="JavaScript"><span>面试题</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async1</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'async1Start'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">await</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'async1End'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async2</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'async2'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'scriptStart'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre> </pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre> </pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">new</span> <span class="token class-name">Promise</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise1'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise2'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'scriptEnd'</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>下面正确的的输出结果是：<span class="gap">B</span></p><ul class="options"><li><code>scriptStart async1Start async2 async1End  promise1 promise2 scriptEnd setTimeout</code></li><li class="correct"><code>scriptStart async1Start async2 promise1 scriptEnd async1End promise2 setTimeout</code> </li><li><code>scriptstart promise1 scriptEnd async1Start async2 async1End setTimeout promise2</code></li></ul></li></ol><h2 id="事件循环面试题四"><a class="anchor" href="#事件循环面试题四">#</a> 事件循环面试题四</h2><ol start="4"><li class="quiz fill multi"><p>事件循环面试题</p><figure class="highlight js"><figcaption data-lang="JavaScript"><span>面试题</span></figcaption><table><tr><td data-num="1"></td><td><pre>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'樱岛麻衣'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">return</span> <span class="token string">'稚名真白'</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'和泉纱雾'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'四系乃'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'鸢一折纸'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'牧濑红莉栖'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'小鸟游六花'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>下面正确的的输出结果是：<span class="gap">A</span></p><ul class="options"><li class="correct"><code>樱岛麻衣 和泉纱雾 稚名真白 四系乃 鸢一折纸 牧濑红莉栖 小鸟游六花</code> </li><li><code>樱岛麻衣 稚名真白 和泉纱雾 四系乃 鸢一折纸 牧濑红莉栖 小鸟游六花</code></li><li><code>樱岛麻衣 和泉纱雾 四系乃 稚名真白 鸢一折纸 牧濑红莉栖 小鸟游六花</code></li></ul></li></ol><h2 id="事件循环面试题五"><a class="anchor" href="#事件循环面试题五">#</a> 事件循环面试题五</h2><ol start="5" class="mistake"><li class="quiz fill multi"><p>事件循环面试题</p><figure class="highlight js"><figcaption data-lang="JavaScript"><span>面试题</span></figcaption><table><tr><td data-num="1"></td><td><pre>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'樱岛麻衣'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token function-variable function">then</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'稚名真白'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'和泉纱雾'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'四系乃'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'鸢一折纸'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'牧濑红莉栖'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'小鸟游六花'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>下面正确的的输出结果是：<span class="gap">C</span></p><ul class="options"><li><code>樱岛麻衣 和泉纱雾 稚名真白 四系乃 鸢一折纸 牧濑红莉栖 小鸟游六花</code></li><li><code>樱岛麻衣 和泉纱雾 稚名真白 四系乃 鸢一折纸 牧濑红莉栖 小鸟游六花 </code></li><li class="correct"><code>樱岛麻衣 和泉纱雾 四系乃 稚名真白 鸢一折纸 牧濑红莉栖 小鸟游六花</code>   </li></ul><blockquote><p>thenable 会推迟一步微任务</p></blockquote></li></ol><h2 id="事件循环面试题六"><a class="anchor" href="#事件循环面试题六">#</a> 事件循环面试题六</h2><ol start="6" class="mistake"><li class="quiz fill multi"><p>事件循环面试题</p><figure class="highlight js"><figcaption data-lang="JavaScript"><span>面试题</span></figcaption><table><tr><td data-num="1"></td><td><pre>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'樱岛麻衣'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'稚名真白'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'和泉纱雾'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'四系乃'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'鸢一折纸'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'牧濑红莉栖'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'小鸟游六花'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>下面正确的的输出结果是：<span class="gap">C</span></p><ul class="options"><li><code>樱岛麻衣 和泉纱雾 稚名真白 四系乃 鸢一折纸 牧濑红莉栖 小鸟游六花</code></li><li><code>樱岛麻衣 和泉纱雾 四系乃 稚名真白 鸢一折纸 牧濑红莉栖 小鸟游六花</code></li><li class="correct"><code>樱岛麻衣 和泉纱雾 四系乃 鸢一折纸 稚名真白 牧濑红莉栖 小鸟游六花</code> </li></ul><blockquote><p>Promise 会推迟两步微任务</p></blockquote></li></ol><h2 id="node事件循环的阶段"><a class="anchor" href="#node事件循环的阶段">#</a> Node 事件循环的阶段</h2><ul><li>我们最前面就强调过，事件循环像是一个桥梁，是连接着应用程序的 JavaScript 和系统调用之间的通道：<ul><li>无论是我们的文件 IO、数据库、网络 IO、定时器、子进程，在完成对应的操作后，都会将对应的结果和回调函数放到事件循环（任务队列）中；</li><li>事件循环会不断的从任务队列中取出对应的事件（回调函数）来执行；</li></ul></li><li>但是一次完整的事件循环 Tick 分成很多个阶段：<ul><li>定时器（Timers）：本阶段执行已经被 setTimeout () 和 setInterval () 的调度回调函数。</li><li>待定回调（Pending Callback）：对某些系统操作（如 TCP 错误类型）执行回调，比如 TCP 连接时接收到 ECONNREFUSED。</li><li>idle, prepare：仅系统内部使用。</li><li>轮询（Poll）：检索新的 I/O 事件；执行与 I/O 相关的回调；</li><li>检测（check）：setImmediate () 回调函数在这里执行。</li><li>关闭的回调函数：一些关闭的回调函数，如：socket.on ('close', ...)</li></ul></li></ul><h2 id="node的宏任务和微任务"><a class="anchor" href="#node的宏任务和微任务">#</a> Node 的宏任务和微任务</h2><ul><li>我们会发现从一次事件循环的 Tick 来说，Node 的事件循环更复杂，它也分为微任务和宏任务：<ul><li>宏任务（macrotask）：setTimeout、setInterval、IO 事件、setImmediate、close 事件；</li><li>微任务（microtask）：Promise 的 then 回调、process.nextTick、queueMicrotask；</li></ul></li><li>但是，Node 中的事件循环不只是 微任务队列和 宏任务队列：<ul><li>微任务队列：<ul><li>next tick queue：process.nextTick；</li><li>other queue：Promise 的 then 回调、queueMicrotask；</li></ul></li><li>宏任务队列：<ul><li>timer queue：setTimeout、setInterval；</li><li>poll queue：IO 事件；</li><li>check queue：setImmediate；</li><li>close queue：close 事件；</li></ul></li></ul></li><li>Node 事件循环的顺序<ul><li>next tick microtask queue</li><li>pother microtask queue</li><li>ptimer queue</li><li>ppoll queue</li><li>pcheck queue</li><li>pclose queue</li></ul></li></ul><h2 id="事件循环面试题七"><a class="anchor" href="#事件循环面试题七">#</a> 事件循环面试题七</h2><ol start="7" class="mistake"><li class="quiz fill multi"><p>Node 事件循环面试题</p><figure class="highlight js"><figcaption data-lang="JavaScript"><span>面试题</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'async1Start'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">await</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'async1End'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">/</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'async2'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'scriptStart'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout1'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout2'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token function">setImmediate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setImmediate'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'nextTick1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre>process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'nextTick2'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise1'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise2'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise3'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'scriptEnd'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout3'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>下面正确的的输出结果是：<span class="gap">C</span></p><ul class="options"><li><code>scriptStart async1Start async2 promise1 promise2 scriptEnd nextTick1 async1End nextTick2 promise3 setImmediate setTimeout1 setTimeout2 setTimeout3</code></li><li><code>scriptStart async1Start async2 promise1 promise2 scriptEnd nextTick1 async1End nextTick2 promise3 setTimeout1 setImmediate setTimeout2 setTimeout3</code></li><li class="correct"><code>scriptStart async1Start async2 promise1 promise2 scriptEnd nextTick1 nextTick2 async1End promise3 setTimeout1 setImmediate setTimeout2 setTimeout3</code> </li></ul><blockquote><p>初始队列</p><p>mainScript：scriptStart async1Start async2 promise1 promise2 scriptEnd</p><p>nextTick：nextTick1 nextTick2</p><p>otherMicro：async1End promise3</p><p>timers：setTimeout1 300ms -&gt; setTimeout2 1000ms -&gt; setTimeout3</p><p>check：setImmediate</p><p></p></blockquote></li></ol><h2 id="事件循环面试题八"><a class="anchor" href="#事件循环面试题八">#</a> 事件循环面试题八</h2><ol start="8"><li class="quiz fill multi">Node 事件循环面试题<figure class="highlight js"><figcaption data-lang="JavaScript"><span>面试题</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout1'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout2'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout3'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout4'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token function">setImmediate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setImmediate'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure>下面正确的的输出结果是：<span class="gap">D</span><ul class="options"><li><code>setImmediate setTimeout1 setTimeout4 setTimeout2 setTimeout3</code></li><li><code> setTimeout1 setImmediate setTimeout4 setTimeout2 setTimeout3</code></li><li><code>setTimeout1 setTimeout4 setImmediate  setTimeout2 setTimeout3</code></li><li class="correct"><code>以上都不对</code> </li></ul></li></ol><blockquote class="mistake"><p>经过多次测试，发现出现了多种答案，这里面涉及的比较复杂，目前无法解答，建议问度娘</p><p></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;浏览器中的javascript线程&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#浏览器中的javascript线程&quot;&gt;#&lt;/a&gt; 浏览器中的 JavaScript 线程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;我们经常会说 JavaScript 是单线程的，但是 Ja</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript/"/>
    
    <category term="JavaScript面试题" scheme="https://nekoaimer.github.io/nekoaimer.github.io/tags/JavaScript%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
</feed>
